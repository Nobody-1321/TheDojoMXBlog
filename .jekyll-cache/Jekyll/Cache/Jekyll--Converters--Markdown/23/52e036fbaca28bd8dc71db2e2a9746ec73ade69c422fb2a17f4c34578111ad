I"·#<p>Parte del conocimiento fundamental de un desarrollador profesional de software son los <em>Patrones de dise√±o</em> (Design Patterns). En este art√≠culo explicamos de manera concisa:</p>

<ol>
  <li>Qu√© son</li>
  <li>De d√≥nde vienen</li>
  <li>Por qu√© deber√≠as aprender algunos cuantos</li>
  <li>Por d√≥nde empezar</li>
</ol>

<h2 id="qu√©-son-los-patrones-de-dise√±o">Qu√© son los patrones de dise√±o</h2>

<p>‚ÄúNo hay nada nuevo bajo el sol‚Äù: es una conocida frase que quiere decir que gran parte de los
problemas que la humanidad se ha enfrentado se siguen repitiendo vez tras vez. Aprovechando este conocimiento, los patrones de dise√±o se pueden definir como:</p>

<blockquote>
  <p>Soluciones est√°ndar a problemas conocidos (que se repiten) en el desarrollo de software</p>
</blockquote>

<p>Es decir, son soluciones que sabemos que funcionan para problemas que sabemos que existen desde antes que nosotros los encontr√°ramos. As√≠ de sencillo.</p>

<h2 id="composici√≥n">Composici√≥n</h2>

<p>Los patrones de dise√±o de software, se componen de cuatro partes:</p>

<ol>
  <li><em>Nombre.</em> Permite referirte al patr√≥n un√≠vocamente y hablar con otras personas sobre esta soluci√≥n espec√≠fica sin tener que explicarla.</li>
  <li><em>Problema.</em> La situaci√≥n que resuelve el patr√≥n espec√≠fico. Incluye el contexto y los <em>s√≠ntomas</em> que se tienen que dar para usar este patr√≥n.</li>
  <li><em>Soluci√≥n.</em> Describe todas las partes necesarias, su estructura y relacions que resuelven el problema <em>sin hablar de una implementaci√≥n espec√≠fica</em>, ya que un patr√≥n se debe poder aplicar y adaptar a muchas situaciones diferentes.</li>
  <li><em>Consecuencias.</em> Los resultados de aplicar este patr√≥n tanto negativos como positivos, con el fin de poder evaluar si es conveniente usarlo.</li>
</ol>

<h2 id="historia">Historia</h2>

<p>Como muchas otras cosas en la joven industria del desarrollo del software, el concepto de patrones de dise√±o
fue adaptado de otro campo: la arquitectura, o el dise√±o de espacios f√≠sicos habitables.</p>

<p>El arquitecto <a href="https://en.wikipedia.org/wiki/Christopher_Alexander">Christopher Alexander</a> se dio cuenta que al dise√±ar edificios y
ciudades era com√∫n encontrarse con situaciones que se repet√≠an una y otra vez. As√≠ que empez√≥ a crear una colecci√≥n de estos problemas
comunes y las soluciones que le hab√≠an funcionado, con lo que empez√≥ a crear un ‚Äúlenguaje de patrones‚Äù. Aquellas personas
con las que compart√≠a el conocimiento del problema y de la soluci√≥n pod√≠an referirse a estos
por los nuevos nombres sin tener que explicarlo todo de nuevo.</p>

<p>En su libro <em>A Pattern Language (1977)</em> puso por escrito una serie de patrones para situaciones
de dise√±o arquitect√≥nico para casas y edificios.</p>

<p>Esto inspir√≥ a <a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a> y otras personas para usar
y hablar de soluciones parecidas para el desarrollo de software, aproximadamente 10 a√±os
despu√©s de la publicaci√≥n del libro.</p>

<p><a href="https://en.wikipedia.org/wiki/Erich_Gamma">Erich Gamma</a> y otros tres autores conocidos como la ‚ÄúBanda de los cuatro‚Äù(Gang of Four o <a href="http://wiki.c2.com/?GangOfFour">GoF</a>) publicaron un libro
llamado <em><a href="http://wiki.c2.com/?DesignPatternsBook">Design Patterns: Elements of reusable Object-Oriented Software</a></em> que populariz√≥ el t√©rmino ‚ÄúPatrones de dise√±o‚Äù y mostr√≥ 23 patrones enfocados en la progrmaci√≥n de sistemas y divididos en 3 categor√≠as:</p>

<ol>
  <li><em>Creacionales</em>: Se enfocan en la forma de crear nuevos objetos</li>
  <li><em>Estructurales</em>: Establecen la manera de relacionar objetos y clases (composici√≥n y herencia)</li>
  <li><em>De comportamiento</em>: Se centran principalmente entre la comunicaci√≥n entre objetos.</li>
</ol>

<p>Este es un libro obligado si quieres mejorar tus habilidades de desarrollo y dise√±o de software.</p>

<h2 id="importancia">Importancia</h2>

<p>Conocer y usar los patrones de dise√±o nos da varias ventajas importantes:</p>

<ol>
  <li>Permite que usemos soluciones probadas por el tiempo, en muchos proyectos y muchas otras personas y evitemos otras que no han funcionado tan bien.</li>
  <li>Nos dan un lenguaje com√∫n que otras personas, que tambi√©n entienden este ‚Äúdiccionario‚Äù, pueden comprender sin la necesidad de una explicaci√≥n detallada. Esto es de gran importancia porque gran parte del proceso de desarrollo es entender el c√≥digo que otros escribieron. Si entiendes los patrones de dise√±o m√°s comunes, ser√° mucho m√°s f√°cil que entiendas el c√≥digo y la arquitectura de otros programas que los usan.</li>
  <li>Nos dan la flexibilidad de construir sobre ellos. El que exista patr√≥n que seguir no significa que siempre se tenga que implementar a la perfecci√≥n, sin cambios. Estos patrones dan la capacidad de aprovechar las caracter√≠sticas que sirven para nuestro problema espec√≠fico y agregar nuevas para adaptarlo completamente a nuestro problema.</li>
  <li>Pueden reducir la complejidad de un proyecto si son bien usados.</li>
</ol>

<h2 id="en-contra-de-los-patrones-de-dise√±o">En contra de los patrones de dise√±o</h2>

<p>Todo en la vida y sobre todo en el desarrollo de software representa un intercambio de valor. Damos algo a cambio de otro bien, y nos corresponde personalmente evaluar si una herramienta en una situaci√≥n determinada es conveniente. Deber√≠amos evitar usar algo porque los dem√°s dicen que lo debemos usar o es lo m√°s utilizado por todos. Adem√°s tenemos que evitar caer en lo que Cal Newport llama la mentalidad de <em><a href="http://www.helwyssocietyforum.com/the-any-benefit-mentality/">‚Äúel m√≠nimo beneficio‚Äù</a></em>, aquella en la que justificamos el uso de algo s√≥lo porque nos da un peque√±o beneficio, sin considerar lo que damos para obtenerlo. Dado el serm√≥n anterior, pensemos en los contras de los patrones de dise√±o:</p>

<ol>
  <li>La urgencia de aplicar nuestro reci√©n adquirido conocimiento nos puede llevar a buscar aplicar soluciones complicadas en donde no pertencen.</li>
  <li>Algunos patrones han probado con el tiempo en realidad ser anti-patrones (te veo a ti <a href="https://stackoverflow.com/questions/12755539/why-is-singleton-considered-an-anti-pattern">singleton</a>), soluciones que no se deber√≠an aplicar nunca, o que es muy dif√≠cil justificar su uso.</li>
  <li>A veces, la necesidad de aplicarlos revela el mal dise√±o de alguna otra parte de nuestro sistema: desde la plataforma hasta el lenguaje y la elecci√≥n de otras herramientas.</li>
  <li>Los patrones de dise√±o tradicionales est√°n casados con la programci√≥n orientada a objetos, que no siempre es la mejor para resolver el problema, aunque es lo m√°s usado actualmente.</li>
</ol>

<p>Hay toda una horda de programadores respetados que han hablado en contra de los patrones de dise√±o (como <a href="http://norvig.com/design-patterns/design-patterns.pdf">Peter Norvig</a>, para quien los patrones de dise√±o son flaquezas de tu lenguaje).</p>

<h2 id="por-d√≥nde-empezar">Por d√≥nde empezar</h2>

<p>Habiendo hablado de las ventajas y adevertencias, ¬øpor d√≥nde puedes empezar, si te interesa?</p>

<p>Los siguientes recursos son √∫tiles:</p>

<ol>
  <li><a href="https://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8">Design Patters: Elements of reusable Object-Oriented Software</a>. El libro de referencia de los patrones de dise√±o cl√°sicos. Tambi√©n est√° en espa√±ol, aunque es un poco dif√≠cil de conseguir.</li>
  <li>Para Python espec√≠ficamente: <a href="https://github.com/faif/python-patterns">Python Patterns</a> y</li>
  <li><a href="https://python-3-patterns-idioms-test.readthedocs.io/en/latest/index.html">Python 3 Patterns</a></li>
  <li><a href="https://www.amazon.com/Head-First-Design-Patterns-Brain-Friendly/dp/0596007124">Head First Design Patterns</a>. A este libro se refieren como una gu√≠a con bromillas tontas y super pedag√≥gica.</li>
</ol>

<p>Puedes encontrar una referencia completa de los patrones de dise√±o en <a href="https://es.wikipedia.org/wiki/Patr%C3%B3n_de_dise%C3%B1o">wikipedia</a>.</p>

<p>En este blog, publicaremos art√≠culos dedicados a patrones de dise√±o, explicando c√≥mo los hemos usado en nuestro trabajo diario, en los que explicaremos:</p>

<ol>
  <li>El patr√≥n</li>
  <li>C√≥mo reconocer una situaci√≥n para usarlo</li>
  <li>Su implementaci√≥n (normalmente en Python)</li>
  <li>Otras maneras de aplicarlo</li>
  <li>Las desventajas de este patr√≥n</li>
</ol>

<h2 id="conclusi√≥n">Conclusi√≥n</h2>

<p>Un patr√≥n de dise√±o es una soluci√≥n ‚Äúprobada‚Äù aplicada a un problema conocido y repetido en diferentes circunstancias. A veces pueden fallar.
Conocer los patrones de dise√±o definitivamente te har√° un mejor programador por su extendido uso. Aplicarlos <em>puede</em> y <em>normalmente</em> mejorar√° la arquitectura de tus programas y proyectos, pero hay que ser cautelosos. Aprender c√≥mo se aplican es una buena inversi√≥n de tiempo.</p>

<p>Gracias por leernos y no dudes en dejarnos tus comentarios.</p>
:ET