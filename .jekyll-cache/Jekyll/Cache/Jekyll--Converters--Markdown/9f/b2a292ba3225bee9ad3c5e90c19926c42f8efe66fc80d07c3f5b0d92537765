I"„$<p>Es una tarea com√∫n para un desarrollador el dise√±ar e implementar una API web. Veremos tres herramientas para desarrollar tu API, de lo m√°s sencillo a lo m√°s completo: Hug, Flask y Django Rest Framework.</p>

<h2 id="hug">Hug</h2>

<p><a href="http://www.hug.rest/">Hug</a> es una peque√±a biblioteca para crear API‚Äôs muy f√°ciles de entender y mantener.
Provee un serie de herramientas que permiten hacer tu API muy r√°pidamente, con poco c√≥digo
y siguiendo las mejores pr√°cticas. Hug no es una biblioteca exclusiva para hacer API‚Äôs web, sino que se enfoca
en permitirte crear API‚Äôs en el m√°s amplio sentido de la palabra: una intefaz para permitir el uso automatizado (mediante c√≥digo) de tu programa.</p>

<p>Si haces una API en Hug, podr√°s exponerla a parte de en web como un m√≥dulo de Python o a la interfaz de l√≠nea de comandos.</p>

<p>Con hug, puedes hacer algo tan sencillo como lo siguiente:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hug</span>

<span class="o">@</span><span class="n">hug</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">hola_apis</span><span class="p">():</span>
  <span class="k">return</span> <span class="p">{</span><span class="s">"mensaje"</span><span class="p">:</span> <span class="s">"Hola API's"</span><span class="p">}</span>
</code></pre></div></div>

<p>¬°Y listo! Lo anterior es una API lista para ser consumida, no necesitas crear ni configuraci√≥n ni caberceras ni nada m√°s (aunque claro que las puedes poner).</p>

<p>Hug provee de cosas interesantes:</p>

<ul>
  <li>Documentaci√≥n autom√°tica</li>
  <li>Verificaci√≥n y validaci√≥n de par√°metros -&gt; usando el type hinting de Python 3</li>
  <li>Versionamiento de API‚Äôs (una de las cosas m√°s dif√≠ciles de hacer bien en el ciclo de vida de una API)</li>
  <li>M√∫ltiples tipos de salida con s√≥lo cambiar la configuraci√≥n</li>
  <li>Extensibilidad y flexibilidad</li>
</ul>

<p>Hug es compatible con WSGI (Web Server Gateway Interface) por lo que puedes ponerlo en producci√≥n usando Gunicorn o uWSGI detr√°s de un servidor HTTP como proxy reverso (NGINX o Apache, entre otros).</p>

<p>Aqu√≠ tienes un post introcutorio a Hug:</p>

<ul>
  <li><a href="http://laesporadelhongo.com/crear-apis-rest-con-python-y-hug/">Crear APIs REST con Python y Hug</a></li>
</ul>

<p><strong>Cu√°ndo usarlo:</strong> No he usado Hug en producci√≥n a√∫n, pero promete ser muy bueno, sobre todo con las exigencias del mundo actual. Lo recomendar√≠a para proyectos peque√±os y medianos y para exponer bibliotecas o m√≥dulos que ya existen en alguna parte de c√≥digo como versiones Web o CLI.</p>

<h2 id="flask">Flask</h2>

<p><a href="http://flask.pocoo.org/">Flask</a> es una herramienta flexible para programar proyectos web en Python. Provee una capa m√≠nima de ruteo y compatibilidad con WSGI, as√≠ como funcionalidades y helpers comunes para las tarea m√°s comunes en desarrollo web.</p>

<p>Entre las caracter√≠sticas de Flask est√°n:</p>

<ul>
  <li>Integraci√≥n por default con <a href="http://jinja.pocoo.org/docs/2.10/">Jinja2</a></li>
  <li>Soporte de cookies de sesi√≥n seguras</li>
  <li>Servidor web para desarrollo y debuggeo</li>
</ul>

<p>Personalmente, considero Flask como la opci√≥n m√°s flexible para desarrollar proyectos web en Python. Adem√°s permite empezar f√°cil. Y compar√°ndolo con otras opciones, es mucho m√°s ligero, permiti√©ndote integrar tus propias opciones para diferentes partes del proyecto. Si tu proyecto es muy poco com√∫n o muy especializado, Flask es la mejor opci√≥n.</p>

<p>Aqu√≠ un peque√±o ejemplo de c√≥mo se empiza con Flask (sacado de su documentaci√≥n en su mayor√≠a)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">({</span><span class="s">"message"</span><span class="p">:</span> <span class="s">"Hello World!"</span><span class="p">})</span>
</code></pre></div></div>

<p>As√≠ es: puedes empezar con un solo archivo, Flask hizo todo por ti.</p>

<p>Flask tambi√©n tiene bastantes m√≥dulos que te ayudan a desarrollar funcionalidades m√°s r√°pido y con poco c√≥digo.</p>

<p>Si quieres aprender m√°s aqu√≠ tienes algunos recursos:</p>

<ul>
  <li>
    <p><a href="https://blog.nearsoftjobs.com/crear-un-api-y-una-aplicaci%C3%B3n-web-con-flask-6a76b8bf5383">Creando una API y aplicaci√≥n web con Flask</a></p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=lYeAvnHcZy8">Dise√±ando APIs con Flask</a></p>
  </li>
  <li>
    <p><a href="http://nightdeveloper.net/construir-flask-python/">Construir una API rest con Flask</a></p>
  </li>
</ul>

<p>M√°s adelante tendremos nuestro propio post üòâ.</p>

<p><strong>Cu√°ndo usarlo:</strong> Personalmente lo uso para proyectos peque√±os o medianos que s√© que no crecer√°n demasiado en caracter√≠sticas en el mediano plazo. Si tienes que hacer cosas complicadas, Flask requiere bastante experiencia t√©cnia y de arquitectura para que no se te vaya de las manos el proyecto, <strong>su flexibilidad puede trabajar en tu contra en estos casos</strong>.</p>

<h2 id="django-y-django-rest-framework">Django y Django Rest Framework</h2>

<p>Django es un framework MVT (Model-View-Template, su propia variante del MVC) para desarrollar proyectos web robustos de manera r√°pida.</p>

<p>Django provee:</p>

<ul>
  <li>Un sistema de templating propio</li>
  <li>Un ORM (Object Relational Mapper ‚Äì una capa de abstracci√≥n de la base de datos)</li>
  <li>Ruteo robusto</li>
  <li>Sistema de configuraci√≥n robusto y adaptable</li>
  <li>Interfaz de administraci√≥n autom√°tica</li>
  <li>Administraci√≥n de usuarios</li>
</ul>

<p>‚Ä¶y muchas otras cosas m√°s. Como ver√°s es mucho m√°s robusto(viene por default con m√°s cosas) que los otros dos, pero tambi√©n es el que tiene la mayor curva de aprendizaje. Si encuentras algo para lo que no est√© preparado Django o DRF √©ste es el caso en el que se requiere m√°s experiencia t√©cnica para modificarlo.</p>

<p>Django posee much√≠simos paquetes para extenderlo en funciones y uno de los m√°s famosos es el Django REST Framework (DRF a partir de ahora), que provee todas las funcionalidades que te imagines para desarrollar una API de manera sencilla y con pocas l√≠neas de c√≥digo.</p>

<p>El DRF permite crear endpoints a partir de modelos, relaciones entre modelos, endpoints customizados basados en clases y un mont√≥n de cosas m√°s. Se enfoca en crear API‚Äôs navegables.</p>

<p>Adem√°s nos da una interfaz para para pruebas desde el navegador web con todas las facilidades del mundo.</p>

<p>Puedes pensar en Django y DRF como una navaja suiza con todo lo que necesitas para desarrollar una API un poco m√°s compleja de manera r√°pida.</p>

<p>No pondremos el ejemplo de c√≥digo aqu√≠, porque en este caso el c√≥digo se reparte entre varios archivos, pero te compartimos los siguientes recursos por si quieres irte por este camino y sients que es lo que necesitas:</p>

<ul>
  <li>
    <p><a href="https://tutorial.djangogirls.org/es/django/">¬øQu√© es Django?</a> - ESte es uno de los mejores tutoriales de Django en internet, muy completo, as√≠ que vale la pena que lo sigas si quieres aprenderlo.</p>
  </li>
  <li>
    <p><a href="https://www.paradigmadigital.com/dev/introduccion-django-rest-framework/">Introducci√≥n a Django REST Framework</a> - Este post lo puedes seguir una vez que tengas una comprensi√≥n b√°sica de Django.</p>
  </li>
</ul>

<p><strong>Cu√°ndo usarlo:</strong> Django es mi elecci√≥n para proyectos que se que pueden requerir caracter√≠sitcas enterprise, pueden crecer en funcionalidades en el mediano plazo y estas funcionalidades no est√°n demasiado fuera de lo com√∫n. Si quieres desarrollar algo r√°pidamente en estas condiciones, no hay nada que pensar: usa Django, con √©l (despu√©s de la curva de aprendizaje), estar√°s haciendo cosas medianamente complejas en muy poco tiempo, adem√°s de que su inmensa cantidad de m√≥dulos para hacer much√≠simas cosas sin tanto trabajo te facilitar√° la vida.</p>

<h2 id="conclusi√≥n">Conclusi√≥n</h2>

<p>Algo que hay que tener en mente siempre es que se debe de elegir la herramienta adecuada para el trabajo a la mano. En los tres casos de las herramientas propuestas anteriormente tienes que analizar muy bien tus necesidades antes de decidirte por una, pero incluso podr√≠as usar una para una etapa del proyecto y cambiarla en una fase posterior.</p>

<p>Esperamos que esta peque√±a gu√≠a acerca de las opciones para elegir la mejor herramienta para crear tu API con flask te sea √∫til, y si tienes alguna opini√≥n/experiencia diferente es bienvenida en los comentarios.</p>
:ET