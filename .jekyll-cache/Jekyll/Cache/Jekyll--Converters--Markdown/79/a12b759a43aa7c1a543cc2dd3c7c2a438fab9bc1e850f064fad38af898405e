I"˘4<h4 id="prop√≥sito">Prop√≥sito:</h4>
<blockquote>
  <p>Asegurar el bajo acoplamiento entre un <em>request</em> y su <em>receiver</em> dando a m√∫ltiples objetos oportunidad de manejar el <em>request</em></p>
</blockquote>

<p>Hace unas semanas me enfrent√© a un tema de procesar un mensaje de un usuario y darle tratamiento por medio de un algoritmo de Natrual Language Processing. Antes de pasar el mensaje por el set de algoritmos apropiados hay que darle una serie de tratamientos previos:</p>

<ol>
  <li>Eliminar los acentos y solo dejar en ASCII el mensaje.</li>
  <li>Pasar el mensaje a lowercase.</li>
</ol>

<p>A primera luz, un c√≥digo que puede f√°cilmente satisfacer es:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message</span> <span class="o">=</span> <span class="s">"Dios bendiga a los h√©roes que nos dieron el internet."</span>
<span class="n">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
<span class="n">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√°"</span><span class="p">,</span><span class="s">"a"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√©"</span><span class="p">,</span><span class="s">"e"</span><span class="p">)</span> \
    <span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√≠"</span><span class="p">,</span><span class="s">"i"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√≥"</span><span class="p">,</span><span class="s">"o"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√∫"</span><span class="p">,</span><span class="s">"u"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
<span class="c1"># dios bendiga a los heroes que nos dieron el internet.
</span></code></pre></div></div>
<p>Funcion√≥, se cumpli√≥ el objetivo.</p>

<p>El problema sobrevino en el momento que los algoritmos posteriores requieren m√°s modificaciones en la cadena original.
Poco a poco se fue agregando y agregando c√≥digo para tareas como eliminar emojis, eliminar signos de puntuaci√≥n, contraer palabras como <em>hooooooola</em> en <em>hola</em> y en el futuro no se sabe que m√°s cosas habr√° que hacer a la cadena original, pueden ser cosas tan diversas como ‚ÄúA cada cadena que se procese quiero que se quede un historial de la cadena original‚Äù, en ese momento hay que ir a reescribir c√≥digo quebrantando el principio <a href="https://en.wikipedia.org/wiki/Open‚Äìclosed_principle"><strong>**open/closed</strong>**</a> ‚Äú<em>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification</em>‚Äù.</p>

<h4 id="soluci√≥n">Soluci√≥n</h4>

<p>El patr√≥n de dise√±o <em>Chain of responsibility</em> como premisa principal es que m√°s de una entidad de software (clase y/o funci√≥n) pueda atender una petici√≥n. Dichas entidades pueden ser conocidas y de hecho se acaban implementando, pero tambi√©n pueden ser desconocidas y esas no las podemos implementar pero debemos ser capaces de implementarlas en un futuro.</p>

<p>Pero, si el c√≥digo anterior es muy sencillo, no veo caso de hacerlo <em>complejo</em>; a medida que los requerimientos van cambiando en el tiempo es muy probable que ese c√≥digo se acabe agrupando en una funci√≥n y esa funci√≥n no har√° m√°s que crecer y entre m√°s lo haga perder√° el foco y se convertir√° en una funci√≥n que har√° de todo, no cumplir√° con otro principio (<a href="https://refactoring.guru/images/patterns/content/chain-of-responsibility/chain-of-responsibility.png">single responsibility</a>) <em>una entidad debe hacer solo una cosa y hacerla bien</em>, la funci√≥n adem√°s de escribir en disco tiene que pasar la frase a min√∫sculas, reemplazar caracteres no ASCII con caracteres ASCII por mencionar algo. El partir una gran funci√≥n (gran ~= muchas responsabilidades) en muchas m√°s peque√±as facilita la escritura de test unitarios y propicia a la re usabilidad de esa funci√≥n en distintas partes de nuestro proyecto principalmente.</p>

<p>En este patr√≥n la petici√≥n (<em>request</em>) es mandada de entidad en entidad (cada entidad es un eslab√≥n de la cadena o <em>handler</em>), cada entidad maneja la petici√≥n y la pasa al siguiente eslab√≥n hasta que se terminen los eslabones de la cadena o uno de ellos decida que hay que regresar un valor.</p>

<p><img src="/assets/images/chain-of-responsibility.jpg" alt="Representaci√≥n gr√°fica" /></p>

<p>Siguiendo con el problema original, el c√≥digo propuesto es el siguiente <a href="https://www.tutorialspoint.com/design_pattern/chain_of_responsibility_pattern.htm">(aqu√≠ uno en Java)</a>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">to_lower</span><span class="p">(</span><span class="n">message</span><span class="o">=</span><span class="s">""</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="nb">str</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Message is not a string"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">to_ascii</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="nb">str</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Message is not a string"</span><span class="p">)</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√°"</span><span class="p">,</span><span class="s">"a"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√©"</span><span class="p">,</span><span class="s">"e"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√≠"</span><span class="p">,</span><span class="s">"i"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√≥"</span><span class="p">,</span><span class="s">"o"</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"√∫"</span><span class="p">,</span><span class="s">"u"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">message</span>

<span class="k">def</span> <span class="nf">to_disk</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="n">FILENAME</span> <span class="o">=</span> <span class="s">"historial.log"</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">message</span><span class="p">,</span><span class="nb">str</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Message is not a string"</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">FILENAME</span><span class="p">,</span><span class="s">"a"</span><span class="p">,</span><span class="n">encoding</span><span class="o">=</span><span class="s">"UTF-8"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">f</span><span class="s">"{message}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">message</span>

<span class="k">def</span> <span class="nf">remove_all_punctuation</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
    <span class="c1">#all code to remove punctuation marks
</span>    <span class="k">return</span> <span class="n">message</span>

<span class="k">class</span> <span class="nc">Pipe</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">message</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_message</span> <span class="o">=</span> <span class="n">message</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">processors</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_process</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">process_function</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">processors</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">process_function</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">process</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">processors</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_message</span> <span class="o">=</span> <span class="n">process</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_message</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_message</span>

<span class="n">pipe</span><span class="o">=</span><span class="n">Pipe</span><span class="p">(</span><span class="s">"Dios bendiga a los h√©roes que nos dieron el internet."</span><span class="p">)</span>
<span class="n">pipe</span><span class="o">.</span><span class="n">add_process</span><span class="p">(</span><span class="n">to_disk</span><span class="p">)</span>
<span class="n">pipe</span><span class="o">.</span><span class="n">add_process</span><span class="p">(</span><span class="n">to_lower</span><span class="p">)</span>
<span class="n">pipe</span><span class="o">.</span><span class="n">add_process</span><span class="p">(</span><span class="n">to_ascii</span><span class="p">)</span>
<span class="n">pipe</span><span class="o">.</span><span class="n">add_process</span><span class="p">(</span><span class="n">remove_all_punctuation</span><span class="p">)</span>
<span class="n">new_message</span><span class="o">=</span><span class="n">pipe</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">new_message</span><span class="p">)</span>

</code></pre></div></div>

<p>El c√≥digo anterior es un c√≥digo m√°s profesional, m√°s f√°cil de mantener ya que cumplimos con el principio <em>open/close</em> y de paso de responsabilidad √∫nica.</p>

<p>Podemos ir agregando funciones de procesamiento de manera m√°s legible, tambi√©n podemos quitarlas a voluntad dado que el nivel de acoplamiento es muy bajo. A todo √©sto hay que a√±adir la ventaja de facilidad al escribir test unitarios que dan pie para el CI/CD.</p>

<p>Se puede pensar al inicio que es una sobre-ingenier√≠a para algo tan sencillo, pero los negocios son tan cambiantes en el tiempo que se vuelve un poco ingenuo pensar que lo que escribamos nunca lo tendremos que modificar, ¬øPor qu√© no dise√±ar software que pueda ser modificable en el ahora y el futuro?. Este tema de los patrones de dise√±o es un tema muy extenso que poco a poco iremos cubriendo con entradas en este blog dando ejemplos sencillos como el anterior.</p>

<p>Lo importante es quedarse con el concepto de qu√© es lo que hace el patr√≥n y no con la implementaci√≥n como tal del c√≥digo, en Java el c√≥digo anterior puede ser muy diferente, sin embargo cumple el patr√≥n. Tuve conciencia de esto leyendo que en un principio, en los a√±os dorados de C, este patr√≥n se implementaba con listas enlazadas,a su vez implementadas con apuntadores.</p>

<p>Saludos y no dudes en ejercer tu derecho de r√©plica :) , discutamos un poco al respecto :D.</p>
:ET