<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.thedojo.mx/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.thedojo.mx/" rel="alternate" type="text/html" /><updated>2022-01-01T01:00:43-06:00</updated><id>https://blog.thedojo.mx/feed.xml</id><author><name>Héctor Patricio</name><uri>https://github.com/hectorip</uri></author><entry><title type="html">Criptografía para desarrolladores: Códigos de autenticación de mensajes</title><link href="https://blog.thedojo.mx/2021/12/30/criptografia-para-desarrolladores-codigos-de-autenticacion-de-mensajes.html" rel="alternate" type="text/html" title="Criptografía para desarrolladores: Códigos de autenticación de mensajes" /><published>2021-12-30T00:00:00-06:00</published><updated>2021-12-30T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/30/criptografia-para-desarrolladores-codigos-de-autenticacion-de-mensajes</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/30/criptografia-para-desarrolladores-codigos-de-autenticacion-de-mensajes.html">&lt;p&gt;Ya hemos hablado de los cifrados de bloque, de flujo y de los hashes, ahora hablemos de un híbrido entre ellos que funciona como un hash pero usa una llave como un cifrado. El uso principal de este tipo de algoritmos es la autenticación y verificación de mensajes, pero también pueden ser usados para generar derivados de una llave, por su carácter pseudo-aleatorio.&lt;/p&gt;

&lt;p&gt;En general este tipo de algoritmos se llaman &lt;strong&gt;hashes con llave&lt;/strong&gt; o &lt;em&gt;Keyed Hashes&lt;/em&gt;. Empecemos a hablar del tipo más sencillo y usado: la generación de códigos de autenticación de mensajes.&lt;/p&gt;

&lt;h2 id=&quot;message-authentication-codes-macs&quot;&gt;Message Authentication Codes (MACs)&lt;/h2&gt;

&lt;p&gt;Un código de autenticación de mensajes es una función que recibe un mensaje y &lt;em&gt;una llave&lt;/em&gt; (secreta) y devuelve lo que llamamos una etiqueta, que es una cadena de bits de los tamaños comunes en los hashes.&lt;/p&gt;

&lt;p&gt;En este tipo de algoritmos, si mantenemos la llave secreta, y la compartimos solamente con quien necesitamos verificar la autenticidad del mensaje, podemos comprobar el &lt;em&gt;origen&lt;/em&gt; (gracias a que sabemos que la llave está protegida) y que el mensaje está intacto (gracias a que las propiedades del hash).&lt;/p&gt;

&lt;p&gt;Una forma de crear un hash con llave es simplemente poniendo la llave antes o después del mensaje que queremos autenticar y usando un algoritmo de hashing normal, &lt;strong&gt;aunque ninguna de las dos formas es muy segura&lt;/strong&gt;, ya que es vulnerable a ataques de &lt;a href=&quot;https://en.wikipedia.org/wiki/Length_extension_attack&quot;&gt;&lt;em&gt;extensión de longitud&lt;/em&gt;&lt;/a&gt; o se pueden encontrar colisiones si se usa una llave de tamaño variable. Un ejemplo en Python sería el siguiente:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha3_512&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mi llave super secreta'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mi mensaje que puede o no ser secreto, pero del que me importa el origen y que no haya sido cambiado'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sha3_512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Afortunadamente, ningún algoritmo de la familia SHA-3 es vulnerable a los ataques de extensión de longitud, por eso lo usamos aquí para el ejemplo)&lt;/p&gt;

&lt;p&gt;A nuestra contraparte le enviamos el mensaje junto con el tag y para verificar la autenticidad del mensaje el receptor debe hacer exactamente la misma operación, por lo que necesita tener previamente la llave. Si el tag resultante es igual, quiere decir que el mensaje es auténtico y no ha sido modificado, reemplazado o viene de alguien que no tiene la llave.&lt;/p&gt;

&lt;p&gt;Para que un MAC sea seguro, debe ser imposible crear un tag que parezca venir de alguien con la llave, sea por falsificarlo directamente o por poder adivinar la llave.&lt;/p&gt;

&lt;p&gt;Los MACs más comunes son los que están basados en hashes, conocidos como &lt;strong&gt;HMAC&lt;/strong&gt;, un término que seguro has visto si has estado desarrollando por algún tiempo.&lt;/p&gt;

&lt;h2 id=&quot;códigos-de-autenticación-de-mensajes-basados-en-hashes-hmac&quot;&gt;Códigos de autenticación de mensajes basados en hashes (HMAC)&lt;/h2&gt;

&lt;p&gt;Un &lt;em&gt;Hash based Message Authentication Code&lt;/em&gt; es un MAC creado a partir de un hash, operando de una manera diferente a simplemente poner antes o después la llave. Los HMACs hacen uso de dos valores adicionales, un padding interno y un padding externo. Los combinan con la llave para crear una etiqueta que no sea vulnerable a los ataques de extensión de longitud.&lt;/p&gt;

&lt;p&gt;La construcción de HMAC funciona así:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Se combina la llave con el padding interno mediante la operación XOR.&lt;/li&gt;
  &lt;li&gt;Se hashea la la combinación de la llave y el padding interno junto con el mensaje del que queremos crear la etiqueta (a esto lo llamaremos H1).&lt;/li&gt;
  &lt;li&gt;Se combina la llave con el padding externo mediante la operación XOR.&lt;/li&gt;
  &lt;li&gt;Se hashea la la combinación de la llave y el padding externo junto con H1, el resultado de esto es la etiqueta de autenticación.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sin embargo, se conoce un ataque efectivos contra los HMACs que permiten falsificar tags computando &lt;strong&gt;2^n/2 operaciones&lt;/strong&gt; en promedio, lo cuál no es cualquier cosa, pero un atacante motivado (y con recursos) podría lograrlo sin problemas si &lt;strong&gt;n&lt;/strong&gt;, el tamanño interno del estado del hash es muy pequeño. Un hash moderno tiene un estado de 512 bits, por lo que un ataque de tamaño de 2^n512/2 = 2^256 es impráctico.&lt;/p&gt;

&lt;p&gt;Ya que un HMAC están basado en un algoritmo de hash, cuando se nombra se usa el nombre de este, por ejemplo: HMAC-SHA-256 o HMAC-SHA-3-512.&lt;/p&gt;

&lt;h2 id=&quot;códigos-de-autenticación-de-mensajes-basados-en-cifrados-de-bloque-cmac&quot;&gt;Códigos de autenticación de mensajes basados en cifrados de bloque (CMAC)&lt;/h2&gt;

&lt;p&gt;Ya que los hashes pueden estar basados en cifrados de bloque, una construcción más directa es usar un cifrado de bloque como la base para un MAC. Así nacen lo CMACs, códigos de autenticación de mensajes basados en cifrados de bloque, por ejemplo AES-CMAC.
Aunque se siguen usando en algunos protocolos de seguridad, los más MACs más eficientes son los que no se basan en Hashes o cifrados de bloque, sino que tienen un diseño independiente.&lt;/p&gt;

&lt;h2 id=&quot;macs-con-diseño-independiente&quot;&gt;MACs con diseño independiente&lt;/h2&gt;

&lt;p&gt;Un MAC seguro es más fácil de lograr que un hash completamente funcional y seguro o que un cifrado de bloque con las mismas características, ya que al usar un llave secreta evitan que se pueda atacar tan fácilmente como un hash y al exponer una etiqueta pequeña, revelan menos información que un cifrado de bloque.&lt;/p&gt;

&lt;p&gt;Es por eso que un MAC no requiere todo el poder de un hash ni de un cifrado de bloque. Gracias a esto se han dieseñado algortimos que usan esta ventaja para ser más eficientes. Hablemos de tres ejemplos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://cr.yp.to/siphash/siphash-20120918.pdf&quot;&gt;SipHash&lt;/a&gt;: Es una familia de algoritmos optimizada para autenticar mensajes cortos, originalmente diseñada para reemplazar las funciones hash en los diccionarios implmentados como hashtables.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cr.yp.to/mac/poly1305-20050329.pdf&quot;&gt;Poly1305&lt;/a&gt;: Es una función de autenticación de mensajes muy rápida y eficiente, más que cualquiera basada completamente en un algoritmo de bloque o un hash, usada para autenticar paquetes en dispositivos de bajo rendimiento en Android, por ejemplo.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://eprint.iacr.org/2005/088.pdf&quot;&gt;Pelican 2.0&lt;/a&gt;: Es un MAC basado en AES (Rijndael), pero que no utiliza todo su poder y que funciona de forma eficiente gracias a esto. Sin embargo, este algoritmo no está implementado en ningún lugar importante.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Si lo que buscas es eficiencia, manteniendo la seguridad relativa de tus etiquetas de autenticación, este tipo de MACs son los que deberías usar.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Conocer sobre los códigos de autenticación de mensajes es importante para no navegar perdidos entre todas esas siglas que luego vemos en las suites de seguridad de IPSec, TLS, SSL, SSH, HTTPS, etc. Ahora ya sabes lo que significa HMAC-SHA-512, AES-CMAC o Poly1305.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="mac" /><category term="hamc" /><category term="aes" /><category term="security" /><category term="cryptography" /><summary type="html">A veces vemos nombres como HMAC-MD4 o AES-CMAC y no sabemos lo que significa. En este artículo hablaremos de los diferentes tipos de MAC y por qué son importantes.</summary></entry><entry><title type="html">El tiempo monótono</title><link href="https://blog.thedojo.mx/2021/12/26/el-tiempo-monotono.html" rel="alternate" type="text/html" title="El tiempo monótono" /><published>2021-12-26T00:00:00-06:00</published><updated>2021-12-26T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/26/el-tiempo-monotono</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/26/el-tiempo-monotono.html">&lt;p&gt;Saber cuánto tiempo ha pasado desde cierto evento en nuestro programa es algo que podemos requerir en algunos casos. Uno de los casos que más he visto es cuando se está midiendo el tiempo que tarda una parte del programa o un evento externo.&lt;/p&gt;

&lt;p&gt;El &lt;strong&gt;tiempo o reloj monótono&lt;/strong&gt; es un concepto que todo programador debería conocer, para evitar errores y código frágil al &lt;em&gt;medir&lt;/em&gt; el tiempo en los programas.&lt;/p&gt;

&lt;h2 id=&quot;el-reloj-de-pared&quot;&gt;El reloj de “pared”&lt;/h2&gt;

&lt;p&gt;Lo primero que se nos viene a la cabeza cuando se trata de medir el tiempo entre dos eventos de nuestro programa es usar alguna función de nuestro lenguaje de programación que obtenga la fecha y hora actual. Este reloj o tiempo se llama de “tiempo real” y algunos programadores le llaman el reloj de pared, porque es como si voltearas a ver un reloj de esos que pones en tu pared para que te de la hora constantemente.&lt;/p&gt;

&lt;p&gt;Un ejemplo de esto en Python sería:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# hacer algo (lo que queremos medir)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto puede parecer inofensivo, pero tiene una falla que hace a nuestro programa frágil ante eventualidades fuera del sistema. La función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.time()&lt;/code&gt; devuelve un número de segundos desde el 1 de Enero de 1970 (esta fecha conocida como el &lt;strong&gt;Epoch&lt;/strong&gt;) como un flotante. Este número siempre será incremental, es decir, no &lt;em&gt;debería&lt;/em&gt; devolverte un número menor que una llamada previa. Sin embargo, para calcular ese número de segundos (conocido como el &lt;strong&gt;Tiempo Unix&lt;/strong&gt;), Python se basa en la hora del &lt;em&gt;sistema&lt;/em&gt; en el que está corriendo el programa.&lt;/p&gt;

&lt;p&gt;¿Alcanzas a notar por qué esta forma de calcular cuánto tiempo ha pasado desde un evento es frágil? Por ejemplo, imagina que entre una medida de tiempo (en nuestro programa, la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt;) y la siguiente(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt;), ocurriera un cambio de hora en el sistema. Puede ser que alguien esté jugando con las configuraciones o que por pura casualidad el sistema haya ajustado el tiempo por uno de los segundos de ajuste de nuestro calendario (leap seconds) o que corra durante el cambio de hora por el horario de verano.&lt;/p&gt;

&lt;p&gt;Todas estas circunstancias podrían afectar como mide el tiempo tu programa si usamos el reloj del sistema. Es aquí en donde entra el tiempo o reloj monótono.&lt;/p&gt;

&lt;h2 id=&quot;el-tiempo-monótono&quot;&gt;El tiempo monótono&lt;/h2&gt;

&lt;p&gt;El reloj monótono es un &lt;strong&gt;contador del sistema que sólo avanza hacia adelante&lt;/strong&gt;, contando a partir de un punto arbitrario en el pasado. Este reloj no tiene conexión con el calendario y el tiempo real del sistema, sino que simplemente sirve para medir el tiempo que ha pasado (&lt;strong&gt;siempre en aumento&lt;/strong&gt;) desde el punto que se eligió.&lt;/p&gt;

&lt;p&gt;Así, este reloj es confiable para medir el tiempo que pasó entre dos eventos, porque podemos tener la seguridad de que el una llamada posterior a la lectura de este reloj &lt;em&gt;siempre&lt;/em&gt; va a devolver algo mayor que la lectura anterior.&lt;/p&gt;

&lt;p&gt;La manera de usarlo en Python también es mediante el módulo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monotonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# hacer algo (lo que queremos medir)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;monotonic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La función &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.monotonic()&lt;/code&gt; devuelve el tiempo monótono como un flotante, en segundos. Con estas dos puntos que están conectados al mismo marco de referencia obligatoriamente, hacemos que nuestra medición entre los dos eventos sea confiable. Lo mismo sucedería si quisieras coordinar dos sistemas diferentes: cada uno puede confiar en su reloj monótono sabiendo que el tiempo no saltará hacia atrás de ninguna manera.&lt;/p&gt;

&lt;p&gt;Con vergüenza te comento que la primera vez que escuché de este concepto fue con más de 10 años de carrera, mediante el libro &lt;a href=&quot;https://books.altenwald.com/book/elixir&quot;&gt;Elixir para Alquimistas&lt;/a&gt; de Manuel Rubio, un libro que recomiendo mucho.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Cuando estés midiendo tiempo o coordinando tareas en tu programa, no confíes en las fechas y horas del sistema en el que está corriendo tu programa. Usa el reloj monótono para garantizar que tienes el mismo marco de referencia siempre que hagas una medición de tiempo. Tu lenguaje de programación debería darte acceso a esta medición, sólo investiga o busca en Google: &lt;em&gt;“Lenguaje X monotonic time”&lt;/em&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="monótono" /><category term="tiempo" /><category term="conteo" /><summary type="html">¿Cómo se cuenta el tiempo en una computadora? En este artículo hablaremos del tiempo monótono, un contador en el que puedes confiar para hacer cálculos relativos a periodos de tiempo en tus programas.</summary></entry><entry><title type="html">Matemáticas para criptografía</title><link href="https://blog.thedojo.mx/2021/12/25/matematicas-para-criptografia.html" rel="alternate" type="text/html" title="Matemáticas para criptografía" /><published>2021-12-25T00:00:00-06:00</published><updated>2021-12-25T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/25/matematicas-para-criptografia</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/25/matematicas-para-criptografia.html">&lt;p&gt;¿Quieres entender por qué los algoritmos criptográficos pueden &lt;em&gt;prometer&lt;/em&gt; seguridad? Todos están basados en operaciones matemáticas, problemas difíciles de resolver, probabilidad y estadística.&lt;/p&gt;

&lt;p&gt;Veamos un plan de estudios de matemáticas que podrías usar para adquirir las habilidades matemáticas necesarias para entender mejor los algoritmos criptográficos.&lt;/p&gt;

&lt;h2 id=&quot;básico-básico&quot;&gt;Básico básico&lt;/h2&gt;

&lt;p&gt;Empecemos por los fundamentos más profundos que debes tener, que hasta pueden parecer obvios. Lo importante es que tengas &lt;em&gt;la seguridad de que los dominas&lt;/em&gt; y si no, te proporcionamos algunos recursos para que los repases.&lt;/p&gt;

&lt;h3 id=&quot;álgebra&quot;&gt;Álgebra&lt;/h3&gt;

&lt;p&gt;Es necesario conocer los procedimientos algebraicos a fondo porque en esto se basa la resolución de problemas de muchas otras áreas. Además la factorización es uno de los problemas más importantes de la criptografía actual, y aquí es donde aprenderás el concepto básico en práctica. Si sientes que te falta aprender un poco, puedes tomar estos cursos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.khanacademy.org/math/algebra&quot;&gt;Álgebra 1 - Khan Academy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.khanacademy.org/math/algebra2&quot;&gt;Álgebra 2 - Khan Academy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/algebra-basica&quot;&gt;Algebra básica - UNAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://platzi.com/cursos/algebra/&quot;&gt;Curso de Álgebra en Platzi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;probabilidad-y-estadística&quot;&gt;Probabilidad y estadística&lt;/h3&gt;

&lt;p&gt;Siempre que hablamos de que un algoritmo es seguro, lo decimos basados en la probabilidad de que alguien pueda encontrar una solución a un problema muy difícil en un &lt;em&gt;número de intentos razonable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por ejemplo: confiamos en que la probabilidad de que alguien rompa un cifrado es cercana a cero, pero realmente esta probabilidad nunca es cero absoluto, sino algo como &lt;strong&gt;1/2^128&lt;/strong&gt; por intento, pero alguien motivado podría hacer &lt;em&gt;miles de millones&lt;/em&gt; de intentos. Para poder calcular estas probabilidades hay que entender lo básico de probabilidad y estadística.&lt;/p&gt;

&lt;p&gt;La probabilidad también te ayudará a entender lo que es una &lt;strong&gt;distribución de probabilidad&lt;/strong&gt;, que es muy importante tanto para atacar algoritmos criptográficos como para verificar que las salidas de estos son seguras.&lt;/p&gt;

&lt;p&gt;Puedes aprender un poco de esto en los siguientes cursos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.khanacademy.org/math/statistics-probability&quot;&gt;Probabilidad y estadística - Khan Academy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/estadistica-probabilidad&quot;&gt;Estadística y Probabilidad - UNAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;matemáticas-discretas&quot;&gt;Matemáticas discretas&lt;/h2&gt;

&lt;p&gt;Me atrevería a decir que esta es la rama &lt;strong&gt;más importante de matemáticas&lt;/strong&gt; que debes de conocer como programador y como criptógrafo. La mayoría de los operaciones criptográficas y de algoritmos de programación están basadas en el conocimiento que aprenderás aquí. &lt;a href=&quot;https://blog.thedojo.mx/2019/12/25/las-matematicas-que-debes-saber-para-programar.html#l%C3%B3gica-matem%C3%A1ticas-discretas&quot;&gt;Ya hemos mencionado&lt;/a&gt; que las matemáticas discretas son el estudio de las cosas que se pueden contar, sean finitas o infinitas, a diferencia de las matemáticas continuas que estudian los números reales o cosas que son continuas, incontables y sin divisiones claras.&lt;/p&gt;

&lt;p&gt;A continuación te listamos algunos de los temas que debes dominar o por lo menos conocer bien.&lt;/p&gt;

&lt;h3 id=&quot;lógica&quot;&gt;Lógica&lt;/h3&gt;

&lt;p&gt;La lógica tiene la intención de formalizar el razonamiento de tal manera que lo podamos estudiar, entender y aplicar a otras áreas.&lt;/p&gt;

&lt;p&gt;En este tema se habla de cosas como tablas de verdad, lógica proposicional, deducción, &lt;a href=&quot;https://www.fing.edu.uy/~amiquel/fundamentos/teoriasymodelos.pdf&quot;&gt;teorías y lógica de primer orden&lt;/a&gt;, etc.&lt;/p&gt;

&lt;h3 id=&quot;teoría-de-números&quot;&gt;Teoría de números&lt;/h3&gt;

&lt;p&gt;La teoría de números trata acerca de los números enteros, sus propiedades, operaciones y relaciones. Esta es &lt;strong&gt;la base de varios problemas difíciles que sirven para crear los algoritmos criptográficos modernos&lt;/strong&gt;. En esta rama se estudia la divisibilidad, los números primos, la aritmética modular y los algoritmos relacionados con estas operaciones.&lt;/p&gt;

&lt;p&gt;Si no vas a estudiar nada más, entender los temas de un curso de teoría de números enfocado en criptografía es suficiente para no sentirte sin rumbo. Estos cursos pueden ayudarte a aprender lo que necesitas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/number-theory-cryptography&quot;&gt;Number Theory for Cryptography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://personal.cimat.mx:8181/~hgallegos/teaching/teoriaDeNumeros/&quot;&gt;Temario con Bibliografía y tareas del curso de Teoría de Números del CIMAT&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/mathematical-foundations-cryptography&quot;&gt;Mathematical foundations of cryptography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://math.libretexts.org/Bookshelves/Combinatorics_and_Discrete_Mathematics/Yet_Another_Introductory_Number_Theory_Textbook_-_Cryptology_Emphasis_(Poritz)&quot;&gt;Yet Another Introductory Number Theory Textbook - Cryptology Emphasis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;combinatoria&quot;&gt;Combinatoria&lt;/h3&gt;

&lt;p&gt;Esta sub-rama de las matemáticas discretas tiene que ver con el &lt;em&gt;conteo, combinaciones y arreglos de objetos en estructuras discretas&lt;/em&gt; (con objetos claramente separados) como los grafos y conjuntos. Normalmente estas estructuras discretas contienen números, pero podrían contener palabras, textos, frases. La combinatoria incluye el conteo de objetos y combinaciones que llevamos a a cabo en probabilidad y estadística: las operaciones de combinación y permutación.&lt;/p&gt;

&lt;p&gt;Algunos recursos que te ayudarán a aprender combinatoria a fondo se encuentran aquí: &lt;a href=&quot;https://math.libretexts.org/Bookshelves/Combinatorics_and_Discrete_Mathematics&quot;&gt;Combinatorics and Discrete Mathematics&lt;/a&gt; que tiene un conjunto de libros sobre combinatoria con diferentes enfoques.&lt;/p&gt;

&lt;h3 id=&quot;cursos-de-matemáticas-discretas-generales&quot;&gt;Cursos de matemáticas discretas generales&lt;/h3&gt;

&lt;p&gt;Algunos cursos y temarios que puedes tomar son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://compilandoconocimiento.com/discretas/&quot;&gt;Curso de matemáticas discretas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://posgrados.inaoep.mx/archivos/PosCsComputacionales/Curso_Propedeutico/TEMARIOS/2_MateDiscretas-VersionGeneral.pdf&quot;&gt;Temario sobre matemáticas discretas para Maestría en Ciencias de la Computación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;geometría-analítica&quot;&gt;Geometría analítica&lt;/h3&gt;

&lt;p&gt;Conocer las propiedades matemáticas de los objetos geométricos te ayudará a comprender intuitivamente algunas de los problemas difíciles en los que está basada la criptografía.&lt;/p&gt;

&lt;p&gt;Algunos cursos que puedes tomar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/https://www.eusal.es/eusal/catalog/book/978-84-1311-463-7trigonometria&quot;&gt;Trigonometría y geometría analítica - UNAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;álgebra-lineal&quot;&gt;Álgebra lineal&lt;/h2&gt;

&lt;p&gt;El álgebra lineal tiene que ver con el estudio de ecuaciones lineales (que pueden ser graficadas en el plano cartesiano con una recta), sus soluciones y su tratamiento a través de vectores y matrices.&lt;/p&gt;

&lt;p&gt;Muchas de las técnicas utilizadas en álgebra lineal son ocupadas en criptografía para crear algoritmos seguros que sean imposibles de revertir sin conocer la llave correcta. Un ejemplo es el algoritmo Rijndael, el actual AES.&lt;/p&gt;

&lt;p&gt;Algunos recursos que te ayudarána a aprender matemáticas discretas son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/projects/aprendiendo-python-con-algebra-lineal&quot;&gt;Aprendiendo Python con Álgebra Lineal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.edx.org/course/fundamentos-de-algebra-lineal-2?index=product&amp;amp;queryID=4f34318ca69382d83eb24655d433f655&amp;amp;position=1&quot;&gt;Fundamentos de álgebra lineal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://buzzard.ups.edu/courses/2013spring/projects/berger-aes-ups-434-2013.pdf&quot;&gt;Cómo funciona AES (Rijndael)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;opcionales&quot;&gt;Opcionales&lt;/h2&gt;

&lt;p&gt;Si quieres avanzar a campos muy adelantados de la criptografía, debes estudias campos aún más específicos de las matemáticas discretas como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Teoría de grupos&lt;/li&gt;
  &lt;li&gt;Teoría de grafos&lt;/li&gt;
  &lt;li&gt;Retículas (algo muy importante para la criptografía post-cuántica)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cursos-completos&quot;&gt;Cursos completos&lt;/h2&gt;

&lt;p&gt;Para finalizar, te quiero presentar recursos que tienen un conjunto completo básico de todas las matemáticas necesarias para entender los algoritmos criptográficos modernos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.eusal.es/eusal/catalog/book/978-84-1311-463-7&quot;&gt;MANUAL DE CRIPTOGRAFÍA: FUNDAMENTOS MATEMÁTICOS DE LA CRIPTOGRAFÍA PARA UN ESTUDIANTE DE GRADO&lt;/a&gt; - Tiene apartados para todos los tipos de algoritmos criptográficos usados en la actualidad, explicando su soporte matemático. Si quieres profundizar en algún tema de estos, podrías tomar el curso específico que sugerimos aquí.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/specializations/discrete-mathematics&quot;&gt;Especialización en matemáticas discretas en Coursera&lt;/a&gt; - Tiene todos los temas relacionados con matemáticas para computación y criptografía divididos en varios cursos, lo puedes tomar de manera gratuita.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.coursera.org/learn/mathematical-foundations-cryptography?&quot;&gt;Mathematical foundations of Cryptography&lt;/a&gt; - Tiene todos los temas necesarios para entender la criptografía, incluyendo los temas selectos de todas las matemáticas para ir directo al grano. Esto requerirá que tengas cubierto las matemáticas básicas para no perderte.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.isical.ac.in/~rcbose/mtechCrS.pdf&quot;&gt;Temario de maestría en seguridad de la ISICAL&lt;/a&gt; - Tiene todos los cursos que alguien debería de tomar para especializarse en ciberseguridad, con temarios completos y bibliografía, lo que te puede servir como una guía si lo que prefieres es aprender de los libros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus: &lt;a href=&quot;https://www.coursera.org/learn/cryptography-boolean-functions&quot;&gt;Cryptogaphy, Boolean Functions and related problems&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Como podrás observar, hay una gran cantidad de recursos para aprender lo necesario para entender la criptografía a fondo, desde sus bases matemáticas. Puedes usar estas recomendaciones como guía, o ver los temas y buscar tus propios recursos para seguir aprendiendo. Si tienes alguna recomendación no dudes en compartirla con nosotros para poder actualizar nuestra lista y cada vez hacerla mejor.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="criptografía" /><category term="matemáticas" /><category term="álgebra" /><summary type="html">Veamos qué conocimientos matemáticos requieres para entender los algoritmos criptográficos, cómo funcionan y, en su caso, avanzar para que puedas diseñar los tuyos.</summary></entry><entry><title type="html">HTTP 1.1, HTTP/2 y HTTP/3</title><link href="https://blog.thedojo.mx/2021/12/15/http-1-1-http-2-y-http-3.html" rel="alternate" type="text/html" title="HTTP 1.1, HTTP/2 y HTTP/3" /><published>2021-12-15T00:00:00-06:00</published><updated>2021-12-15T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/15/http-1-1-http-2-y-http-3</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/15/http-1-1-http-2-y-http-3.html">&lt;p&gt;HTTP es el estándar más importante de la web actual, porque permite la transmisión de información entre los diferentes actores de la red. Hablemos un poco de su evolución como estándar para servir mejor a los intereses de la industria y de los usuarios y de su estado actual.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;HTTP/3 hará que tus páginas web descarguen mucho más rápido, gracias a que trabaja de forma diferente a bajo nivel. Empieza a aprenderlo porque esto vendrá con nuevos retos para los desarrolladores.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;qué-es-http&quot;&gt;¿Qué es HTTP?&lt;/h2&gt;

&lt;p&gt;El &lt;strong&gt;Protocolo de Transferencia de Hyper-Texto&lt;/strong&gt; (&lt;strong&gt;H&lt;/strong&gt;yper &lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotocol) es un estándar definido en el &lt;a href=&quot;https://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt; que permite la comunicación entre dos computadoras a nivel de aplicación, es decir, a nivel de software y con contenido relacionado a lo que tu aplicación de red está haciendo.&lt;/p&gt;

&lt;p&gt;El que sea un protocolo a nivel de aplicación también implica que necesita otros protocolos debajo de él para encargarse de otras partes del proceso de comunicación, como la conexión física, la conexión de software, el transporte de datos y el enrutamiento de la información.&lt;/p&gt;

&lt;p&gt;HTTP es un protocolo con arquitectura &lt;strong&gt;cliente-servidor&lt;/strong&gt;, en el que un cliente hace &lt;em&gt;peticiones&lt;/em&gt; (requests) al servidor y el servidor contesta con la información solicitada, a lo que nos referimos como &lt;em&gt;respuesta&lt;/em&gt; (response).&lt;/p&gt;

&lt;p&gt;La parte de hyper-texto nacio por la necesidad de transferir información más rica que el texto plano, es decir, con metadatos, links a otra parte de la información u otros documentos. Al agregar imágenes, videos y otro tipo de información multimedia lo estamos convirtiendo en &lt;strong&gt;Hypermedia&lt;/strong&gt;, información relacionada entre sí que no es puro texto.&lt;/p&gt;

&lt;h2 id=&quot;http11&quot;&gt;HTTP/1.1&lt;/h2&gt;

&lt;p&gt;Este es el estándar que la mayoría de nosotros consideraríamos como “HTTP”, ha estado en uso por bastante tiempo. La versión 1.0 fue liberada en 1996, pero en 1997 se liberó la versión 1.1, que es lo que la mayoría de los devs que “crecimos” junto con la web llamaríamos &lt;em&gt;HTTP&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Las limitaciones técnicas de HTTP/1.1 son lo que han hecho que necesitemos un nuevo estándar, ya que la web actual requiere muchas más descargas que cuando se creó. En 2021 se descargan aproximadamente 1.9 MB en promedio por página, pero esto repartido en múltiples archivos HTML, CSS, JavaScript e imágenes (74 en promedio). Puedes ver más información sobre el tamaño de las páginas web aquí: &lt;a href=&quot;https://httparchive.org/reports/page-weight&quot;&gt;HTTP Archive - Page Weight&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HTTP 1.1 solamente permite descargar un archivo a la vez, por lo que los navegadores tienen que abrir múltiples conexiones a un mismo servidor, limitadas por los recursos de la computadora. Esto crea un cuello de botella que puede hacer que la experiencia en web no sea óptima.&lt;/p&gt;

&lt;p&gt;Por eso llegó HTTP/2.&lt;/p&gt;
&lt;h2 id=&quot;http2&quot;&gt;HTTP/2&lt;/h2&gt;

&lt;p&gt;En 2015 por fin llegó una especificación más adecuada para la web moderna que HTTP/1.1: &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc7540&quot;&gt;HTTP/2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;HTTP/2 se centra en la &lt;em&gt;multiplexación de conexiones&lt;/em&gt;, es decir, permite mantener varias “conversaciones” con el servidor al mismo tiempo en la misma conexión. Esto permite la descarga de múltiples archivos simultáneamente sin tener que consumir tantos recursos como en HTTP/1.1.&lt;/p&gt;

&lt;p&gt;El problema con HTTP/2 es que sigue funcionando sobre TCP, que no permite la multiplexación de conexiones, así al intentar la descarga de archivos paralelamente se pueden producir cuellos de botella ya que si se presentan problemas de descarga con un archivo, hay que esperar hasta que llegue el paquete que corrija el error, pudiendo este tardar mucho tiempo por estar en la misma conexión en la que se están descargando otros archivos.&lt;/p&gt;

&lt;p&gt;Esto último causa que HTTP/2 sea insuficiente para las necesidades actuales, e incluso más lento que HTTP/1.1 en muchos casos de uso de la vida real: cuando las conexiones son poco estables. HTTP/2 fue bastante promovido por Google por un tiempo, pero ahora ha sido reemplazado por HTTP/3, que promete ser mucho mejor.&lt;/p&gt;

&lt;h2 id=&quot;http3&quot;&gt;HTTP/3&lt;/h2&gt;

&lt;p&gt;El último borrador del estándar fue publicado en &lt;a href=&quot;https://quicwg.org/base-drafts/draft-ietf-quic-http.html#name-delegation-to-quic&quot;&gt;Mayo de 2021&lt;/a&gt;, o sea que es muy, muy nuevo, todavía no está en uso ampliamente y el estándar todavía no es el final.&lt;/p&gt;

&lt;p&gt;HTTP/3 es básicamente las mejoras propuestas por HTTP/2 sobre una nueva capa de transporte que no es TCP: &lt;a href=&quot;https://quicwg.org/&quot;&gt;QUIC&lt;/a&gt;. QUIC está basado en UDP, &lt;strong&gt;pero establece la forma de crear canales con control de flujo, cifrado y multiplexación&lt;/strong&gt; para poder servir mejor a la web moderna.&lt;/p&gt;

&lt;p&gt;QUIC permite &lt;a href=&quot;https://www.rfc-editor.org/rfc/rfc9000.html&quot;&gt;usar TLS&lt;/a&gt; para establecer los parámetros de cifrado e incluso permite adelantar el intercambio de información antes de negociar completamente los parámetros de cifrado, haciendo un poco más débil el cifrado pero incrementando la velocidad de descarga.&lt;/p&gt;

&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;

&lt;p&gt;HTTP/3 es mucho mucho más rápido que HTTP/1.1 y mucho más &lt;em&gt;confiable y rápido&lt;/em&gt; que HTTP/2. En el artículo &lt;a href=&quot;https://requestmetrics.com/web-performance/http3-is-fast&quot;&gt;HTTP/3 is Fast&lt;/a&gt; podrás encontrar una comparación del comportamiento de las tres versiones variando diferentes factores, como la confiabilidad y distancia de la conexión.&lt;/p&gt;

&lt;h2 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h2&gt;

&lt;p&gt;Mantenernos actualizados con respecto a las nuevas tecnologías es muy importante para ofrecerles lo mejor a los usuarios de nuestro software, sean desarrolladores o usuarios finales. Si quieres empezar a usar HTTP/3 échale un ojo a tus servidores HTTP, por ejemplo &lt;a href=&quot;https://www.nginx.com/blog/our-roadmap-quic-http-3-support-nginx/&quot;&gt;NGINX ya tiene planes para soportarlo completamente&lt;/a&gt;, &lt;a href=&quot;https://doc.traefik.io/traefik/master/routing/entrypoints/#http3&quot;&gt;Traefik ya lo soporta de manera experimental&lt;/a&gt;, pero parece que Apache &lt;a href=&quot;https://www.reddit.com/r/apache/comments/o6a86x/why_is_apache_failing_to_implement_quic_http3/&quot;&gt;no lo hará por ahora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;También si usas algún servicio de servidores administrados AWS, GCP, Azure, DigitalOcean o similar, revisa su documentación para verificar si puedes activarlo. También debes tener en cuenta que no todos los navegadores lo soportan, pero los que lo hagan se beneficiarán enormemente de que lo actives. Puedes revisar la lista de compatibilidad constantemente aquí: &lt;a href=&quot;https://caniuse.com/http3&quot;&gt;Can I Use HTTP/3?&lt;/a&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="HTTP" /><category term="web" /><category term="network" /><summary type="html">HTTP es el estándar que permite que internet exista como hoy lo conocemos, hablemos de sus avances y lo que puede ofrecerte la última versión: HTTP/3.</summary></entry><entry><title type="html">Tipos de algoritmos criptográficos: cifrados de flujo</title><link href="https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptograficos-cifrados-de-flujo.html" rel="alternate" type="text/html" title="Tipos de algoritmos criptográficos: cifrados de flujo" /><published>2021-12-12T00:00:00-06:00</published><updated>2021-12-12T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptograficos-cifrados-de-flujo</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptograficos-cifrados-de-flujo.html">&lt;p&gt;Ya hablamos de &lt;a href=&quot;/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html&quot;&gt;lo que es la criptografía&lt;/a&gt; y del tipo de cifrado más fuerte y seguro que existe en la criptografía: &lt;a href=&quot;/2020/12/03/tipos-de-algoritmos-criptograficos.html&quot;&gt;los cifrados de bloque&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ahora hablemos de cómo puedes transformar cadenas de texto plano de tamaño indeterminado en cadenas de texto cifradas del mismo tamaño. Esto se logra con los cifrados de &lt;em&gt;flujo&lt;/em&gt; o &lt;strong&gt;stream ciphers&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;definición-de-cifrado-de-flujo&quot;&gt;Definición de cifrado de flujo&lt;/h2&gt;

&lt;p&gt;La mejor manera de entenderlos es en &lt;em&gt;contraste&lt;/em&gt; con los cifrados de bloque: mientras los cifrados de bloque toman pedazos de contenido de tamaño fijo y los cifran, aplicando diferentes técnicas para abarcar todo el contenido, los cifrados de flujo toman &lt;strong&gt;contenido de tamaño arbitrario y lo cifran&lt;/strong&gt;, bit por bit, devolviéndote un texto cifrado del mismo tamaño.&lt;/p&gt;

&lt;p&gt;Son muy útiles cuando no sabes el tamaño del contenido que vas a cifrar o cuando van ir llegando de manera continua sin que sepas exactamente cuánto y cada cuando, justamente como un &lt;strong&gt;flujo de información&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Los cifrados de flujo se consideraban “cifrados de hardware” porque eran más ligeros que los de bloque y se podían implementar en menos espacio en un chip, pero ahora tanto los cifrados de bloque como los de flujo son adecuados para implementarse en hardware.&lt;/p&gt;

&lt;h2 id=&quot;funcionamiento&quot;&gt;Funcionamiento&lt;/h2&gt;

&lt;p&gt;Un cifrado de flujo trabaja generando una cadena de bits pseudo-aleatorios que después combina con el contenido que va a cifrar mediante la operación &lt;strong&gt;XOR&lt;/strong&gt;, también conocida como &lt;strong&gt;suma módulo 2&lt;/strong&gt;. Para descifrar un texto cifrado, algoritmo genera los mismos bits pseudo-aleatorios y los vuelve a combinar, dejando así solamente el texto claro. A esta cadena de bits pseudo-aleatoria se le conoce como el &lt;em&gt;keystream&lt;/em&gt; o &lt;em&gt;cadena de bits de clave&lt;/em&gt;. En el video &lt;a href=&quot;https://youtu.be/74MYHpGzRR8&quot;&gt;“XOR de tamaño fijo | Cryptopals Crypto Challenges”&lt;/a&gt; explicamos por qué el XOR es una operación perfecta para usarse en criptografía y por qué en algunos recursos se la llama “suma módulo 2”.&lt;/p&gt;

&lt;p&gt;La parte más importante es entonces el generador del &lt;em&gt;keystream&lt;/em&gt;, y que sea capaz de volver a generar los mismos bits pseudo-aleatorios para descifrar.&lt;/p&gt;

&lt;p&gt;Un cifrado de flujo normalmente utiliza una llave y un &lt;strong&gt;nonce&lt;/strong&gt;, un número usado una única vez con esa llave.&lt;/p&gt;

&lt;p&gt;A muy alto nivel, los cifrados de flujo pueden trabajar de dos formas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Mediante mantener un estado secreto&lt;/strong&gt;. Después de haber sido inicializados con una llave y un nonce, el algoritmo mantiene un estado interno que se va actualizando en cada nueva llamada.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mediante un contador&lt;/strong&gt;. Este tipo de algoritmos recibe a parte de la llave y el nonce, un contador que se incrementa en cada llamada, de esta manera no es necesario mantener un estado interno secreto.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ejemplos-de-cifrados-de-flujo&quot;&gt;Ejemplos de cifrados de flujo&lt;/h2&gt;

&lt;p&gt;Veamos algunos ejemplos de cifrados de flujo, sus características y sus usos, así como qué tan seguros son.&lt;/p&gt;

&lt;h3 id=&quot;rc4&quot;&gt;RC4&lt;/h3&gt;

&lt;p&gt;Es el cifrado de software que se usaba para la comunicación entre los routers WI-FI que usaban WEP y tus dispositivos. También se usaba en las comunicaciones TLS. Fue diseñado por el mismo inventor de MD5, &lt;a href=&quot;https://people.csail.mit.edu/rivest/&quot;&gt;Ron Rivest&lt;/a&gt;. Trivia: RC significaba originalmente: “&lt;strong&gt;R&lt;/strong&gt;on’s &lt;strong&gt;C&lt;/strong&gt;ode”. Se conocen ataques contra el cifrado y sobre todo sobre sus implementaciones, pero se sigue usando, así que ten mucho cuidado cuando los dispositivos que usas te ofrezcan configurarlo (como en el caso de los routers con “seguridad” WEP).&lt;/p&gt;

&lt;h3 id=&quot;a51&quot;&gt;A5/1&lt;/h3&gt;

&lt;p&gt;Fue el cifrado de flujo de hardware de que se usaba para cifrar las comunicaciones inalámbricas 2G. Se encontraron vulnerabilidades en él, al principio de la década de los 2000 y ahora se puede descifrar completamente.&lt;/p&gt;

&lt;h2 id=&quot;grain-128a&quot;&gt;Grain-128a&lt;/h2&gt;

&lt;p&gt;Es uno de los cifrados de flujo recomendados por la &lt;a href=&quot;http://www.ecrypt.eu.org/stream/project.html&quot;&gt;´EAM competition&lt;/a&gt;,
usa una llave 128 bits y un nonce de 96 bits. Está pensado para ser implementado en hardware.&lt;/p&gt;

&lt;p&gt;Es seguro todavía y usado en sistemas de hardware de bajo presupuesto que requieran un cifrado ligero.&lt;/p&gt;
&lt;h3 id=&quot;salsa20&quot;&gt;Salsa20&lt;/h3&gt;

&lt;p&gt;Es un cifrado de flujo, orientado a software que también fue recomendado por la ´EAM competition. Tiene una implementación sencilla, lo que lo ha hecho popular. Usa una llave, un nonce y un contador para generar el flujo de cifrado.&lt;/p&gt;

&lt;p&gt;Aplica una serie de transformaciones en “rounds” y tiene tres variaciones, dependiendo del nivel de seguridad necesario y la velocidad que deseemos: Salsa20 (20 rounds), Salsa20/12 (12 rounds), Salsa20/8 (8 rounds), siendo el de 8 rounds el que menos seguridad  ofrece. Hay un ataque teórico contra Salsa20/8 que reduce su seguridad a 2^251 operaciones, todavía imposible de llevar a la práctica.&lt;/p&gt;

&lt;h3 id=&quot;aes-ctr&quot;&gt;AES-CTR&lt;/h3&gt;

&lt;p&gt;Este es un cifrado de bloque disfrazado de cifrado de flujo, como diría JP Aumasson, el autor de “Serious Cryptography”. Es el cifrado AES usado en &lt;strong&gt;Counter Mode&lt;/strong&gt; o &lt;strong&gt;modo contador&lt;/strong&gt;, que ya explicamos en el &lt;a href=&quot;/2020/12/03/tipos-de-algoritmos-criptograficos.html&quot;&gt;artículo sobre los cifrados de bloque y sus modos de operación&lt;/a&gt;. Cualquier cifrado de bloque que pueda ser usado en modo &lt;strong&gt;counter&lt;/strong&gt; se comportará como un cifrado de flujo.&lt;/p&gt;

&lt;p&gt;La desventaja de esto es que normalmente queremos que los cifrados de flujo sean ligeros y rápidos y la velocidad de esta implementación dependerá en gran medida del cifrado que se use.&lt;/p&gt;

&lt;h2 id=&quot;evitando-errores&quot;&gt;Evitando errores&lt;/h2&gt;

&lt;p&gt;Si estás usando un cifrado de flujo, &lt;strong&gt;debes evitar en todo momento re-usar el nonce&lt;/strong&gt;, recuerda que la única razón de existencia del &lt;em&gt;nonce&lt;/em&gt; es ser usado una única vez con la misma llave. Esta es la forma más fácil de usar mal los cifrados de flujo, y elimina completamente la seguridad teórica que puedan ofrecer.&lt;/p&gt;

&lt;h2 id=&quot;conclusión-y-aplicaciones&quot;&gt;Conclusión y aplicaciones&lt;/h2&gt;

&lt;p&gt;Los cifrados de flujo actualmente son seguros (Salsa20, Grain-128a y  AES-CTR) y los puedes usar con confianza siempre que requieras cifrar datos de longitud desconocida o que llega (o se va) con un flujo de información.&lt;/p&gt;

&lt;p&gt;Evita reutilizar el Nonce, el counter y elige una llave segura, lo más aleatoria posible y estarás listo para usarlos en cualquier desarrollo.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="cifrado" /><category term="cypher" /><category term="flujo" /><category term="aes" /><summary type="html">Ya hemos hablado en este blog sobre qué es la criptografía, los cifrados de bloque y ahora ha llegado la hora de hablar de cifrados de flujo. Veamos qué son y para qué sirven.</summary></entry><entry><title type="html">Criptografía VS computación cuántica</title><link href="https://blog.thedojo.mx/2021/12/11/criptografia-vs-computacion-cuantica.html" rel="alternate" type="text/html" title="Criptografía VS computación cuántica" /><published>2021-12-11T00:00:00-06:00</published><updated>2021-12-11T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/11/criptografia-vs-computacion-cuantica</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/11/criptografia-vs-computacion-cuantica.html">&lt;blockquote&gt;
  &lt;p&gt;“If you are not completely confused by quantum mechanics, you do not understand it.” - Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La computación cuántica es una tecnología muy prometedora que lleva &lt;em&gt;décadas&lt;/em&gt; en gestación y cada vez la vemos más cerca. Una de las cosas que más llama la atención es la capacidad de cómputo que las computadoras cuánticas pueden tener, en este artículo aclararemos de qué se trata todo esto y &lt;strong&gt;cómo se relaciona con la criptografía&lt;/strong&gt;, uno de los campos más afectados.&lt;/p&gt;

&lt;p&gt;Si no has escuchado mucho sobre la computación cuántica, este video de una presentación dada por &lt;a href=&quot;https://www.xataka.com/investigacion/algun-dia-se-construye-ordenador-cuantico-plenamente-funcional-sera-gracias-parte-a-este-cientifico-espanol-hablamos-ignacio-cirac&quot;&gt;Ignacio Cirac&lt;/a&gt; nos da una introducción a lo que promete y las bases de funcionamiento.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WJ3r6btgzBM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;Ahora veamos a más detalle cómo &lt;strong&gt;computa una máquina cuántica&lt;/strong&gt; y entendamos por qué no &lt;em&gt;toda la criptografía está perdida&lt;/em&gt;, aunque tuviéramos una computadora cuántica funcional hoy mismo.&lt;/p&gt;

&lt;h2 id=&quot;principios-de-funcionamiento-de-una-computadora-cuántica&quot;&gt;Principios de funcionamiento de una computadora cuántica&lt;/h2&gt;

&lt;p&gt;Hablemos un poco de los &lt;em&gt;principios físicos y matemáticos&lt;/em&gt; que hacen especial a una computadora cuántica.&lt;/p&gt;

&lt;h3 id=&quot;superposición-cuántica&quot;&gt;Superposición cuántica&lt;/h3&gt;

&lt;p&gt;Una computadora cuántica está basada en el &lt;a href=&quot;https://es.wikipedia.org/wiki/Superposici%C3%B3n_cu%C3%A1ntica&quot;&gt;principio de superposición cuántica&lt;/a&gt;, que establece, en palabras comunes, que una partícula tiene magnitudes físicas (como la posición o el momento) indeterminadas hasta que se realiza una medición sobre ellas. La partícula se comporta como si tuviera todos los estados posibles, algunos con más probabilidad que otros. Una forma fácil en la que se ha mencionado este principio es que &lt;strong&gt;“puede estar en dos lugares a la vez”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lo que se escapa de nuestra comprensión común de la física es que esto de tener múltiples estados &lt;strong&gt;desaparece cuando lo observamos&lt;/strong&gt;, se dice que su &lt;em&gt;función de onda&lt;/em&gt; colapsa, lo que significa que la partícula “se decide” por uno de los múltiples estados en los que podía estar. La función de onda es la ecuación que describe todas las “probabilidades” de cada estado.&lt;/p&gt;

&lt;p&gt;El ejercicio mental del &lt;a href=&quot;https://www.youtube.com/watch?v=lzxKZx7we4s&quot;&gt;Gato de Schrödinger&lt;/a&gt; te puede ayudar a imaginarlo, pero en &lt;a href=&quot;https://www.youtube.com/watch?v=9JlOmEEyTOU&quot;&gt;este video puedes de Quantum Fracture&lt;/a&gt; te ayudará a profundizar más en la complejidad del tema y como no es tan sencillo como “puede estar en dos estados a la vez”, sino en un número &lt;em&gt;infinito de estados&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Este artículo te explicará el principio de superposición cuántica sin matemáticas avanzadas: &lt;a href=&quot;https://www.elclaustro.edu.mx/agnosia/index.php/component/k2/item/427-superposicion-una-aproximacion-sin-matematicas-avanzadas-a-la-motivacion-de-la-mecanica-cuantica&quot;&gt;Superposición, una aproximación sin matemáticas avanzadas a la motivación de la mecánica cuántica&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resumen:&lt;/strong&gt; Una particula como un átomo, un electron o un fotón, puede poseer múltiples estados físicos a la vez, con diferentes combinaciones entre todos sus posibles estados, dando lugar a &lt;em&gt;una infinidad de estados posibles&lt;/em&gt;. Las probabilidades de cada estado están contenidas en su &lt;em&gt;función de onda&lt;/em&gt;, y cuando medimos (miramos) una partícula se define en un estado de todos los posibles.&lt;/p&gt;

&lt;h3 id=&quot;amplitud-de-onda-y-qubits&quot;&gt;Amplitud de onda y Qubits&lt;/h3&gt;

&lt;p&gt;Cada uno de los estados posibles de una partícula y sus probabilidades están representados en lo que se llama su &lt;strong&gt;amplitud&lt;/strong&gt;. En el caso de la computación cuántica, nos interesa si una partícula &lt;em&gt;representa un cero o un uno&lt;/em&gt;. Por esto, un &lt;strong&gt;Qubit&lt;/strong&gt; (un bit cuántico) está representado por una amplitud de onda, que se puede entender parcialmente como la probabilidad de que ese bit sea cero o uno. Un qubit está caracterizado por dos amplitudes: una para el estado &lt;strong&gt;cero&lt;/strong&gt; y otra para el estado &lt;strong&gt;uno&lt;/strong&gt;. Estas amplitudes son números complejos, números que tienen un parte real y una parte imaginaria, como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 + 3i&lt;/code&gt;, por ejemplo.&lt;/p&gt;

&lt;p&gt;Una &lt;em&gt;palabra&lt;/em&gt; o conjunto de qubits está representado por &lt;strong&gt;2^n amplitudes&lt;/strong&gt;, donde n es el número de qubits. Así que en una palabra de 8 bits, tenemos 256 amplitudes de onda. Y aquí está el secreto de por qué la computación cuántica puede ser tan poderosa: &lt;strong&gt;con sólo &lt;em&gt;n&lt;/em&gt; objetos (qubits), puedes almacenar y procesar 2^n números complejos, mientras que en una computadora clásica necesitarías 2^n espacios de memoria&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;compuertas-cuánticas&quot;&gt;Compuertas cuánticas&lt;/h3&gt;

&lt;p&gt;Una compuerta cuántica es el equivalente cuántico a la compuertas lógicas clásicas. Son una serie de transformaciones que se le aplica a las amplitudes que caracterizan nuestro conjunto de qubits para obtener los resultados deseados.&lt;/p&gt;

&lt;p&gt;Después de aplicarle un serie de compuertas cuánticas a los qubits, lo que se conoce como un &lt;strong&gt;circuito cuántico&lt;/strong&gt;, se realiza una medición sobre uno o varios qubits para saber el resultado.&lt;/p&gt;

&lt;p&gt;Las compuertas se comportan como multiplicaciones de matrices y vectores de gran tamaño, que serían imposibles de hacer para computadoras comunes, pero en la computadora cuántica se realizan mediante manipulaciones físicas que equivalen a estas transformaciones de matrices gigantescas.&lt;/p&gt;

&lt;p&gt;No vamos a entrar en profundidad en este tema, pero si quieres leer más, &lt;a href=&quot;https://josueacevedo.medium.com/computaci%C3%B3n-cu%C3%A1ntica-compuertas-o-circuitos-cu%C3%A1nticos-27910f5338c8&quot;&gt;este artículo te puede servir&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;aceleración-cuántica&quot;&gt;Aceleración cuántica&lt;/h3&gt;

&lt;p&gt;Gracias a las cualidades de las computadoras cuánticas antes descritas, es posible resolver algunos problemas de la computación mediante nuevos algoritmos cuánticos que reducen el tiempo esperado de ejecución de O(2^n) a O(n^k), siendo &lt;em&gt;k&lt;/em&gt; una constante. Es decir: &lt;strong&gt;aceleran la resolución de algunos problemas exponencialmente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ahora que tenemos los conceptos más básicos de cómo funciona la computación cuántica y por qué puede ejecutar muchos más cálculos, hablemos de de algunas amenazas que presenta contra la criptografía.&lt;/p&gt;

&lt;h2 id=&quot;el-algoritmo-de-shor&quot;&gt;El algoritmo de Shor&lt;/h2&gt;

&lt;p&gt;Uno de los problemas en los que está basada la criptografía asimétrica actual, es el problema de la factorización de números primos, es decir, encontrar los componentes primos de un número entero. &lt;em&gt;Creemos&lt;/em&gt; que encontrar los factores de un número lo suficientemente grande es casi imposible para nuestras computadoras clásicas actuales, incluso las más poderosas.&lt;/p&gt;

&lt;p&gt;El &lt;strong&gt;algoritmo de Shor&lt;/strong&gt;, propuesto en 1995, traslada el problema de la factorización a otro problema difícil de las ciencias de la computación: encontrar el periodo de una función exponencial. Aquí puedes encontrar una explicación más a profundidad de esta transformación: &lt;a href=&quot;https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm#period-finding&quot;&gt;Period Finding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lo importante de esta transformación es lo siguiente: &lt;strong&gt;para una computadora cuántica, el problema de encontrar el periodo de una función exponencial no es tan difícil&lt;/strong&gt;. Una computadora cuántica resuelve este problema con una complejidad de O(log n) aproximadamente, ya que existen circuitos cuánticos que permiten encontrar el periodo de la función exponencial.&lt;/p&gt;

&lt;p&gt;Esto significa que cuando una computadora cuántica tenga los suficientes qubits para representar los números que se usan en la generación de llaves asimétricas, la mayor parte de la criptografía asimétrica actual dejará de ser útil.&lt;/p&gt;

&lt;h2 id=&quot;el-algoritmo-de-grover&quot;&gt;El algoritmo de Grover&lt;/h2&gt;

&lt;p&gt;Buscar un elemento que cumpla cierta condición en un conjunto es uno de los problemas que nos ayudarían a romper la criptografía actual. Por ejemplo, imagina que tienes un texto cifrado con AES con una llave de 128 bits. Si quieres romper la seguridad, vas a tener que probar 2^128 llaves en promedio para encontrar la correcta.&lt;/p&gt;

&lt;p&gt;El &lt;a href=&quot;&quot;&gt;algoritmo de Grover&lt;/a&gt; permite acelerar esta operación de manera cuadrática, es decir, te tomaría en promedio la raíz cuadrada de &lt;em&gt;n&lt;/em&gt; encontrar el elemento que cumpla con la condición. En el caso del ejemplo anterior te tomaría en promedio 2^(128/2) = 2^64 operaciones.&lt;/p&gt;

&lt;p&gt;Lo mismo podría pasar para todos cifrados simétricos (que usan la misma llave para cifrar y descifrar) y hasheados, el ataque consistiría en un estilo de fuerza bruta más inteligente o &lt;em&gt;cuadráticamente más rápida&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Sin embargo, como podrás notar, esto no es un problema tan grande, ya que para mantener el mismo nivel de seguridad que tenemos actualmente &lt;strong&gt;bastaría con duplicar el tamaño de las llaves usadas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esto seguirá siendo así mientras no se descubran debilidades en los algoritmos de cifrado simétricos o en las funciones de comprensión de los hashes que usamos.&lt;/p&gt;

&lt;h2 id=&quot;criptografía-post-quantum&quot;&gt;Criptografía post-quantum&lt;/h2&gt;

&lt;p&gt;Debido a las amenazas que presenta la computación cuántica a la criptografía de llave pública gracias al algoritmo de Shor, los criptográfos están manos a la obra diseñando nuevos algoritmos basados en otros principios aún no amenazados por la computación cuántica.&lt;/p&gt;

&lt;p&gt;Algunos ejemplos que se ven prometedores son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Entramados (Lattice Cryptography)&lt;/li&gt;
  &lt;li&gt;Códigos de corrección de errores (Error-correcting codes)&lt;/li&gt;
  &lt;li&gt;Multivariada (Multivariate cryptography)&lt;/li&gt;
  &lt;li&gt;Hashes (Hash-based cryptography)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La explicación de cada uno de estos posibles caminos para la criptografía la dejaremos para otro artículo, déjanos un comentario si te interesa alguna en especial.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;La criptografía cuántica acelera la capacidad de cómputo, pero además es fundamentalmente &lt;em&gt;diferente&lt;/em&gt;  de la computación clásica, lo que permite resolver problemas con otros métodos imposibles de alcanzar con la computación actual.&lt;/p&gt;

&lt;p&gt;Pero no toda la &lt;strong&gt;criptografía actual esta destinada a perderse con el avance de las computadas cuánticas&lt;/strong&gt;, solamente la criptografía asimétrica y toda aquella basada en la factorización de números primos.&lt;/p&gt;

&lt;p&gt;Ciertamente, la seguridad de la criptografía simétrica se ve menguada por el poder de cómputo y los algoritmos cuánticos, pero no lo suficiente para darla por perdida, sino que bastará con fortalecerla con el mismo poder de cómputo cuántico y &lt;strong&gt;aumentando el tamaño de las llaves&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente, los investigadores ya están trabajando en formas para sustituir lo que se va a romper.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="criptografía" /><category term="quantum" /><category term="matemáticas" /><summary type="html">Se ha escuchado mucho sobre que la criptografía está completamente acabada si la computación cuántica tiene éxito. Entendamos si esto es verdad.</summary></entry><entry><title type="html">La regla del ‘Cero, Uno o Infinito’</title><link href="https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito.html" rel="alternate" type="text/html" title="La regla del ‘Cero, Uno o Infinito’" /><published>2021-12-10T00:00:00-06:00</published><updated>2021-12-10T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito.html">&lt;p&gt;La regla del ‘Cero, Uno o Infinito’ es una guía para diseñar software que sea más fácil de usar, tanto para otros desarrolladores como para los usuarios finales. La regla en inglés es:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Allow none of foo, one of foo, or any number of foo.” - Willem van der Poel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta regla establece que respecto a la existencia de elementos, deberías permitir que no exista ninguno, solamente uno o un número arbitrario (potencialmente infinito, mientras las limitantes ) de estos elementos. La idea &lt;strong&gt;principal es que no existan límites arbitrarios impuestos por alguna idea sin explicación&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Algunos ejemplos de esta regla, puesta en práctica:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Una estructura de datos no limita arbitrariamente el grado de anidado que puede tener&lt;/li&gt;
  &lt;li&gt;No existe un normalmente un límite impuesto de recursividad (más allá del dado por el tamaño del &lt;em&gt;stack&lt;/em&gt; de ejecución)&lt;/li&gt;
  &lt;li&gt;En las bases de datos relacionales existen tres cardinalidades: 1-1 (permitir una), 1-N (un padre puede tener muchos hijos), N-N (varios artículos pueden pertenecer a la misma categoría y un artículo puede tener varias categorías)&lt;/li&gt;
  &lt;li&gt;Los caracteres especiales básicos de las expresiones regulares son: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; (un carácter cualquiera), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; (uno o más caracteres), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; (cualquier número de caracteres).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y esta regla parece que también existe en la naturaleza:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La procreación es ilimitada mientras los recursos sean suficientes (puedes tener N hijos)&lt;/li&gt;
  &lt;li&gt;Tus ancestros directos son uno de cada género (tienes un padre y una madre)&lt;/li&gt;
  &lt;li&gt;Tus ancestros indirectos pueden ser infinitos (tu linea genealógica y los hijos de tus hijos pueden ser infinitos)&lt;/li&gt;
  &lt;li&gt;Cuando tienes un límite de uno y lo abres para dos, ¿entonces por qué no abrirlo para tres? Si aplicamos esta regla recursivamente llegamos infinito&lt;/li&gt;
  &lt;li&gt;En un consejo de administración hay una (1) persona encargada con acceso a la información de un sistema o un equipo (N - infinito)&lt;/li&gt;
  &lt;li&gt;Como conjunto, un vehículo puede transportar N pasajeros, luego limitado por el caso de negocio o modelo específico. Cuando esta lleno puede transportar cero personas más&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora veamos algunos ejemplos en los que puedes poner límites arbitrarios sin darte cuenta.&lt;/p&gt;

&lt;h2 id=&quot;modelando-bases-da-datos&quot;&gt;Modelando bases da datos&lt;/h2&gt;

&lt;p&gt;En modelados de bases de datos. Imagínate que tienes que modelar una tipo de usuario en el que te dicen que tienes que guardar diez propiedades arbitrarias. Podrías cometer el error de crear específicamente diez campos para guardar estas propiedades, lo cuál crearía un límite arbitrario en la capacidad de guardar estas propiedades. La mejor forma de modelarlo sería con una relación 1-N, ya que te da la flexibilidad de aumentar o reducir este límite mediante lógica específica para el caso de uso.&lt;/p&gt;

&lt;p&gt;Lo mismo podrías pensar en cuanto a asignación de categorías, tags, comentarios, etc.&lt;/p&gt;

&lt;h2 id=&quot;modelando-software&quot;&gt;Modelando software&lt;/h2&gt;

&lt;p&gt;Veamos algunos ejemplos que te puedes encontrar creando software.&lt;/p&gt;

&lt;h3 id=&quot;ctrl-z&quot;&gt;CTRL-Z&lt;/h3&gt;

&lt;p&gt;Imagina que tienes que diseñar un editor de texto y estás pensando en agregar la funcionalidad de “deshacer”. Primeramente piensas que es buena idea solamente permitir que se deshaga la acción inmediata anterior, así que lo implementas como una variable que se está sustituyendo constantemente.&lt;/p&gt;

&lt;p&gt;Pero ahora quieres permitir que se deshagan más acciones. ¿Cuál sería tu siguiente límite? El límite natural tendría que ser “infinito” o “hasta el principio del tiempo”, ya que cualquier otro límite sería arbitrario y difícil de comprender o justificar. Así que tu implementación cambia de una variable a una pila de acciones que va manteniendo tantas acciones como sea posible.&lt;/p&gt;

&lt;h3 id=&quot;modelando-una-conversaciǿn&quot;&gt;Modelando una conversaciǿn&lt;/h3&gt;

&lt;p&gt;Ahora estamos creando un modelo para almacenar y correr una conversación de un chatbot con un usuario. Cada mensaje puede comportarse de tres maneras: darle la oportunidad al usuario de contestar con una respuesta fija, llevar a otro mensaje sin darle oportunidad al usuario de contestar, o terminar la conversación.&lt;/p&gt;

&lt;p&gt;Como puedes observar, esto es un caso perfecto de la regla del ‘Cero, Uno o Infinito’. Un mensaje puede tener cero mensajes siguientes, por lo que termina la conversación. Puede tener un solo mensaje siguiente, que es cuando continuamos sin esperar respuesta. O puede tener N mensajes siguientes, uno correspondiente a cada respuesta posible de parte del usuario. Imponer un número limitado de respuestas posibles dentro de tu sistema no una buen idea, ya que limita sin razón alguna la flexibilidad de nuestro sistema.&lt;/p&gt;

&lt;h2 id=&quot;críticas-a-la-regla-del-cero-uno-o-infinito&quot;&gt;Críticas a la regla del ‘Cero, Uno o Infinito’&lt;/h2&gt;

&lt;p&gt;Una de las principales críticas a esta regla es que &lt;strong&gt;está dejando fuera el dos&lt;/strong&gt;, que también es un número muy especial para ciertos casos: muchas cosas en la naturaleza vienen en pares. Los booleanos, prendido/apagado, arriba/abajo, izquierda/derecha.&lt;/p&gt;

&lt;p&gt;En mi opinión es un número que también se debe considerar, pero solo en caso de que los dos elementos carguen un significado como en los ejemplos anteriores, normalmente son cosas opuestas que se relacionan con un centro, pero incluso, si no se considera un número especial, podemos modelar estos casos siguiendo la regla del ‘Cero, Uno o Infinito’: si tomamos como punto de referencia uno de estos valores, el otro es nuestro &lt;em&gt;“uno”&lt;/em&gt; que estamos permitiendo.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Aprender principios de diseño de software te ayudará a crear mejores sistemas que puedan ser usados más fácilmente tanto por otros desarrolladores como por usuario. Espero que este pequeño ejemplo te lleve a aprender otros principios que puedas aplicar en tu trabajo diario. Déjanos un comentario si quieres que lo platiquemos más profundamente o con otros ejemplos.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="zero-one-infinity" /><category term="design" /><category term="reglas" /><summary type="html">A veces necesitamos reglas que nos ayuden a desarrollar mejor software. La regal de 'Cero, Uno o Infinito' es una guía para que creemos software más usable.</summary></entry><entry><title type="html">Cómo convertirte en un mago programando</title><link href="https://blog.thedojo.mx/2021/12/09/como-convertirte-en-un-mago-programando.html" rel="alternate" type="text/html" title="Cómo convertirte en un mago programando" /><published>2021-12-09T00:00:00-06:00</published><updated>2021-12-09T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/09/como-convertirte-en-un-mago-programando</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/09/como-convertirte-en-un-mago-programando.html">&lt;p&gt;Todos queremos crecer en nuestra carrera de programación y para lograrlo necesitamos adquirir hábitos y técnicas que nos ayudarán a no quedarnos estancados. En este artículo hablaremos de las tres técnicas que me parecen más importantes del &lt;a href=&quot;https://www.youtube.com/watch?v=drPMyDyQG8M&quot;&gt;wizardzine&lt;/a&gt; gratuito &lt;a href=&quot;https://wizardzines.com/zines/wizard/&quot;&gt;“So you want to be a wizard”&lt;/a&gt; de &lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Espero que estas recomendaciones te dejen reflexionando y que termines con ganas de leer el &lt;em&gt;wizardzine&lt;/em&gt; completo. Los pongo en el orden que personalmente me parecen más impactantes, pero para ti puede ser diferente, por lo que te recomiendo que lo leas y medites por tu cuenta.&lt;/p&gt;

&lt;h2 id=&quot;escribe-un-documento-de-diseño&quot;&gt;Escribe un documento de diseño&lt;/h2&gt;

&lt;p&gt;Una de las cosas más importantes que podemos aprender los desarrolladores es a &lt;strong&gt;diseñar software.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Un documento de diseño es una expresión del diseño de software. Es un escrito que haces &lt;strong&gt;ANTES de empezar&lt;/strong&gt; un desarrollo, en el que detallas varias cosas sobre lo que te estás proponiendo hacer:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El objetivo principal&lt;/li&gt;
  &lt;li&gt;Detalles sobre el problema a resolver&lt;/li&gt;
  &lt;li&gt;El diseño a alto nivel de la solución&lt;/li&gt;
  &lt;li&gt;Las partes del sistema que estás afectando&lt;/li&gt;
  &lt;li&gt;Otras consideraciones que hay que tener sobre esa pieza de software&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Normalmente este diseño y consideraciones iniciales no se mantienen a lo largo del proyecto, pero sirven para empezar con una idea más clara y sin malentendidos. Una de las cosas más importantes que tienes que hacer con un documento de diseño es &lt;strong&gt;la retroalimentación que otros miembros del equipo puedan darte&lt;/strong&gt;. En un artículo futuro de este blog hablaremos más a detalle de esto.&lt;/p&gt;

&lt;p&gt;Pero recuerda que si no tienes práctica y, aunque sea un proyecto o cambio muy pequeño, vale la pena dedicarle un tiempo a &lt;em&gt;pensar&lt;/em&gt; y &lt;em&gt;escribir&lt;/em&gt; sobre lo que planeas hacer.&lt;/p&gt;

&lt;h2 id=&quot;como-adquirir-experiencia-significativa&quot;&gt;Como adquirir experiencia significativa&lt;/h2&gt;

&lt;p&gt;Es cierto que mediante trabajar en algo por un tiempo en algo lograrás adquirir experiencia, pero esta experiencia está limitada a las actividades que más repitas en ese trabajo y a ese entorno. &lt;strong&gt;Por eso no basta con sólo aprender en el trabajo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si quieres tener una experiencia más amplia, algunas prácticas que te pueden servir son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Escoge un área que te interese especialmente y estudiala durante un tiempo razonable. Desarrolla tus habilidades en esa área y luego cambia a otra. Lo importante es que &lt;strong&gt;tu aprendizaje sea activo&lt;/strong&gt;, no solamente teórico o lo que te vaya llegando del trabajo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No pienses que es tarde para aprender&lt;/strong&gt;. Aunque lleves bastante tiempo usando algo, no significa que lo debas saber todo sobre esa tecnología. No pienses: “¿Cómo es que no sabes X cosa sobre Y?”, sino: “Hoy es el día en que aprenderé sobre X y Y”.&lt;/li&gt;
  &lt;li&gt;Aprende los conceptos fundamentales, lo que te servirá para construir sobre eso más conocimiento y habilidades.&lt;/li&gt;
  &lt;li&gt;Haz experimentos. En muchas de las áreas del desarrollo, puedes hacer experimentos que no te cuestan nada y pueden ayudarte a entender más profundamente un tema.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lee Libros&lt;/strong&gt;. Los libros en la mayoría de los casos son un conjunto de conocimientos destilados sobre cierto tema. Leer los capítulos específicos de los temas de tu interés te ayudará a avanzar más rápido.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Haz proyectos difíciles&lt;/strong&gt;. Nada como poner a prueba tus habilidades para ver los hoyos en tu conocimiento como hacer tareas difíciles.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Profundiza&lt;/strong&gt;. Cuando no entiendas algo, busca información más profunda sobre el tema, aprende la historia, las bases y los conceptos más fundamentales. Además puedes acercarte a expertos en el tema a pedirles ayuda para comprender este tema, o recursos que te ayuden a comprenderlo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, recuerda que todo esto toma tiempo, no puedes convertirte en un experto en algo de la noche a la mañana, por lo que debes tener paciencia contigo.&lt;/p&gt;

&lt;h2 id=&quot;lee-código-fuente&quot;&gt;Lee código fuente&lt;/h2&gt;

&lt;p&gt;A veces, los sistemas o herramientas que tenemos que usar no tienen documentación, nadie sabe lo suficiente para ayudarnos o no están disponibles. Es por esto que una de las habilidades más importantes que podemos tener es la de &lt;strong&gt;leer y entender el código fuente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Algunas de las cosas que te pueden ayudar son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Busca exactamente por la parte que necesitas. Puede ser un error, un mensaje o un módulo específico, usa las herramientas de indexación de texto para llegar ahí, no creas que tienes que leer toda la base.&lt;/li&gt;
  &lt;li&gt;Si el código que tienes que leer es pequeño, intenta darle un recorrida rápida para tener una idea general de lo que sucede y dónde sucede.&lt;/li&gt;
  &lt;li&gt;Haz experimentos con el código, cambiando cosas y viendo lo que sucede, usa un debuggers, agrega tests, introduce bugs intencionalmente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, documenta lo que aprendas y encuentres, le puede servir a otros miembros del equipo, de la comunidad o a ti en el futuro. Entender estos sistemas te ayudará aprender de las decisiones de diseño buenas o malas y además te enseñará nuevas técnicas que hubieras tardado más en aprender por otros lados.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Lo que te acercará más a sentirte un mago o maga programando es la &lt;strong&gt;práctica enfocada&lt;/strong&gt;, que puede presentarse de las tres maneras que hablamos aquí, pero hay muchas otras. Recuerda que la constancia es importante, más que la velocidad, pero buscar formas más eficientes de aprender no es malo.&lt;/p&gt;

&lt;p&gt;Si te quedaste con ganas de más consejos de este estilo, descarga &lt;a href=&quot;https://wizardzines.com/zines/wizard/&quot;&gt;“So you want to be a Wizard”&lt;/a&gt; de la página oficial y continúa leyendo, esta vez de manera visual.&lt;/p&gt;

&lt;p&gt;Shameless plug: &lt;a href=&quot;https://www.youtube.com/watch?v=drPMyDyQG8M&quot;&gt;aquí puedes ver nuestra presentación de los wizardzines&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/drPMyDyQG8M&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="aprendizaje" /><category term="preguntas" /><category term="investigación" /><summary type="html">Hablemos sobre las técnicas que Julia Evans recomienda para converirte en un mejor programador(a) y avanzar en tu carrera.</summary></entry><entry><title type="html">Recursos para aprender Criptografía en 2022</title><link href="https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptografia-en-2021.html" rel="alternate" type="text/html" title="Recursos para aprender Criptografía en 2022" /><published>2021-12-08T00:00:00-06:00</published><updated>2021-12-08T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptografia-en-2021</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptografia-en-2021.html">&lt;p&gt;La criptografía es un campo con mucha demanda laboral actualmente porque es importante para diferentes áreas de la informática. En este artículo vamos hablar su importancia y cómo puedes aprenderlo si está dentro de tus intereses.&lt;/p&gt;

&lt;h2 id=&quot;la-importancia-de-la-criptografía&quot;&gt;La importancia de la criptografía&lt;/h2&gt;

&lt;p&gt;En el artículo &lt;a href=&quot;https://blog.thedojo.mx/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html&quot;&gt;¿Qué es la Criptografía?&lt;/a&gt; explicamos que es un conjunto de técnicas y conocimiento que busca &lt;strong&gt;&lt;em&gt;ocultar la información&lt;/em&gt;&lt;/strong&gt;, derivada de las matemáticas y las ciencias de la computación.&lt;/p&gt;

&lt;p&gt;El mundo de la computación necesita mantener secretos en muchas áreas, principalmente en cosas relacionadas como la identificación y autenticación de personas y elementos. Además, la criptografía tiene usos laterales, como la verificación de la autenticidad de la información. Cada día hay más valor en nuestras redes informáticas, por lo que cada vez hay más incentivos para robar la información que protegemos mediante la criptografía.&lt;/p&gt;

&lt;p&gt;En tiempos modernos, debido a lo pesado de procesos de cifrado y hasheado, también se ha estado usando para probar que un elemento de un sistema distribuido hizo muchos cálculos, un concepto llamado &lt;a href=&quot;https://cointelegraph.com/explained/proof-of-work-explained&quot;&gt;prueba de trabajo&lt;/a&gt;, usado en Bitcoin.&lt;/p&gt;

&lt;p&gt;Como resumen: &lt;strong&gt;está aumentando  el número de personas que se requiere&lt;/strong&gt; para trabajar en criptografía. Se requieren personas que diseñen sistemas que usen los esquemas y algoritmos correctamente, criptográfos que diseñen nuevos algoritmos adecuados para nuestra época y las décadas que siguen, resistentes a el avance del hardware y la computación cuántica, y finalmente, personas que implementen correctamente los algoritmos diseñados por los matemáticos y criptográfos tanto en hardware como en software.&lt;/p&gt;

&lt;p&gt;¿Quieres ser tú una de estas personas? ¿O tal vez quieres aprender un poco más solamente para crear software más seguro? Veamos algunos recursos que te pueden ayudar.&lt;/p&gt;

&lt;h2 id=&quot;libros&quot;&gt;Libros&lt;/h2&gt;

&lt;p&gt;Los siguientes libros te enseñarán lo suficiente de criptografía de manera general para que no te confundas con los términos y para tener una idea clara de los puedes y no puedes hacer al usar diferentes esquemas y tipos de algoritmos.&lt;/p&gt;

&lt;h3 id=&quot;the-code-book&quot;&gt;The Code Book&lt;/h3&gt;

&lt;p&gt;Este libro está escrito por un físico que ha escrito varios libros de divulgación. Te cuenta los usos e historia de la criptografía y es una excelente introducción para motivarte a empezar tu camino en criptografía con el mayor interés posible. Puedes ver la presentación del libro aquí: &lt;a href=&quot;https://simonsingh.net/books/the-code-book/&quot;&gt;The Code Book&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;serious-cryptography&quot;&gt;Serious Cryptography&lt;/h3&gt;

&lt;p&gt;Escrito por Jean Philippe Aumasson, un criptógrafo renombrado a nivel mundial e inventor de varios algoritmos de cifrado y hasheado modernos, es libro es una guía para los principiantes de criptografía, te enseña conceptos básicos y avanza hasta contarte de criptografía cuántica. Si no vas a leer o estudiar nada más de criptografía este libro es suficiente para no estar en blanco.&lt;/p&gt;

&lt;p&gt;Tiene un estilo divertido, desenfadado, con una gran cantidad de ejemplos y la profundidad adecuada para que no pierdas el interés. Página oficial: &lt;a href=&quot;https://nostarch.com/seriouscrypto&quot;&gt;Serious Cryptography&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1639196918/crypto_cover-front-final_REV_HM_ceeqzb.png&quot; alt=&quot;Portada de Serious&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction-to-cryptography&quot;&gt;Introduction to Cryptography&lt;/h3&gt;

&lt;p&gt;Es una introducción un poco más formal y académica a la criptografía, con el que reforzarás algunos conceptos si ya sabes de criptografía, pero especialmente bueno en el caso de que no tengas ningún conocimiento. Página oficial: &lt;a href=&quot;https://link.springer.com/book/10.1007/3-540-49244-5&quot;&gt;Introduction to Cryptography en Springer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cryptography-engineering&quot;&gt;Cryptography Engineering&lt;/h3&gt;

&lt;p&gt;Este libro está escrito por un equipo de criptográfos de nivel mundial, con varios algoritmos publicados y todavía en uso. Este libro te explica las bases de la criptografía desde un enfoque un poco más rígido que Serious Cryptography. Está enfocado en las decisiones de diseño detrás de los esquemas criptográficos actuales. Propone un plan de 12 semanas que te puede ayudar a tener estructura al estudiar el libro.
Puedes ver la presentación de uno de los autores en &lt;a href=&quot;https://www.schneier.com/books/cryptography-engineering/&quot;&gt;Cryptography Engineering&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-graduate-course-in-applied-cryptography&quot;&gt;A Graduate Course in Applied Cryptography&lt;/h2&gt;

&lt;p&gt;Este curso es la recopilación del curso de criptografía completo de la universidad de Stanford. En mi opinión es el libro más profundo de todos los mencionados aquí en tres temas: cifrado simétrico, asimétrico y esquemas criptográficos. Tiene explicaciones a alto nivel y las demostraciones matemáticas de por qué es seguro. Puedes leerlo de dos formas: lo lees completo con todo y las demostraciones si ya conoces los conceptos básicos o te saltas las demostraciones y los ejercicios para adquirir los conceptos básicos.&lt;/p&gt;

&lt;p&gt;Es completamente gratuito, lo puedes descargar aquí: &lt;a href=&quot;http://toc.cryptobook.us/&quot;&gt;A Graduate Course in Applied Cryptography&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recursos-interactivos&quot;&gt;Recursos interactivos&lt;/h2&gt;

&lt;p&gt;En esta sección abarcaremos algunos recursos con más involucramiento que te permitirán poner manos a la obra.&lt;/p&gt;
&lt;h3 id=&quot;cryptopals-crypto-challenges&quot;&gt;Cryptopals Crypto Challenges&lt;/h3&gt;

&lt;p&gt;Esta es una colección de ejercicios en los que programarás y atacarás algunos esquemas criptográficos para entenderlos profundamente. Los ejercicios varían bastante en dificultad y debes tener fuertes bases de criptografía (como la provista por los libros sugeridos anteriormente) y de programación para poder realizarlos.&lt;/p&gt;

&lt;p&gt;Puedes verlos aquí: &lt;a href=&quot;https://cryptopals.com/&quot;&gt;the cryptopals crypto challenges&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;cryptohack&quot;&gt;Cryptohack&lt;/h3&gt;

&lt;p&gt;Es una herramienta que te enseñará las bases de la criptografía con ejercicios y retos interactivos. Tiene una comunidad y los incentivos de un juego, que te ayudarán a mantenerte motivado y a aprender más. Pueder visitarla aquí: &lt;a href=&quot;https://cryptohack.org/&quot;&gt;Cryptohack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1639199460/Screen_Shot_2021-12-10_at_23.10.36_xzer7u.png&quot; alt=&quot;Logo de Cryptohack&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cursos-en-video&quot;&gt;Cursos en video&lt;/h1&gt;

&lt;p&gt;En esta sección te recomendaremos buscar en las principales plataformas de cursos masivos online, como EDX y Coursera, ya que existen múltiples cursos impartidos por universidades importantes, con un estilo académico. Puedes probar varios estilos de instructor y elegir el que más te guste. Un curso un poco menos académico y con explicaciones bastante buenas es el &lt;a href=&quot;https://www.udacity.com/course/applied-cryptography--cs387&quot;&gt;Curso de Criptografía Aplicada Gratuito de Udacity&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recursos-en-español&quot;&gt;Recursos en español&lt;/h2&gt;

&lt;p&gt;Finalmente, veamos algunos recursos en español por si sientes que el inglés no lo dominas lo suficiente para meterte a temas complejos como este.&lt;/p&gt;

&lt;h2 id=&quot;curso-de-criptografía-informática-básica-para-principiantes&quot;&gt;Curso de Criptografía Informática Básica para principiantes&lt;/h2&gt;

&lt;p&gt;En este curso introductorio el instructor te enseñará con ejemplos sencillos los conceptos más básicos de la criptografía y algunos ejemplos con Python. Lo puedes ver en YouTube aquí: &lt;a href=&quot;https://www.youtube.com/playlist?list=PLG1hKOHdoXkt1V51gyPMZqgQ8LjK3LfmJ&quot;&gt;Curso de Criptografía Informática Básica para principiantes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;curso-introductorio-a-la-teoría-de-números-y-criptografía&quot;&gt;Curso introductorio a la teoría de números y criptografía&lt;/h2&gt;

&lt;p&gt;Este es un curso mucho más profundo en las matemáticas que soportan los esquemas criptográficos, con ejemplos explicados paso a paso, para comprender las bases matemáticas, la puedes ver aquí: &lt;a href=&quot;https://www.youtube.com/playlist?list=PLterBef0AD5ZyXFaDfueQYXkLMs_OVkoV&quot;&gt;Curso introductorio a la teoría de números y criptografía&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;crypt4you&quot;&gt;Crypt4You&lt;/h3&gt;

&lt;p&gt;Es un proyecto gratuito creado en 2012 en españa en el que se recorren los principales temas de la criptografía moderna. Debido a la edad del curso, debes ser precavido porque puede que algunas cosas hayan cambiado desde que se creó, por ejemplo, que SHA-1 ya no se considera seguro.&lt;/p&gt;

&lt;p&gt;Presentación oficial: &lt;a href=&quot;https://www.dragonjar.org/crypt4you-aprende-criptografia-y-seguridad-informatica-de-otra-forma-y-gratis.xhtml&quot;&gt;Crypt4You&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;En esta pequeña guía incluimos algunos recursos que te pueden ayudar para empezar a &lt;strong&gt;rascar la superficie&lt;/strong&gt; de la criptografía. Estamos trabajando en un temario completo que no sólo te de la introducción, sino que te ayude a llegar a la parte avanzada si así lo deseas. Esperamos tus comentarios si se nos pasó algún recurso.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="criptografía" /><category term="libros" /><category term="cursos" /><category term="matemáticas" /><summary type="html">Aprende sobre algunos recursos que te servirán para entrenarte en una de las ramas más importantes de la computación actualmente: la criptografia.</summary></entry><entry><title type="html">Generadores de números aleatorios y su importancia</title><link href="https://blog.thedojo.mx/2021/12/07/generadores-de-numeros-aleatorios-y-su-importancia-para-el-desarrollo.html" rel="alternate" type="text/html" title="Generadores de números aleatorios y su importancia" /><published>2021-12-07T00:00:00-06:00</published><updated>2021-12-07T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/12/07/generadores-de-numeros-aleatorios-y-su-importancia-para-el-desarrollo</id><content type="html" xml:base="https://blog.thedojo.mx/2021/12/07/generadores-de-numeros-aleatorios-y-su-importancia-para-el-desarrollo.html">&lt;p&gt;Muy comúnmente los sistemas informáticos requieren de valores aleatorios para diferentes procesos, por ejemplo, para ordenar las cosas, para seleccionar elementos de un conjunto, para simulaciones, para tomar diferentes caminos en un proceso (como los videojuegos).&lt;/p&gt;

&lt;p&gt;Un lugar en el que los valores aleatorios tienen una importancia especial es &lt;strong&gt;en criptografía&lt;/strong&gt; y en la seguridad informática. De hecho, los números aleatorios están muy relacionados con la generación de valores usables en criptografía como llaves, por ejemplo.&lt;/p&gt;

&lt;p&gt;Veamos cómo se generan y cómo puedes usar correctamente los generadores de números aleatorios, pero antes empecemos a hablar de qué es la aleatoriedad y cómo podemos entenderla intuitivamente.&lt;/p&gt;

&lt;h2 id=&quot;aleatoriedad&quot;&gt;Aleatoriedad&lt;/h2&gt;

&lt;p&gt;La aleatoriedad tiene que ver con la &lt;em&gt;probabilidad&lt;/em&gt; de obtener cierto valor de un conjunto (universo) de valores posibles. Los valores aleatorios son impredecibles, no puedes asegurar que uno tiene más probabilidades de salir que otro. Ahora conecta los dos conceptos anteriores: para que un valor sea aleatorio debe de ser extraído de un conjunto de valores con la misma probabilidad de aparecer, lo que se conoce como una &lt;strong&gt;distribución uniforme&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejemplo:&lt;/strong&gt; una moneda lanzada puede entregar dos valores, cara o cruz (águila o sol en México). Es imposible asegurar que va a salir uno u otro valor, debido a que ambos valores tienen la misma probabilidad de salir. Y muchos procesos físicos se comportan de esta misma manera.&lt;/p&gt;

&lt;p&gt;Si en el universo de valores posibles es más probable que salga cierto valor, entonces empezamos a perder aleatoriedad, imagínate por ejemplo el caso de una moneda o dado cargado.&lt;/p&gt;

&lt;p&gt;Los humanos percibimos un valor como aleatorio si &lt;em&gt;parece&lt;/em&gt; poco probable que hayamos obtenido ese valor específicamente, pero no siempre es así.&lt;/p&gt;

&lt;p&gt;La aleatoriedad se puede medir a través de &lt;em&gt;entropía&lt;/em&gt;, que es la cantidad de información disponible en todo el espacio de valores. La entropía es la sumatoria de la probabilidad de aparecer de cada valor multiplicado por su logaritmo base 2, y &lt;strong&gt;se mide en bits&lt;/strong&gt;. Una generador con aleatoriedad perfecta entrega &lt;strong&gt;tantos bits de entropía como valores posibles&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;generadores-de-números-aleatorios&quot;&gt;Generadores de números aleatorios&lt;/h2&gt;

&lt;p&gt;Los programadores podemos usar la aleatoriedad si tenemos un &lt;strong&gt;generador de números aleatorios&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un generador de números aleatorios es un programa que te entrega una &lt;strong&gt;serie de bits&lt;/strong&gt; aleatorios, es decir, impredecibles desde el punto de vista externo. Estos bits se pueden usar entonces para crear un número aleatorio.&lt;/p&gt;

&lt;p&gt;Haya generadores de diferentes tipos dependiendo de su fuente de entropía (información impredecible) y de cómo la usen. Hablemos de los diferentes tipos, sus características, y cómo usarlos.&lt;/p&gt;

&lt;h2 id=&quot;true-random-number-generators&quot;&gt;True Random Number Generators&lt;/h2&gt;

&lt;p&gt;A esta clase de generadores también se le conoce simplemente como &lt;strong&gt;generadores de números aleatorios&lt;/strong&gt; (Random Number Generators o &lt;strong&gt;RNG’s&lt;/strong&gt;). Los RNGs toman su fuente de entropía de &lt;strong&gt;lugares físicos&lt;/strong&gt;, dado que el mundo real es impredecible. Miden las variaciones en los semiconductores, la manera en la que mueves el ratón, el teclado, información de los sensores de la computadora, el micrófono, la red y muchas otras cosas. Hay algunos que toman su entropía de procesos cuánticos incluso, conocidos como &lt;strong&gt;generadores de números aleatorios cuánticos&lt;/strong&gt; o &lt;em&gt;QRNGs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Estos elementos físicos son fuentes confiables de entropía, pero no podemos confiar en nuestra manera de medirla o “capturarla”, además de que pueden ser sesgados por un usuario malintencionado o atacante. Además son lentos para generar los bits aleatorios que las aplicaciones pueden requerir.&lt;/p&gt;

&lt;p&gt;Es normal que un RNG se quede sin suficiente entropía para servir a las aplicaciones que lo usan, por lo que terminaría bloqueándola o haciéndola insegura.&lt;/p&gt;

&lt;p&gt;Es por esto que los generadores de números aleatorios a menudo se complementan de los generadores de números pseudo-aleatorios, de los que hablaremos a continuación.&lt;/p&gt;

&lt;h2 id=&quot;pseudo-random-number-generators&quot;&gt;Pseudo-Random Number Generators&lt;/h2&gt;

&lt;p&gt;Los generadores de números pseudo-aleatorios (&lt;strong&gt;PRNGs&lt;/strong&gt;) son aquellos que no toman su fuente de entropía de lugares físicos, sino que la generan a partir de una semilla o &lt;em&gt;seed&lt;/em&gt;. Siempre que reciban la misma semilla generarán la misma secuencia de bits que &lt;em&gt;parece&lt;/em&gt; aleatoria, pero en realidad es determinista.&lt;/p&gt;

&lt;p&gt;Si conocemos la semilla y el algoritmo, podríamos predecir la secuencia de bits que resultará en cada llamada. Si la distribución de probabilidad de los bits es uniforme o cerca de uniforme, entonces la secuencia de bits parecerá aleatoria, lo cuál es útil para la mayoría de las aplicaciones.&lt;/p&gt;

&lt;p&gt;Los PRNGs no se quedan sin entropía para seguir sirviendo bits, ya que la generan artificialmente, normalmente con algoritmos matemáticos y &lt;em&gt;piscinas&lt;/em&gt; o &lt;em&gt;pools&lt;/em&gt; de bits.&lt;/p&gt;

&lt;p&gt;Una forma de crear un PRNG es usando como semilla un RNG, que tome su fuente de lugares físicos y &lt;em&gt;expendiendo&lt;/em&gt; esta entropía a un número más grande de bits. Esto lo hace mediante la actualización de un estado interno mediante la recepción de bits verdaderamente aleatorios de un RNG.&lt;/p&gt;

&lt;h2 id=&quot;cryptographically-secure-pseudo-random-number-generators&quot;&gt;Cryptographically Secure Pseudo-Random Number Generators&lt;/h2&gt;

&lt;p&gt;Los PRNGs critpográficamente seguros requieren dos características extras para ser usados en criptografía:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Discreción hacia adelante&lt;/strong&gt;. En inglés conocida como &lt;strong&gt;forward secrecy&lt;/strong&gt;, se refiere a que es imposible predecir los bits que generará a continuación.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Discreción hacia atás&lt;/strong&gt;. Se refiere a que, dados los bits de un número aleatorio generado, es imposible conocer los bits que le precedieron, que se entregaron en llamadas anteriores.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cuando hablamos de &lt;strong&gt;“imposible&lt;/strong&gt;” en términos de criptografía, normalmente nos referimos a que es &lt;em&gt;computacionalmente infactible&lt;/em&gt; resolver el problema propuesto. Para que esto sea cierto basta con que no exista un &lt;strong&gt;algoritmo de tiempo polinomial&lt;/strong&gt; que funcione para resolver el problema.&lt;/p&gt;

&lt;p&gt;En pocas palabras, los PRNGs criptográficos son &lt;em&gt;impredecibles completamente&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;ejemplos&quot;&gt;Ejemplos&lt;/h2&gt;

&lt;p&gt;Algunos PRNGs que puedes usar son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;/dev/urandom&lt;/strong&gt; de los sistemas UNIX: genera bits aleatorios combinando lecturas del uso del sistema (RNG de hardware) y un generador por software, de manera que haya siempre suficientes bits. Si quieres conocer más a detalle cómo funciona, este artículo te lo explicará: &lt;a href=&quot;https://www.redhat.com/en/blog/understanding-random-number-generators-and-their-limitations-linux&quot;&gt;Understanding random number generators and their limitations on Linux&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/ESultanik/mtwister&quot;&gt;Meresenne Twister&lt;/a&gt;&lt;/strong&gt;: genera bits aleatorios con una distribución uniforme, pero no sirve para criptografía porque es predecible. Dada cierta cantidad de bits es posible predecir la secuencia de bits que generará a continuación. Aún así, el MT se comporta mejor que algunos otros PRNGs incluidos en los lenguajes de programación.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PRNG’s en procesadores&lt;/strong&gt;: Tanto AMD (desde 2015), como Intel (Desde 2013) tienen PRNGs embebidos dentro de los procesadores que pueden ser usados mediante instrucciones específicas (RDRAND y RDSEED).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Fortuna&lt;/strong&gt;. Es un algoritmo criptográficamente seguro diseñado en 2003, en el que están basadas la generación de números aleatorios de MacOS y iOS.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cómo-usar-un-prng&quot;&gt;Cómo usar un PRNG&lt;/h2&gt;

&lt;p&gt;Si quieres generar números aleatorios para uso general, sin garantía de que sea impredecible, puedes usar un PRNG común implementado en tu lenguage de programación favorito. Generalmente las funciones &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rand()&lt;/code&gt; de Python o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mt_rand()&lt;/code&gt; de PHP son bastante buenas para esto.&lt;/p&gt;

&lt;p&gt;Sin embargo, para generar números aleatorios para criptografía, debes usar un PRNG especializado, generalmente basado en los provistos por el sistema operativo.&lt;/p&gt;

&lt;p&gt;Aunque podrías escribir una función que se comunique con el sistema operativo para obtener un flujo de bits aleatorios, tendrías que hacer lo suficiente para asegurarte de que esos bits sean de calidad (con una alta entropía). Es por esto que como desarrollador es mejor usar las implementaciones de la biblioteca estándar de criptografía de tu lenguaje, a menos que tengas requerimientos muy específicos, y sobre todo, sepas cómo verificar que tienes la entropía suficiente.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Conocer cómo funciona un PRNG, a parte de algo interesante, es útil para no usarlos mal. Siempre que requieras números aleatorios para usarlos con relación a la seguridad de la información, &lt;strong&gt;deberías usar un PRNG criptográfico&lt;/strong&gt;. En cualquier otro caso, un PRNG como el &lt;em&gt;Meresenne Twister&lt;/em&gt; es suficiente. Además, ahora sabes que los RNGs basados en procesos físicos, a pesar de las garantías de entropía que prometen, no son muy confiables en el sentido de que no siempre están disponibles, pero hay soluciones de hardware especializadas que te pueden ayudar si tienes un problema muy específico.&lt;/p&gt;

&lt;p&gt;Finalmente, la mejor opción para usar un PRNG es confiar en la implementación de la plataforma y lenguaje en el que estés trabajando.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="prng" /><category term="criptografía" /><category term="randomness" /><category term="aleatoriedad" /><summary type="html">Los números aleatorios son muy importantes para el desarrollo, sobre todo para la seguridad de la información y la criptografía.</summary></entry></feed>