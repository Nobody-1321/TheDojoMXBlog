<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.17.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>Acerca de este Blog -</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="">
<meta property="og:title" content="">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>






<!-- end _includes/seo.html -->


<link href="/feed.xml" type="application/atom+xml" rel="alternate" title=" Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->


<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": null,
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>
  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt=""></a>
        
        <a class="site-title" href="/">
          The Dojo Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest" >Últimos Posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about" >Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx" >Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  

  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          
        </header>
      

      <section class="page__content" itemprop="text">
        
        {
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2019/12/21/las-matematicas-que-debes-saber-para-programar.html",
      "url": "https://blog.thedojo.mx/2019/12/21/las-matematicas-que-debes-saber-para-programar.html",
      "title": "Las matemáticas que debes saber para programar",
      "content_html": "<p>Cuando se habla de <strong>matemáticas</strong> mucha gente empieza a sentirse fastidiada y a temer, porque generalmente se habla de cosas que no son de su agrado. Sin embargo, las matemáticas son la base de muchas otras ciencias y sobre de todo de la computación. Podríamos considerar las ciencias de la computación como <strong>una rama de las matemáticas</strong>.</p>\n\n<p>Pero para programar con eficacia no necesitas saber muchas matemáticas, de hecho con el entendimiento básico es suficiente. En este artículo hablaremos de aquello que debes dominar.</p>\n\n<h2 id=\"matemáticas-básicas\">Matemáticas Básicas</h2>\n<p>Empecemos hablando brevemente de las matemáticas que debes conocer como programador y como ser humano.</p>\n\n<h3 id=\"operaciones-básicas\">Operaciones básicas</h3>\n\n<p>Saber operar con números en la vida cotidiana es una habilidad que todos necesitamos. Pero más importante aún es entender el significado de estas operaciones:</p>\n\n<ul>\n  <li>¿Qué significa una multiplicación?</li>\n  <li>¿Qué significa una división?</li>\n  <li>¿Qué significado tiene el elevar un número a una potencia?</li>\n</ul>\n\n<p>Entender esto te ayudará a <strong>resolver problemas</strong> que es la actividad principal que se realiza cuando programas. Todo lo demás está alrededor de esto.</p>\n\n<h3 id=\"probabilidad-y-estadística\">Probabilidad y estadística</h3>\n\n<p>Tener las nociones de estas áreas es una las herramientas más útiles a la hora de resolver problemas y sobre todo atacarlos prácticamente. Varias de las áreas de la ciencia de la computación basan sus resultados y procesos en estas dos áreas.</p>\n\n<p>Un ejemplo es la <strong>criptografía</strong>: los algoritmos de cifrado como el AES actual trabajan con una llave que es usada para cifrar y descifrar el mensaje. Asignar el tamaño de la llave depende totalmente de la <em>probabilidad</em> de que un atacante sea capaz de adivinar la llave en un conjunto de intentos razonable. Ahora imagina que la llave tiene 128 bits de longitud. Aquí entra otro par de conceptos importantes para la computación.</p>\n\n<h3 id=\"combinaciones-y-permutaciones\">Combinaciones y permutaciones</h3>\n\n<h1 id=\"lógica-matemáticas-discretas\">Lógica (Matemáticas discretas)</h1>\n\n<h3 id=\"preposiciones\">Preposiciones</h3>\n\n<h3 id=\"conjuntos\">Conjuntos</h3>\n<h3 id=\"demostraciones\">Demostraciones</h3>\n\n<h1 id=\"matemáticas-avanzadas-y-especificas\">Matemáticas avanzadas y especificas</h1>\n\n<h3 id=\"álgebra-lineal\">Álgebra lineal</h3>\n<h3 id=\"probabilidad-y-estadística-1\">Probabilidad y estadística</h3>\n<h3 id=\"ecuaciones-lineales\">Ecuaciones lineales</h3>\n<h3 id=\"ecuaciones-diferenciales\">Ecuaciones diferenciales</h3>\n<h3 id=\"análisis-vectorial\">Análisis Vectorial</h3>\n\n<h2 id=\"no-te-preocupes-\">No te preocupes :)</h2>\n\n<p>Fuera de las matemáticas básicas y un control decente e intuitivo de la lógica, no es necesario que seas experto en alguno de los temas más adelante, a menos que el campo en el que estés trabajando esté directamente relacionado con eso, tal\ncomo tendrías que saber lo suficiente de finanzas si estuvieras haciendo una app financiera o de administración de empresas si estuvieras haciendo una aplicación o plataforma para este campo.</p>\n",
      "date_published": "Sat, 21 Dec 2019 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/12/20/rest.html",
      "url": "https://blog.thedojo.mx/2019/12/20/rest.html",
      "title": "Rest",
      "content_html": "<h3 id=\"arquitectura-cliente-servidor\">Arquitectura cliente-servidor.</h3>\n\n<p>Esta característica normalmente es algo que ya hacemos normalmente con nuestros servicios web en general.</p>\n\n<p>Una API REST debe ser ejecutada como un <strong>servidor</strong>, que sea encargado de contestar las peticiones de un <strong>cliente</strong>. El cliente es el programa que usa los servicios que la API provee, pide datos u operaciones y estas son ejecutadas. Fielding pensaba en el cliente como en la interfaz de usuario, pero en nuestros días un cliente podría ser fácilmente otro servidor.</p>\n\n<p>Esta arquitectura nos permite separar claramente las responsabilidades de cada programa y esto a su vez <em>permite que tanto el cliente como el servidor puedan cambiar y evolucionar por su cuenta</em>, sin depender mutuamente uno del otro.</p>\n\n<p>La arquitectura cliente servidor también define otras cosas, por ejemplo que el servidor nunca inicia la comunicación y sólo responde a peticiones que el cliente le haya hecho, pero no es esencial cumplir con estas para hablar de una API REST, lo más importante es la <strong>separación de responsabilidades</strong> entre cliente y servidor.</p>\n\n<h3 id=\"comunicación-sin-estados\">Comunicación sin estados</h3>\n\n<p>El estado se refiere a toda la información que contiene un sistema programa en un punto del tiempo. Un sistema REST no mantiene esta información <em>en la comunicación entre cliente y servidor</em>.</p>\n\n<p>Esto quiere decir que no se mantiene una conexión que mantenga un sesión en el servidor que contenga los datos del cliente actual. Cada vez que el cliente haga una petición deberá envíar todos los datos necesarios para que el servidor genere y obtenga la información que se está pidiendo.</p>\n\n<p>Esto tiene ventajas y desventajas. Primero, desacopla completamente el cliente y la implementación del servidor, ya que un cliente se podría comunicar con <em>cualquier instancia</em> del servidor actual. Esto a su vez permite crear servicios replicados y balanceados que son capaces de soportar mucho mejor cargas grandes de trabajo generadas por muchos clientes, ya que no se casa un cliente con un servidor.</p>\n\n<p>Una de las desventajas de este tipo de comunicación es que el estado se tiene que recrear en cada llamada, por lo que la transferencia de información repetida y el procesamiento de esta genera una carga extra que se podría evitar en una conexión que mantenga el estado.</p>\n\n<p>Conocer estos detalles nos permitirá decidir si REST es lo adecuado para nuestro proyecto.</p>\n\n<h3 id=\"interfaz-uniforme\">Interfaz uniforme</h3>\n\n<p>Esta es la característica más distintiva de un sistema REST. Quier</p>\n\n<h3 id=\"sistema-en-capas\">Sistema en capas</h3>\n\n<p>Las funciones del servidor y la comunicación con el cliente podrían (normalmente, <em>deberían</em>) estar separadas en capas con diferentes funciones cada una. Por ejemplo, el servicio podría estar compuesto por:</p>\n\n<ul>\n  <li>Una red de entrega de contenido (CDN)</li>\n  <li>Un balanceador de carga</li>\n  <li>Un firewall</li>\n  <li>Un servidor de autenticación</li>\n  <li>El servidor de web</li>\n  <li>El servidor de aplicaciones</li>\n</ul>\n\n<p>Esta separación en capas hace que el servicio web sea más confiable y tenga mejor comportamiento en general. Lo importante de</p>\n\n<h3 id=\"interfaz-uniforme-1\">Interfaz uniforme</h3>\n\n<h3 id=\"no-mantiene-el-estado\">No mantiene el estado</h3>\n\n<h3 id=\"cacheable\">Cacheable</h3>\n\n<h3 id=\"código-bajo-demanda-opcional\">Código bajo demanda [opcional]</h3>\n\n<h2 id=\"implementación-de-las-restricciones-de-rest\">Implementación de las restricciones de REST</h2>\n\n<h2 id=\"documentación\">Documentación</h2>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n",
      "date_published": "Fri, 20 Dec 2019 14:40:15 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/12/20/formatos-de-marcado-de-texto-que-deberias-aprender.html",
      "url": "https://blog.thedojo.mx/2019/12/20/formatos-de-marcado-de-texto-que-deberias-aprender.html",
      "title": "Formatos de marcado de texto que deberías aprender",
      "content_html": "<p>Parte del trabajo de un desarrollador es crear documentos con un formato fácil de entender y agradable a la vista, para crear documentación, registrar decisiones, escribir manuales, etc. La forma común de hacerlos es un procesador de textos como Word o Google Docs, pero generalmente batallamos sobre todo con el formateo y embellecimiento de documento.</p>\n\n<p>En este artículo te platicaré de <strong>tres alternativas</strong> que pueden hacer tu vida más fácil: Markdown, reStructuredText, AsciiDoc.</p>\n\n<p>Todos estos lenguajes pueden producir múltiples formatos de salida: HTML, PDF, Word, entre otros. Y lo mejor es que estas salidas son personalizables.</p>\n\n<h2 id=\"markdown\">Markdown</h2>\n\n<p>Es el formato de marcado de texto simple más conocido por ser el usado en muchos lados (GitHub, por ejemplo) para darle un poco de formato semántico al texto.</p>\n\n<p>Puedes crear los estilos de texto más comunes directamente:</p>\n\n<ul>\n  <li><strong>negritas</strong></li>\n  <li><em>cursivas</em></li>\n  <li><a href=\"/\">enlaces</a></li>\n  <li>Imágenes:</li>\n</ul>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_100/v1559453194/luis-dille-1098834-unsplash_vndt6g.jpg\" alt=\"Imagen de ejemplo\" /></p>\n\n<p>También permite crear listas no numeradas, como la anterior, numeradas, tablas (con las sintaxis extendidas pero no con la definición original) y una serie de títulos de diferente jerarquía equivalentes a los headers de HTML (h1, h2… h6).</p>\n\n<p>De hecho, esta entrada está escrita con Markdown. Markdown es tan popular que existen aplicaciones completamente dedicadas a él como <a href=\"http://bit.ly/2M7YmLL\">MacDown</a>, <a href=\"http://bit.ly/38Zhohc\">Focused</a> y <a href=\"http://bit.ly/2S4MX38\">Typora</a>. Además, diferentes empresas han creado sus propios dialectos o adaptaciones para que sea más fácil de usar en su caso específico.</p>\n\n<p>Si aún no lo sabes usar, vale la pena que le eches un ojo: <a href=\"http://bit.ly/38S2l8G\">Guía de Markdown en español</a>. Tardarás unos minutos en aprender lo básico que es muy útil para el 80% de los casos en los que lo ocuparas.</p>\n\n<p>Markdown es muy bueno para crear documentos individuales pero, ¿qué pasa si el texto que quieres escribir es más extenso? Tal vez el texto está compuesto por muchas partes, como un libro o una documentación extensa. Hay quienes dicen que <a href=\"http://bit.ly/2sOpmJg\">no deberías usar Markdown para crear tu documentación</a>.</p>\n\n<p>Las siguientes herramientas están mejor que preparadas que Markdown para eso, permiten crear cuerpos de textos más extensos.</p>\n\n<h2 id=\"restructuredtext\">reStructuredText</h2>\n\n<p>Este formato de texto es adecuado para crear cuerpos de texto más complejos que con Markdown. Tienes las mismas capacidades de formateo de texto que con Markdown: negritas, cursivas, cabeceras, links, imágenes, listas, tablas, etc.</p>\n\n<p>Pero reStructuredText provee <strong>más opciones</strong> para formatear el texto, ya que fue creado para hacer <em>documentos técnicos</em> además de documentos de carácter general.</p>\n\n<p><strong>reStructuredText</strong> parece ser parte de <a href=\"http://bit.ly/2ECmEt2\">docutils</a> originalmente, creado como una revisión de se <a href=\"http://bit.ly/35NkdQk\">StructuredText</a> y <a href=\"http://bit.ly/2PIAdgT\">Setext</a>.</p>\n\n<p>Sus herramientas te permitirán crear texto marcado con <strong>mejor semántica</strong> que Markdown, más estandarizado (RST no tiene ‘sabores’ o dialectos) y con herramientas adaptadas a la documentación de código. Entre otras cosas RST provee:</p>\n\n<ul>\n  <li>Más formatos de listas:\n    <ul>\n      <li>Listas de definición</li>\n      <li>Listas de parámetros</li>\n      <li>Numeración de listas arbitrariamente</li>\n    </ul>\n  </li>\n  <li>Bloques de texto pre-formateado (para código)</li>\n  <li>Bloques de documentación de pruebas</li>\n  <li>Citas</li>\n  <li>Notas a pie de página</li>\n  <li><strong>Directivas</strong>, una manera de extender el lenguaje con construcciones propias</li>\n  <li>Hyperlinks con diferentes destinos: externos, internos, etc.</li>\n</ul>\n\n<p>Esta última característica permite crear documentos interconectados que son muy útiles para textos amplios.</p>\n\n<p>RST es el formato default de <a href=\"http://bit.ly/35Jb6QP\">Sphinx</a> una herramienta de documentación de código creada en Python que te puede ayudar a crear documentación muy bonita.</p>\n\n<p>Aquí hay una introducción a RST en inglés: <a href=\"http://bit.ly/2rdQn8y\">A reStructuredText Primer</a>.</p>\n\n<h2 id=\"asciidoc\">AsciiDoc</h2>\n\n<blockquote>\n  <p>Incluso el software más brillante es inútil sin buena documentación. - Documentación de AsciiDoc</p>\n</blockquote>\n\n<p><strong>AsciiDoc</strong> fue creado para hacer <strong>tan fácil como escribir un email</strong> la escritura de cualquier tipo de documento, sea este un artículo, un texto en prosa, un libro o documentación técnica.</p>\n\n<p>El creador asegura que una de las causas de que se nos haga tan difícil escribir está relacionada con que los editores de texto nos distraen con cosas como el formateo o paja que no es necesaria. AsciiDoc se enfoca en que puedas escribir sin preocuparte por el formato, dando una sintaxis natural, fluída y que no estorba, mientras te permite preparar el texto para crear formatos de salida hermosos.</p>\n\n<blockquote>\n  <p>Usa AsciiDoc para marcado de documentos. De verdad. En verdad es legible, fácil de procesar y mucho más flexible que XML. - Linus Torvalds</p>\n</blockquote>\n\n<p>Al igual que Markdown y RST, AsciiDoc provee de medios básicos para dar formato al texto. Pero AsciiDoc es el que más herramientas de los tres platicados aquí tiene. Además de ofrecet todo lo de las dos herrmientas anteriores tiene:</p>\n\n<ul>\n  <li>Más formatos de párrafo: párrafos de introducción y pre-formateados fáciles.</li>\n  <li>Secciones prediseñadas: cuadros de aviso, de notas, etc.</li>\n  <li>Estilos de lista parecidos a los de RST.</li>\n  <li>Formateo y sintaxis de código con notas, como la siguiente:\n<img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_700/v1576905208/Screenshot_2019-12-20_23.12.38_mdhrfj.png\" alt=\"Ejemplo de notas\" /></li>\n  <li>Barras laterales</li>\n  <li>Macros</li>\n  <li>Generación de tablas desde CSV</li>\n  <li>Videos</li>\n  <li>Muchas muchas cosas más…</li>\n</ul>\n\n<p>Sin duda AsciiDoc es el más completo de los formatos que hemos visto en este artículo. Aquí hay una <a href=\"http://bit.ly/2PKzdZN\">introducción en inglés</a> y aquí un <a href=\"http://bit.ly/2rgL3Bt\">libro en español</a>. AsciiDoc es tan completo que varios autores de libros lo han escogido para crear sus escritos.</p>\n\n<h2 id=\"cuál-uso-entonces\">¿Cuál uso, entonces?</h2>\n\n<p>Mi conclusión personal es la siguiente:</p>\n\n<ol>\n  <li>\n    <p>Si tienes que hacer un documento pequeño, sin mucho formato y en el que la velocidad de entrega es lo más importante usa Markdown, ya que su popularidad te permitirá entregar el documento en el menor tiempo posible. Por ejemplo, en GitHub subes un archivo “*.md” y automáticamente lo muestra formateado.</p>\n  </li>\n  <li>\n    <p>¿Tienes que hacer documentación de código que posiblemente deba ir en línea o al lado del código? reStructuredText está especializado en eso y con sus herramientas y entonrno te facilitará la vida.</p>\n  </li>\n  <li>\n    <p>Para todo lo demás, usa <strong>AsciiDoc</strong>. Una vez que lo sabes usar y combinado con AsciiDoctor (su procesador) y <a href=\"http://bit.ly/2Q2zbeE\">Pandoc</a> (un transformador de formatos) puedes crear cosas muy complejas muy rápidamente.</p>\n  </li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Si eres como los programadores clásicos, odias usar Word, Docs o lo que sea por el problema que es formatear mientras escribes y amas la simplicidad del texto plano ayudado con herramientas que te permiten crear mejores cosas.</p>\n\n<p>Estos lenguajes de marcado de texto te dan lo mejor de los dos mundos. Requieren un poco más de trabajo para empezar que los editores <em>“lo que ves es lo que obtienes”</em>, pero la productividad que te dan después paga con creces.</p>\n\n<p>¿Qué opinas? ¿Vale la pena aprenderlos?</p>\n",
      "date_published": "Fri, 20 Dec 2019 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/12/14/induccion-y-deduccion-segun-polya.html",
      "url": "https://blog.thedojo.mx/2019/12/14/induccion-y-deduccion-segun-polya.html",
      "title": "Inducción y Deducción según Polya",
      "content_html": "<p>Este es el tercer artículo acerca del libro <a href=\"https://amzn.to/2P8HJA8\">“How to Solve It”</a> de George Polya. Puedes ver los dos artículos anteriores aquí:</p>\n\n<ul>\n  <li><a href=\"/2019/09/27/tecnicas-para-resolver-problemas.html\">Técnicas para resolver problemas</a></li>\n  <li><a href=\"/2019/10/03/el-arte-de-resolver-problemas-la-heuristica.html\">Heurística</a></li>\n</ul>\n\n<p>Con este artículo cerraremos con las ideas que George Polya desarrolló para resolver problemas.</p>\n\n<h2 id=\"inducción-y-deducción\">Inducción y Deducción</h2>\n\n<p>Hablemos ahora de algunas formas de resolver problemas.</p>\n\n<h3 id=\"deducción\">Deducción</h3>\n\n<p>Tratar de resolver problemas por deducción significa <strong>aplicar principios o\nconocimiento general a un caso específico</strong>. Por ejemplo para un problema\npráctico en el que tenemos encontrar la longitud de un cable tensor para una\nantena, sabemos que podemos aplicar el teorema de Pitágoras.</p>\n\n<p>Algunos ejemplos para los programadores:</p>\n\n<ul>\n  <li>Encontrar el elemento más grande o más pequeño en una lista. (Una forma de resolverlo es ordenar los elementos).</li>\n  <li>Revisar que un elemento no está repetido en una colección de elementos. (Indexado)</li>\n  <li>Asegurarse de que las operaciones son atendidas en el orden en que se solicitaron en un entorno con múltiples ejecutores. (Colas)</li>\n</ul>\n\n<p>Lo difícil de la deducción es encontrar <em>qué principios, teoremas o formas \nde resolución de problemas aplican para el problema que tenemos que resolver</em>. Para esto nos pueden ayudar las técnicas platicadas en los artículos anteriores: ¿He resuelto un problema similar? <em>¿Qué técnica fue usada?</em> ¿Qué principios sirvieron para la resolución de ese problema? Y, a mi parecer la más útil: ¿puedo usar el resultado o el proceso de resolución?</p>\n\n<!-- Polya dice que aunque se dice que Sherlock Holmes \"deduce\", en realidad aplica la inducción para llegar a conclusiones, ya que aplica conocimiento general a casos concretos. -->\n\n<h3 id=\"inducción\">Inducción</h3>\n\n<blockquote>\n  <p>La inducción es el proceso de descubrir leyes generales mediante la observación y combinación de casos particulares. - <em>George Polya</em></p>\n</blockquote>\n\n<p>La inducción es uno de los mecanismos de resolución de problemas más difíciles de llevar a la práctica. Funciona en forma inversa a la deducción.</p>\n\n<p>Consiste en partir de observaciones específicas (ejemplos y contra-ejemplos) y llevarlas a <strong>generalizaciones</strong> que puedan ser aplicadas en otros casos o que apliquen en muchas otras situaciones situaciones.</p>\n\n<h3 id=\"en-el-desarrollo-de-software\">En el desarrollo de software</h3>\n\n<p>Seguro te has encontrado con este tipo problemas (o te vas a encontrar) si ya llevas tiempo desarrollando: ya que el desarrollo de software no es un área que viva aislada de las demás áreas, los que requieren el software llevan <em>ejemplos</em> de  problemas que regularmente tienen que resolver. Nuestros clientes, en general, no se han dado a la tarea de establecer las reglas por las que algo funciona de la manera en que lo hace, ni las excepciones ni los casos únicos. Es nuestra tarea casi siempre descubrir las reglas que subyacen a las operaciones comunes. Esto es una forma de inducción.</p>\n\n<h3 id=\"inducción-matemática\">Inducción matemática</h3>\n\n<p>Polya habla de otro tipo de inducción de la que opina que no debería llamarse así, y que comparte muy poco con el proceso que acabamos de descubrir y puede llegar a confundir a la gente: la <strong>inducción matemática</strong>. Este tipo de inducción se refiere al método que los matemáticos emplean para demostrar que cierta aserción es un teorema o no.</p>\n\n",
      "date_published": "Sat, 14 Dec 2019 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/11/23/3-maneras-de-hacer-una-api-con-go-lang.html",
      "url": "https://blog.thedojo.mx/2019/11/23/3-maneras-de-hacer-una-api-con-go-lang.html",
      "title": "3 maneras de hacer una API con Go Lang",
      "content_html": "<p>Go es uno de los lenguajes más exitosos de los últimos tiempos. Ya hablamos de <a href=\"/2019/09/01/por-que-deberias-aprender-go.html\">por qué deberías aprenderlo</a>.</p>\n\n<p>Ahora hablemos de un caso de uso práctico: <strong>úsalo para crear una API</strong>. En este artículo nos enfocaremos en la parte de comunicación. La funcionalidad básica de tu API puede o no adaptarse completamente a Go (no es es tan fácil de escribir como un lenguaje dinámico como Python), pero definitivamente es un lenguaje excelente para crear interfaces de comunicación web, debido a su alto rendimiento y eficiencia.</p>\n\n<p>Puedes ver algunas de las comparativas en los siguientes artículos:</p>\n\n<ul>\n  <li><a href=\"https://stressgrid.com/blog/benchmarking_go_vs_node_vs_elixir/\">Comparando el rendimiento de Go, NodeJS y Elixir</a>. TL;DR: Go y Elixir llegana  manejar más de 100k conexiones sin ningún problema, Node empieza con problemas desde las 30k y el más eficiente en cómputo y memoria utilizda por mucho es Go.</li>\n  <li><a href=\"https://github.com/mroth/phoenix-showdown\">Comparación de frameworks web ligeros</a>. Este artículo es un poco viejo, pero el resumen es que Gin (un framework web ligero de Go) es el que más peticiones soporta por segundo y con una consistencia excelente.</li>\n</ul>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1574629781/Screenshot_2019-11-24_15.09.25_ozqwcu.png\" alt=\"Comparativa de microframworks Web\" /></p>\n\n<p>Ahora sí, hablemos de tres (4) formas de crear una API sobre HTTP para tu próximo proyecto. Pero antes hablemos de una opción simple que no cubre muchos casos pero que se oye recomendada muchas veces.</p>\n\n<h2 id=\"la-biblioteca-estándar\">La biblioteca estándar</h2>\n\n<p>Cuando hice mi primer proyecto en Go, gran parte de la investigación sobre qué usar para crear un proyecto web apuntaba los paquetes nativos de Go son el camino.</p>\n\n<p>Go tiene una biblioteca estándar que cubre muchas de las necesidades de un desarrollador moderno, si has programado en él podrás estar de acuerdo en que se siente como subirte en hombros de gigantes para programar, debido a que los que lo  diseñaron y construyeron son las mismas personas que sentaron las bases para los sistemas operativos modernos. <em>Imagínate cuánta experiencia tienen</em>.</p>\n\n<p>En la biblioteca estándar podemos encontrar un paquete que se llama <code class=\"highlighter-rouge\">net/http</code> con el que puedes hacer muy pocas líneas de código un servidor web con ruteo sencillo (la base de tu API). Puedes recibir peticiones HTTP, procesarlas (mejor dicho: hacer que algúna otra parte de tu sistema la procese) y devolver una respuesta HTTP. El ciclo básico request-response.</p>\n\n<p>Aquí hay un ejemplo:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n\t<span class=\"s\">\"fmt\"</span>\n\t<span class=\"s\">\"net/http\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c\">// Implementando un servidor HTTP básico, que responde con</span>\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\t<span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">HandleFunc</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">)</span>\n\t<span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">ListenAndServe</span><span class=\"p\">(</span><span class=\"s\">\"localhost:8080\"</span><span class=\"p\">,</span> <span class=\"no\">nil</span><span class=\"p\">)</span> <span class=\"c\">// iniciando el servidor</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">// handler recibe la petición http y la procesa para devolver una respuesta http</span>\n<span class=\"k\">func</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">ResponseWriter</span><span class=\"p\">,</span> <span class=\"n\">request</span> <span class=\"o\">*</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Fprintf</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s\">\"Hola Go API's\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Si tu API es muy sencilla, expone muy pocas URL’s y sabes que no requerirás mucho en campo de las peticiones HTTP (procesamiento de parámetros, manejo de rutas, etc.) la librería estándar es una solución excelente, pero para otros casos se queda un poco corta.</p>\n\n<p>Por eso te presentamos las opciones más comunes y algunos ejemplos.</p>\n\n<h2 id=\"gorilla-web-toolkit\">Gorilla Web Toolkit</h2>\n\n<p><img src=\"https://avatars2.githubusercontent.com/u/489566?s=200&amp;v=4\" alt=\"Gorilla Web Toolkit logo\" class=\"align-center\" /></p>\n\n<p><a href=\"https://www.gorillatoolkit.org/\">Gorilla Toolkit</a> es una conjunto de herramientas para Go en web que entre otras cosas tiene un web router llamado Gorilla Mux que podríamos pensar como la parte principal de nuestro servidor web y que cubre la mayoría de funciones que la biblioteca estándar deja sin cubrir.</p>\n\n<h2 id=\"gin\">Gin</h2>\n\n<p>Gin es un framework web para Go bastante completo que clama ser el más rápido de todos los frameworks web para Go.</p>\n\n<h2 id=\"beego\">Beego</h2>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Existen múltiples opciones para crear tu API en Go. Cada una tiene puntos específicos por los que podrías decidir usarla, pero en nuestra experiencia la que se adapta a la mayor cantidad de circunstancias es Gin, que además tiene más componentes que las demás. Esta es una opinión basada en los casos en los que lo hemos usado.</p>\n",
      "date_published": "Sat, 23 Nov 2019 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html",
      "url": "https://blog.thedojo.mx/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html",
      "title": "Criptografía básica para programadores: ¿Qué es la criptografía?",
      "content_html": "<p>Es muy común escuchar de “encriptación” (la palabra correcta en español es <em>cifrado</em>), llaves, algoritmos criptográficos y cosas parecidas, sobre todo con el surgimiento de Bitcoin y Blockchain.</p>\n\n<p>Uno de los temas menos tratados por programadores de software común (para usuarios y sistemas que no impliquen el uso de seguridad a medida), es el correcto uso de los algoritmos criptográficos y muchas veces ni siquiera conocemos lo suficiente de ellos, sino que confiamos en lo que las herramientas pre-establecen (que gran parte de las veces fue diseñado por expertos y eso está bien).</p>\n\n<p>Pero un poco de conocimiento sobre criptografía no te hará daño, sobre todo si programas sistemas que necesiten seguridad (todos), y sí puede evitarte errores fatales.</p>\n\n<p>Esta serie de artículos tratará de todo lo que un programador debe saber acerca de la aplicación correcta de algoritmos criptográficos a sus desarrollos, y un poco de su funcionamiento interno.</p>\n\n<p>Empecemos por lo más básico. ¿Qué es exactamente la criptografía?</p>\n\n<h2 id=\"definición-de-criptografía\">Definición de Criptografía</h2>\n\n<p>La criptografía moderna se puede considerar una rama de las matemáticas (<em>otra vez</em>) y la computación enfocada en encontrar y crear formas de convertir información clara y con algún significado en <em>información imposible de entender por entidades que no cuenten con la autorización para hacerlo, aunque la tengan en su poder</em>.</p>\n\n<p>La palabra quiere decir literalmente <strong>“escritura oculta”</strong>. Y también se puede definir el campo como el encargado de encontrar algoritmos o procedimientos que permitan ocultar mensajes que sólo puedan ser descifrados por aquellos que tengan la llave.</p>\n\n<p>La criptografía implica <em>esconder</em> información explícitamente (los atacantes pueden saber que esa información está oculta e incluso hasta tener los mensajes ocultos en su poder), de manera que quien tenga la información correcta (que les concede la autorización) pueda obtener la información original desde los datos ininteligibles.</p>\n\n<p>Este proceso de ocultar la información se llama <strong>cifrado</strong> (también se usa <em>encriptado</em>, como un barbarismo), mientras que el proceso de recuperar la información se llama <strong>descifrado</strong> (o <em>desencriptado</em> 🙄).</p>\n\n<p>Los procesos de cifrado modernos requieren generalmente <strong>una llave o conjunto de llaves</strong>, para realizar los procesos de cifrado y descifrado.</p>\n\n<p>La criptografía es la base de todos los mecanismos de seguridad informática modernos, y a menudo se usa una conbinación de ellos para proteger un sistema.</p>\n\n<h2 id=\"uso-en-el-software-actual\">Uso en el software actual</h2>\n\n<p>Los algoritmos criptográficos se usan en todos lados en los sistemas modernos. Son los algoritmos que permiten que la información viaje segura en internet (usando HTTPS, que se basa en TLS/SSL), por ejemplo. Algunos otros casos en los que son usados:</p>\n\n<ul>\n  <li>\n    <p>En la protección de la información que viaja en las redes inalámbricas, sean WiFi o Celulares (3G, 4G, 5G).</p>\n  </li>\n  <li>\n    <p>Almacenamiento de datos sensibles como passwords (mediante hash) e información personal (cifrados con password).</p>\n  </li>\n  <li>\n    <p>Protección de archivos.</p>\n  </li>\n  <li>\n    <p>Cifrado de datos en reposo (al estar almacenados en los discos duros) de los datos para evitar su robo en caso de robo físico o de dispositivos virtuales.</p>\n  </li>\n  <li>\n    <p>Tarjetas de crédito y seguridad bancaria en general.</p>\n  </li>\n</ul>\n\n<p>Estos son tan sólo algunos ejemplos de los lugares en los que la criptografía juega un papel <strong>muy importante</strong>.</p>\n\n<h3 id=\"esteganografía\">Esteganografía</h3>\n\n<p>La esteganografía es la técnica, relacionada con la criptografía, <strong>de hacer la información invisible</strong>, generalmente ocultándola dentro de otro tipo de información.</p>\n\n<p>Con técnicas criptográficas comunes el que un atacante tenga disponible la información cifrada no hace necesariamente que nuestra información quede expuesta, a menos que el algoritmo criptográfico sea débil y el atacante tenga suficientes recursos para romperlo. En muchos casos incluso suponemos que los atacantes tienen acceso a esta información, como en el caso de la comunicación en internet en la que en cualquier parte de la red puede haber alguien interceptando nuestra información.</p>\n\n<p>Las técnicas esteganográficas buscan “desaparecer” completamente la información, hacerla invisible a través de ocultarla dentro de otros tipos de mensajes. En la antigüedad, por ejemplo en un libro que parecía hablar de magia, se ocultó un tratado acerca de criptografía y esteganografía, que sólo fue revelado hasta que se encontró la llave correcta.</p>\n\n<p>Con la llegada de los medios digitales, en la que todo puede ser representado por medio de bits, en realidad se puede ocultar información de cualquier tipo en cualquier otro tipo de mensajes, pero también se siguen usando medios físicos para ocultar información. Un ejemplo son los micro-puntos de algunas impresiones de manuscritos o información sensible repartido a personas de confianza que permiten identificar cada una de las copias entregadas a diferentes personas.</p>\n\n<p>Aunque la esteganografía y la criptografía son técnicas relacionadas, la más importante actualmente es la criptografía por su uso en la mayoría de los sistemas informáticos de la actualidad.</p>\n\n<h2 id=\"por-qué-deberías-aprender-criptografía\">¿Por qué deberías aprender criptografía?</h2>\n\n<p>Ya mencionamos lo importante que es en los sistemas actuales. La mayoría de los lenguajes de programación, los desarrollos open source, como los frameworks web, muchas librerías, plataformas como servicio, etc. vienen con funciona de seguridad y criptográficas incluídas. Pero no es suficiente con <em>ser usuario</em> de estas cosas, ya que hasta los mecanismos y algoritmos mejor diseñados se pueden ser mal usados y minados por la mala utilización.</p>\n\n<p>Conocer temas como los siguientes, te permitirá subir la calidad de tus desarrollos:</p>\n\n<ul>\n  <li>¿Qué determina la seguridad de un algoritmo criptográfico?</li>\n  <li>¿Por qué es importante tener una llave de un tamaño correcto?</li>\n  <li>¿Qué algoritmo debo escoger para esta característica que tengo que desarrollar?</li>\n  <li>¿Cuáles son las principales características y diferencias de los algoritmos más usados?</li>\n  <li>¿Qué algoritmos nunca más debería usar en la vida?</li>\n</ul>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este artículo sólo hemos tocado la definición de criptografía y hemos mencionado por qué es importante. En los siguientes empezaremos a hablar de las bases que nos permitirán comprender cómo funciona la criptografía y qué mecanismos son los que permiten que brinde seguridad mediante ocultar la información.</p>\n\n<p>En el próximo artículo hablaremos de la base de todos los sistemas criptográficos. Los números (pseudo) aleatorios y sus generadores.</p>\n",
      "date_published": "Tue, 12 Nov 2019 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/10/27/entendiendo-rest-servicios-cacheables.html",
      "url": "https://blog.thedojo.mx/2019/10/27/entendiendo-rest-servicios-cacheables.html",
      "title": "Entendiendo REST: Servicios cacheables",
      "content_html": "<p>La tercera característica que <a href=\"https://twitter.com/fielding\">Thomas R. Fielding</a> (Roy Fielding a partir de ahora) establece para los sistemas <strong>REST</strong> es la capacidad de que su información sea cacheable. Veamos lo que esto significa y por qué es una característica importante. Empecemos por definir el caché.</p>\n\n<h2 id=\"qué-es-el-caché\">¿Qué es <em>el caché</em>?</h2>\n\n<p>Originalmente el caché se refiere a un tipo especial de memoria <em>muy rápida</em> en los procesadores, que guarda <em>temporalmente</em> información que tiene gran probabilidad de volver a ser utilizada <em>dentro de poco tiempo</em> (en los procesadores hablamos de nano-segundos).</p>\n\n<p>Al evitar que el procesador vuelva a consultar la RAM (muy lenta en <a href=\"https://gist.github.com/jboner/2841832\">comparación con la memoria caché</a>), las operaciones se realizan a mucha mayor velocidad.</p>\n\n<p><img src=\"https://i.imgur.com/k0t1e.png\" alt=\"Latencia de diferentes tipos de memoria\" /></p>\n\n<p>La memoria caché de los procesadores tiene una gran desventaja: <strong>es muy muy pequeña</strong>. Esto presenta retos:</p>\n\n<ul>\n  <li>¿Qué guardo aquí para maximizar la eficacia de este espacio de almacenamiento?</li>\n  <li>¿Cómo decido cuándo borrar o sobre-escribir la información que tengo aquí?</li>\n  <li>¿Qué pasa si la información original cambia mientras estoy ocupando los datos guardados en la memoria caché?</li>\n</ul>\n\n<p>Hablaremos más adelante de estas preguntas en nuestro propio contexto, pero hay técnicas para poder contestarlas con cierta eficacia, que los <a href=\"http://user.it.uu.se/~yi/pdf-files/2014/euc14.pdf\">procesadores han logrado implementar</a>.</p>\n\n<p>Así que puedes pensar en el caché como en una memoria que es más rápida (aunque más limitada). Se utiliza con el objetivo de hacer un sistema más rápido y a veces más eficiente.</p>\n\n<h2 id=\"caché-en-los-sistemas-rest\">Caché en los sistemas REST</h2>\n\n<p>Esta característica se basa en las dos que ya hablamos: <a href=\"/2019/08/03/entendiendo-rest-servidor-sin-estado.html\">servicios sin estado</a> y <a href=\"/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor.html\">arquitectura cliente-servidor</a>.</p>\n\n<p>Lo que se define como “cacheabilidad” en los sistemas REST es la capacidad\nde estos sistemas para <em>etiquetar</em> de alguna forma las respuestas para que\notros mecanismos intermedios funcionen como un caché.</p>\n\n<p>Así el sistema puede atender más peticiones, en menos tiempo, con menos\nrecursos (comparado con un sistema sin caché).</p>\n\n<p>Estos sistemas o mecanismos intermedios (existen entre el cliente y el servidor) deben ser por lo general transparentes para los desarrolladores,\nno deben afectar la manera en que los servicios se consumen.</p>\n\n<p>En sistemas web que usan <strong>HTTP</strong> para comunicarse el sistema de “etiquetado” que permite que una respuesta sea cacheada son <strong>las cabeceras</strong>. Estas permiten a los diferentes actores en el proceso de comunicación (servidor local, proxy, proxy reverso, navegador o cliente final, entre otros), saber quién debería cachear la información y por cuánto tiempo o cómo decidir si deben renovar la información. Las cabeceras HTTP comúnmente usadas para esto son:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">Expires</code>: especifica hasta cuándo se puede considerar fresca o válida la información.</li>\n  <li><code class=\"highlighter-rouge\">Cache-control</code>: Es usado para especificar directivas de caché que deben ser respetadas por todos lo puntos por los que pasa la información. Puedes ver los posibles valores y su especifacación aquí: <a href=\"https://tools.ietf.org/html/rfc2616#section-14.9\">Cache-Control Header</a></li>\n  <li><code class=\"highlighter-rouge\">Vary</code>: es usada para indicar qué otras cabeceras se deben tomar en cuenta para decidir si el servidor puede reutilizar una respuesta o no.</li>\n  <li><code class=\"highlighter-rouge\">Etag</code>: identifica a una respueste de manera única, puede usarse para pedir una respuesta nueva de un mismo endpoint, y en combinación con la cabecera <code class=\"highlighter-rouge\">If-None-Match</code></li>\n</ul>\n\n<p>Existen otras cabeceras usadas para lograr un control correcto del caché como <code class=\"highlighter-rouge\">If-Modified-Since</code>.</p>\n\n<h2 id=\"ventajas-del-caché\">Ventajas del caché</h2>\n\n<p>El caché se establece como una de las características de REST porque proporciona ventajas para el uso y la escalabilidad de los sistemas. Veamos algunas de ellas.</p>\n\n<h3 id=\"aumenta-la-percepción-de-velocidad\">Aumenta la percepción de velocidad</h3>\n\n<p>Al guardar las respuestas que es más probable que vuelvan a salir, un sistema REST puede contestar una gran cantidad de sus peticiones a la velocidad que el caché lo permita, es decir, muy rápido.</p>\n\n<h3 id=\"consumo-de-recursos-reducido\">Consumo de recursos reducido</h3>\n\n<p>El uso caché se parece mucho a una técnica de programación llamada <strong>dynamic programming</strong> que consiste en guardar temporalmente los resultados de operaciones costosas en tiempo. Esto permite que\nnos ahorremos el procesamiento de muchas respuestas que no se necesitan\nde nuevo porque están almacendas. Además se reduce el ancho de banda\nconsumido porque muchas peticiones ni siquiera tienen que llegar al servidor.</p>\n\n<h3 id=\"sistemas-más-fáciles-de-escalar\">Sistemas más fáciles de escalar</h3>\n\n<p>Los sistemas que usan caché son capaces de aguantar más peticiones\nsimultáneas por la razón que vimos anteriormente: se reduce el consumo de recursos. Además, si se require crecer el sistema se deben poner menos recursos. Para algunos sistemas, el caché es lo único que tiene que crecer\ncuando se requiere atender a más usuarios simultáneos.</p>\n\n<h2 id=\"retos-de-cachear\">Retos de cachear</h2>\n\n<p>Toda solución tecnológica implica ventajas y desventajas. Entonces ¿qué desventajas o retos implica usar un sistema de caché?</p>\n\n<h3 id=\"frescura\">Frescura</h3>\n\n<blockquote>\n  <p>Sólo hay dos cosas difíciles en Ciencias de Computación: invalidación de caché y nombrar cosas. - Phil Karlton</p>\n</blockquote>\n\n<p>El reto más grande e importante de tener un sistema de caché es lograr un\nequilibrio entre mantener la información el mayor tiempo posible y tener\ninformación correcta y actualizada. Si se almacena en caché por demasiado\ntiempo algo, esta información se vuelve vieja y por lo tanto puede estar desactualizada. Por el otro lado si se guarda por muy poco tiempo puede \nllevar a que los sistemas de caché se sub-utilicen y provean pocos\nbeneficios.</p>\n\n<h3 id=\"diseño-del-sistema\">Diseño del sistema</h3>\n\n<p>Designar qué partes del sistema pueden ser cacheables y asignar los\netiquetados de las respuestas correctamente puede aumentar la complejidad del sistema en general.</p>\n\n<h3 id=\"inconsistencia\">Inconsistencia</h3>\n\n<p>El uso de caché puede llevar a inconsistencias de información entre diferentes clientes por periodos de tiempo de diferente duración. Esto es en parte consecuencia de la dificultad de mantener el caché fresco, pero además tiene que ver con la manera en que los clientes piden la información. <strong>Si tus clientes no pueden soportar la mínima variación en la información porque tendría consecuencias graves, es mejor no cachear.</strong></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>El caché es una parte olvidada de los sistemas REST, el constraint menos mencionado. Pero es importante que les permite funcionar mejor cuando tenemos bastante carga. Mantenerlo funcionando bien es un reto, pero los sistemas que quieren ser escalables y resistentes deben implementar alguna forma de cachear.</p>\n\n<p>Roy Fielding menciona que es importante porque cualquier\nsistema expuesto a clientes desconocidos tiene el peligro de recibir una\ngran cantidad de carga súbitamente, y si tu servicio no está preparado o es\nfácil de escalar, fallarás.</p>\n\n<p>Si quieres leer un artículo más completo con otras referencias sobre el caché en REST y en HTTP te recomiendo <a href=\"https://odino.org/rest-better-http-cache/\">REST better: HTTP Cache</a>, en inglés.</p>\n\n<p>En el siguiente artículo veremos la cuarta restricción de los sistemas REST: la interfaz uniforme, la más amplia de las restricciones, pero una de las más útiles.</p>\n",
      "date_published": "Sun, 27 Oct 2019 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/10/03/el-arte-de-resolver-problemas-la-heuristica.html",
      "url": "https://blog.thedojo.mx/2019/10/03/el-arte-de-resolver-problemas-la-heuristica.html",
      "title": "El arte de resolver problemas: la heurística",
      "content_html": "<blockquote>\n  <p>La heurística habla del <strong>comportamiento humano</strong> frente a los problemas. - George Polya</p>\n</blockquote>\n\n<p>En un <a href=\"/2019/09/27/tecnicas-para-resolver-problemas.html\">artículo anterior</a> analizamos la estructura básica de un problema y la estructura de resolución que George Polya propone para intentar resolverlos.</p>\n\n<p>Polya analiza a fondo la estructura del proceso de resolución de problemas. Aquí hablaremos de <strong>la heurística</strong>, de la que escribió en <a href=\"https://math.hawaii.edu/home/pdf/putnam/PolyaHowToSolveIt.pdf\" target=\"_blank\"><strong>“How to solve it”</strong></a>, un compendio que pensó originalmente como un análisis de esta.</p>\n\n<h2 id=\"definición\">Definición</h2>\n\n<p>La palabra heurística viene de una raíz griega que transmite la idea de <strong>descubrimiento o invención</strong>. La heurística históricamente ha estado relacionada con <strong>estudiar los medios por los que se descubre o inventa algo</strong>. Su campo de estudio abarca la lógica, la psicología y la filosofía, pero no se puede acotar a ninguna de las tres áreas.</p>\n\n<p>Polya estudia y define la heurística moderna como <em>el arte de resolver problemas</em>, porque en eso consiste el proceso: descubrir una solución(en los problemas en los que hay que <em>encontrar algo</em>) o inventar algo (en los problemas en los que hay que <em>crear una demostración</em>).</p>\n\n<p>Podemos echar mano de lo que nos enseña al atacar problemas muy difíciles de los que no tenemos la mínima idea de cómo resolver o no podemos idear un plan confiable para resolverlos (recuerda que crear un plan es el punto medular de la resolución de un problema).</p>\n\n<h2 id=\"heurística-moderna\">Heurística moderna</h2>\n\n<p>La heurística actualmente busca entender el proceso de resolución de problemas, pero particularmente las operaciones mentales relacionadas con ese proceso.</p>\n\n<blockquote>\n  <p>La experiencia en la resolución de problemas u observar a otros resolver problemas debe ser la base de la heurística. - G. Polya</p>\n</blockquote>\n\n<p>Se busca encontrar patrones y propiedades comunes en una gran variedad de problemas, por lo que se puede decir que la heurística tiende a la generalidad, estudia procedimientos que son independientes del dominio del problema.\nPolya habla de múltiples métodos y procedimientos para avanzar en la resolución de un problema complicado.</p>\n\n<p>Analicemos algunos de ellos:</p>\n\n<ul>\n  <li>\n    <p><strong>Variación del problema</strong>. ¿Puedo variar por lo menos temporalmente alguna de las partes del problema? ¿Puedo cambiar los datos, las condiciones o la solución?</p>\n  </li>\n  <li>\n    <p><strong>Descomposición y recombinación</strong>. Esta operación mental implica entender y separar las partes esenciales de un problema y tratar de re-crearlo con un nuevo entendimiento o crear un problema ligeramente diferente.</p>\n  </li>\n  <li>\n    <p><strong>Regresar a las definiciones</strong>. Comprender los términos usados en cada parte del problema a veces implicará que busquemos lo que algo significa desde sus raíces. Esto nos puede ayudar a entender mejor el problema así como a introducir elementos auxiliares que ayuden en la resolución.</p>\n  </li>\n  <li>\n    <p><strong>Generalización, especialización y analogías</strong>. Estas tres operaciones son una forma de variar un problema. ¿Puedo hacer el problema más amplio, para resolver un caso más general y después aplicar los resultados o el método a mi problema original? ¿Existe un problema similar al que estoy resolviendo que pueda resolver más fácilmente?</p>\n  </li>\n  <li>\n    <p><strong>Notación adecuada</strong>. Una vez entendido el problema, sobre todo para problemas matemáticos, es muy importante introducir notación que nos pueda ayudar a trabajar sobre el problema. Para los problemas matemáticos y en ciencias en general, ya existen estas notaciones estándar. Para nuestros problemas tenemos que inventar una que la mayoría de los implicados puede entender y usar.</p>\n  </li>\n  <li>\n    <p><strong>Suponer, pero comprobar las suposiciones</strong>. Para avanzar en la resolución de un problema muchas veces hay que dar cosas por supuesto, como en el caso de las comprobaciones por reducción al absurdo. Polya afirma que no está mal suponer cosas temporalmente mientras más adelante encontremos una forma de comprobar o rechazar esas suposiciones.</p>\n  </li>\n  <li>\n    <p><strong>Trabajar en reversa</strong>. Muchas veces sabemos <em>como luce</em> la solución, o tenemos que comprobar que una solución supuesta es correcta. Trabajar en reversa significa avanzar de la solución hasta nuestro estado actual, trabajando paso por paso hasta poder encontrar la cadena de transformaciones necesarias para conectar esos estados.</p>\n  </li>\n  <li>\n    <p><strong>Aspectos psicológicos: determinación, esperanza y éxito</strong>. Al principio mencionamos que la heurística es también trataba con aspectos psicológicos. Polya afirma que sería un error considerar que los problemas son ejercicios puramente intelectuales. En el proceso de resolución influye mucho los sentimientos y emocionses. Los tres puntos mencionados aquí son muy importantes para la resolución de un problema. Primero, debemos <em>desear</em> resolver el problema, esto es la determinación. Segundo, debemos creer que somos <em>capaces</em> de resolver el problema y que este tiene solución. Y tercero, en lo relacionado con problemas intelectuales es muy difícil perseverar si no se experimenta una razonable dosis de éxito de vez en cuando. Para esto es necesario aplicar algunas de las técnicas mencionadas arriba.</p>\n  </li>\n</ul>\n\n<p>Como puedes ver, la heurística es práctica. Además la heurística aplicada a la enseñanza y a la puede tener efectos positivos, ya que ayuda a las personas a aprender a pensar mejor.</p>\n\n<h2 id=\"razonamiento-heurístico\">Razonamiento Heurístico</h2>\n\n<p>Aplicar las técnicas antes mencionadas tiene un efecto en la forma de resolver los problemas: en algunos de los pasos de la solución aceptamos soluciones supuestas, incompletas, relacionadas vagamente con el problema o parcialmente erróneas con tal de avanzar en la solución y el entendimiento del problema y de generar nuevas ideas/éxitos para mantener y aumentar la motivación.</p>\n\n<p>Esto no quiere decir que la heurística acepte soluciones erróneas, estos pasos son temporales, y las soluciones finales deben ser comprobadas con el mayor rigor posible.</p>\n\n<h2 id=\"algoritmos-heurísticos\">Algoritmos heurísticos</h2>\n\n<p>Ahora hablemos de aprovechar estas ideas para la programación, con una clase de algoritmos conocidos como algoritmos heurísticos.</p>\n\n<p>Un algoritmo heurístico en vez de garantizar siempre la mejor solución en cada paso del programa, acepta soluciones parciales o suficientemente buenas. Este tipo de algoritmos funciona muy bien en casos donde hay demasiadas soluciones posibles como para probarlas todas (fuerza bruta) o muchas de ellas (como los algoritmos de <em>backtracking</em>) y no hay ningún algoritmo establecido conocido que resuleva el problema  o se haya demostrado que esta solución es imposible.</p>\n\n<p>La principal diferencia a tener en cuenta cuando hablamos o tratamos con este tipo de algoritmos es que <strong>no garantizan la respuesta correcta o la respuesta óptima</strong>, aunque en algunos casos son la mejor forma de lograrlo. Fuera de la programación, la heurística nos ayuda a llegar a la respuesta correcta aceptando temporalmente soluciones intermedias no óptimas, semi-erróneas o incompletas, pero con soluciones finales <em>*que se pueden verificar como correctas rigurosamente</em>. No es así con los algoritmos heurísticos en la programación, y he aquí por lo que el nombre puede confundirnos.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La heurística es un campo de estudio valioso sobre todo para la vida moderna y para el desarrollo de software porque puede ayudarnos a estructurar nuestros esfuerzos en la resolución de los problemas que nos enfrentamos.</p>\n\n<p>En el siguiente y último artículo de la serie analizaremos más técnicas usadas en la resolución de problemas de las que Polya habla en el libro “How to Solve It”.</p>\n",
      "date_published": "Thu, 03 Oct 2019 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/09/27/tecnicas-para-resolver-problemas.html",
      "url": "https://blog.thedojo.mx/2019/09/27/tecnicas-para-resolver-problemas.html",
      "title": "Técnicas para resolver problemas",
      "content_html": "<p>Todos los desarrolladores nos hemos encontrado con problemas que nos dejan perplejos y que no tenemos idea de por dónde empezar a resolver.</p>\n\n<p>George Polya fue uno de los matemáticos más prolíficos del Siglo XX, un matemático de primera clase (de esos que descubren e inventan cosas, y para algunos, <strong>el matemático más influyente del siglo</strong>) pero que, a diferencia de muchos otros, mantenía un interés por la educación y la enseñanza de las matemáticas, algo muy peculiar.</p>\n\n<p>Escribió varios libros, entre ellos está <strong>“How to solve it”</strong> un tratado de 4 partes en el que explica de manera muy detallada cómo resolver problemas matemáticos principalmente, pero también cómo aplicar este conocimiento a otras áreas de la vida.</p>\n\n<p>Las técnicas explicadas por Polya te pueden ayudar a desarrollar tus capacidades de resolución de problemas.</p>\n\n<p>Empecemos por hablar de la estructura los problemas de los que Polya habla en su libro.</p>\n\n<h2 id=\"estructura-de-un-problema\">Estructura de un problema</h2>\n\n<p>Polya enseña que un problema tiene tres partes:</p>\n\n<ol>\n  <li><strong>Los datos</strong>. Es la información que tenemos disponible para resolver el problema.</li>\n  <li><strong>Las condiciones</strong>. Describen la relación que existe entre los datos y la solución, pero también la forma, los límites y características de la solución buscada.</li>\n  <li><strong>La incógnita o lo desconocido</strong>. Es la información que buscamos y que cumple con las condiciones del problema.</li>\n</ol>\n\n<p>Es muy importante conocer la composición de un problema para poder aplicar las técnicas descritas en el libro. Cualquier problema matemático <strong>debería cumplir con estas características</strong>, pero no todos los problemas de la vida real cumplen con esta estructura tal y como la necesitamos; por esta razón deberíamos desarrollar la capacidad de entender los problemas que se nos presentan y estructurarlos lo mejor posible según esta definición para facilitarnos la vida posteriormente.</p>\n\n<p>Para resolver un problema deberías ser capaz de contestar las siguientes preguntas:</p>\n\n<ul>\n  <li>¿Qué estoy buscando? -&gt; <strong>¿Cuál es la incógnita?</strong></li>\n  <li>¿Qué datos tengo disponibles? -&gt; <strong>¿Son suficientes los datos que tengo para resolver el problema?</strong></li>\n  <li>¿Qué condiciones tiene que cumplir la incógnita? -&gt; <strong>¿Es posible cumplir con esta condición?</strong></li>\n  <li><strong>¿Qué relación hay entre los datos y la incógnita?</strong></li>\n</ul>\n\n<p>Esta estructura sienta las bases para lo que viene. Ahora hablemos de de los tipos de problemas de los que Polya hace distinción.</p>\n\n<h2 id=\"tipos-de-problemas\">Tipos de problemas</h2>\n\n<p>Polya hace la distinción entre dos tipos diferentes de problemas que hay que tratar de resolver de manera ligeramente diferente aunque la estructura sea la misma.</p>\n\n<h3 id=\"1-problemas-para-encontrar\">1. Problemas para encontrar</h3>\n\n<p>Estos son los problemas básicos que nos ponían en la escuela primaria: “<strong>Hallar</strong> el área de un terreno cuadrado de 10m por lado”, “<strong>Encuentra</strong> la diámetro de una circunferencia con un perímetro de 12cm”.</p>\n\n<p>En este tipo de problemas hay que encontrar un resultado, que puede ser numérico o no. Estos son los problemas con los que nos encontramos mayormente en áreas del conocimiento muy exploradas.</p>\n\n<p>Como programadores podríamos tener estos ejemplos de este tipo de problemas:</p>\n\n<ul>\n  <li>¿Qué complejidad tiene este algoritmo que acabo de programar?</li>\n  <li>¿A cuántos usuarios simultáneos podré atender con este servidor con 4GB de RAM?</li>\n  <li>¿Cuánto tiempo va a tardar en subir mi millón de archivos si lo vuelvo paralelo? ¿Cuánto va a tardar si no lo paralelizo?</li>\n</ul>\n\n<p>Varios de estos problemas suenan demasiado simples porque ya los tenemos bien trabajados a base de repetición. Pero otros que no tienen una respuesta numérica pueden ser un poco más complicados:</p>\n\n<ul>\n  <li>¿Qué base de datos debería usar para servir notificaciones en tiempo real?</li>\n  <li>¿Qué lenguaje de programación debo usar para un sistema que estará emebebido en un millón de dispositivos electrónicos mandando notificaciones críticas cada segundo?</li>\n  <li>¿Qué sistema de comunicación puedo usar entre dos dispositivos que no cuentan con una conexión confiable a internet?</li>\n</ul>\n\n<p>En los ejemplos anteriores encontrar una solución concreta a las preguntas planteadas permite avanzar.</p>\n\n<h3 id=\"2-problemas-para-demostrar\">2. Problemas para demostrar</h3>\n\n<blockquote>\n  <p>“Demuestre que la línea de mayor longitud que toca dos puntos de una circunferencia pasa por el centro del círculo”.</p>\n</blockquote>\n\n<p>Esto es un ejemplo de un problema para demostrar. Estos implican la comprobación o refutación de una aserción (<em>hipótesis</em>) enunciada en el problema. Estos problemas generalmente nos los ponían en la preparatoria o universidad, por su naturaleza son un poco más difíciles en general.</p>\n\n<p>Para un desarrollador podríamos poner problemas para demostrar como:</p>\n\n<ul>\n  <li>“Demuestra que es imposible un bloqueo mutuo entre procesos con el algoritmo usado actualmente”.</li>\n  <li>“¿Cómo sabemos que evitamos todas las condiciones de carrera en el sistema actual?”</li>\n  <li>“Comprueba que el máximo tiempo que puede tardar el sistema en responder es menor que X.”</li>\n</ul>\n\n<p>Estos problemas requieren soluciones más generales y abstractas en general. Espero que con estos ejemplos haya quedado clara la diferencia entre los diferentes tipos de problemas.</p>\n\n<h3 id=\"problemas-matemáticos-acertijos-y-problemas-de-la-vida-real\">Problemas matemáticos, acertijos y problemas de la vida real</h3>\n\n<p>Polya habla en sus libro sobre todo de un tipo específico de problemas: <strong>los problemas matemáticos</strong>.</p>\n\n<p>Un problema matemático bien definido cuenta con:</p>\n\n<ol>\n  <li>Datos suficientes para resolución</li>\n  <li>No tiene datos sobrantes</li>\n  <li>Condiciones no contradictorias o imposibles de cumplir</li>\n</ol>\n\n<p>Por extensión, <strong>los acertijos</strong> cumplen con las mismas características, y se dan algunos de ejemplos de ellos en el libro.\nPero los problemas de la vida real son muy diferentes, ya que estos pueden no cumplir con las características completas\nde un problema bien definido. Así que uno de los pasos previos para resolver un problema de la vida real es intentar definir lo mejor posible el problema por resolver y completarlo en caso de que falte algo.</p>\n\n<h2 id=\"cómo-empezar-a-resolver-un-problema\">Cómo empezar a resolver un problema</h2>\n<p>Polya plantea cuatro etapas de resolución de un problema:</p>\n\n<ol>\n  <li>Entendimiento</li>\n  <li>Planeación</li>\n  <li>Ejecución</li>\n  <li>Retrospectiva</li>\n</ol>\n\n<p>Hablemos de cada una, para entender claramente cómo podemos mejorar nuestras posibilidades de resolución de un problema.</p>\n\n<h3 id=\"entendimiento\">Entendimiento</h3>\n\n<blockquote>\n  <p>Es tonto contestar una pregunta que no entiendes. Es triste trabajar por un fin que no deseas. - <strong>G. Polya</strong></p>\n</blockquote>\n\n<p>El entendimiento del problema consiste primero en asegurarnos de que <strong>entendemos el planteamiento verbal del problema</strong>, si no tenemos ni siquiera un planteamiento verbal, debemos empezar por crearlo.</p>\n\n<p>Para decir que comprendemos el problema, tenemos que conocer los datos que se dan, las condiciones a satisfacer y la incógnita o lo que hay que demostrar.</p>\n\n<p>Esta parte puede llevar gran parte del tiempo total dedicado al problema, ya que es el fundamento de los próximos pasos, sin la que no se puede continuar.</p>\n\n<p>### Planeación</p>\n\n<p>El siguiente paso es trazar un plan para atacar el problema. El plan consiste en saber que transformaciones, derivaciones y combinaciones tenemos que hacer con los datos para llegar a la solución esperada.</p>\n\n<p>Esta es la parte más difícil, ya que implica conocimiento profundo del problema. Para Polya, concebir un plan es el mayor logro en la resolución de un problema. Cuando lo concebimos parece que tenemos una “idea brillante”.</p>\n\n<p>Pero es casi imposible tener una idea brillante cuando sabemos muy poco del tema. Las buenas ideas están basadas en conocimiento y experiencia previa. Por eso conviene preguntarse: <strong>¿Conozco o resuelto un problema relacionado o similar?</strong>. Hablaremos de otras preguntas que nos pueden ayudar a concebir un plan más adelante.</p>\n\n<p>### Ejecución</p>\n\n<p>Es hora de llevar a cabo los pasos establecidos en la planeación. En esta etapa hay que ejecutar cada uno de los pasos que establecimos en la planeación de ejecución del problema. Polya dice que aquí es donde <strong>hay que ser rigurosos con lo que hacemos</strong>, verificando que lo que hacemos tenga sentido y sea estrictamente correcto. ¿Puedes comprobar en cada paso que es correcto lo que estás haciendo?</p>\n\n<p>### Retrospectiva</p>\n\n<p>En este paso hay que <strong>examinar el resultado</strong>. ¿Puedes probar que el resultado final es correcto?\nAdemás podemos ver si podemos hacer algo diferente, si nuestro resultado cumple con todo lo esperado y si podemos encontrar o derivar el resultado de alguna otra forma ahora que ya sabemos cuál es.</p>\n\n<p>Este paso también sirve para verificar si el resultado o el método que usamos para resolverlo nues puede ayudar con algún otro problema que tengamos que resolver.</p>\n\n<h3 id=\"las-preguntas-de-polya\">Las preguntas de Polya</h3>\n\n<p>Polya estableció una serie de preguntas que pueden guiarte en la solución de un problema, muy relacionadas con los pasos de los que acabamos de hablar. Estas preguntas las repite vez tras vez en el libro y en verdad son iluminadoras si estás atorado en algún problema que no puedes resolver. A continuación las listamos.</p>\n\n<ul>\n  <li>¿He resuelto un problema <strong>relacionado</strong>? ¿Conozco un <strong>problema que se aproxime</strong>?</li>\n  <li>¿Estoy usando todos los datos?</li>\n  <li>¿Puedo cambiar algo del problema para hacerlo más fácil?\n    <ul>\n      <li>¿Puedo cambiar los datos?</li>\n      <li>¿Puedo cambiar las condiciones?</li>\n      <li>¿Puedo cambiar la incógnita?</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"para-recordar\">Para recordar</h2>\n\n<p>Para resolver un problema:</p>\n<ul>\n  <li>Asegúrate de entender el problema completamente: qué datos tienes, qué relación hay entre los datos y la incógnita y lo que tienes que encontrar.</li>\n  <li>Planea cómo vas a atacar el problema</li>\n  <li>Si estás detenido en la resolución de un problema puedes:\n    <ul>\n      <li><strong>Variar los datos</strong>, las condiciones o el resultado esperado.</li>\n      <li>Pensar en otros problemas que se le parezcan: puedes usar el método que usaste para resolverlos o el resultado.</li>\n      <li>Aceptar soluciones parciales, parcialmente erróneas o asumidas.</li>\n      <li>Genera nuevas ideas y re-evalúa el problema y el plan a la luz de cada nuevo paso.</li>\n    </ul>\n  </li>\n  <li>Aprovecha cualquier idea aunque suene disparatada.</li>\n</ul>\n\n<p>En el siguiente post hablaremos de 5 cosas más de las que Polya habla en su libro: heurística, inducción, deducción, análisis y síntesis.</p>\n",
      "date_published": "Fri, 27 Sep 2019 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2019/09/27/recursos-gratutitos-para-aprender-a-programar-desde-cero.html",
      "url": "https://blog.thedojo.mx/2019/09/27/recursos-gratutitos-para-aprender-a-programar-desde-cero.html",
      "title": "Recursos gratutitos para aprender a programar desde cero",
      "content_html": "<p>¿Quieres aprender a programar y no sabes por dónde empezar?</p>\n\n<p>En este post te daremos algunos recursos que puedes seguir para aprender a programar desde lo más básico hasta tener un conocimiento razonable de programación con el que podrías empezar a trabajar como becario.</p>\n\n<h2 id=\"motívate\">Motívate</h2>\n\n<p>Para ser un buen programador es importante conocer las bases, pero para eso antes hay que tener motivación y <em>mantenerla</em>. Así que empecemos por algo que te mostrará el poder de la programación y de lo que puedes hacer con un poco de conocimiento.</p>\n\n<h2 id=\"ahora-sí-las-bases\">Ahora sí, las bases</h2>\n\n<h2 id=\"crea-algo-real\">Crea algo real</h2>\n\n<h2 id=\"has-una-especialización\">Has una especialización</h2>\n\n<h2 id=\"notas-finales\">Notas finales</h2>\n\n<h3 id=\"aprende-inglés\">Aprende inglés</h3>\n\n<h3 id=\"obliga-a-alguien-a-ser-tu-mentor\">Obliga a alguien a ser tu mentor</h3>\n\n<h3 id=\"sigue-practicando\">Sigue practicando</h3>\n",
      "date_published": "Fri, 27 Sep 2019 00:00:00 -0500"
      }
    
  ]
}
        
      </section>

      <footer class="page__meta">
        
        


        
      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<!-- Begin Mailchimp Signup Form -->
<link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
<style type="text/css">
	#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
</style>
<div id="mc_embed_signup">
<form action="https://thedojo.us20.list-manage.com/subscribe/post?u=8e502c6ff53aacad881b3629d&amp;id=c9486cf5f1" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div id="mc_embed_signup_scroll">
	<label for="mce-EMAIL">Suscríbete</label>
	<input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_8e502c6ff53aacad881b3629d_c9486cf5f1" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
    </div>
</form>
</div>
<!--End mc_embed_signup-->

<!-- <script type="text/javascript" src="/assets/jquery.scrolldepth.min.js"></script> -->

<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>

<script type="text/javascript" src="//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script><script type="text/javascript">window.dojoRequire(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us20.list-manage.com","uuid":"8e502c6ff53aacad881b3629d","lid":"c9486cf5f1","uniqueMethods":true}) })</script>

        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2019 . Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>
  <script src="https://kit.fontawesome.com/4eee35f757.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
