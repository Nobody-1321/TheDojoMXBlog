<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.22.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title></title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="">
<meta property="og:title" content="">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>






<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title=" Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->


    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->


<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": null,
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>
  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt=""></a>
        
        <a class="site-title" href="/">
          The Dojo Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  


  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          


        </header>
      

      <section class="page__content" itemprop="text">
        
        {
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2021/09/29/estandares-de-calidad-en-el-software.html",
      "url": "https://blog.thedojo.mx/2021/09/29/estandares-de-calidad-en-el-software.html",
      "title": "La Importancia de los Estándares de Código",
      "content_html": "<p>Los estándares se encuentran constantemente presentes en nuestra vida cotidiana, son importantes para mantener un cierto orden en las cosas. La Ingeniería de Software no es una excepción a la regla, por lo tanto, los estándares de código son un requisito básico para los sistemas de calidad.\nPara las organizaciones de nuestra época, el correcto funcionamiento de sus aplicaciones digitales representa crecimiento, si eres parte de un equipo que aún no se preocupa por esto, te invitó a siguir leyendo y conocer las ventajas de esta práctica para que asi puedas considerar utilizarla en un futuro.</p>\n\n<h2 id=\"qué-son-los-estándares-de-código\">¿Qué son los estándares de código?</h2>\n\n<p>Los estándares de código son una serie de reglas definidas para un lenguaje de programación, o bien, un estilo de programación específico. El estilo garantiza que todos los ingenieros que contribuyen a un proyecto tengan una forma única de diseñar su código, lo que da como resultado una base de código coherente, esto asegura que el producto sea fácil de leer y mantener.</p>\n\n<p>El uso de estándares es muy importante en la calidad de software, sin embargo el mantener todos los proyectos cumpliendo a la perfección con los estándares establecidos no es una tarea fácil, requiere un gran esfuerzo y constancia por parte del equipo de desarrollo. Mientras más y más compañías han adoptado estándares, todavía hay aquellas que realizan el desarrollo de sus proyectos sin estándares.</p>\n\n<h2 id=\"trabajando-sin-estándares-de-código\">Trabajando sin estándares de código</h2>\n\n<p>Cuando eres parte de un equipo que aún no ha establecido reglas a seguir es muy común que los desarrolladores escriban código a su modo, dando como resultado un repositorio difícil de entender y por tanto difícil de mantener. La falta de un código organizado se puede transformar en horas y horas buscando un problema antes de estar siquiera cerca de donde podría haberse originado.</p>\n\n<p>Tambien puede propiciar un ambiente de trabajo hostil, en el que ciertos ingenieros escriben código con un estilo propio y otros lo hacen diferente, al momento de unificar el trabajo hay discusiones para elegir la mejor opción, y al no haber una regla establecida y validada poro todo el equipo, la discusión puede tornarse mas larga de lo normal, provocando retrasos en la entrega de nuevas implementaciones.</p>\n\n<p>Siendo realistas al crear un producto/proyecto nuevo nos enfocamos en conseguir que la aplicación funcione como primer meta, esto no es malo, usualmente las aplicaciones de software tienen un fin comercial/economico que debe resolverse en principio, pero una vez se alcanza cierta estabilidad es importante regresar a revisar el producto inicial y considerar refactorizaciones, esto con el fin de tener un futuro más sencillo.</p>\n\n<h2 id=\"como-implementar-estándares-de-código-en-proyectos-existentes\">Como implementar estándares de código en proyectos existentes</h2>\n\n<p>“Roma no fue construida en un día.” la migración debe ser progresiva, no es algo que se consigue de la noche a la mañana, es recomendado adoptar estas practicas en nuevos proyectos y poco a poco ir implementando un nivel adecuado de estándares en los existentes.</p>\n\n<p>Considera que en un inicio puede ser difícil para el equipo de ingenieria adaptarse, el contraste entre no tener reglas oficiales establecidas en el proceso de revisión de código vs, el comenzar a tenerlas puede ser un cambio que no todos tomén de forma natural, a algunos les llevara más tiempo que a otros. Para reducir ese tiempo de adaptación es importate dar a conocer a todo el equipo las ventajas principales de esta practica.</p>\n\n<p>No todas las compañías utilizan las mismas herramientas en sus desarrollos y es muy complicado que se encuentre un estándar ideal que se adapte a las necesidades especificas, por ello, para que todos esten en el mismo canal es recomendable establecer un grupo de estándares propios, es decir, crear tu propio repositorio de estándares es un buen comienzo para lograr código de calidad.</p>\n\n<p>Pueden iniciar adoptando estándares oficiales de las herramientas/lenguajes que utilizan. Automatizar ciertos procesos de validaciones del código puede ser de gran ayuda para una integración continua.</p>\n\n<h2 id=\"consideraciones\">Consideraciones:</h2>\n\n<ol>\n  <li>\n    <p>Tomar como base estándares oficialmente publicados de las herramientas que se utilizan en cada proyecto.</p>\n  </li>\n  <li>\n    <p>Para obtener un código de fácil lectura es necesario poner atención al estilo del mismo; segmentos de código, correcto uso de indentación, longitud de lineas y espacios entre ellas.</p>\n  </li>\n  <li>\n    <p>Asignación de nombres en variables, funciones, etc.</p>\n  </li>\n  <li>\n    <p>Establecer límites en complejidad o longitud de funciones.</p>\n  </li>\n</ol>\n\n<p>Y lo más importante, no detenerse en la aplicación de estas reglas, no incrementemos la deuda técnica en nuestros proyectos, quizá al día de hoy tengas un proyecto muy grande en el que jamás se han aplicado estándares y te parece una pérdida de tiempo comenzar a hacerlo, pero es una inversión que vale la pena, para ir construyendo no sólo un producto de calidad, sino también un equipo de ingeniería con calidad. Si la implementación de estos estándares comienza a ser un verdadero dolor de cabeza, es muy recomendable considerar una refactorización completa de tu sistema. “Divide y vencerás” es recomendable iniciar módulo por módulo.</p>\n\n<h2 id=\"ventajas-de-la-implementación-de-estándares\">Ventajas de la implementación de estándares:</h2>\n\n<ol>\n  <li>\n    <p>Detección temprana de fallas:\nAl buscar cumplir con los estándares que establezcas es más sencillo detectar posibles errores desde la revisión de código, evitando que esos problemas lleguen a producción.</p>\n  </li>\n  <li>\n    <p>Reducción de la complejidad:\nEl cumplir con las reglas acerca del estilo de código ayuda a construir código más limpio, permitiéndo detectar fácilmente oportunidades para simplificar funciones.</p>\n  </li>\n  <li>\n    <p>Código de fácil lectura:\nEl respetar los estándares en un proyectos le permite a nuevos miembros del equipo acoplarse más fácilmente al ritmo de trabajo y a entender mejor el código en los repositorios.</p>\n  </li>\n  <li>\n    <p>Código reusable:\nContar con segmentos de código que pueden ser consumidos por más de un servicio, gracias al uso de buenas prácticas, hace menos frecuente la repetición de código.</p>\n  </li>\n</ol>\n\n<h2 id=\"principios-de-código-limpio-recomendados\">Principios de código limpio recomendados:</h2>\n\n<p>Es una buena estrategia buscar que todo el equipo de ingenieros esté familiarizado con principios de código limpio, por esto a continuación se enlistan algunos de los principios que te inspirarán a crear estándares para tu equipo. En busca de software de calidad.</p>\n\n<ol>\n  <li>DRY - Don’t Repeat Yourself.</li>\n  <li>YAGNI - You Aren’t Gonna Need It.</li>\n  <li>KISS - Keep it Simple, Stupid.</li>\n  <li>\n    <p>SOLID</p>\n\n    <p>S - Single-Responsiblity Principle.</p>\n\n    <p>O - Open-Closed Principle.</p>\n\n    <p>L - Liskov Substitution Principle.</p>\n\n    <p>I - Interface Segregation Principle.</p>\n\n    <p>D - Dependency Inversion Principle.</p>\n  </li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión:</h2>\n\n<p>Considera que siempre habrá procesos por mejorar pero es un esfuerzo continuo y podrás seguir trabajando en ello.</p>\n\n<p>Algunos de los resultados, que en mi experiencia trabajando con equipos de ingeniería que usan esta practica, he visto:</p>\n\n<ul>\n  <li>Reducciónes entre el 40 y 60% en incidencias.</li>\n  <li>Disminución en el número de despliegues de “hotfix”.</li>\n  <li>Una mejora significativa en la calidad del equipo de desarrollo.</li>\n</ul>\n\n<p>Como podemos ver la definición y el uso de estándares proporciona muchos beneficios, en lo personal, disfruto más el trabajo cuando se tiene un enfoque hacia el código de calidad que cuando no hay reglas establecidas, sin embargo eso no se puede lograr sin el trabajo de todos los ingenieros en un equipo, se trata de apuntar todos juntos a un mismo objetivo.</p>\n",
      "date_published": "Wed, 29 Sep 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/09/06/entendiendo-la-cohesion-y-el-acoplamiento-en-el-software.html",
      "url": "https://blog.thedojo.mx/2021/09/06/entendiendo-la-cohesion-y-el-acoplamiento-en-el-software.html",
      "title": "Entendiendo la cohesión y el acoplamiento en el software",
      "content_html": "<p>Siempre se dice que una buena base de código tiena alta cohesión, pero bajo acoplamiento. ¿Cómo se puede entender esto? ¿Cómo podemos llevar este principio a la práctica? En este artículo vamos a definir cada uno de esos términos de manera sencilla, con ejemplos y cómo llegar a la aplicación real de estos términos.</p>\n\n<h2 id=\"cohesión\">Cohesión</h2>\n\n<p>La <strong>cohesión</strong> de los módulos en el desarrollo de software se refiere al grado en el que sus componentes internos se relacionan entre sí. Es decir, un módulo tiene <strong>alta cohesión</strong> si todos sus componentes trabajan para un mismo objetivo y no para cosas dispares.</p>\n\n<p>Este grado de cohesión permitirá que el componente utilice menos otros módulos externos.</p>\n\n<p>Para lograr esto tu módulo debe enfocarse en hacer una sola cosa, en tratar con un aspecto específico de tu problema general. Pongamos un ejemplo:</p>\n\n<p>Imagina que estás creando un chatbot, un programa que, usando las API’s de los aplicaciones de comunicación te permite interactuar con tus usuarios en forma de chat. El sistema tiene como requerimiento que la lógica de conversación sea fácil de reemplazar y mantener.</p>\n\n<h2 id=\"acoplamiento\">Acoplamiento</h2>\n\n<h3 id=\"tipos-de-acoplamiento\">Tipos de acoplamiento</h3>\n\n<h2 id=\"cómo-lograr-alta-cohesión-y-bajo-acomplamiento\">Cómo lograr alta cohesión y bajo acomplamiento</h2>\n\n<h2 id=\"conclusiones\">Conclusiones</h2>\n",
      "date_published": "Mon, 06 Sep 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/08/24/crypto.html",
      "url": "https://blog.thedojo.mx/2021/08/24/crypto.html",
      "title": "Crypto",
      "content_html": "\n",
      "date_published": "Tue, 24 Aug 2021 22:26:29 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/07/30/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html",
      "url": "https://blog.thedojo.mx/2021/07/30/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html",
      "title": "Análisis de los principios SOLID: Principio de Responsabilidad Única",
      "content_html": "<p>En esta serie de artículos vamos a hablar sobre los cinco principios SOLID, debido a que son algo que se dice que todo programador que quiera crear código mantenible debe saber y usar. La estructura de los artículos llevará la siguiente forma:</p>\n<ul>\n  <li>Explicación del principio</li>\n  <li>Ejemplos de código</li>\n  <li>Contraejemplos</li>\n  <li>Críticas y alternativas</li>\n</ul>\n\n<p>Esta serie de artículos surge debido a que aunque son poco entendidos por la mayoría de los programadores, estos principios se toman como verdades universales que hay que seguir. Si queremos desarrollar buen software, no podemos ir por allí sólamente aceptando lo que <em>todos</em> dicen que está bien sin entenderlo a fondo y cuestionarlo.</p>\n\n<p>Empecemos diseccionando el primer principio de los aclamados SOLID: el principio de Responsabilidad Única.</p>\n<h2 id=\"el-principio-de-responsabilidad-única\">El principio de Responsabilidad Única</h2>\n\n<blockquote>\n  <p>“Los programas deben ser responsables de sus propias acciones, no de las acciones de otros programas.”</p>\n</blockquote>\n\n<p>Luego de hablar de los principios SOLID, vamos a hablar de uno de ellos que es muy importante para el desarrollo de software, pero que aún no está muy bien entendido por muchos programadores. Otro de los principios SOLID es el principio de Responsabilidad Única.</p>\n",
      "date_published": "Fri, 30 Jul 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/07/19/como-transmitir-conocimiento-en-el-desarrollo-de-software.html",
      "url": "https://blog.thedojo.mx/2021/07/19/como-transmitir-conocimiento-en-el-desarrollo-de-software.html",
      "title": "Como transmitir conocimiento en el desarrollo de software",
      "content_html": "<p>Desarrollar software es una de las cosas que están basadas completamente en el conocimiento que tenemos sobre lo que estamos programando.</p>\n\n<p>La charla <a href=\"https://www.youtube.com/watch?v=80EE4mZmp3A\">“Eloquent Explanations”</a> de <a href=\"/2021/07/14/desarrolladores-de-los-que-puedes-aprender-russ-olsen.html\">Russ Olsen</a>. En ella se proponen 5 puntos para darnos a entender cuando compartimos conocimiento con nuestro equipo u otras personas. Aquí te resumo lo que aprendí.</p>\n\n<h2 id=\"la-motivación\">La motivación</h2>\n\n<p>Primeramente hablemos de <strong>la motivación</strong> para explicar mejor las cosas: lo que nos limita para construir software es conocimiento. Conocimiento sobre el dominio, el negocio o el sistema. Es por eso que compartirlo es una muy buena forma de ayudar al equipo a avanzar. La principal forma de compartirlo es con explicaciones.</p>\n\n<h2 id=\"tómatelo-en-serio\">Tómatelo en serio</h2>\n\n<p>Debemos tener un plan o una estructura para compartir el conocimiento, lo primero es no sacar tus pensamientos sin estructura. Russ propone algunas estructuras, como las siguientes:</p>\n\n<ul>\n  <li>\n    <p><strong>Zoom In</strong>: Empieza en el contexto más amplio y termina en los detalles. Por ejemplo: Queremos vender zapatos -&gt; Por eso estamos construyendo un eCommerce -&gt; Por eso necesitamos este botón de “Pagar”.</p>\n  </li>\n  <li>\n    <p><strong>Zoom Out</strong>: Empieza en el detalle y termina en el contexto más amplio. Por ejemplo: Necesitamos mejorar la retención de esta pantalla -&gt; Porque es fundamental para terminar la compra -&gt; Por que necesitamos acabar con el stock de este trimestre.</p>\n  </li>\n  <li>\n    <p><strong>De los simple a lo complejo</strong>: Empieza explicando lo más básico, sin saltarte nada. Este método puede implicar ocultar información <em>intencionalmente</em> o explicarla en términos inexactos, pero que cuando llegue el momento se tendrán que aclarar y expandir.</p>\n  </li>\n  <li>\n    <p><strong>Explica el proceso</strong>: Este tipo de explicaciones se adapta bien a escenarios en dónde tienes que describir una transformación progresiva. Por ejemplo, cuando hablamos de cómo se transforma una petición web en un respuesta en cualquier framework web.</p>\n  </li>\n</ul>\n\n<p>Lo más importante es encontrar la estructura que más se  adapte a tu situación.</p>\n<h2 id=\"sé-agil\">Sé Agil</h2>\n\n<p>Tus explicaciones debe seguir el mismo ciclo que el desarrollo de software:</p>\n\n<ol>\n  <li>Explica: ejecuta siguiendo el plan que trazaste</li>\n  <li>Mide: tienes que leer a la audiencia y darte cuenta de si tu explicación está funcionando. Busca señales como si las preguntas van cambiando, no te miran raro y no hay un silencio mortal.</li>\n  <li>Ajusta: si tu explicación no está logrando transmitir lo que quieres, cambia de estrategia, simplifica o busca nuevos ejemplos.</li>\n  <li>Repite: vuelve a iniciar el proceso con nuevo conocimiento aplicando lo que aprendiste.</li>\n</ol>\n\n<h3 id=\"empieza-en-lo-más-básico\">Empieza en lo más básico</h3>\n\n<p>Esto viene de un aprendizaje del autor de la plática mientras daba una taller en el quería enseñar Ruby on Rails. Había algunas personas en el auditorio que preguntaban una y otra vez lo mismo (señal de que no está funcionando tu explicación), hasta que comprendieron que Ruby es el lenguaje y Rails es el framework, cosa que Russ no había pensado siquiera en explicar.</p>\n\n<p>Cuando explicamos algo que conocemos muy bien, puede que nos saltemos información que no tenemos presente que necesitamos saber, justo por el dominio tan amplio que tenemos del problema. Tenemos que ser cuidadosos en esto e intentar dar la mayor cantidad de información posible, incluso la que pueda ser muy básica.</p>\n\n<p>A veces parece que lo que estamos diciendo es obvio, pero aquí menciona una frase muy interesante:</p>\n<blockquote>\n  <p>“Nadie en esta sala nació con ese conocimiento codificado en su ADN” - Russ Olsen (cuando el público se rio de la explicación tan básica que tuvo que dar)</p>\n</blockquote>\n\n<p>Esto nos debe recordar que a nosotros también nos tienen que explicar cosas que para otros son obvias.</p>\n\n<h2 id=\"haz-cortas-tus-explicaciones\">Haz cortas tus explicaciones</h2>\n\n<p>Explicar es un deporte con límite de tiempo. Tenemos un tiempo limitado para explicar lo que queremos antes de <strong>perder la atención de la persona</strong>, por lo que comprimir la información y decir primero lo más importante es buena idea.</p>\n\n<p>Uno de los consejos que Russ da es evitar la jerga técnica. La terminología es un obstáculo para los que están empezando, y sólo quitará tiempo a tu explicación, aburriendo o comunicando muy poco en un espacio grande de tiempo, mientras la puedas evitar hazlo.</p>\n\n<p>Una buena noticia: <strong>puedes resetear el reloj y comprarte más tiempo</strong> si logras que las personas a las que les estás explicando tengan pequeñas victorias, entendiendo progresivamente el tema en cuestión.</p>\n\n<h2 id=\"usa-la-repetición\">Usa la repetición</h2>\n\n<p>Repite para énfasis y para dar contexto. El <em>“Don’t repeat yourself”</em> es para las máquinas, los humanos necesitamos repetición para entender que algo es importante o para recordar el contexto de algo.</p>\n\n<p>Así que usa la repetición para resaltar las ideas más importantes de tu explicación.</p>\n\n<h2 id=\"muéstrate-como-humano\">Muéstrate como humano</h2>\n\n<p>Muéstrate humano. Las explicaciones que causan una reacción emocional en los que escuchan, como las que incluyen humor, las que demuestran sentimientos o conectan en un nivel humano con las personas son las que dejan las cosas grabadas. Russ cuenta la experiencia de la portada de un libro que lo hizo reír y por eso se ha acordado de él toda la vida.</p>\n\n<p>Hazles saber por qué importa lo que estás diciendo, muestra el interés o el amor que tienes por el tema. Una buena explicación puede cambiar tu compañía, tu equipo o incluso el mundo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Explicar algo de manera que otros comprendan no es algo sencillo. Necesitas práctica, intención y esfuerzo para lograrlo. Si lo dominas, sin duda serás un componente muy valioso de cualquier equipo en el que participes en el desarrollo de software.</p>\n\n<p>Puedes ver la charla completa aquí:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/80EE4mZmp3A\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n",
      "date_published": "Mon, 19 Jul 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/07/14/desarrolladores-de-los-que-puedes-aprender-russ-olsen.html",
      "url": "https://blog.thedojo.mx/2021/07/14/desarrolladores-de-los-que-puedes-aprender-russ-olsen.html",
      "title": "Desarrolladores de los que puedes aprender: Russ Olsen",
      "content_html": "<p>En este capítulo vamos a Hablar de <a href=\"http://russolsen.com/\">Russ Olsen</a>, un desarrollador ahora de <a href=\"https://clojure.org/\">Clojure</a>, pero bastante reconocido en el mundo de Ruby. Ha escrito varios libros y contribuye activamente a la comunidad mediante podcasts, presentaciones y charlas.</p>\n\n<h2 id=\"acerca-de-russ\">Acerca de Russ</h2>\n\n<p>Russ trabaja como vicepresidente de <a href=\"https://www.cognitect.com/\">Cognitec</a>, la empresa que está detrás de Clojure. Ha participado en proyectos que parecen bastante complejos, su Github muestra creación de compiladores, marshalling y otras cosas interesantes.</p>\n\n<p>Según la biografía que se encuentra en <a href=\"https://gotocon.com/berlin-2015/speaker/Russ+Olsen\">sitios de conferencias</a> ha trabajado en motores de renderizado 3D, sistemas de consulta de bases de datos y sistema de flujos de trabajo, en pocas palabras, proyectos bastante complejos.</p>\n\n<p>Russ es el autor de tres libros bastantes respetados:</p>\n\n<ul>\n  <li><a href=\"https://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104\">Eloquent Ruby</a>: acerca de cómo escribir Ruby idiomáticamente.</li>\n  <li><a href=\"https://www.amazon.com/gp/product/B004YW6M6G/ref=dbs_a_def_rwt_hsch_vapi_tkin_p1_i2\">Design Patterns in Ruby</a>: la implementación de los patrones de diseño clásicos en Ruby.</li>\n  <li><a href=\"https://pragprog.com/titles/roclojure/getting-clojure/\">Getting Clojure</a>: te enseña a programar en Clojure mientras te explica las ideas detrás de cada una de las caracerísticas del lenguaje, ya que es importante concer <em>la visión</em> detrás del lenguaje.</li>\n</ul>\n\n<h2 id=\"las-ideas-de-russ\">Las ideas de Russ</h2>\n\n<p>Russ tiene ideas muy pragmáticas para crear software, con un background de ingeniería mecánica. Vamos a hablar de algunas cosas que podemos aprender de él y aplicar directamente en nuestras carreras y proyectos.</p>\n\n<ol>\n  <li>\n    <p>Transmitir conocimiento es MUY IMPORTANTE para el desarrollo de software. Si no lo compartimos ponemos en riesgo el desarrollo del proyecto en el que estamos participando. Saber explicarlo de manera sencilla es una habilidad que todos debemos adquirir.</p>\n  </li>\n  <li>\n    <p>La programación funcional, como una serie de <em>restricciones, técnicas y habilidades</em> que reorganizan la forma en que escribimos código, es una forma de crear código de mejor calidad y más mantenible.</p>\n  </li>\n  <li>\n    <p><strong>Trabajar con otras personas</strong> es uno de los aspectos más importantes que tiene el desarrollo de software y saber organizarla y tratar con ellas es imperativo para llevar a los proyectos a buen término.</p>\n  </li>\n  <li>\n    <p><strong>Crear cosas que importen</strong> y difíciles te inspirará para seguir creando y también a otras personas.</p>\n  </li>\n</ol>\n\n<h2 id=\"charlas-y-presentaciones\">Charlas y presentaciones</h2>\n\n<blockquote>\n  <p>“Ve y haz cosas difíciles.” - Russ Olsen</p>\n</blockquote>\n\n<p>Aquí tienes las tres charlas que Russ que pueden aportar a tu conocimiento y motivación para seguir creando software:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://www.youtube.com/watch?v=l3XwpSKqNZw\">To the Moon</a>. Si vas a ver una charla de Russ Olsen, tiene que ser esta. Tiene nulo contenido técnico, pero te puede enseñar muchas cosas: cómo dar una charla entretenida, cómo contar una historia, métodos narrativos y cómo mantener enganchada a la audiencia. En ella cuenta las dificultades técnicas que se presentaron en el proyecto del <strong>Apollo 11</strong>, y como se solucionaron. La lección más importante de la charla es: hacer cosas difíciles como ingenieros de software te ayudará a creer más en ti y a inspirar a otros.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.youtube.com/watch?v=80EE4mZmp3A\">Eloquent Explanations</a>: En esta charla Russ nos habla sobre lo importante que es comunicar claramente varios aspeectos de los sistemas que creamos, con la premisa fundamental de que el conocimiento es lo que nos permite crear el software que necesitamos. En <a href=\"https://twitter.com/HectorIP/status/1414096122306498560\">este hilo de Twitter</a> hicimos un resumen.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.youtube.com/watch?v=0if71HOyVjY\">Functional Programming in 40 minutes</a>: Como puedes ver, Russ es un programador bastante versátil. En los últimos años se ha dedicado a programar en Clojure. Esta es una de las charlas que más me ayudó a comprender la programación funcional como idea más allá de las definiciones clásicas y que te dejan híper confundido. Si quieres aprender programación funcional, esta charla te puede ayudar a entenderla para empezar con una buena base.</p>\n  </li>\n</ul>\n\n<p>Tiene varias charlas más que puedes buscar en <a href=\"https://www.youtube.com/results?search_query=russ+olsen\">YouTube</a>, pero estas son las más importantes para mi, y parece que varias de ellas son la mismas que mencionamos aquí pero repetidas.</p>\n\n<h2 id=\"recursos-para-aprender-más\">Recursos para aprender más</h2>\n\n<ul>\n  <li><a href=\"https://twitter.com/russolsen\">Twitter de Russ</a>.</li>\n  <li>Su <a href=\"https://github.com/russolsen/\">Github</a>, tiene cosas interesantes, como la implementación del lenguaje <a href=\"https://hackaday.com/2017/01/27/forth-the-hackers-language/\">Forth</a> en Python y Clojure, una implementación de Transit (un formato de serialización) en Go y Julia.</li>\n  <li>El blog de <a href=\"https://www.cognitect.com/blog/\">Cognitect</a></li>\n  <li>Este podcast en el que participó: <a href=\"https://www.youtube.com/watch?v=gcs1t91X5LA\">Get Smarter and Make Stuff</a></li>\n</ul>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Una de las cosas que aprender al ver la carrera de Russ es su flexibilidad y adaptabilidad. Russ era un gran nombre en el mundo de <strong>Rails y Ruby</strong>, pero ahora está en el mundo de Clojure y tiene una de las mejores explicaciones para aprender programación funcional.</p>\n\n<p>Además, el pragmatismo que demuestra en los consejos que da, es algo que podemos aprender a aplicar: <strong>resolver el problema es mucho más importante que sonar rimbombantes y asombrar a todos con las palabras tan bonitas que usamos</strong>.</p>\n\n<p>El último punto que quiero resaltar tiene que ver con la capacidad que tiene de contar historias, explicar progresivamente y dar charlas entretenidas. La comunicación es uno de los aspectos más importantes en el desarrollo de software, y mientras mejores seamos e eso, más podremos avanzar en nuestra carrera.</p>\n\n",
      "date_published": "Wed, 14 Jul 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney.html",
      "url": "https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney.html",
      "title": "Desarrolladores de los que puedes aprender: Kevlin Henney",
      "content_html": "<p>Hay varios desarrolladores de talla internacional de los que puedes <strong>aprender mucho</strong>, que creemos que no tienen la suficiente exposición, sobre todo en America Latina. Es por eso que estamos creando una serie de artículos y videos en la que resaltaremos la trayectoria, forma de pensar, pláticas y cosas que puedes aprender.</p>\n\n<p>Las condiciones para que aparezcan aquí son las siguientes:</p>\n\n<ul>\n  <li>Amplia experiencia real desarrollando sistemas</li>\n  <li>Que tengan algún logro notable en el desarrollo de sistemas</li>\n  <li>Comparten sus ideas con la comunidad de forma continua</li>\n  <li>No son unos <em>“brilliant jerks”</em>, es decir, no usan su experiencia o inteligencia para humillar o desacreditar a otros, y mucho menos su exposición para promover ideas nocivas.</li>\n</ul>\n\n<p>El objetivo de esta serie es que aprendamos de las personas que han dedicado su vida a esto y construyamos sobre lo que ellos han hecho en vez de reinventar la rueda cada vez.</p>\n\n<p><strong>Nota:</strong> El que los mencionemos aquí no implica que todas sus ideas son correctas o que estemos de acuerdo con todo lo que dicen. Conocer diferentes puntos de vista, sumado a tu experiencia en diferentes contextos te ayudará a tener un criterio adaptado a tu realidad.</p>\n\n<p>Ahora sí, vamos a hablar de <a href=\"https://blog.eisele.net/2013/07/the-heroes-of-java-kevlin-henney.html\">Kevlin Henney</a>.</p>\n\n<h2 id=\"acerca-de-kevlin-henney\">Acerca de Kevlin Henney</h2>\n\n<p>Kevlin Henney es un consultor, escritor, entrenador y presentador de temas relacionados con sistemas, procesos, las personas y el software. Sus escritos, talleres y consultorías siempre tienen que ver con <strong>la forma</strong> en que <em>desarrollamos</em> y <em>diseñamos</em> software, además de con los procesos y prácticas que llevan al éxito los proyectos de software complejos.</p>\n\n<p>Ha escrito columnas para múltiples revistas dedicadas al desarrollo de software. Es autor o editor de varios libros que son <em>muy recomendados</em> para arquitectos de software y desarrolladores. Algunos ejemplos son:</p>\n\n<ul>\n  <li><a href=\"https://www.amazon.com.mx/Pattern-Oriented-Software-Architecture-Distributed-Computing/dp/0470059028\">Pattern-Oriented Software Architecture, Volume 4: A Pattern Language for Distributed Computing</a></li>\n  <li><a href=\"https://www.oreilly.com/library/view/97-things-every/9780596809515/\">97 Things Every Programmer Should Know</a> - Es una colección de ensayos que Kevlin se encargó de compilar y editar, sobre cómo ser un mejor programador. También está la versión en español: <a href=\"http://97cosas.com/programador/\">97 cosas que todo programador debería saber</a></li>\n</ul>\n\n<p>Kevlin se ha presentado en casi todas las conferencias importantes de desarrollo de software europeas y de habla inglesa. Vive en Bristol, Reino Unido y también disfruta de escribir ficción, puedes encontrar en <a href=\"https://www.amazon.com/Kevlin-Henney/e/B0716N93KR%3Fref=dbs_a_mng_rwt_scns_share\">Amazon</a> sus libros de ficción. Además es muy accesible, si lo buscas en Twitter es muy probable que te conteste: <a href=\"https://twitter.com/KevlinHenney\">Kevlin Henney en Twitter</a></p>\n\n<p>Una de las cosas que menciona que más nos gusta es: <strong>“Si estás de acuerdo con todo lo qu estoy diciendo, no me estás escuchando.”</strong>.</p>\n\n<h2 id=\"algunas-ideas-de-kevlin\">Algunas ideas de Kevlin</h2>\n\n<blockquote>\n  <p>“Less code == less bugs”. - Kevlin Henney</p>\n</blockquote>\n\n<p>De las pláticas y el contenido que hemos consumido de Kevlin, hemos podido derivar algunas de las principales ideas que promueve. Te listamos las tres más importantes y te dejamos descubrir las demás viendo sus charlas o leyendo su contenido.</p>\n\n<ol>\n  <li><strong>La arquitectura de software requiere entendimiento completo del dominio.</strong> Una de las ideas que Kevlin repite vez tras vez es la importancia de entender y definir el problema que estamos tratando de resolver. Se basa en las ideas de otros autores para reforzar esto. Una de las cosas que Kevlin resalta es que debemos conocer los <strong>detalles</strong>, para poder implementar software correcto con la arquitectura adecuada.</li>\n  <li><strong>El diseño y la arquitectura de software son procesos iterativos e incrementales.</strong> Es imposible hacer un diseño completamente correcto y sin errores desde la primera vez. Es por eso que esta es una idea que se repite en sus conferencias vez tras vez. La lección para nosotros: <em>debemos diseñar el software con el conocimiento de que siempre habrá algo que mejorar</em>.</li>\n  <li><strong>El software simple, pequeño y “aburrido” es más fácil de manejar</strong>. Haciendo eco de la frase que pusimos al inicio de esta sección, una de las ideas que Kevlin promueve más es la de minimizar la cantidad de código para lograr algo, así como buscar la simplicidad tanto en funciones como de construcción. Esto último es lo que llamamos aburrido: evitar tanto como podamos tecnologías a las que no estamos acostumbrados o demasiado nuevas y que agreguen dependencias innecesarias.</li>\n</ol>\n\n<h2 id=\"pláticas\">Pláticas</h2>\n\n<p>Kevlin tiene decenas de pláticas en YouTube y Vimeo, hablando temas variados, todos relacionados de una forma u otra con el <em>proceso</em> de desarrollo y la calidad del software.</p>\n\n<p>Vamos a mencionar tres de las que nos han parecido las mejores.</p>\n\n<h3 id=\"software-is-details\">Software is Details</h3>\n\n<p>Aquí presenta una idea que repite a lo largo de sus presentaciones: <strong>la implementación del software requiere un conocimiento lo más profundo y completo que se pueda sobre el problema que se está resolviendo</strong>. Da algunos ejemplos en los que se diseñó un sistema sin pensar en los “detalles de implementación” con resultados catastróficos. Mantener la vista en el sistema entero mientras se toman en cuenta los detalles es una señal de un arquitecto de software efectivo.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kX0prJklhUE\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<h3 id=\"old-is-the-new-new\">Old is the new new</h3>\n\n<p>En esta plática resalta la importancia de conocer y dominar los principios que habilitan a las nuevas tecnologías y herramientas. Las implementaciones tienen una vida corta mientras que los principios se mantienen inalterados.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AbgsfeGvg3E\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<h3 id=\"it-depends\">It Depends…</h3>\n\n<p>Crear software <strong>depende</strong> del conocimiento que tengamos acerca del dominio que estamos tratando. Nuestro conocimiento tiene límites que no podemos sobrepasar (incertidumbre) y es contra eso con lo que debemos tener cuidado, cosas que no están inmediatamente en nuestra visión.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rNSVZs66o48\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<hr />\n\n<p>Tiene muchas más pláticas en conferencias que puedes buscar directamente en YouTube. Cada una de sus pláticas es un conjunto de ideas y referencias que es más de lo que se puede absorber en el tiempo en el que lo presenta, por lo que tal vez tengas que verlas varias veces, pero todo ese bagaje vale la pena. Aquí te dejamos una búsqueda que las agrupa: <a href=\"https://dev.tube/@kevlinhenney\">DevTube</a>.</p>\n\n<h2 id=\"preguntas-que-le-hicimos\">Preguntas que le hicimos</h2>\n\n<p>Además de investigar y aprender sobre las ideas de estos desarrolladores, creamos un cuestionario para hacérselos a todos los desarrolladores de esta serie, para que contesten las preguntas que puedan. Contactaremos directamente a cada uno y le haremos llegar las preguntas, con suerte nos contestaran.</p>\n\n<p>Kevlin fue muy accesible y nos contestó casi todas las preguntas, disfruta las respuestas.</p>\n\n<h4 id=\"cómo-fue-tu-camino-de-aprendizaje-cómo-te-hiciste-así-de-bueno\">¿Cómo fue tu camino de aprendizaje? <strong>¿Cómo te hiciste así de bueno?</strong></h4>\n\n<p>No se si soy <em>tan</em> bueno, pero mi camino ha sido una mezcla de interés apasionado experimentación, ignorancia, estudio, ¡y suerte! Me introduje en la programación en la adolescencia pero no se me ocurrió hasta que dejé la universidad que el desarrollo de software podría ser una buena elección de trabajo o carrera.</p>\n\n<p>Mientras trabajaba, fui atraído hacia el mundo de los lenguajes, técnicas, paradigmas, diseño, etc., mientras leía un conjunto aleatorio de artículos que incrementaron mi interés y fascinación. Empecé a tratar de comunicar esas ideas a través de artículos, y a relacionarlas con mis experiencias mientras trabajaba con diferentes sistemas y en en diferentes ambientes.</p>\n\n<p>Esto eventualmente me llevó a dar charlas, cursos y visitar compañías, lo cuál amplió mi campo de visión, retó algunas de mis ideas y mejoró mi habilidad para pensar con los pies en la tierra.</p>\n\n<h4 id=\"cuál-ha-sido-tu-peor-decisión-técnica-qué-restricciones-la-limitaron\">¿Cuál ha sido tu peor decisión técnica? ¿Qué restricciones la limitaron?</h4>\n\n<p>Escogeré un decisión técnica que está segura en el pasado; un cuarto de siglo en el pasado, para ser precisos. Estaba trabajando en un sistema SCADA en el sector energético. Nuestros sistemas estaban embebidos en subestaciones eléctricas y tenían muy poco ancho de banda (sólo unos pocos miles de bits por segundo). Ayudé a definir un protocolo binario compacto y que no requería mucho ancho de banda. Cuando definimos el protocolo, decidimos específicamente no preocuparnos por la seguridad en el protocolo porque, en ese tiempo, no pensamos que alguien sería lo suficientemente tonto para conectar infraestructura sensible, como la red eléctrica, a una red pública, como el Internet.</p>\n\n<p>¡Resulta que nunca debes subestimar que tan tonta puede ser la gente! Afortunadamente esto fue corregido después con unos cuántos cambios para usar SSL en vez de correr nuestros propios sockets sin protección.</p>\n\n<p>Dicho esto, aunque perdimos una tendencia futura, nos subimos a otras. No sólo corregimos el problema Y2K antes de que la mayoría de las personas siquiera supieran de él; también atendimos el problema del año 2038.<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup></p>\n\n<h4 id=\"cuál-es-el-peor-consejo-que-te-han-dado\">¿Cuál es el peor consejo que te han dado?</h4>\n\n<p>Las pruebas no son responsabilidad del desarrollador.</p>\n\n<h4 id=\"cuál-es-el-mejor-consejo-que-te-han-dado\">¿Cuál es el mejor consejo que te han dado?</h4>\n\n<p>Piensa en el desarrollo de software como la administración de la complejidad.</p>\n\n<h4 id=\"en-tu-experiencia-qué-tan-importante-es-el-lenguaje-que-seleccionamos-para-desarrollar-nuestro-software-por-qué-estamos-discutiendo-aún-sobre-los-lenguajes\">¿En tu experiencia, qué tan importante es el lenguaje que seleccionamos para desarrollar nuestro software? ¿Por qué estamos discutiendo aún sobre los lenguajes?</h4>\n\n<p>Es importante porque la elección de lenguaje es, normalmente, arquitectural. Si no estás seguro de esto, <strong>considera el costo y esfuerzo, las herramientas, las habilidades, etcétera, de lo que tomaría cambiar de lenguaje en una parte o toda tu base de código</strong>. Piensa en cuánto de tu sistema saldría afectado, como afectaría al equipo y cómo otros elementos de tu conjunto de herramientas tecnológicas serían impactados. <strong>Y más</strong>. Lejos de ser un detalle, la elección es <em>mucho más significativa de lo que muchas personas se dan cuenta</em>.</p>\n\n<p>El lenguaje, en cualquier presentación, es una forma de expresarnos. El lenguaje también está asociado con la cultura y la comunidad. Por eso peleamos acerca de él. Aunque muchos desarrolladores podrían pensar que están debatiendo racionalmente acerca de su lenguaje y sus méritos técnicos, pero típicamente esto no sucede. Debajo de la apariencia técnica de estas discusiones hay algo más  humano y menos racional, algo más social y personal. Y por eso es por lo que continuamos discutiendo sobre los lenguajes.</p>\n\n<p>Claro, hay diferencias técnicas y puntos objetivos que se pueden argumentar, pero la verdad es que esto no es el centro de las discusiones.</p>\n\n<h4 id=\"cuál-es-la-discusión-técnica-más-improductiva-que-has-tenido\">¿Cuál es la discusión técnica <strong>más improductiva que has tenido</strong>?</h4>\n\n<p>¡Probablemente sobre un lenguaje de programación!</p>\n\n<h4 id=\"qué-podrías-recomendar-a-los-programadores-jóvenes-que-aún-estén-buscando-su-camino\">¿Qué podrías recomendar a los programadores jóvenes que aún estén buscando su camino?</h4>\n\n<p>Observa la historia de la programación, la arquitectura de software, las metodologías de desarrollo, etcétera. El desarrollo de software  tiene una historia y la mayoría de las ideas profundas puede ser hallada ahí. La mayoría de las tendencias y elecciones actuales se entienden mejor al entender el pasado, en vez de sólo mirar el presente. El desarrollo de software es más conservador de lo que podrías apreciar, y las nuevas ideas raramente son originales.</p>\n\n<h4 id=\"qué-ideas-debemos-superar-como-comunidad-de-it-para-mejorar\">¿Qué ideas debemos superar como comunidad de IT para mejorar?</h4>\n\n<p>La idea de que el desarrollo de software es una actividad estríctamente neutral y técnica que no necesita considerar a la gente. La manera en que desarrollamos software y en la que es usado tiene implicaciones éticas. Necesitamos reconocer de mejor manera el espectro de personas que pueden y crean software y las responsabilidad que tienen para con las personas qeu usan el software. El software cambia al mundo; no podemos hacer eso y decir que la manera en que el mundo cambia no es nuestra responsabilidad.</p>\n\n<h4 id=\"cuál-es-el-futuro-de-la-programación-para-los-siguientes-diez-años-en-tu-opinión-qué-deberíamos-aprender-para-mantenernos-productivos\">¿Cuál es el futuro de la programación para los siguientes diez años, en tu opinión? ¿Qué deberíamos aprender para mantenernos productivos?</h4>\n\n<p>Los próximos diez van a ser muy parecidos a los diez anteriores. Va a haber nuevos frameworks, nuevas plataformas, nuevos lenguajes de programación, junto con los respectivos cambios en las habilidades. Algunas personas se emocionarán con las nuevas ideas que no son tan nuevas. Algunas personas predecirán la desaparición de los programadores y el software tal como lo conocemos. Lo que es más probable que pase es que el número de programadores va a seguir aumentando y el desarrollo de software va a seguir evolucionando, mayoritariamente en la línea que lleva ahora. El mundo continuará siendo cada vez mas dependiente de los desarrolladores de software.</p>\n\n<h2 id=\"recursos\">Recursos</h2>\n\n<p>Para aprender más de las ideas qeu Kevlin enseña, puedes investigar más de él y su trabajo aquí:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://about.me/kevlin\">Página de Kevlin Henney</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://blog.itkonekt.com/2021/01/21/kevlin-henney-on-the-topic-of-what-to-read-if-youre-a-programmer/\">What to read if you are a programmer</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://blog.eisele.net/2013/07/the-heroes-of-java-kevlin-henney.html\">Entrevista de la serie “Heroes of Java”</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://kevlinhenney.medium.com/\">Blog</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://www.slideshare.net/Kevlin/presentations\">Sus presentaciones</a></p>\n  </li>\n</ul>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Todos los desarrolladores de diferentes niveles podemos aprender mucho de las ideas que Kevlin se ha dedicado a enseñar, mientras lo hace de una manera entretenida, profunda y que va puliendo con el tiempo. Es importante escuchar a personas con experiencia para pode desarrollar el criterio propio y las habilidades y formas de pensar para ser efectivos.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>El fin del UNIX Timestamp o <a href=\"https://es.wikipedia.org/wiki/Problema_del_a%C3%B1o_2038\">Y2k38</a>. (Nota de traducción) <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Wed, 07 Jul 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software.html",
      "url": "https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software.html",
      "title": "Lo que debes saber sobre propiedad intelectual como desarrollador de software",
      "content_html": "<p>Programar es una cosa, desarrollar software algo completamente diferente, sobre todo en un ambiente comercial en el que tienes que tratar con clientes y patrones. En este entorno tienes que entender otras cosas como la forma de colaborar con ellos, los precios y algo muy importante: las leyes.</p>\n\n<p>En este artículo vamos a hacer un resumen de las cosas que platicamos con <a href=\"https://twitter.com/LaCD_Rom\">Cynthia Romero</a> y con <a href=\"https://twitter.com/LawyerCount\">Conde</a> en la plática <a href=\"https://youtu.be/CpISQxihazU\">“Todo lo que debes saber acerca de propiedad intelectual como creador de Software”</a>. También Novus hizo un resumen por si lo quieres checar: <a href=\"https://www.novusconcilium.com/post/software\">Tips legales para crear software</a>.</p>\n\n<p><strong>TL;DR</strong>: Es muy importante controlar y conocer los componentes de tu software y mantener un registro para no meterte en problemas.</p>\n\n<h2 id=\"qué-es-la-propiedad\">¿Qué es la propiedad?</h2>\n\n<p>La propiedad es la facultad que se define en el derecho como la capacidad de usar algo, aprovecharse de los frutos o productos de ese algo y la facultad de usar como quieras, incluso deshacerte de ese algo.</p>\n\n<p>La propiedad es muy fácil de entender cuando se trata de cosas físicas, pero no tanto cuando se trata de cosas intangibles. La propiedad <strong>intelectual</strong> se refiere a la aplicación de las facultades antes mencionadas a obras o trabajos que hiciste con tu mente y no con tus manos. Algo que se resaltó en la plática, es que el software y todas las obras intelectuales están protegidas por las leyes desde escribes la primera línea.</p>\n\n<h2 id=\"qué-es-una-licencia\">¿Qué es una licencia?</h2>\n\n<p>Debido a que somos los dueños de las cosas que creamos, podemos extender facultades como el uso o la distribución sobre nuestras obras. Estas facultades se formalizan mediante <strong>una licencia</strong>, que es un contrato que establece las condiciones de uso de la obra intelectual.</p>\n\n<p>Los desarrolladores de software debemos tener bien claro cómo es que queremos sacarle provecho a nuestras obras para establecer el contrato, <em>la licencia</em> adecuada. Para establecer esto, lo normal es consultar con expertos que nos ayuden a tangibilizar la licencia, ya que los términos y procedimientos legales no son fáciles de manejar, y más vale contar con la ayuda de alguien con experiencia.</p>\n\n<h2 id=\"uso-de-software-de-terceros\">Uso de software de terceros</h2>\n\n<p>Cuando desarrollamos software medianamente usable para casos cotidianos, es muy difícil que seamos nosotros quienes escribamos cada línea que compone el programa. Es por eso que confiamos en bibliotecas y piezas de software. ¿Cómo puedes asegurarte de respetar la propiedad intelectual de otros desarrolladores?</p>\n\n<p>El primer punto es que si alguna pieza de software no tiene una licencia explícita, entonces debes asumir que no tienes permiso para usarlo, mucho menos para incluirlo en software comercial o por encargo.</p>\n\n<p>Si el software que vas a usar tiene una licencia, debes asegurarte que cumples con lo que se establece en ella. Entender esto y asegurarte de que se estás cumpliendo requiere tiempo y esfuerzo, que debes considerar en la estimación del proyecto.</p>\n\n<h2 id=\"el-inventario-de-activos\">El inventario de activos</h2>\n\n<p>Muy conectado con el punto anterior existe una cosa que los creadores de software deberíamos tener muy presente: el inventario de activos (bill of materials). Este es un documento que contiene todas las piezas de software que estas usando, junto con las licencias y algún otro detalle sobre la pieza en específico. Esta lista ayudará al momento de asegurarnos que el software no está rompiendo ninguna licencia.</p>\n\n<p>Dependiendo del lenguaje que programes, hay herramientas que te pueden ayudar a verificar esto automáticamente, incluso a listar las licencias que usan, por ejemplo, Node tiene el paquete <a href=\"https://www.npmjs.com/package/license-checker\">License Checker</a> y Python tiene <a href=\"https://pypi.org/project/pip-licenses/\">PIP Licenses</a>. El que existan estas herramientas de este estilo tal vez te de una idea de <strong>lo importante</strong> que es tener tu inventario de activos controlado.</p>\n\n<h2 id=\"documentos-legales\">Documentos legales</h2>\n\n<p>Cuando queremos obtener beneficios por el software que comercializamos o exponemos a un público, es muy importante contar con documentos legales que establecen los acuerdos que se asumen con el uso del software. Estos documentos son normalmente:</p>\n\n<ul>\n  <li>La licencia de uso (para software comercial)</li>\n  <li>Los términos y condiciones de uso (para software de uso público)</li>\n  <li>El aviso de privacidad</li>\n</ul>\n\n<p>Crear estos documentos es un asunto serio en el que normalmente se necesita la ayuda de expertos, a menos que sea una aplicación muy sencilla y poco seria.</p>\n\n<p>Si estás exponiendo el software como OpenSource, entonces puedes usar una licencia prefabricada: <a href=\"https://opensource.org/licenses\">OpenSource Licenses</a>, pero también tienes que entenderlas para ver qué es lo que permites con cada una.</p>\n\n<p>Estos costos los deberías de considerar en el costo final del software.</p>\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Como desarrollador de software es importante que conozcas los temas básicos de propiedad intelectual si quieres desarrollar y comercializar software. Puedes ver la charla entera, para que obtengas más detalles aquí:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/CpISQxihazU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n",
      "date_published": "Tue, 22 Jun 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje.html",
      "url": "https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje.html",
      "title": "Fuentes no convencionales de aprendizaje",
      "content_html": "<p>Cada quien tiene su forma de aprender. A algunas personas les funcionan mejor formas visuales y no convencionales. En este artículo te vamos a presentar algunos de los recursos que hemos encontrado que explican ideas y temas relacionados con la programación con un formato no convencional.</p>\n\n<h2 id=\"te-lo-explico-con-gatitos\">Te lo explico con gatitos</h2>\n\n<p>Bel Rey, una programadora de Argentina (con la que tenemos una <a href=\"https://youtu.be/7Ea4BGxwhEA\">entrevista</a>) crea explicaciones estilo comics usando gatitos para embellecer y hacer divertidas las explicaciones.</p>\n\n<p>En este cómic explica una de las motivaciones para hacer este estilo de ilustraciones-explicaciones:</p>\n\n<p><img src=\"https://teloexplicocongatitos.com/_next/image?url=https%3A%2F%2Fdoomvault.nyc3.digitaloceanspaces.com%2Ftlecg%2Fbig%2Faprender00.jpg&amp;w=1200&amp;q=75\" alt=\"Estilos de aprendizaje - te lo explico con gatitos\" /></p>\n\n<p>Entre sus explicaciones puedes encontrar temas como Docker, programación orientada objetos y comandos SQL todo con el estilo simpático y la estética de los gatitos, algunos de ellos enojados.</p>\n\n<p>Puedes ver su contenido en:</p>\n\n<ul>\n  <li><a href=\"https://teloexplicocongatitos.com/\">Su página</a></li>\n  <li><a href=\"https://www.instagram.com/teloexplicocongatitos/\">Instagram</a></li>\n  <li><a href=\"https://twitter.com/explicocongatos\">Twitter</a></li>\n</ul>\n\n<h2 id=\"los-apuntes-de-majo\">Los apuntes de Majo</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1623713646/losapuntes_ijwxfh.png\" alt=\"Ejemplo de los apuntes de Majo\" /></p>\n\n<p>Majo Ledesma, mientras estaba estudiando programación empezó a crear notas bastante bonitas y visuales reportando y resumiendo temas diversos como Python, JavaScript, CSS y ahora amasa una gran cantidad de temas y apuntes.</p>\n\n<p>Se hizo tan famosa que el CEO de <a href=\"https://losapuntesdemajo.vercel.app/\">Vercel</a> le ofreció poner todo su contenido en línea gratis usando su plataforma.</p>\n\n<p>El estilo de los apuntes es como si estuvieras leyendo la libreta de la alumna más aplicada y dedicada del salón para cualquier materia, con ilustraciones que embellecen la nota pero no siempre relacionadas con el tema. Son apuntes completamente hechos a mano en medios físicos y digitalizados.</p>\n\n<p>Pudes obtener los apuntes:</p>\n\n<ul>\n  <li><a href=\"https://losapuntesdemajo.vercel.app/\">Los apuntes de Majo</a></li>\n  <li><a href=\"https://twitter.com/MajoLedes\">Twitter de Majo</a></li>\n</ul>\n\n<h2 id=\"wizardzines-de-julia-evans-en-inglés\">Wizardzines de Julia Evans (en inglés)</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1623630863/wz_3_vvj9pp.png\" alt=\"Algunos wizard zines\" /></p>\n\n<p>Los wizardzines son explicaciones sobre un tema en formato de cómic con dibujos sencillos e ilustrativos. Lo que resalta de estos cómics es que tratan a veces temas no tan sencillos de manera fácil de entender y para eso se lleva una buena cantidad de espacio, por lo que el artículo se convierte en una “revistita”.</p>\n\n<p>Julia vende las revistas que ha hecho en aproximadamente <em>10 USD</em>, en formato digital con instrucciones para que tú las imprimas. Sin embargo, si no las puedes pagar, Julia ofrece el modelo que yo llamaría <strong>“paga sólo si puedes”</strong>: abrió todo su contenido para que lo descargues sin costo, con la confianza de que pagarás si no es un impedimento para ti.</p>\n\n<p>En las Wiardzines puedes encontrar los siguientes temas:</p>\n\n<ul>\n  <li>“How containers work”</li>\n  <li>“Hell yes! CSS!”</li>\n  <li>“Help! I have a manager!”</li>\n</ul>\n\n<p>Además, tiene un montón de zines gratuitos que tratan temas más pequeños y no están a color.</p>\n\n<p>Su página tiene una sección llamada “questions” que te permite estudiar temas en formato de tarjetas con preguntas y respuestas que se revelan. Es una forma bastante buena de entender básicamente los temas de los que trata y al mismo tiempo de estudiar para memorizar algo que creas necesitar.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1623713772/wizard_zines_bt7dzw.png\" alt=\"Ejemplo de Questions de wizardzines\" /></p>\n\n<p>Puedes encontrar los wizardzines en:</p>\n\n<ul>\n  <li><a href=\"https://wizardzines.com/\">Página de Wizard Zines</a></li>\n  <li><a href=\"https://twitter.com/b0rk\">Twitter de Julia Evans</a></li>\n</ul>\n\n<h2 id=\"visual-partner\">Visual Partner</h2>\n\n<p><img src=\"https://camo.githubusercontent.com/b196b29325f46dda5728d8d27884075949eaa7315beebf32a0537f259d54ee58/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f6361726c6f67696c6d61722f696d6167652f75706c6f61642f76313539353937323133392f696c6c757374726174696f6e732f426568696e64253230746865253230636f64652f494d475f353837335f656d7173686b2e706e67\" alt=\"Ejemplo de registro grǻfico\" /></p>\n\n<p>Carlo Gilmar, siguiendo la tendencia de <a href=\"https://extremservicejam.wordpress.com/2013/02/18/que-es-visual-thinking-y-como-puede-ayudarte/\">visual thinking</a> ha creado <strong>Visual Partner</strong>, la empresa/proyecto alterno en la que comparte sus <em>apuntes visuales</em> de charlas que se dan en meetups y conferencias.</p>\n\n<p>Carlo ha creado un buen cuerpo de conocimiento de temas muy variados y probablemente puedas encontrar algo que estés aprendiendo en alguno de los lugares en lo que los comparte:</p>\n\n<ul>\n  <li><a href=\"https://visualpartnership.herokuapp.com/\">Visual Partnership</a></li>\n  <li><a href=\"https://www.facebook.com/visualpartnership/\">Facebook</a></li>\n  <li><a href=\"https://twitter.com/carlogilmar?lang=en\">Twitter</a></li>\n</ul>\n\n<p>Su contenido puede servir como resumen y guía para aprender más acerca de cierto tema, ya que no está ordenado por tópicos, ni toca los temas profundamente. Aquí podrás encontrar contenido variado.</p>\n\n<h2 id=\"execute-program-inglés\">Execute Program (inglés)</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1623647102/execute_program_ofbgcz.png\" alt=\"Execute program home\" /></p>\n\n<p>El creador de <strong>Destroy All Software</strong>,  Gary Bernhardt creó una plataforma para que aprendieras las siguientes tecnologías de forma no convencional:</p>\n\n<ul>\n  <li>JavaScript Arrays</li>\n  <li>Concurrencia con JavaScript</li>\n  <li>JavaScript moderno (ES2015-2019)</li>\n  <li>Expresiones Regulares</li>\n  <li>SQL</li>\n  <li>TypeScript</li>\n</ul>\n\n<p>La dinámica de la plataforma es la siguiente: tú eres el compilador o el intérprete, es decir, la plataforma te da sentencias cada vez más complejas de la tecnología en cuestión y tú predices los resultados.</p>\n\n<p>Puedes entrar a la plataforma aquí: <a href=\"https://www.executeprogram.com/\">Execute Program</a>. Te recomiendo su otra plataforma, con videos tradicionales explicando cosas difíciles de desarrollar como compiladores: <a href=\"https://www.destroyallsoftware.com/screencasts\">Destroy all Software</a>. Tienes acceso a ambas plataformas con la suscripción de Execute Program.</p>\n\n<h2 id=\"otras-utilidades\">Otras utilidades</h2>\n\n<p>Hay otras experiencias no convencionales que puedes para aprender cosas específicas:</p>\n\n<ul>\n  <li><a href=\"https://learngitbranching.js.org/?locale=es_ES\">Aprende Git branching</a></li>\n  <li><a href=\"https://flukeout.github.io/\">CSS Diner</a></li>\n  <li><a href=\"https://flexboxfroggy.com/#es\">Flexbox Froggy</a></li>\n  <li><a href=\"https://http.cat/\">HTTP Cats</a></li>\n  <li><a href=\"https://andreasbm.github.io/web-skills/\">Web Skills</a></li>\n</ul>\n\n<p>Si no te acomodas con las formas tradicionales como los libros y los videos, siempre habrá opciones diferentes e interactivas. ¿Tienes alguna otra recomendación? La esperamos en los comentarios.</p>\n",
      "date_published": "Mon, 14 Jun 2021 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/04/10/ejercicio-programando-un-perceptron.html",
      "url": "https://blog.thedojo.mx/2021/04/10/ejercicio-programando-un-perceptron.html",
      "title": "Ejercicio: programando un perceptrón",
      "content_html": "<p>En este post platicaremos acerca de cómo funciona un perceptrón a nivel de código y las técnicas que utiliza para aproximar una función a partir de datos.</p>\n\n<p>Si no tienes claro lo que es un perceptrón, puedes leer nuestro <a href=\"/2021/03/25/intro-a-machine-learning-entendiendo-perceptron.html\" target=\"_blank\">artículo anterior</a>.</p>\n<h2 id=\"el-conjunto-de-datos\">El conjunto de datos</h2>\n\n<h2 id=\"aproximando-la-función\">Aproximando la función</h2>\n\n<h2 id=\"resultado\">Resultado</h2>\n",
      "date_published": "Sat, 10 Apr 2021 00:00:00 -0500"
      }
    
  ]
}
        
      </section>

      <footer class="page__meta">
        
        


        

      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2021 . Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>







  </body>
</html>
