<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.24.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>The Dojo MX Blog</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="The Dojo MX Blog">
<meta property="og:title" content="The Dojo MX Blog">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="The Dojo MX Blog Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZNSYMJDY5S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZNSYMJDY5S');
</script>

<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": "The Dojo MX Blog",
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>

  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt="The Dojo MX Blog"></a>
        
        <a class="site-title" href="/">
          The Dojo MX Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  


  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          

        </header>
      

      <section class="page__content e-content" itemprop="text">
        
        <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>

        </div>
        {
  "version": "https://jsonfeed.org/version/1",
  "title": "The Dojo MX Blog",
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2023/01/07/ejercicio-programando-un-perceptron.html",
      "url": "https://blog.thedojo.mx/2023/01/07/ejercicio-programando-un-perceptron.html",
      "title": "Ejercicio: programando un perceptrón con Python",
      "content_html": "<p>En este post platicaremos acerca de cómo funciona un perceptrón con un ejemplo de código y las técnicas que utiliza para aproximar una función a partir de datos.</p>\n\n<p>Si no tienes claro lo que es un perceptrón, puedes leer nuestro <a href=\"/2021/03/25/intro-a-machine-learning-entendiendo-perceptron.html\" target=\"_blank\">artículo anterior</a>. Ahí también explicamos las bases de funcionamiento. En este artículo lo vamos a ilustrar de la manera más sencilla posible.</p>\n\n<h2 id=\"el-conjunto-de-datos\">El conjunto de datos</h2>\n\n<p>Recuerda que para poder crear un algoritmo de machine learning necesitamos un conjunto de datos, ya que el punto es que este algoritmo <em>aprenda</em> de estos datos.</p>\n\n<p>Los datos que un perceptrón puede clasificar deben poder ser separados en mínimo dos clases por alguna característica, ya que si representáramos al perceptrón como una función, es un línea recta en un plano de dos variables (o su equivalente dependiendo del espacio y sus dimensiones, lo que en para más de tres dimensiones llamamos un <em>hiperespacio</em> matemáticamente).</p>\n\n<p>No es necesario que los datos <em>sólo</em> puedan estar divididos en dos clases, por ejemplo, imagínate un conjunto de datos que representa los dígitos escritos a mano, del 0 al 9 (este es conocido como el <a href=\"https://www.tensorflow.org/datasets/catalog/mnist\">MNIST dataset</a>). Cada dígito es una clase, pero un perceptrón nos puede servir para clasificar un solo número, por ejemplo, el 5. El perceptrón serviría para clasificar si un dígito es un 5 o no, lo importante es que el conjunto de datos que representa el 5 sea más o menos separable de los demás dígitos.</p>\n\n<p>Con esto te puedes empezar a dar cuenta de que el perceptrón es el bloque de construcción más básico de las redes neuronales. Por ejemplo, ¿cómo haríamos para clasificar todos los números del conjunto del que hablamos arriba? Necesitamos un perceptrón por cada número, y tomamos el que más confianza nos devuelva.</p>\n\n<p>Ahora sí veamos qué dataset usaremos nosotros. Ejemplos usando el MNIST o el <a href=\"https://archive.ics.uci.edu/ml/datasets/iris\">Iris</a> encontrarás en muchos lados, así que vamos a escoger uno diferente.\nEste es una alternativa a Iris y se conoce como el <a href=\"https://github.com/allisonhorst/palmerpenguins\">Penguin dataset</a>.</p>\n\n<p>El conjunto de datos de los pingüinos tiene 344 registros etiquetados, cada uno con máximo 6 características (a parte de la etiqueta). Tiene 3 etiquetas diferentes: Adelie, Chinstrap y Gentoo. Las columnas del dataset son:</p>\n\n<ol>\n  <li><strong>species</strong>: especie del pingüino, esta es la clase o etiqueta</li>\n  <li><strong>island</strong>: isla donde fue visto el pingüino, tiene 3 valores diferentes: Dream, Torgersen, or Biscoe</li>\n  <li><strong>bill_lenth_mm</strong>: longitud de la pico del pingüino</li>\n  <li><strong>bill_depth_mm</strong>: profundidad de la pico del pingüino</li>\n  <li><strong>flipper_length_mm</strong>: longitud de la aleta del pingüino</li>\n  <li><strong>body_mass_g</strong>: masa del cuerpo del pingüino</li>\n  <li><strong>sex</strong>: sexo del pingüino</li>\n</ol>\n\n<p>Tenemos que explorar los datos brevemente para ver qué variables podemos usar para separar. Como este no es el objetivo de este artículo vamos a ver una imagen en la que comparan por pares las variables y seleccionemos las que nos ayuden a separar mejor las clases. Vamos a hacerlo sólamente con dos variables para que el código nos quede más sencillo y se comprenda la idea principal.</p>\n\n<p>La siguiente imagen es una gráfica de dos variables: la anchura del pico (<strong>bill_depth_mm</strong>) y el largo de su aleta (<strong>flipper_length_mm</strong>). Observa qué bien separa a la clase Gentoo de las otras dos.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1673111878/a1f1d1b7-d87c-478d-b67a-c344c802f4d6_spefvh.png\" alt=\"Gráfica de dos variables\" class=\"align-center\" /></p>\n\n<p><strong>Nota</strong>: para el entrenamiento de una rede neuronal se hace una exploración mucho más profunda de los datos, pero para este ejemplo no es necesario.</p>\n\n<h2 id=\"repaso-del-funcionamiento-básico\">Repaso del funcionamiento básico</h2>\n\n<p>El perceptrón es un algoritmo de aprendizaje <strong>supervisado</strong>, por lo que necesita datos etiquetados, es decir, <em>las características junto con su clase</em>. El trabajo del perceptrón es encontrar los parámetros para una función matemática que defina la frontera de separación entre las clases.</p>\n\n<p>Esta función matemática es una línea recta en un plano de dos dimensiones, o un plano en un espacio de tres dimensiones, o un <strong>hiperplano</strong> en un espacio de más de tres dimensiones. Puedes pensar en todos estos términos matemáticos como el equivalente a una linea recta en cualquier espacio.</p>\n\n<h2 id=\"el-algoritmo\">El algoritmo</h2>\n\n<p>El perceptron es busca ajustar una función lineal que separa las clases. En este caso separaremos “Gentoo” de “no es un Gentoo”. El algoritmos nos dirá “1” si es un Gentoo y “0” si no lo es. Una función lieneal tiene la forma:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">w1</span> <span class=\"o\">*</span> <span class=\"n\">x1</span> <span class=\"o\">+</span> <span class=\"n\">w2</span> <span class=\"o\">*</span> <span class=\"n\">x2</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n\n<p>Con un término <code class=\"language-plaintext highlighter-rouge\">wn * xn</code> para cada variable de entrada, y un término <code class=\"language-plaintext highlighter-rouge\">b</code> para el sesgo. El perceptrón ajusta los valores de <code class=\"language-plaintext highlighter-rouge\">w1</code>, <code class=\"language-plaintext highlighter-rouge\">w2</code>, y <code class=\"language-plaintext highlighter-rouge\">b</code> para que la función lineal se ajuste a los datos.</p>\n\n<p>Podemos empezar combinando las dos variables que elegimos de la siguiente manera:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">w1</span> <span class=\"o\">*</span> <span class=\"n\">penguins</span><span class=\"p\">[</span><span class=\"s\">'bill_depth_mm'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">w2</span> <span class=\"o\">*</span> <span class=\"n\">penguins</span><span class=\"p\">[</span><span class=\"s\">'flipper_length_mm'</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n\n<p><strong>Nota</strong>: En este ejemplo no usaremos <code class=\"language-plaintext highlighter-rouge\">numpy</code> o <code class=\"language-plaintext highlighter-rouge\">pandas</code>, para hacer la programación lo más tradicional posible. Más adelante nos empezaremos a meter en <code class=\"language-plaintext highlighter-rouge\">numpy</code>, <code class=\"language-plaintext highlighter-rouge\">pandas</code> y esas cosas que parecen magia negra.</p>\n\n<p>Esto nos dará un número que tenemos que convertir en un 1 o un 0. Usemos una función sencilla. Todos lo números negativos los convertimos en un 0 y todos los positivos y el 0 en un 1. Esto se puede programar sencillo. Vamos a llamar a esta función <code class=\"language-plaintext highlighter-rouge\">paso</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">paso</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<p>Ahora podemos usar esta función para convertir la salida de la función lineal en un 1 o un 0:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">clasificar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"Recibe una fila de datos y devuelve 1 si es Gentoo y 0 si no lo es\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">paso</span><span class=\"p\">(</span><span class=\"n\">w1</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">w2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Nuestra función de clasificación ya está lista. Pero el trabajo del perceptrón es encontrar los valores de <strong>los parámetros</strong>: <code class=\"language-plaintext highlighter-rouge\">w1</code>, <code class=\"language-plaintext highlighter-rouge\">w2</code>, y <code class=\"language-plaintext highlighter-rouge\">b</code>. Creemos el algoritmo que define estos valores, que llamaremos <code class=\"language-plaintext highlighter-rouge\">entrenar</code>. Esta función aprende a base de prueba y error. Para aprender hace lo siguiente:</p>\n\n<ol>\n  <li>Clasifica cada dato de entrenamiento</li>\n  <li>Verifica si la etiqueta es correcta (para esto necesitamos las etiquetas de los datos de entrenamiento)</li>\n  <li>Ajusta sus parámetros: cambiar los valores de <code class=\"language-plaintext highlighter-rouge\">w1</code>, <code class=\"language-plaintext highlighter-rouge\">w2</code>, y <code class=\"language-plaintext highlighter-rouge\">b</code> para que la función lineal se ajuste a los datos.</li>\n  <li>Repite el proceso</li>\n</ol>\n\n<p>Este proceso puede terminar por dos razones:</p>\n\n<ol>\n  <li>Se alcanza un número máximo de iteraciones</li>\n  <li>Se alcanza un resultado satisfactorio (ej. el número de elementos mal clasificados es menor a un umbral)</li>\n</ol>\n\n<p>Para hacerlo sencillo vamos a hacer que el algoritmo se ejecute un número fijo de veces:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">entrenar</span><span class=\"p\">(</span><span class=\"n\">datos</span><span class=\"p\">,</span> <span class=\"n\">iteraciones</span><span class=\"p\">):</span>\n    <span class=\"c1\"># inicializamos los parámetros, esto puede ser aleatorio o cero, como lo hacemos aquí\n</span>    <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">iteraciones</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">iteraciones</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">datos</span><span class=\"p\">:</span>\n            <span class=\"n\">etiqueta_real</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"species\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Gentoo\"</span><span class=\"p\">)</span>\n            <span class=\"n\">clase</span> <span class=\"o\">=</span> <span class=\"n\">clasificar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">etiqueta_real</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">clase</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Aquí tenemos un Gentoo mal clasificado, tenemos que\n</span>                <span class=\"c1\"># aumentar w1 y w2 para que la función lineal se acerque\n</span>                <span class=\"c1\"># a la etiqueta real\n</span>                <span class=\"n\">w1</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span>\n                <span class=\"n\">w2</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span>\n                <span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># Valor escogido arbitrariamente\n</span>            <span class=\"k\">elif</span> <span class=\"n\">etiqueta_real</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">clase</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Aquí tenemos un NO Gentoo mal clasificado, tenemos que\n</span>                <span class=\"c1\"># disminuir w1 y w2 para que la función lineal se acerque\n</span>                <span class=\"c1\"># a la etiqueta real\n</span>                <span class=\"n\">w1</span> <span class=\"o\">-=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span>\n                <span class=\"n\">w2</span> <span class=\"o\">-=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span>\n                <span class=\"n\">b</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>  <span class=\"c1\"># valor escogido arbitrariamente\n</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Iteración\"</span><span class=\"p\">,</span> <span class=\"n\">iteraciones</span><span class=\"p\">,</span> <span class=\"s\">\"w1:\"</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"s\">\"w2:\"</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"s\">\"b:\"</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n\n<p>Podríamos decir que esto es básicamente todo el algoritmo del perceptrón. Ahora podemos entrenar nuestro perceptrón con los datos de entrenamiento. Antes le hacemos unas cuantas modificaciones para que sea más fácil de usar:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># cargar el archivo CSV con los datos de entrenamiento como diccionario, el archivo está en la carpeta data, un nivel arriba\n</span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">\"../data/penguins.csv\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">csvfile</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">csvfile</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Limpiando los los datos, eliminando los que no tienen bill_depth_mm o flipper_length_mm\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">row</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span>\n    <span class=\"k\">if</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s\">\"NA\"</span> <span class=\"ow\">and</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s\">\"NA\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">])</span>\n    <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">])</span>\n\n</code></pre></div></div>\n\n<p>Estos datos ya está listos para para ser usados. Ahora podemos entrenar el perceptrón:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Escogemos las iteraciones arbitrariamente\n</span><span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">entrenar</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Lo podemos probar con los mismos datos de entrenamiento:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">probar</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"n\">correctos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">incorrectos</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n        <span class=\"n\">clase</span> <span class=\"o\">=</span> <span class=\"n\">clasificar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n        <span class=\"n\">etiqueta_real</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"species\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Gentoo\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">clase</span> <span class=\"o\">==</span> <span class=\"n\">etiqueta_real</span><span class=\"p\">:</span>\n            <span class=\"n\">correctos</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">incorrectos</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n      <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s\">Resultados:\"</span><span class=\"p\">)</span>\n      <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Correctos: </span><span class=\"si\">{</span><span class=\"n\">correctos</span><span class=\"si\">}</span><span class=\"s\"> - </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"n\">correctos</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"si\">}</span><span class=\"s\">%\"</span><span class=\"p\">)</span>\n      <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Incorrectos: </span><span class=\"si\">{</span><span class=\"n\">incorrectos</span><span class=\"si\">}</span><span class=\"s\"> - </span><span class=\"si\">{</span><span class=\"p\">(</span><span class=\"n\">incorrectos</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"si\">}</span><span class=\"s\">%\"</span><span class=\"p\">)</span>\n<span class=\"n\">probar</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Y el resultado es:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Resultados:\nCorrectos: 219 - 64.03508771929825%\nIncorrectos: 123 - 35.96491228070175%\n</code></pre></div></div>\n\n<p>Parece que nuestro perceptrón no logró ni siquiera aprender bien con los datos de entrenamiento. ¿Qué pasa si aumentamos las iteraciones, digamos a 1000?</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">entrenar</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">probar</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>El resultado es:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Resultados:\nCorrectos: 342 - 100%\nIncorrectos: 0 - 0.0%\n</code></pre></div></div>\n\n<p>Parece que con las suficientes iteraciones el perceptrón logra aprender a clasificar perfectamente los datos de entrenamiento. <strong>Tip</strong>: siempre debes dudar de un algoritmo de inteligencia artificial que clasifique perfectamente, eso puede indicar que se sobreajustó a los datos de entrenamiento y cuando encuentre datos no vistos, fallará.</p>\n\n<p>Para evitarlo, necesitamos probarlo con datos que no ha visto antes. Para esto vamos a dividir los datos en dos grupos, uno para entrenamiento y otro para pruebas:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Dividir los datos en dos grupos, uno para entrenamiento y otro para pruebas\n</span><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">entrenamiento</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.8</span><span class=\"p\">)]</span>\n<span class=\"n\">pruebas</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">0.8</span><span class=\"p\">):]</span>\n\n<span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">entrenar</span><span class=\"p\">(</span><span class=\"n\">entrenamiento</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n<span class=\"n\">probar</span><span class=\"p\">(</span><span class=\"n\">pruebas</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<p>El resultado es:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Resultados:\nCorrectos: 69 - 100.0%\nIncorrectos: 0 - 0.0%\n</code></pre></div></div>\n\n<p>Y como vemos, sigue funcionando bien con este dataset sencillo. Esta es le estructura básica de un perceptrón, pero en realidad le faltan muchas partes para que funcione de manera general sin gastar demasiado tiempo de cómputo. Por ejemplo, en este código simplemente sumamos o restamos el valor de las variables a w1 y w2. Estos saltos pueden ser muy bruscos y hacernos saltar fácilmente el valor que necesitamos. Para evitar esto, se usa otro parámetro para la función de entrenamiento llamado “ritmo de aprendizaje” (learning rate - lr).</p>\n\n<p>Vamos a incluirlo en nuestro código:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">entrenar</span><span class=\"p\">(</span><span class=\"n\">datos</span><span class=\"p\">,</span> <span class=\"n\">iteraciones</span><span class=\"p\">,</span> <span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">):</span>\n    <span class=\"c1\"># inicializamos los parámetros, esto puede ser aleatorio o cero, como lo hacemos aquí\n</span>    <span class=\"n\">w1</span> <span class=\"o\">=</span> <span class=\"n\">w2</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">iteraciones</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">iteraciones</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">datos</span><span class=\"p\">:</span>\n            <span class=\"n\">etiqueta_real</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"species\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\"Gentoo\"</span><span class=\"p\">)</span>\n            <span class=\"n\">clase</span> <span class=\"o\">=</span> <span class=\"n\">clasificar</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n            <span class=\"c1\">## Esta es la revisión de \"la verdad\", más adelante la explicamos en la sección \"función de pérdida\"\n</span>            <span class=\"k\">if</span> <span class=\"n\">etiqueta_real</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">clase</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Aquí tenemos un Gentoo mal clasificado, tenemos que\n</span>                <span class=\"c1\"># aumentar w1 y w2 para que la función lineal se acerque\n</span>                <span class=\"c1\"># a la etiqueta real\n</span>                <span class=\"n\">w1</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">lr</span>\n                <span class=\"n\">w2</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">lr</span>\n                <span class=\"n\">b</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">lr</span>  <span class=\"c1\"># Valor escogido arbitrariamente\n</span>            <span class=\"k\">elif</span> <span class=\"n\">etiqueta_real</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">clase</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Aquí tenemos un NO Gentoo mal clasificado, tenemos que\n</span>                <span class=\"c1\"># disminuir w1 y w2 para que la función lineal se acerque\n</span>                <span class=\"c1\"># a la etiqueta real\n</span>                <span class=\"n\">w1</span> <span class=\"o\">-=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"bill_depth_mm\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">lr</span>\n                <span class=\"n\">w2</span> <span class=\"o\">-=</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s\">\"flipper_length_mm\"</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">lr</span>\n                <span class=\"n\">b</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"n\">lr</span>  <span class=\"c1\"># valor escogido arbitrariamente\n</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Iteración\"</span><span class=\"p\">,</span> <span class=\"n\">iteraciones</span><span class=\"p\">,</span> <span class=\"s\">\"w1:\"</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"s\">\"w2:\"</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"s\">\"b:\"</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n\n<p>Y ahora vamos a probarlo de nuevo con 100 iteraciones y el lr default:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">entrenar</span><span class=\"p\">(</span><span class=\"n\">entrenamiento</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">probar</span><span class=\"p\">(</span><span class=\"n\">pruebas</span><span class=\"p\">,</span> <span class=\"n\">w1</span><span class=\"p\">,</span> <span class=\"n\">w2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>En esta versión podemos ver que con muchas menos iteraciones el perceptrón logra clasificar correctamente los datos de prueba. El resultado es:</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Resultados:\nCorrectos: 69 - 100.0%\nIncorrectos: 0 - 0.0%\n</code></pre></div></div>\n\n<h2 id=\"función-de-pérdida\">Función de pérdida</h2>\n\n<p>El último detalle de nuestro perceptrón es la forma en la que revisa si se está acercando a “la verdad”. En este perceptrón simplemente verificamos si la etiqueta está equivocada y elegimos si “acercar” o “alejar” la línea del punto en cuestión.</p>\n\n<p>Esta es una forma no tradicional de hacerlo, pero con lo que te debes quedar es que debe existir una función que te diga qué tan equivocado estás y que te ayude a acercarte a la verdad. Esta función se llama “función de pérdida” (loss function). En las siguientes versiones del perceptrón vamos a incluir una función de pérdida más sofisticada, “de verdad”.</p>\n\n<h2 id=\"repaso\">Repaso</h2>\n\n<p>En este artículo vimos todas las partes que un perceptrón, la unidad de construcción más básica de una red neuronal. Un perceptrón tiene:</p>\n\n<ol>\n  <li>\n    <p>Una función de predicción. Es la que llamamos <code class=\"language-plaintext highlighter-rouge\">clasificar</code> y nos dice si un punto de datos pertenece a una clase o no.</p>\n  </li>\n  <li>\n    <p>Una función de entrenamiento. Es la que llamamos <code class=\"language-plaintext highlighter-rouge\">entrenar</code> y nos ayuda a ajustar los parámetros que le vamos a pasar a la función de predicción para que nos de un resultado correcto.</p>\n  </li>\n  <li>\n    <p>Una función de pérdida. Es la parte en la función <code class=\"language-plaintext highlighter-rouge\">entrenar</code> que nos dice si estamos cerca o lejos de “la verdad”. Esta función es la que vamos a mejorar en las siguientes versiones del perceptrón.</p>\n  </li>\n  <li>\n    <p>Una función de activación. Esta es la que llamamos <code class=\"language-plaintext highlighter-rouge\">paso</code> y nos ayuda a transformar la salida de la función matemática pura que representa una línea en la salida final de nuestro perceptrón. En nuestro caso necesitábamos 0 o 1.</p>\n  </li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Este perceptrón funciona, pero no es muy flexible, no se puede usar con otros conjuntos de datos y además con un conjunto de datos más complejo y menos separable probablemente no podría encontrar los parámetros correctos, sin embargo, sigue la arquitectura básica de un perceptrón, que era el punto de este artículo.</p>\n\n<p>En un siguiente artículo vamos a integrar herramientas matemáticas más poderosas, y vamos a empezar a ver qué tiene qué ver el álgebra lineal con la inteligencia artificial.</p>\n\n<p>Puedes ver el código completo en este <a href=\"https://github.com/hectorip/penguins_perceptron\">repositorio</a>.</p>\n",
      "date_published": "Sat, 07 Jan 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/30/claridad-en-el-codigo.html",
      "url": "https://blog.thedojo.mx/2022/12/30/claridad-en-el-codigo.html",
      "title": "Claridad de  Saša Jurić",
      "content_html": "<figure>\n    <figcaption class=\"caption-audio\">Escucha este artículo:</figcaption>\n    <audio style=\"width: 100%;\" controls=\"\" src=\"https://res.cloudinary.com/hectorip/video/upload/v1672460944/clarity-2_vrm0vk.wav\">\n            <a href=\"https://res.cloudinary.com/hectorip/video/upload/v1672460944/clarity-2_vrm0vk.wav\">\n                Descargar audio\n            </a>\n    </audio>\n</figure>\n\n<p>Hablemos de las cosas que hacen más entendible y claro tu código.</p>\n\n<p>Muchas de estas ideas están basadas en la plática <a href=\"https://www.youtube.com/watch?v=6sNmJtoKDCo\">“Clarity” de Saša Jurić</a> de la Elixir Conf EU de 2021, de hecho, podríamos considerar este artículo como un análisis y extensión de esa plática.</p>\n\n<ul>\n  <li>\n    <p>Cuando trabajamos con bases de código normalmente necesitamos entenderlas. Incluso aunque vayamos a escribir algo nuevo necesitamos entender lo demás para poder integrarlo. Esto lo hacemos mediante la lectura de código.</p>\n  </li>\n  <li>\n    <p>Los escritores del código nos transmiten información mediante ese código, lo quieran o no.</p>\n  </li>\n  <li>\n    <p>La forma en la que obtenemos conocimiento del código es leyéndolo.</p>\n  </li>\n</ul>\n\n<h2 id=\"qué-es-la-claridad-y-por-qué-es-mejor-que-el-código-limpio\">¿Qué es la claridad y por qué es mejor que ‘el código limpio’?</h2>\n\n<p>La claridad como se define en esta plática, es qué tan bien una pieza de código comunica sus verdaderas intenciones. El código claro puede ser entendido sin mucho esfuerzo por alguien que conoce bien el lenguaje: se entiende tanto el problema como la solución que el autor escogió.</p>\n\n<p>La claridad nos hace más eficientes y efectivos. Primero porque obtenemos información más rápido y segundo porque obtenemos la información correcta.</p>\n\n<p>Finalmente, la claridad le da poder al equipo porque hace que cualquiera pueda tomar el código y trabajar con él, en vez de sólo el autor, como muchos estamos acostumbrados.</p>\n\n<p>Para conseguir claridad se tiene que invertir tiempo constantemente. Tienes que recordar que el código es una herramienta de comunicación con otros seres humanos, no sólo con la máquina.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1672409158/Screen_Shot_2022-12-28_at_9.37.57_aje64x.png\" alt=\"Claridad es más concreto que otros términos\" /></p>\n\n<h2 id=\"prácticas-que-mejoran-la-claridad\">Prácticas que mejoran la claridad</h2>\n\n<p>Hablemos de cosas que tú y tu equipo pueden hacer para producir código más claro.</p>\n\n<h3 id=\"revisión-de-código\">Revisión de código</h3>\n\n<p>Esto es la práctica de un equipo de integrar el código a la rama principal solamente cuando ha sido evaluado por cierto números de miembros del equipo. El foco principal de la revisión debería ser la claridad del código.</p>\n\n<p>Para facilitar el proceso, tanto el autor como el revisor pueden seguir ciertas reglas para que el resultado sea código más claro y la revisión sea más fácil.</p>\n\n<p>El que envía el código puede facilitar el trabajo del revisor de tres maneras:</p>\n\n<ol>\n  <li>Envía solicitudes de integración pequeñas: siempre es más fácil de entender poco código que mucho.</li>\n  <li>Commits pequeños como unidades de cambio más fáciles de tratar individualmente. Un commit no debería tener cambios en muchos lugares para no hacerlo demasiado difícil de entender.</li>\n  <li>Clarifica tu código lo mejor posible: la historia de los commits debería estar estructurada linealmente. Además debería revisar su código para asegurarse de que está lo más claro posible.</li>\n</ol>\n\n<p>El revisor:</p>\n\n<ol>\n  <li>\n    <p>Sugerir y mandar mejoras. El revisor debería señalar todos los puntos en los que se le hizo difícil entender el código. También podría mandar los cambios directamente, como un pull request al autor, invirtiendo los papeles temporalmente.</p>\n  </li>\n  <li>\n    <p>Sincronizar. Es importante tener sesiones si algo no se puede resolver. Estas sesiones de pair programming servirán para clarificar todo aquello que siga siendo confuso.</p>\n  </li>\n</ol>\n\n<h3 id=\"prácticas-en-el-código\">Prácticas en el código</h3>\n\n<p>Saša sugiere seguir las prácticas de progrmación comunes <strong>aplicables al código</strong>:</p>\n\n<ol>\n  <li>Nombrar variables y funciones de manera explicativa.</li>\n  <li>Seguir los idiomas y patrones de programación <em>aplicables</em> a tu caso.</li>\n</ol>\n\n<h3 id=\"separación-de-responsabilidades\">Separación de responsabilidades</h3>\n\n<p>Pero además, podemos seguir lo que en español llamamos “separación de responsabilidades” (en inglés “separation of concerns”). Esta idea Dijkstra lo mencionó en su artículo <a href=\"https://www.cs.utexas.edu/users/EWD/transcriptions/EWD04xx/EWD447.html\">On the scientific thougth</a>. Dijkstra se refería a la forma de pensar en los asuntos complejos desde diferentes ángulos para poder “ignorar” temporalmente los aspectos que no tienen que ver con ese ángulo. Esto permitirá que podamos entender mejor el sistema entero poco a poco.</p>\n\n<p>En el código lo podemos aplicar haciendo que nuestro código esté separado en módulos que sólo abarquen un aspecto del problema. Esto es imposible de hacer perfectamente, pero nuestro código debería tender hacia allá lo más posible. Por ejemplo, algo que normalmente se hace muy bien es separar el código que maneja la lógica de los datos de la interfaz. Recuerda: <strong>esto es importante porque permitirá al lector solo lidiar con un problema a la vez</strong>.</p>\n\n<p>Si ponemos todos los conceptos posibles de programación en una pieza de código (aquí cito directamente a Saša) “¿Quién va a ser capaz de entender algo de eso?”</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1672409162/Screen_Shot_2022-12-30_at_8.05.42_ycvhe7.png\" alt=\"Imagen: Separación de responsabilidades en una base de código\" /></p>\n\n<hr />\n\n<p><strong>Advertencia</strong>: Una idea que Saša menciona bastante es la de no seguir arquitecturas o ideas sólo porque un líder de opinión o alguien con autoridad lo dice. Si haces esto <strong>puede que la parte más compleja de tu código sea tu arquitectura</strong>, lo cuál es un grave error porque el trabajo de la arquitectura deberías ser crear un sistema más claro.</p>\n\n<blockquote>\n  <p>“Consider te actual situation you’re dealing with, [..], don’t just do something because some thought leader or authority says so, even if that person is me. Just think contextually, think inside of your situation.” - Saša Jurić</p>\n</blockquote>\n\n<blockquote>\n  <p>“Considera tu situación actual, [..], no hagas algo sólo porque un líder de opinión o alguien con autoridad lo dice, incluso si esa persona soy yo. Simplemente piensa contextualmente, piensa en tu situación.” - Saša Jurić</p>\n</blockquote>\n\n<h2 id=\"testing\">Testing</h2>\n\n<p>¿Para qué creamos tests? Obviamente, para probar. ¿Pero qué queremos probar? Saša afirma que queremos probar <strong>el comportamiento del software</strong>. Así, las “unidades” que queremos probar son las unidades de comportamiento y no las unidades de código. Otra recomendación es evitar hacer mocks agresivos, solamente en dónde sea estrictamente necesario para lograr comportamientos repetibles. Esto es porque, el uso de dobles en los tests (como los mocks) complica el código de pruebas, pero también complica el código de producción.</p>\n\n<p>Cuando los tests son demasiado complicados o están ligados a la implementación en vez del al comportamiento externo, vas a tener que dividirte entre arreglar los test o arreglar el código de producción, lo cuál es frustrante y una mala idea para tu productividad en general. Un test debe ser fácil de entender y comunicar exactamente lo que está probando, nada más, nada menos.</p>\n\n<p>Recomendación: Libro <a href=\"https://www.manning.com/books/unit-testing\">Unit Testing</a> de Vladimir Khorikov. Saša lo recomienda como una muy buena lectura.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1672450947/Screen_Shot_2022-12-30_at_12.03.25_nedtbg.png\" alt=\"Recomendación de libro TDD por Saša Jurić: Unit Testing de editorial Manning\" /></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Una de las tareas más importantes cuando hacemos código es hacer que comunique claramente el problema que resuelve y cómo lo resuelve. Si hacemos eso, lograremos que nuestro equipo o nosotros mismos podamos continuar con el trabajo y lo mejor: evolucionarlo.</p>\n\n<p>En la siguiente imagen verás el resumen de las recomendaciones de Saša Jurić para escribir código más claro:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1672450967/Screen_Shot_2022-12-30_at_18.48.20_hekzsv.png\" alt=\"Usa el código para comunicarte, revisa el código, separación de responsabilidades y prueba el comportamiento del código\" />.</p>\n\n<p>Puedes ver la charla completa en <a href=\"https://www.youtube.com/watch?v=6sNmJtoKDCo\">YouTube</a>. <a href=\"https://twitter.com/mronerlang\">Manuel Rubio</a> y yo platicamos extensamente sobre ese tema:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Gswx3ko3A_E\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<p>Finalmente, te recomiendo mucho el artículo en el que Manuel Rubio hizo su propio resumen en <a href=\"https://altenwald.org/2021/09/27/claridad/\">el blog de Altenwald</a>.</p>\n",
      "date_published": "Fri, 30 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/26/explicaciones-elocuentes.html",
      "url": "https://blog.thedojo.mx/2022/12/26/explicaciones-elocuentes.html",
      "title": "Explicaciones elocuentes",
      "content_html": "<p>Aunque el principal trabajo de un desarrollador es comunicar sus pensamientos a la computadora a través de instrucciones precisas (el código), ningún trabajo serio o que valga la pena se puede hacer solo. Casi siempre formamos parte de un equipo, puede ser con otros roles o con más desarrolladores. Para trabajar efectivamente, hay que comunicarse lo mejor posible. <a href=\"https://blog.thedojo.mx/2021/07/14/desarrolladores-de-los-que-puedes-aprender-russ-olsen.html\">Russ Olsen</a> tiene una plática llamada <a href=\"https://www.youtube.com/watch?v=80EE4mZmp3A\">Eloquent Explanations</a> en la que nos da consejos sobre cómo comunicarnos claramente, además de que da razones por las que es importante hacerlo.</p>\n\n<p>En este artículo resumiremos esta charla con algunas adaptaciones y extensiones.</p>\n\n<h2 id=\"la-comunicación-transmisión-conocimiento\">La comunicación: transmisión conocimiento</h2>\n\n<p>Lo que nos limita para construir software es conocimiento. Conocimiento sobre el dominio, el negocio o el sistema que estamos construyendo. Por lo tanto, compartir el conocimiento es una de las mejores formas de ayudar al equipo a avanzar. La principal forma de compartirlo es con explicaciones (por eso la charla se llama así). Russ comparte cinco consejos para mejorar nuestras explicaciones, de las que hablaremos ahora.</p>\n\n<h2 id=\"1-traza-un-plan-para-explicar\">1: traza un plan para explicar</h2>\n\n<p>Debemos tener un <strong>plan</strong> o <strong>estructura</strong> para compartir el conocimiento. Russ propone algunas estructuras, como <em>“Zomm In”</em>, <em>“Zoom Out”</em> y <em>“simple to complex”</em>.</p>\n\n<h3 id=\"zoom-in-y-zoom-out\">Zoom In y Zoom Out</h3>\n\n<p>Empieza en el contexto más amplio (o lo que llamaríamos de más alto nivel, pegado al negocio) y termina en los detalles. Por ejemplo:</p>\n\n<ol>\n  <li>Queremos vender zapatos</li>\n  <li>Por eso estamos construyendo un eCommerce</li>\n  <li>Por eso necesitamos este botón de “Pagar”</li>\n</ol>\n\n<p>Zoom Out es lo mismo, pero en sentido contrario, empiezas en los detalles y terminas en el contexto más amplio. Es importante no empezar por en medio y avanzar para un lado y luego para el otro, ya que esto no sigue un orden lógico que permita a tus oyentes seguir el hilo de la explicación.</p>\n\n<h3 id=\"de-lo-simple-a-lo-complejo\">De lo simple a lo complejo</h3>\n\n<p>Empieza explicando lo más básico, sin saltarte nada. Este método puede implicar ocultar información intencionalmente o explicarla en <strong>términos inexactos</strong>, que cuando llegue el momento se tendrán que aclarar y expandir. Quiero recalcar este punto: <strong>a veces es importante, casi imprescindible</strong> dar información inexacta con tal de que la explicación no sea demasiado compleja al principio.</p>\n\n<p>Por ejemplo, cuando explicamos las variables a personas que están entrando en la programación les decimos que son como “cajitas” que guardan valores, una explicación por demás inexacta, pero que no vale la pena corregir porque si no  tendríamos que explicar todo el modelo de organización de memoria de los lenguajes y los entornos de ejecución.</p>\n\n<h2 id=\"2-se-ágil-explica-mide-ajuste-y-repite\">2: Se ágil: explica, mide ajuste y repite</h2>\n\n<p>Para mejorar tus explicaciones, las debes tratar como el desarrollo de software: explica, mide, ajusta y repite. Busca señales sobre si tu explicación está funcionando: las preguntas van cambiando, <em>no te miran raro</em> y no hay un silencio mortal. Estas señales que todos hemos vivido en algún punto de nuestra vida son la medida precisa de si tu explicación está funcionando. Si ves que algo no funciona porque no produce preguntas o hace que todos se queden callados, busca otra forma de explicarlo.</p>\n\n<p>También, las explicaciones y analogías que ves que tienen éxito las puedes ir guardando y puliendo.</p>\n\n<h3 id=\"25-la-maldición-del-conocimiento\">2.5: la maldición del conocimiento</h3>\n\n<p>Cuando explicamos algo que conocemos muy bien, puede que nos saltemos información que no tenemos presente que necesitamos sabes, justo por el dominio que tenemos del problema. Tenemos que ser cuidadosos en esto e intentar dar la mayor cantidad de información posible, sobre todo si nuestra audiencia es nueva en el tema.</p>\n\n<p>A veces parece que lo que estamos diciendo es obvio, pero aquí <strong>Russ Olsen</strong> menciona una frase muy interesante: <strong>“nadie en esta sala nació con ese conocimiento codificado en su ADN”</strong>, esto nos debe recordar que a nosotros también nos tienen que explicar cosas que para otros parecen obvias.</p>\n\n<h2 id=\"3-explicar-es-un-deporte-con-límite-de-tiempo\">3: Explicar es un deporte con límite de tiempo</h2>\n\n<p>Imagínate que cuando estamos explicando algo estamos en un partido de algún deporte que tiene límite de tiempo estricto. Como tenemos un tiempo muy limitado para explicar lo que queremos antes de perder la atención de la persona, por lo que tenemos que seguir dos estrategias:</p>\n\n<ul>\n  <li>comprimir la información</li>\n  <li>decir primero lo más importante.</li>\n</ul>\n\n<p>Con eso ahorrarás tiempo en la explicación, y si pierdes la atención de la persona, al menos habrás dicho lo más importante.</p>\n\n<p>La <strong>terminología</strong> (palabras especiales de un área del conocimiento) es un obstáculo para los que están empezando, y sólo quitará tiempo y poder a tu explicación, aburriendo o comunicando muy poco en un espacio grande de tiempo. <strong>Evítala si tu auditorio no está familiarizado con esta MUY familiarizado con ella.</strong></p>\n\n<p>Hay una buena noticia: puedes re-iniciar el reloj y comprarte más tiempo si logras que las personas a las que les estás explicando tengan pequeñas victorias, entendiendo progresivamente el tema en cuestión. Al mantenerlas ilusionadas con el tema, puedes seguir manteniendo su atención.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1672066869/russ_oo_rjxxdl.jpg\" alt=\"Captura de cuadro de video mostrando un reloj con 0 segundos restantes.\" class=\"align-center\" /></p>\n\n<h2 id=\"4-repite-para-énfasis-y-para-dar-contexto\">4: Repite para énfasis y para dar contexto</h2>\n\n<p>El <strong>“Don’t repeat yourself”</strong> (No te repitas a ti mismo) es para las máquinas, los humanos sí que necesitamos repetición.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1672066971/E5_hHP9WEAENUF2_homosz.jpg\" alt=\"Captura de cuadro de video mostrando que no somos máquinas\" class=\"align-center\" /></p>\n\n<hr />\n\n<blockquote>\n  <p>“Las personas prosperan [o crecen] en la redundancia.” - Russ Olsen</p>\n</blockquote>\n\n<p>Podemos repetir algo para:</p>\n\n<ul>\n  <li>Dar énfasis. Si quieres resaltar algo, una de las mejores maneras es repetirlo.</li>\n  <li>Para dar contexto. Puedes repetir algo para recordar a las personas sobre algo que ya se mencionó para darle más conexto a algo que estás a punto de decir.</li>\n</ul>\n\n<h2 id=\"5-muéstrate-humano\">5: Muéstrate humano</h2>\n\n<p>Las explicaciones que causan una reacción emocional en los que escuchan, como las que incluyen humor, las que demuestran sentimientos o conectan en un nivel más humano con las personas <strong>son las que dejan las cosas grabadas</strong>. Una broma puede a hacer que alguien recuerde lo que explciaste por décadas.</p>\n\n<p>Hazles saber por qué importa lo que estás diciendo, muestra el interés o el amor que tienes por el tema.</p>\n\n<p>Esto nos deja una conclusión muy importante. <strong>Si no te interesa lo que estás explicando, a las personas que te escuchan tampoco tiene por qué interesarles.</strong></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Saber explicarnos es esencial para realizar un buen trabajo de equipo, y todos los trabajos serios, grandes y que valen la pena requieren de un equipos si los queremos lograr en un tiempo razonable. Nadie nace sabiéndose explicar, es por eso que debemos trabajar en esto y mejorar con la práctica. <strong>Una buena explicación puede cambiar tu compañía, tu equipo o incluso el mundo.</strong></p>\n\n<p>Te repito que puedes ver la plática aquí: <a href=\"https://www.youtube.com/watch?v=80EE4mZmp3A\">Eloquent Explanations</a>, de nuevo gracias a <a href=\"\">@russolsen</a> por sus contribuciones a la comunidad y por pláticas tan buenas.</p>\n",
      "date_published": "Mon, 26 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/24/creando-codigo-de-python-robusto.html",
      "url": "https://blog.thedojo.mx/2022/12/24/creando-codigo-de-python-robusto.html",
      "title": "Creando código de Python robusto, Parte 1",
      "content_html": "<p>En esta serie de posts vamos a hablar de algunas cosas que harán que tu código de Python sea:</p>\n\n<ul>\n  <li>resistente al paso del tiempo</li>\n  <li>más fácil de entender, de mantener y cambiar</li>\n  <li>que evite errores difíciles de encontrar</li>\n</ul>\n\n<p>En este artículo vamos a empezar a hablar de cómo hacer código que sea resistente al paso del tiempo.</p>\n\n<h2 id=\"el-tiempo-y-los-cambios\">El tiempo y los cambios</h2>\n\n<p>En realidad el puro paso del tiempo no le hace nada a ninguna cosa. A lo que nos referimos con esta expresión es que las cosas <strong>cambian</strong> con el tiempo. Estos cambios pueden afectar a partes de tu código aunque estas en sí misma no sufran ninguna modificación. Veamos cómo puedes protegerte con algunos tips específicamente para Python.</p>\n\n<h3 id=\"serialización\">Serialización</h3>\n\n<p>En algunos casos, es necesario guardar información que es resultado de la operación de un programa, sea como un paso intermedio para poder recuperar el cálculo en caso de fallo (como un punto de revisión) o para que otros procesos lo tomen.</p>\n\n<p>Sobre todo en procesos que llevan una gran cantidad de cálculo, algunos programadores están acostumbrados a usar el módulo <code class=\"language-plaintext highlighter-rouge\">pickle</code> de Python para guardar información en un archivo. Este módulo es muy útil para guardar <em>objetos</em> de Python en un archivo, pero presenta algunas características inconvenientes:</p>\n\n<ul>\n  <li>Es inseguro, ya que permite ejecutar código arbitrario al cargar un archivo (hay que truquearlo, pero es posible).</li>\n  <li>Es <strong>inestable</strong>, ya que permitirá crear una versión de un objeto que no sea compatible con la versión actual del código.</li>\n</ul>\n\n<p>Aunque la seguridad es muy importante, el punto que queremos tratar ahorita es la inestabilidad. Por ejemplo, si alguna clase de tu código evoluciona, agregando nuevos atributos, el archivo que guardaste y que ahora puedes cargar, creará una versión del objeto sin las características y las guardas que le hayas puesto a la nueva versión. Esto va a causar problemas no detectables hasta que el código que carga el archivo se ejecute.</p>\n\n<h3 id=\"alternativas-a-pickle\">Alternativas a Pickle</h3>\n\n<p>Siempre que quieras serializar parte de un programa, enfócate en los <strong>datos</strong>. No en las clases o los objetos. Así, para guardar datos puedes usar cualquier otro formato de serialización que no se meta con el código directo de Python. Algunas opciones son:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://barcelonageeks.com/serializar-y-deserializar-json-complejo-en-python/\">JSON</a>: usa el paquete <code class=\"language-plaintext highlighter-rouge\">json</code> para exportar y cargar los datos resultado de las computaciones. Tendrás que convertir tus objetos a diccionarios y listas, pero esto es fácil de hacer y no te afectará cuando cambies tu código.</p>\n  </li>\n  <li>\n    <p><a href=\"https://blog.conan.io/2019/03/06/Serializing-your-data-with-Protobuf.html\">Protocol Buffers</a>: es un formato binario definido por Google para acelarar la comunicación entre diferentes servicios. Es más complicado que usar JSON, pero más eficiente si tienes muchos datos.</p>\n  </li>\n  <li>\n    <p><a href=\"https://msgpack.org/index.html\">MessagePack</a>: usa el paquete <code class=\"language-plaintext highlighter-rouge\">msgpack</code> para serializar datos en un formato binario. Es más rápido y también más pequeño que JSON, aunque no es tan fácil de leer.</p>\n  </li>\n</ul>\n\n<h2 id=\"trabajando-con-fechas\">Trabajando con fechas</h2>\n\n<p>Otra razón por la que tu código puede dar problemas con el paso del tiempo es por un trato incorrecto de las fechas y horas. Cuando una aplicación tiene que recibir datos de horas o fechas de usuarios de diferentes partes del mundo (casi todas las aplicaciones web), es importante asegurarnos de que entendemos bien lo que nos quieren decir y de comunicarnos correctamente con ellos.</p>\n\n<p>Las zonas horarias son un gran dolor de cabeza para los desarrolladores, pero espero que podamos escribir un artículo más amplio sobre eso en el futuro. Por ahora, vamos a hablar de cómo trabajar con fechas y horas en Python.</p>\n\n<p>Si no sabes nada de las zonas horarias te recomiendo leer esto: <a href=\"https://learn.microsoft.com/es-es/dotnet/standard/datetime/time-zone-overview#time-zone-essentials\">Fundamentos de la zona horaria</a></p>\n\n<h3 id=\"fechas-ingenuas-vs-fechas-conscientes-de-la-zona-horaria\">Fechas ingenuas vs fechas conscientes de la zona horaria</h3>\n\n<p>Esta traducción la siento un poco forzada pero en inglés son <em>naive</em> y <em>timezone aware</em>. (¿Alguien tiene una mejor idea?)</p>\n\n<p>En Python, las fechas y horas se representan con objetos de la clase <code class=\"language-plaintext highlighter-rouge\">datetime</code>. Esta clase tiene dos subclases: <code class=\"language-plaintext highlighter-rouge\">datetime.datetime</code> y <code class=\"language-plaintext highlighter-rouge\">datetime.date</code>. Cuando la usas así, directamente sin especificar una zona horaria, estás usando una fecha ingenua. Por ejemplo:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n\n<span class=\"n\">fecha</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"c1\"># Esta fecha no incluye ninguna información sobre la zona horaria\n</span>\n</code></pre></div></div>\n\n<p>Aunque esto funciona bien para programas que sólo van a correr en tu computadora y que <em>siempre</em> van a correr nadamás para ti, no es suficiente cuando esta información va a ser compartida o se tiene que guardar para el uso futuro.</p>\n\n<p>La forma de usar una fecha consciente de la zona horaria en Python es:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timezone</span>\n\n\n<span class=\"n\">fecha</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"p\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span> <span class=\"c1\"># Esta fecha incluye información sobre la zona horaria, en este caso UTC\n</span>\n</code></pre></div></div>\n\n<p>De esta manera nos protegemos para no dar por sentado en qué zona horaria se creo cierto dato o a que zona horaria se refiere cierta fecha. A partir de Python 3.9 tenemos disponible un paquete que se llama <code class=\"language-plaintext highlighter-rouge\">zoneinfo</code> que nos permite trabajar con zonas horarias sin tener que instalar nada extra (excepto en Windows donde es probable que necesites los datos de <a href=\"https://pypi.org/project/tzdata/\">tzdata</a>). Si estás usando Python 3.8 o anterior, puedes instalar el paquete <code class=\"language-plaintext highlighter-rouge\">pytz</code> para poder usar zonas horarias o importar desde <code class=\"language-plaintext highlighter-rouge\">backports.zoneinfo</code> (también se tiene que instalar). Aquí hay un ejemplo:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">zoneinfo</span> <span class=\"kn\">import</span> <span class=\"n\">ZoneInfo</span>\n\n<span class=\"n\">fecha</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">ZoneInfo</span><span class=\"p\">(</span><span class=\"s\">\"America/Mexico_City\"</span><span class=\"p\">))</span> <span class=\"c1\"># Esta fecha incluye información sobre la zona horaria, en este caso la de México\n# datetime.datetime(2022, 12, 24, 20, 2, 21, 887237, tzinfo=zoneinfo.ZoneInfo(key='America/Mexico_City'))\n</span>\n</code></pre></div></div>\n\n<p>Así puedes crear siempre fechas con zonas horarias para que no tengas problemas a la hora de reutilizarla. Ahora hablemos de por qué es recomendable siempre usar la zona horaria UTC.</p>\n\n<h3 id=\"el-tiempo-universal-coordinado-utc\">El tiempo universal coordinado (UTC)</h3>\n\n<p><strong>UTC</strong> son las siglas para <strong>Universal Time Coordinated</strong> o el <strong>Tiempo Universal Coordinado</strong>. Este es un estándar para determinar la hora universal. Incluye todos los detalles de cómo obtener el tiempo, la coordinación, cómo tratar los segundos faltantes en el calendario gregoriano, etc. etc. etc. Coordinar el tiempo es un asunto muy complejo.</p>\n\n<p>UTC, a diferencia de lo que creemos los programadores <strong>no es una zona horaria</strong>, aunque nosotros lo usemos así. Antes se conocía como <strong>GMT</strong> (Greenwich Mean Time), pero otros de sus alias son “Z time” o “Zulu time”. Puedes leer el estándar, las motivaciones y la historia en este documento de la (BIPM)[]: <a href=\"https://www.bipm.org/documents/20126/28435864/working-document-ID-3644/2a6ce17c-7b50-4164-9bee-64f77bfad895\">Coordinated Universal Time</a>.</p>\n\n<p>Aunque <strong>UTC</strong> es el estándar, <strong>GMT</strong> pasó a ser el nombre de la zona horaria que no tiene diferencia con el UTC. Ahora ya sabes entonces que lo que los programadores llamamos “UTC” es en realidad la zona horaria “GMT”.</p>\n\n<p><strong>¿A qué viene todo esto?</strong> Es recomendado que siempre que tengas que guardar fechas y horas, <strong>antes las conviertas en fechas conscientes de la zona en UTC</strong>. Al tener esto estandarizado, podrás convertirla sin ningún problema en cualquier zona horaria que el usuario necesite. Además no tendrás problemas para hacer aritmética con fechas y horas.</p>\n\n<p>Tampoco tendrás que preocuparte por problemas con el horarios de verano, ya que UTC no sufre ese cambio.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Hay cosas a las que le tenemos que poner atención y a veces aprender un poco más para que nuestro código soporte el paso del tiempo. En esta serie de artículos seguiremos hablando sobre este tipo de cosas.</p>\n\n<p>Este artículo estuvo inspirado por dos temas del libro <a href=\"https://pragprog.com/titles/dmpython/intuitive-python/\">Intuitive Python</a> de <a href=\"https://github.com/DavidMuller\">David Muller</a>.</p>\n",
      "date_published": "Sat, 24 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/22/tomando-notas-efectivamente-zettelkasten.html",
      "url": "https://blog.thedojo.mx/2022/12/22/tomando-notas-efectivamente-zettelkasten.html",
      "title": "Tomando notas efectivamente: Zettelkasten",
      "content_html": "<p>Como desarrolladores de Software, necesitamos tener sistemas efectivos para aprender. Y aunque no seas desarrollador@ de software, muchas profesiones requieren que se esté aprendiendo constantemente, sea nuevos avances en el estado del arte, nuevas tecnologías, nuevas técnicas, o simplemente aprender nuevas áreas para entrar en <strong>“pastos más verdes”</strong>.</p>\n\n<p>En este artículo hablaremos de la importancia de tomar buenas notas mientras consumes información, y cómo este sistema te puede ayudar a ti mismo a producir más información y reflexiones, sea para ti mismo, para tu equipo o para el mundo.</p>\n\n<p>Este artículo está basado en el libro: <a href=\"https://amzn.to/3BKqWfK\">How to take smart notes</a><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> de Sönke Ahrens, que también está en español: <a href=\"https://amzn.to/3hDbxHq\">El método Zettelkasten</a>.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1671516491/Luhmann_xzhhmb.png\" alt=\"Dibujo de Niklas Luhmann\" class=\"align-center\" /></p>\n\n<h2 id=\"conceptos-fundamentales\">Conceptos fundamentales</h2>\n\n<p>Antes de empezar a hablar del método y cómo aplicarlo, entendamos por qué Sönke Ahrens y otras personas lo consideran tan efectivo. Los fundamentos de todo están en lo importante que es escribir.</p>\n\n<h3 id=\"escribir-es-lo-único-que-importa\">Escribir es lo único que importa</h3>\n\n<p>Aunque consumir información mediante la lectura, las clases, los tutoriales y cosas similares es importante, <strong>la forma más efectiva de asimilar información y comprobar que aprendiste es poner en tus propias palabras aquello que estás tratando de aprender</strong>. Un ejemplo de esto es <a href=\"https://www.youtube.com/watch?v=inZe9kW5djI\">“técnica de Feynman”</a>, que propone poner tus conocimientos sobre el tema que quieres aprender en una hoja de papel (sin copiar de ninguna fuente) y ver en dónde tienes huecos.</p>\n\n<p>Es por eso que la escritura se propone como un medio superlativamente importante para el aprendizaje, sólo poniendo el pensamiento en medio físico puedes comprobar que aprendiste. Este acto se puede considerar como “aprender en papel”.</p>\n\n<p>Sönke Ahrens llega a decir en su libro que “escribir es lo único que importa”. ¿Por qué podríamos llegar a decir algo semejante? El se refiere sobre a todo a los académicos e investigadores, y es que por mucho que piensen y tengan ideas, si no las escriben, <strong>no existen</strong>. No es posible sacarlas de su cabeza y incluso si lo comunican verbalmente, esto no es permanente (podríamos debatir sobre si hacer grabaciones o videos es equivalente a escribir).</p>\n\n<p>Pero ahora piénsalo en el área de desarrollo de software. El software que no hemos escrito no existe. Y tenemos una capa superior: el software que no tiene especificación y documentación, cuando se va la persona que tiene esas ideas en la mente, es inservible. No se puede mantener o evolucionar a menos que alguien de nuevo adquiera ese conocimiento como si fuera un arqueólogo. Lo mismo pasa con otras áreas del conocimiento, como los procesos empresariales, las políticas, etc. <strong>Si no están escritas, no existen</strong>.</p>\n\n<h3 id=\"las-conexiones-son-fundamentales\">Las conexiones son fundamentales</h3>\n\n<p>¿Cuántas veces un amigo de un amigo te ha ayudado con algún problema que tenías? Estas conexiones, que los sociólogos llaman “conexiones débiles” son un gran recurso cuando necesitamos algo de ayuda. Lo mismo pasa con las ideas, las conexiones débiles entre ideas que parecen no relacionadas es lo que permite la innovación y resolución de problemas de maneras que no nos imaginamos o no eran obvias.</p>\n\n<p>Pero, ¿cómo podemos encontrar estas conexiones no obvias entre ideas? Justo eso para lo que está construido el Zettelkasten.</p>\n\n<h2 id=\"qué-es-el-zettelkasten\">¿Qué es el Zettelkasten?</h2>\n\n<p><strong>Zettelkasten</strong> literalmente significa literalmente <strong>“caja de notas”</strong> (en alemán) y el método se llama así porque su creador, <a href=\"https://es.wikipedia.org/wiki/Niklas_Luhmann\">Niklas Luhmann</a>, guardaba sus notas en una caja y desde ahí operaba.</p>\n\n<p>La propuesta de este método, y por lo que llamó la atención recientemente, es que Niklas fue un sociólogo muy relevante y productivo, que escribió más de <em>70 libros</em> y <em>400 artículos</em> académicos. Fue muy influyente, y esta productividad se le atribuye a su método para tomar notas de lo que iba aprendiendo, pensando y encontrando fortuitamente.</p>\n\n<p>El método consiste en estos pasos:</p>\n\n<ol>\n  <li>\n    <p>Toma notas mientras lees (o consumes información en cualquier formato, ej. viendo videos), no subrayes o escribas en los márgenes. Luhmann lo hacía en hojas de tamaño A6, escribiendo una nota en pocas palabras capturando la idea principal de que quería guardar y la referencia bibliográfica. Nosotros podemos tomar <strong>notas temporales en un papel, cuaderno o cualquier lugar que te permita</strong>.</p>\n  </li>\n  <li>\n    <p>Al final del día, o constantemente, revisa las notas que tomaste con el fin de integrarlas en con las demás notas. La integración tiene que ver con numerar las notas, para que cada una tenga un identificador único. Ahora bien, ¿dónde vas a poner esta nota con respecto a las otras? Vamos a hablar de esto más adelante, pero esto ya empieza a ser tu <strong>Zettelkasten</strong>.</p>\n  </li>\n  <li>\n    <p>Revisa constantemente tu Zettelkasten y reescribe las notas que crees que puedes mejorar o sustituir. También puedes crear nuevos índices.</p>\n  </li>\n  <li>\n    <p>Crea un índice de los temas que contiene el Zettelkasten, para poder encontrar los temas más fácilmente cuando los necesites.</p>\n  </li>\n</ol>\n\n<h2 id=\"tipos-de-notas\">Tipos de notas</h2>\n\n<p>Para hacer tu Zettelkasten puedes tomar tres tipos diferentes de notas:</p>\n\n<ol>\n  <li>\n    <p><strong>Notas en modo borrador o temporales.</strong> En estas notas, normalmente en papel, anotarás todo lo que se te ocurre, llegas a pensar como parte de la reflexión de tu trabajo, las ideas que surgen mientras vas leyendo, etc. El objetivo de estas notas es que no pierdas nada de lo que crees que es importante para tu trabajo o tu vida en general. Estas notas son temporales y más tarde las transformarás en notas permanentes.</p>\n  </li>\n  <li>\n    <p><strong>Notas de referencia.</strong> Aquí puedes poner citas textuales junto con su referencia bibliográfica o que te permita encontrar de dónde la sacaste. Normalmente estas notas no llevan tus ideas, sino son usadas para apoyar lo que estás poniendo en una nota permanente. Estas notas normalmente están guardadas en un conjunto de notas de referencia separadas del Zettelkasten principal.</p>\n  </li>\n  <li>\n    <p><strong>Notas permanentes</strong>. Estas son las notas que añadirás a tu cajita, lo que te permitirá avanzar tu pensamiento. Estas notas son ideas completas, concisas y meditadas sobre un tema en específico. Pueden ser una nota temporal transformada o una nota completamente nueva. Para hacer estas notas tienes que <strong>reflexionar</strong> y poner en palabras el resultado de esos pensamientos. A estas notas le puedes agregar notas de referencias para tener soporte o para expandir sobre el tema más tarde.</p>\n  </li>\n</ol>\n\n<p>El libro “How to Take Smart Notes” menciona otro tipo de notas, llamadas de proyecto, que yo consideraría como las notas permanentes en el sentido de su utilidad, pero que son útiles por menos tiempo porque pertenecen a un proyecto específico.</p>\n\n<h2 id=\"organizando-las-notas\">Organizando las notas</h2>\n\n<p>La parte más importante del Zettelkasten es la conexión entre las notas, la integración, lo que permite que se generen nuevas ideas y se solidifiquen las que ya existen.</p>\n\n<p>Para integrar una nota en el Zettelkasten existen varios métodos:</p>\n\n<ol>\n  <li>\n    <p>Puedes buscar una nota relacionada y agregarla como una conexión, detrás de esta (esto es, de manera física). La relación entre las notas puede ser por ejemplo, que una es argumento para apoyar la otra, que es un punto de vista diferente del mismo tema o que de plano la contradice. Esto indicaría que tu pensamiento se está expandiendo y cambiando. Cuando lo haces en versión digital, sólo tienes que agregar una referencia a los temas que quieres conectar.</p>\n  </li>\n  <li>\n    <p>Puedes crear una nota que pertenezca a un tema y que tenga referencias a todas las notas relevantes dentro de tu Zettelksten.</p>\n  </li>\n</ol>\n\n<p>En ambos casos es muy muy importante que cuando agregues nuevas notas a tu Zettelkasten, revises las notas anteriores para agregar las conexiones pertinentes, eso es fundamental para crear nuevas ideas.</p>\n\n<p>Otra cosa que el libro menciona que debes hacer es un índice, sin embargo, esto lo podemos obviar si usamos un programa que automáticamente nos de una vista de todas nuestras notas.</p>\n\n<h2 id=\"software-para-hacer-tu-zettelkasten\">Software para hacer tu Zettelkasten</h2>\n\n<p>Luhmann hacía su Zettelkasten en papel, pero no tengo duda de que si hubiera tenido a la mano software que se lo facilitara, lo hubiera aprovechado. Algunos programas que puedes usar para hacer tu Zettelkasten son:</p>\n\n<ol>\n  <li>\n    <p><strong>Obsidian</strong>. Es gratuito (con algunos servicios de paga). Permite tomar notas en formato markdown y la característica más importante es que te permite crear conexiones entre notas, por lo que es muy adecuado para hacer tu Zettelkasten. Puedes descargar <a href=\"https://obsidian.md/download\">Obsidian</a> y ver un video de cómo hacer tu Zettelkasten con él <a href=\"https://www.youtube.com/watch?v=hGd70QqTkCM\">aquí</a>.</p>\n  </li>\n  <li>\n    <p><strong>Zotero</strong>. Este programa se recomienda principalmente para guardar las referencias a los lugares donde encontraste la información. Desde tu Zettelkasten puedes hacer referencia. A las notas de Zotero. Descarga <a href=\"https://www.zotero.org/download/\">Zotero</a>.</p>\n  </li>\n  <li>\n    <p><strong>Zettlr</strong>.Es gratuito, te permite tomar notas en formato markdown y que tiene una interfaz muy similar a Obsidian. Descargar <a href=\"https://www.zettlr.com/\">Zettlr</a>.</p>\n  </li>\n  <li>\n    <p><strong>Logseq</strong>. Te permite crear notas en Markdown, pero también en Org-mode. Se promociona como una base de conocimiento personal, con la privacidad en mente. Descargar <a href=\"https://logseq.com/\">Logseq</a>.</p>\n  </li>\n</ol>\n\n<h3 id=\"conclusión\">Conclusión</h3>\n\n<p>Un cambio que personalmente quiero hacer para medir mi avance, propuesto por el libro mencionado antes, es medir mi productividad por el número de notas que produzco en vez de por el número de páginas que leo. A final de cuentas, mucho de lo que se lee es olvidado si no lo reflexionamos, y lo reflexionado se pierde si no lo escribimos.</p>\n\n<p>Este sistema, además de aprender mejor, te ayudará a <strong>producir más</strong>, ya que si quieres crear una pieza sobre un tema, sea el capítulo de un libro, un video o un artículo, basta con echarte un clavado en tu Zettelkasten, ver las notas relevantes, crear un borrador y luego transformarlo y editarlo en el formato final. Claro, no todo será tan lineal, puede que te falten partes que tengas que investigar, pero tendrás un muy buen punto de partida.</p>\n\n<p>Si eres desarrollador, tener un sistema de administración del conocimiento es esencial para que no eches todo lo que aprendes en saco roto. Pon manos a la obra ya, sea con Zettelkasten o con algún otro sistema. ¿Tienes alguna otra recomendación? ¡Cuéntanos en los comentarios!</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Los enlaces a Amazon son afiliados, si compras algo a través de estos enlaces, yo recibiré una pequeña comisión sin costo adicional para ti. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Thu, 22 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/18/como-aprender-rust.html",
      "url": "https://blog.thedojo.mx/2022/12/18/como-aprender-rust.html",
      "title": "¿Cómo aprender Rust? Recursos para empezar",
      "content_html": "<p>En el <a href=\"/2022/12/13/por-que-aprender-rust.html\">artículo pasado</a> hablamos de por qué te conviene aprender Rust, un lenguaje moderno, seguro y productivo. Ahora hablemos de cómo empezar. Empecemos con los recursos en español y sigamos con recursos en inglés.</p>\n\n<h2 id=\"guía-oficial\">Guía oficial</h2>\n\n<p>En la página oficial de Rust puedes encontrar una página que te da muchos recursos para aprender Rust: <a href=\"https://www.rust-lang.org/es/learn\">Aprende Rust</a>. Lo malo es que la mayoría de los recursos a los que refiere están en inglés. Si lo manejas bien no tienes que seguir este artículo y puedes dirigirte a esta página y seguirla.</p>\n\n<p>Si quieres otros recursos en español, pero además otros tipos de recursos, sigue leyendo.,</p>\n\n<h2 id=\"empezando-en-español\">Empezando en español</h2>\n\n<p>De esta sección deberías escoger uno de los recursos que sugerimos. Si no entiendes bien el inglés, los primeros que sugerimos están en español.</p>\n\n<p>El recurso más recomendado por todos los que han aprendido Rust es el libro oficial: <a href=\"https://doc.rust-lang.org/book/title-page.html\">The Rust Programming Language</a>. El idioma original del libro es inglés y tiene traducciones a diferentes idiomas, entre ellos el español que puedes encontar aquí: <a href=\"https://github.com/ManRR/rust-book-es\">El lenguaje de programación Rust</a>. Sin embargo, parece que la traducción tiene bastante tiempo sin avanzar, por lo que la mejor opción es leer la versión en línea en inglés (volvemos al tema de que aprender inglés es una muy buena idea si trabajas en sistemas).</p>\n\n<p>Hay un recurso de <em>Freecodecamp</em> interactivo: <a href=\"https://www.freecodecamp.org/espanol/news/rust-en-replit/#descripci-n-de-rust\">Aprende Rust en Replit</a>, con el que podrás hacer los ejercicios interactivamente en <a href=\"https://replit.com/\">Replit</a>.</p>\n\n<p>Otro curso en línea es el que Microsoft ofrece en <a href=\"https://learn.microsoft.com/es-es/training/paths/rust-first-steps/\">Microsoft Learn: Primeros pasos con Rust</a>.</p>\n\n<p>Hay otros recursos que se mencionan en la página oficial de Rust, que no están en español, entre ellos:</p>\n\n<ul>\n  <li><a href=\"https://doc.rust-lang.org/stable/rust-by-example/\">Rust by Example</a>. Un curso completamente práctico que te enseña las bases.</li>\n  <li><a href=\"https://github.com/rust-lang/rustlings/\">Rustlings</a>. Un curso práctico que puedes correr en tu propia computadora.</li>\n</ul>\n\n<h3 id=\"recursos-introductorios-en-video-de-paga\">Recursos introductorios en video (de paga)</h3>\n\n<p>Encontré dos cursos introductorios en plataformas en español:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://codigofacilito.com/cursos/rust-introduccion\">Curso de Introducción a Rust</a> de Código facilito. Este curso es para programadores principiantes, ya que te explica lo básico de Rust con ejemplos sencillos.</p>\n  </li>\n  <li>\n    <p><a href=\"https://platzi.com/cursos/rust-basico/\">Rust básico</a> de Platzi. Tiene exactamente el mismo objetivo que el anterior, ayudar a programadores principiantes a aprender Rust.</p>\n  </li>\n</ul>\n\n<p>No recomiendo ninguno de los dos cursos si eres un programador experimentado, ya que sentirás que avanzan demasiado lento, pero si estás empezando, estos dos cursos están bastante bien por las cosas que explican como detalles.</p>\n\n<p>Un recurso en inglés que parece bastante prometedor si te gustan los cursos en video es <a href=\"https://www.udemy.com/course/ultimate-rust-crash-course/\">Ultimate Rust Crash Course</a>. Tiene bastantes buenas calificacioenes y lo que yo he tomado del curso parece tener un muy buen nivel y avanzar a buen paso.</p>\n\n<h2 id=\"avanzando-más-allá-de-lo-básico\">Avanzando más allá de lo básico</h2>\n\n<p>Casi todos los recursos de los que vamos a hablar ahora están en inglés.</p>\n\n<h3 id=\"libros\">Libros</h3>\n\n<p>Hay dos libros que me llaman especialmente la atención:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://nostarch.com/rust-rustaceans\">Rust for Rustaceans</a>. Es un recurso pensado para programadores experimentados y que ya saben Rust, trata temas avanzados relacionados con el diseño de programas que sean más eficientes y fáciles de mantener.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.zero2prod.com/index.html\">From Zero to Production in Rust</a>. Es un libro para principiantes en Rust enfocado en el desarrollo web backend.</p>\n  </li>\n</ul>\n\n<h3 id=\"cursos-en-video\">Cursos en video</h3>\n\n<p>La continuación de <a href=\"https://www.udemy.com/course/ultimate-rust-crash-course/\">Ultimate Rust Crash Curse</a>, que se llama <a href=\"https://www.udemy.com/course/ultimate-rust-2/\">Ultimate Rust 2: Intermediate Concepts</a> avanza en conceptos más profundos del lenguaje, impartido por Nathan Stocks (alias <a href=\"https://github.com/CleanCut\">CleanCut</a>), también. El curso termina con un proyecto que es un prototipo de un juego en un motor de videojuegos creado por el propio Nathan, llamado <a href=\"https://github.com/CleanCut/rusty_engine\">Rusty Engine</a>.</p>\n\n<p>Esto es un conjunto de cursos que componen lo que llamaríamos una especialidad: <a href=\"https://www.educative.io/path/become-a-rust-professional\">Become a Rust Professional</a>. La plataforma <a href=\"https://educative.io\">Educative</a> tiene el modelo de suscripción, por lo que si tienes tiempo, puedes pagar un solo mes y tomar todos los cursos, aunque también puedes comprar cada curso individualmente, conforme vayas avanzando.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Existen un montón de recursos para aprender Rust, sobre todo en inglés, pero también puedes empezar sin ningún problema en español, sobre todo gracias a los esfuerzos que la comunidad y las empresas que lo usan y patrocinan están haciendo para que la mayor cantidad de personas lo puedan aprender.</p>\n\n<p>Empieza tan pronto como puedas si está dentro de tus objetivos.</p>\n",
      "date_published": "Sun, 18 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/13/por-que-aprender-rust.html",
      "url": "https://blog.thedojo.mx/2022/12/13/por-que-aprender-rust.html",
      "title": "¿Por qué aprender Rust en 2023?",
      "content_html": "<p>Rust se ha establecido como uno de los lenguajes más queridos entre los desarrolladores en los últimos años y desde 2016 está en el número uno, según la encuesta anual de <a href=\"https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted\">Stack Overflow</a>. Esto no es de extrañar, ya que Rust es un lenguaje que ofrece <strong>muchas cosas buenas</strong> a aquellos que lo usan.</p>\n\n<p>En este artículo vamos a hablar de algunas de sus características, las ventajas de su ecosistema, y por qué te conviene aprenderlo. Además vamos a hablar de cuándo no es tan buena idea.</p>\n\n<h2 id=\"historia-y-concepción\">Historia y concepción</h2>\n\n<blockquote>\n  <p>No siempre fue así de claro, pero el lenguaje de programación Rust trata acerca de <em>empoderamiento</em>: no importa qué tipo de código estés escribiendo ahora, Rust te habilita para llegar más lejos, para programar con confianza en una variedad de dominios más amplia que la que antes hacías. - Nicholas Matsakis and Aaron Turon</p>\n</blockquote>\n\n<p>Rust nació en 2006 como un proyecto personal de <a href=\"https://github.com/graydon\">Graydon Hoare</a>, un empleado de Mozilla en ese entonces, que siempre ha trabajado en lado de los compiladores. Después de mostrárselo a su jefe, a Mozilla le interesó como una alternativa mejor que C y C++ para crear su motor de renderizado web llamado <a href=\"https://servo.org/\">Servo</a>. Y, efectivamente, Servo actualmente estás escrito en Rust.</p>\n\n<h3 id=\"idea-detrás-de-rust\">Idea detrás de Rust</h3>\n\n<p>Según <a href=\"https://www.infoq.com/news/2012/08/Interview-Rust/\">la entrevista</a> que le hicieron a Graydon, en Rust quiso implementar todas las características que le parecían interesantes y amadas de otros lenguajes, pero para un lenguaje dedicado a la creación sistemas, con la teoría de que las concesiones y condiciones que hacen que lenguajes como C y C++ siempre fueran favorecidos, han cambiado desde que nacieron.</p>\n\n<p>Así que Rust nació con la <strong>seguridad de memoria y la concurrencia en mente</strong>, pensando que el internet y la apertura que este provee hace que estas características sean muy importantes. Hablemos de estas características.</p>\n\n<h2 id=\"características-de-rust\">Características de Rust</h2>\n\n<p>Rust en un lenguaje que quiere reemplazar a C y C++, por lo que necesita características que les compitan y los mejoren, hablemos de tres de ellas con las que lo está intentando.</p>\n\n<h3 id=\"rendimiento\">Rendimiento</h3>\n\n<p>C y C++ se distinguen por ser los lenguajes para creación de sistemas más eficientes, y por eso Rust tiene que ser por lo menos tan eficiente como ellos. Rust, en la mayoría de los casos logra equipararse al rendimiento de C y C++.</p>\n\n<p>Aquí puedes ver algunas mediciones de Rust contra C++: <a href=\"https://programming-language-benchmarks.vercel.app/cpp-vs-rust\">Benchmarks Rust vs C++</a>. Y aquí hay otros un poco más entendibles: <a href=\"https://levelup.gitconnected.com/which-is-faster-rust-or-c-lets-find-out-who-is-the-usain-bolt-87495c774c8\">Rust vs C</a>. La conclusión a la que podemos llegar es que Rust es un contendiente muy serio para C y C++ en cuanto a velocidad y eficiencia.</p>\n\n<p>Lo que tenemos que recordar es que Rust provee características que C y C++, que hacen más fácil y segura la programación, por lo que si es casi tan rápido como estos, más sus características extra, entonces es una gran oferta para los desarrolladores.</p>\n\n<h3 id=\"seguridad-de-memoria\">Seguridad de memoria</h3>\n\n<p>La seguridad de memoria se refiere a la propiedad de los entornos de ejecución de los programas que te <strong>asegura que las referencias a memoria siempre son válidas</strong>. Si has programado en C y C++ has experimentado un entorno no seguro en memoria: puedes acceder a registros de memoria que no han sido inicializados y por lo tanto contienen información incierta. Para que la memoria siempre sea segura se necesita que siempre sea alocada por el programa y se del tipo y tamaño correcto.</p>\n\n<p>Un programa que no es seguro en memoria puede dar bugs aleatorios o fallar aleatoriamente sin explicación alguna. Además también puede ser inseguro respecto a la integridad de tus datos, ya que las fallas en el manejo de memoria pueden ser explotadas de formas creativas por los atacantes para acceder a información sensible.</p>\n\n<p>Uno de los objetivos de diseño en Rust es que sea seguro de memoria, para mi uno de los distintivos más grandes con C y C++.</p>\n\n<p>¿Cómo logra Rust la seguridad de memoria? Mediante un sistema de verificación estático de <a href=\"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\"><em>prestamos</em> y <em>pertenencia</em></a>. En artículos futuros explicaremos cómo se logra la seguridad de memoria con este sistema.</p>\n\n<h3 id=\"productividad\">Productividad</h3>\n\n<p>Como lo dice la cita del principio, la ventaja principal de Rust es que te permite ser más productivo en diferentes aspectos de la programación.</p>\n\n<p>Rust tiene a <a href=\"https://doc.rust-lang.org/cargo/\">cargo</a>, el manejador de paquetes que además te ayuda a crear proyectos, correr las pruebas, realizar reportes diversos sobre tu código, compilar y administrar paquetes, etc.</p>\n\n<p>Cargo te ayudará en formas que lenguajes más antiguos como C y C++ no pueden, no tendrás que crear los scripts de compilación a mano, o instalar un gestor de paquetes, etc.</p>\n\n<h3 id=\"abstracciones-sin-costo-en-tiempo-de-ejecución\">Abstracciones sin costo en tiempo de ejecución</h3>\n\n<p>Otra de las ventajas que Rust tiene para la productividad son las <a href=\"https://boats.gitlab.io/blog/post/zero-cost-abstractions/\">abstracciones sin costo</a> (zero-cost abstractions en inglés). Una abstracción sin costo se refiera a que puedes usar elementos de más alto nivel (que hacen más cosas por ti) en tus programas sin que esto genere un impacto negativo en el rendimiento del programa. Es decir, Rust genera el mismo código ensamblador sin importar si usas un for para sumar los elementos de un arrglo, si usas la función <code class=\"language-plaintext highlighter-rouge\">fold</code> o todavía a más alto nivel la función <code class=\"language-plaintext highlighter-rouge\">sum</code> en la que no tienes que hacer nada tú mismo. Sin duda estas abstracciones te pueden ayudar a ser más productivo, y lo mejor es que no tienes que pagar con rendimiento por ellas. Sabemos que las comidas gratis <a href=\"https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch\">no existen</a>, ¿quién o dónde se paga el costo de estas abstracciones? <strong>Es el compilador</strong> quien se encarga de que estas formas más fáciles de programar no te cuesten nada en tiempo de ejecución, por lo tanto, te costarán en tiempo de compilación.</p>\n\n<p>Esto es un tema un poco controversial porque hay quienes dicen que estas no existen, pero yo creo sinceramente que su costo es tan bajo que podemos considerarlo como costo cero, además con las ganancias en productividad que se obtienen, se puede considerar como una ganancia neta.</p>\n\n<blockquote>\n  <p>Rust resuelve puntos dolorosos presentes en muchos otros lenguajes, dando un sólido paso adelante con pocas desventajas - Jake Goulding</p>\n</blockquote>\n\n<h3 id=\"comunidad\">Comunidad</h3>\n\n<p>La comunidad de Rust es vibrante y cada vez crece más. Rust cada vez se usa en más lugares y más empresas lo respaldan, es como una bola de nieve que se va haciendo cada vez más y más grande. Mi predicción es que la comunidad seguirá creciendo y desarrollando tanto Rust como paquetes y cosas prefabricadas para que sea cada vez más fácil crear software con Rust.</p>\n\n<h3 id=\"desventajas\">Desventajas</h3>\n\n<p>Rust, como todo, no es una solución mágica que vaya a resolver todos los problemas de la creación de software como si fuera un hechizo mágico. Algunas de las desventajas que le veo son:</p>\n\n<ol>\n  <li>\n    <p><strong>Novedad.</strong> Al ser un lenguaje tan nuevo, no hay tantos recursos desarrollados como para C, C++, Java o Python. Probablemente muchas de las cosas que hagas si trabajas en un dominio muy específico, las tendrás que programar desde cero o componer bugs al no haber tantas manos probándolo por mucho tiempo como en otros lenguajes.</p>\n  </li>\n  <li>\n    <p><strong>Dificultad de aprendizaje.</strong> Rust tiene conceptos que no estamos acostumbrados a manejar en otros lenguajes. Simplemente, uno de sus conceptos básicos, el de préstamos y pertenencia, es algo que a muchos programadores nos costará trabajo. El sistema de tipos y la dificultad de que algo compile es algo más que se escucha por ahí respecto a la dificultad de aprender y usar Rust.</p>\n  </li>\n  <li>\n    <p><strong>Está siendo desarrollado muy activamente.</strong> Esto puede ser tanto una ventaja como una desventaja, pero sin duda lo es para la estabilidad de tu código. Si algo cambia en una nueva versión del compilador, vas a tener que hacer un gran cambio en tu base de código o quedarte con tu versión atrasada. Por el lado bueno, a tu lenguaje base se le estarán agregando siempre nuevas y mejores funciones.</p>\n  </li>\n</ol>\n\n<p>Finalmente, puede que no <em>necesites</em> las cosas que te ofrece. El esfuerzo extra que tendrás que poner para hacer que el compilador acepte tus programas puede que valga la pena si el rendimiento, la seguridad en memoria o el acceso a bajo nivel no son algo que distinga a tu software, así que no te dejes llevar el miedo a perderte algo que no necesitas. Si estas haciendo un prototipo que tiene que salir lo más rápido posible, tal vez Rust no sea la mejor elección, por ejemplo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Rust es un lenguaje de programación moderno que ofrece grandes características para poder desarrollar software de diferentes niveles, desde sistemas a aplicaciones web, e incluso frontend con <a href=\"https://webassembly.org/\">WebAssembly</a>. Puede que sus características de seguridad, rendimiento y productividad (por lo menos comparado con C++) sean una razón suficiente para que quieras aprenderlo.</p>\n\n<p>Como desarrollador, también puedes pensar que Rust seguirá creciendo en popularidad y puede que el número de desarrolladores necesitados aumente en los próximos años, por lo que aprenderlo te abriría las posibilidades de encontrar buenos trabajos y bien pagados.</p>\n\n<p>En los próximos artículos hablaremos de las herramientas ya desarrolladas para facilitar el trabajo con Rust, es decir, su entorno Open Source y también de recursos para aprender Rust. ¿Qué piensas? ¿Valdrá la pena aprenderlo?</p>\n",
      "date_published": "Tue, 13 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/03/el-principio-abierto-cerrado-open-closed.html",
      "url": "https://blog.thedojo.mx/2022/12/03/el-principio-abierto-cerrado-open-closed.html",
      "title": "El principio Abierto/Cerrado (Open/Closed)",
      "content_html": "<p>El principio Abierto/Cerrado, originalmente establecido por Bertrand Meyer en 1988 (pero popularizado por <a href=\"https://drive.google.com/file/d/0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1/view?resourcekey=0-FsS837CGML599A_o5D-nAw\" target=\"_blank\">Robert Martin</a>), es para mi uno de los más útiles en el conjunto (tal vez el más útil) de SOLID.</p>\n\n<p>Vamos a analizarlo, ver sus caso de uso y finalmente a establecer sus relaciones con otros principios de diseño de software que te pueden ayudar a crear mejores programas.</p>\n\n<h2 id=\"el-principio-abiertocerrado\">El principio Abierto/Cerrado</h2>\n\n<p>Este principio establece que:</p>\n\n<blockquote>\n  <p>Cualquier módulo de software debería estar abierto para la extensión, pero cerrado para modificación.</p>\n</blockquote>\n\n<p>Otra vez nos encontramos con palabras vagas que tenemos que examinar, pero por suerte en este principio es más fácil llegar a una conclusión.</p>\n\n<p>En pocas palabras cuando tengas que modificar el comportamiento de un programa, lo último que deberías hacer siempre es modificar el código que ya existe, más bien, debes crear módulos (clases, métodos, funciones, paquetes) que permitan modificar su comportamiento agregando <strong>código nuevo</strong>.</p>\n\n<p>No hay ningún mecanismo casi en ningún lenguaje de programación que te permita “cerrar” o “abrir” módulos, así que estas ideas son puramente conceptuales y guías de comportamiento.</p>\n\n<h2 id=\"aplicaciones-y-ejemplos\">Aplicaciones y ejemplos</h2>\n\n<p>La forma de ejemplo más clásica de aplicarlo es mediante la preparación de tus módulos o clases para usar <strong>polimorfismo</strong>. Por ejemplo, imagínate que estás haciendo una aplicación para procesar pagos y quieres cobrar por diferentes medios. Cada uno de estos medios es un “método de pago”. Si implementas cada uno de estos métodos como dependientes de una clase padre, mediante la herencia, clases abstractas, protocolos o interfaces, tu procesador principal podrá, por ejemplo, llamar al método <code class=\"language-plaintext highlighter-rouge\">procesar</code> de cada clase, sin importar el tipo de método de pago que sea o sus detalles de implementación.</p>\n\n<p>En el ejemplo anterior, cuando quieras implementar un nuevo método de pago, simplemente creas un nuevo módulo que cumpla con las especificaciones de la clase padre y no tendrás que modificar el código existente. Así solo has añadido código nuevo y has eliminado la probabilidad de afectar cosas que ya existían y funcionaban bien.</p>\n\n<p>Como puedes ver, los principios de funcionamiento de estas técnicas tienen que ver con dos cosas:</p>\n\n<ul>\n  <li>\n    <p>Ocultar información (esconder la mayor cantidad de detalles de implementación de tus módulos, detrás de una interfaz)</p>\n  </li>\n  <li>\n    <p>Programación por contrato, cumplir con una interfaz dada para que otros módulos puedan usarla con seguridad. De esto hablaremos en otro artículo, pero quiero que veas como es un tema que se va a repetir.</p>\n  </li>\n</ul>\n\n<h2 id=\"aplicaciones-más-amplias\">Aplicaciones más amplias</h2>\n\n<p>Este principio también se puede aplicar a niveles diferentes del sistema, por ejemplo a nivel arquitectónico.</p>\n\n<p>Un situación en que puedes usar esta estrategia es cuando tienes un módulo que quieres cambiar pero no quieres deshacer o poner en riesgo el funcionamiento de todo el sistema, ya que puede tener consecuencias catastróficas.</p>\n\n<p>Para aplicarlo, tienes que dejar intacto el módulo de la funcionalidad afectada, mientras lo envuelves con tu nuevo código, usándolo como la interfaz principal cuando te conviene y reemplazándolo poco a poco cuando te sientas seguro.</p>\n\n<p>Como puedes notar, para poder aplicar esta técnica, los módulos deben ser completamente independientes o no podrías de ninguna manera aislar los cambios que estás intentando hacer. Esto casi siempre se logra con paso de mensajes, como por ejemplo una interfaz RPC, ReST o respetando un contrato (interfaz).</p>\n\n<h2 id=\"otros-ideas-parecidas\">Otros ideas parecidas</h2>\n\n<p>Lo primero que quiero que notes es que este principio tiene mucho que ver con la <strong>separación de funciones</strong>, la <strong>ocultación de información</strong> y el respeto a la interfaces.</p>\n\n<p>Espero que para este momento te empieces a dar cuenta de que todo lo que llamamos “principios SOLID” tienen en el fondo: <strong>Ocultar Información</strong>. Esto ha sido ha hablado mucho por <a href=\"https://levelup.gitconnected.com/open-closed-principle-is-nothing-about-the-code-270f1c04bebf\" target=\"_blank\">David L. Parnas</a>, y para mi, es gran parte de lo que se requiere para hacer gran software que pueda ser mantenido y funcional mucho tiempo.</p>\n\n<p>Esta mismo concepto ha sido tratado por otras personas, como Alistair Cockburn con su concepto de <a href=\"https://martinfowler.com/ieeeSoftware/protectedVariation.pdf\" target=\"_blank\">“Variación protegida”</a>.</p>\n\n<p>La idea natural del concepto, puedes entenderla más fácilmente con máquinas reales:</p>\n\n<ul>\n  <li>\n    <p>Una cámara con lentes intercambiables que, cuando requieres una nueva óptica, pones un lente con el mismo conector (interfaz)</p>\n  </li>\n  <li>\n    <p>Un carro, que cuando una llanta se poncha se la puedes cambiar, o si requieres para un terreno diferente, puedes ponerle llantas de otro tipo.</p>\n  </li>\n</ul>\n\n<p>El punto es darle a tu sistema puntos “naturales” de extensión, en los que los cambios puedan caber sin hacer grandes cambios en todo el sistema.</p>\n\n<h2 id=\"los-límites-de-la-extensión\">Los límites de la extensión</h2>\n\n<p>Es natural que llegue el punto en el que no puedas seguir extendiendo el sistema y tengas que cambiar código que ya está funcionando, nada de lo que estamos diciendo es una ley absoluta o moral que te tengas que sentir mal por no cumplir, recuerda que todo esto es por tu conveniencia, la de tus desarrollos y de tu equipo.</p>\n",
      "date_published": "Sat, 03 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/01/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html",
      "url": "https://blog.thedojo.mx/2022/12/01/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html",
      "title": "Análisis de los principios SOLID: Principio de Responsabilidad Única",
      "content_html": "<p>En esta serie de artículos vamos a hablar sobre los cinco <strong>principios SOLID</strong>. Se dice que todo programador que quiera crear código mantenible y <em>“limpio”</em> debe conocer y usar. La estructura de los artículos llevará la siguiente forma:</p>\n\n<ul>\n  <li>Explicación del principio</li>\n  <li>Ejemplos y contraejemplos para pensar</li>\n  <li>Críticas y alternativas</li>\n</ul>\n\n<p>Esta serie de artículos surge debido a que <strong>aunque son poco entendidos por la mayoría de los programadores</strong>, estos principios se toman como <em>verdades universales</em> que hay que seguir. Si queremos desarrollar buen software, no podemos ir por allí solamente aceptando lo que <em>la mayoría</em> dice que está bien sin entenderlo a fondo y cuestionarlo.</p>\n\n<p>Así que esta serie estará enfocada más bien en el lado débil de los principios SOLID y ver si tenemos mejores alternativas, o por lo menos, ver cuando podemos usarlos y cuando no.</p>\n\n<p>Empecemos diseccionando el primer principio de los aclamados SOLID: el principio de Responsabilidad Única. Como verás a lo largo de los artículos, estos principios casi siempre se aplican con ejemplos de programación orientada a objetos, por lo que los verás explicados con <em>“clases”</em> y <em>“objetos”</em>.</p>\n\n<h2 id=\"el-principio-de-responsabilidad-única\">El principio de Responsabilidad Única</h2>\n\n<p>Este principio se puede enunciar como:</p>\n\n<blockquote>\n  <p>“Una clase debe tener una única razón para ser modificada” según en libro <em>Rober Martin</em>.</p>\n</blockquote>\n\n<p>Otros lo enuncian como:</p>\n\n<blockquote>\n  <p>Una clase debe hacer sólo una cosa y hacerla bien.</p>\n</blockquote>\n\n<p>Esto es un resumen del principio que nos puede servir para ayudarnos a pensar sobre las <em>responsabilidades</em> que nuestro código tiene, específicamente una clase. Pero, ¿qué es una <em>responsabilidad</em>? Aquí es donde empiezan a entrar los problemas al definir este principio y a tomar pasos prácticos para aplicarlo. Pensemos en algunos ejemplos:</p>\n\n<ul>\n  <li>\n    <p>Una clase que se encarga de transformar un archivo de un formato en otro debería encargarse sólo de esta transformación. ¿En dónde empieza y dónde acaba la <em>responsabilidad</em> de esta clase? ¿Tiene que encargarse de leer y guardar el archivo? ¿Debe existir una clase para guardar el archivo y otra para leerlo?</p>\n  </li>\n  <li>\n    <p>Una clase que se encarga de la comunicación con la API, transformando las peticiones del programa interno en peticiones HTTP y transformando las respuestas de la API en objetos y tipos de datos internos. ¿Dónde acaba su <em>responsabilidad</em>?¿Es la encargada de verificar la condición de la red? ¿Se encarga de verificar que los datos sean correctos, o es responsabilidad de otra clase?</p>\n  </li>\n</ul>\n\n<p>Como puedes ver, el principio, aunque suena simple, deja muchas cosas sin resolver y vagas, por lo que pocos encuentran un manera clara de aplicarlo. A mi me parece que tiene aplicaciones, pero solamente si acotamos más su alcance y definimos algunos límites, incluso cambiando el enfoque del consejo.</p>\n\n<h2 id=\"el-problema\">El problema</h2>\n\n<p>El gran problema con este consejo es que la definición de lo que una <strong>responsabilidad</strong> significa es completamente arbitraria. Todo dependerá de quién esté dividiendo el problema más grande en <em>responsabilidades</em>. Además, esta división puede tener diferentes niveles de granularidad, por lo que una sola <em>responsabilidad</em> a cierto nivel puede significar varias <em>responsabilidades</em> en un nivel más bajo.</p>\n\n<h2 id=\"transformando-el-principio\">Transformando el principio</h2>\n\n<p>¿Cuál es la <em>esencia</em> del principio? Para mi el corazón de este consejo tiene que ver con controlar la <strong>información</strong> que una clase maneja. También tiene que ver con el <strong>cambio</strong>. Finalmente el consejo tiene que ver con la cantidad de información que podemos mantener en nuestra mente en un tiempo específico. Si una pieza de código hace demasiadas cosas, será difícil de entender y por lo tanto propensa a errores y omisiones.</p>\n\n<p>La primera  cosa de la que vamos a hablar es de la <strong>información</strong>. La idea de que se encapsule una responsabilidad en un una clase es que si la información que tenemos sobre un problema cambia, se propague por la menor cantidad de código posible en nuestra base, rediciendo el impacto y la posibilidad de crear problemas.</p>\n\n<p>Entonces, lo primero que tenemos que pensar es si el nivel de granularidad del que se está hablando (clases) es el correcto. Para mi, no se puede establecer un nivel de granularidad tan fijo, sino que dependerá del programador que decida dónde <strong>encapsular o esconder</strong> la información que esta responsabilidad maneja. Puede que sea un módulo, paquete, clase o función. Hay problemas grandes y pequeños.</p>\n\n<p>Para aplicar esto, piensa:</p>\n\n<ul>\n  <li>¿Qué procedimientos, información y datos va a manejar esta pieza de código? Si no tienes claro esto, puede que te falte pensar un poco más en problema, e incluso dividirlo mejor.</li>\n  <li>¿Cómo puedo aislar la información que esta pieza de código maneja, de tal forma que si cambiar, no afecte a todo lo que está fuera de ella?</li>\n  <li>¿De dónde viene y a dónde va la información que esta pieza de código transforma?</li>\n  <li>¿Cómo puedo definir <em>exactamente</em> qué hace esta pieza de código? Esta definición junto con la justificación de la decisión debería estar bien documentada.</li>\n</ul>\n\n<h2 id=\"técnicas-para-concretar-el-principio\">Técnicas para concretar el principio</h2>\n\n<ul>\n  <li>\n    <p>Divide en problemas (responsabilidades) bien definidas tu problema principal. No hay una forma correcta de hacerlo, estas divisiones siempre serán arbitrarias, así que trata de documentar estas decisiones lo mejor posible. Estas decisiones deben ser fáciles de entender en la medida de lo posible.</p>\n  </li>\n  <li>\n    <p>Define exactamente que hará cada pieza de código que tenga una interfaz. Un módulo, una clase y una función tienen una interfaz, una parte que permite a otras piezas de código usar su funcionalidad interna. La función de esta interfaz es <em>esconder</em> los detalles de implementación permitiendo el uso de la funcionalidad encapsulada. También esto debe estar bien documentado en el lugar adecuado. Documenta lo que hace, no cómo lo hace.</p>\n  </li>\n</ul>\n\n<p>Estos dos puntos anteriores los puedes aplicar recursivamente a nivel cada vez más bajo, hasta que consideres que el problema es lo suficientemente pequeño como para resolverlo directamente.</p>\n\n<p>El último consejo tiene varias partes, por lo que trataremos en un subtítulo aparte.</p>\n\n<h2 id=\"evita-las-fugas-de-información\">Evita las fugas de información</h2>\n\n<p>Aunque tengamos completamente claro lo que una clase, módulo o función hace, nuestros detalles de implementación pueden dejar escapar información que no es conveniente que esté fuera de ella.</p>\n\n<p>Piensa por ejemplo en la clase que se comunica con la API. ¿Qué pasaría si pasaras directamente los errores que la API da hacia las demás partes del código? Si esta parte cambia en el futuro, afectarás a todas estas partes que consumen esos errores.</p>\n\n<p>Puedes seguir estos consejos para evitar fugas de información:</p>\n\n<ul>\n  <li>\n    <p>Define estructuras de datos para comunicar información entre clases, módulos y funciones que sean uniformes a todos. Si alguien necesita un formato diferente, sólo lo transformará dentro de sus límites, siempre encargándose de devolver y  recibir la información en el formato correcto.</p>\n  </li>\n  <li>\n    <p>Evita las dependencias temporales. Siempre que tienes que llamar las mismas funciones, clases o módulos en el mismo orden quiere decir que tienes una dependencia temporal. La información se está escapando en el orden de las llamadas. Piensa si estas piezas de código en realidad debieron ser una sola pieza.</p>\n  </li>\n  <li>\n    <p>Evita usar la misma abstracción a diferentes niveles. Imagínate que estás haciendo una aplicación para editar texto. Tienes una clase central que se encarga de mantener el estado del texto. Esta clase tiene la interfaz básica para realizar todas las transformaciones necesarias básicas, pero no le puedes exponer esto al usuario. El usuario necesita comandos como Copiar, Pegar y Cortar. Sería una mala idea usar estas mismas abstracciones en tu clase central, porque encadenaría completamente tu interfaz con tu centro y viceversa. Por eso, la clase que maneja el código debe tener abstracciones más básicas, adecuadas para crear funcionalidades como Copiar, Pegar, Cortar, u otras, si se necesitara.</p>\n  </li>\n</ul>\n\n<p>Todos estos consejos se tratan de mejor manera en el libro “A Philosophy of Software Design” de John Ousterhout, pero también me gustaría hacer eco de un consejo de Dan North: <strong>Busca crear código simple.</strong></p>\n\n<p>Esta fue la crítica y aplicación del principio de Responsabilidad Única. En el siguiente artículo veremos el principio de Abierto/Cerrado (Open/Closed Principle).</p>\n",
      "date_published": "Thu, 01 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/10/12/crea-hashes-resistentes-a-balas-con-keccak-tambien-llamado-sha-3.html",
      "url": "https://blog.thedojo.mx/2022/10/12/crea-hashes-resistentes-a-balas-con-keccak-tambien-llamado-sha-3.html",
      "title": "Crea hashes resistentes a balas con Keccak (SHA-3)",
      "content_html": "<p>Ya hemos hablado en este blog de lo que es un <a href=\"/2021/12/02/algoritmos-criptograficos-que-es-un-hash.html\">hash</a> e incluso qué hashes puedes usar para guardar tus <a href=\"/2021/12/03/algoritmos-criptograficos-hashes-seguros-para-alamcenar-passwords.html\">passwords de manera segura</a>.</p>\n\n<p>En este artículo vamos a hablar de uno en específico, el que estamos seguros que deberías usar para cualquier uso futuro en tus programas y sistemas, el que ha sido nombrado como el Secure Hash Algorithm 3 (<a href=\"https://www.nist.gov/publications/sha-3-standard-permutation-based-hash-and-extendable-output-functions?pub_id=919061\">SHA-3</a>): <strong>Keccak</strong>.</p>\n\n<h2 id=\"qué-es-keccak\">¿Qué es Keccak?</h2>\n\n<p><a href=\"https://keccak.team/\">Keccak</a> es una familia de funciones, creadas para cubrir la necesidad de un sucesor de la versión 2 del <em>Secure Hash Algorithm</em>, que tiene algunas limitaciones y vulnerabilidades (por ejemplo, el ataque de extensión de longitud).</p>\n\n<p>Está basada en una construcción de esponja, y usa internamente una función criptográfica llamada <strong>Keccak-f</strong>, que se encarga de permutar (cambiar de lugar o mezclar) los bits de la entrada de manera segura.</p>\n\n<p>Después de haber ganado la competición para la versión 3 del <em>Secure Hash Algorithm</em>, y por lo tanto ser nombrada <strong>SHA-3</strong>, ha sido estandarizada en diferentes documentos para diferentes usos. La estandarización implica que ha sido examinada y analizada criptográficamente por organismos internacionales, empresas e individuales para estar seguros de que no tiene deficiencias como función hash criptográfica.</p>\n\n<p>Un punto interesante es que uno de los diseñadores de esta función, también participó en la creación del actual AES: <a href=\"https://cs.ru.nl/~joan/\">Joan Daemen</a>, probablmente es un investigador al que le debamos prestar más atención, ya que casi toda nuestra seguridad actual y futura está influida por él.</p>\n\n<h2 id=\"qué-es-una-construcción-de-esponja\">¿Qué es una construcción de esponja?</h2>\n\n<p>La “arquitectura” interna de Keccak se distingue de otras funciones <em>hash criptográficas</em> por ser tener una <strong>construcción de esponja</strong>. SHA-1 y SHA-2 usan una construcción de <a href=\"https://www.coursera.org/lecture/crypto/the-merkle-damgard-paradigm-Hfnu9\">Merkle–Damgård</a>.</p>\n\n<p>¿Qué es una <strong>construcción de esponja</strong> y por qué nos importa como desarrolladores de software?</p>\n\n<p>Una construcción de esponja usa una función de <em>permutación</em> (en el caso de Keccak esta función se llama <strong>keccak-f</strong>). Un función de permutación mapea todas las combinaciones posibles de bits en la entrada a todas las combinaciones posibles de esa misma cantidad de bits, intercambiándolas. Por ejemplo, imagina una función que acepta 3 bits y devuelve 4 bits, y que intercambia los bits de la siguiente manera:</p>\n\n<pre><code class=\"language-center\">000 --(f)--&gt; 010\n001 --(f)--&gt; 100\n010 --(f)--&gt; 001\n011 --(f)--&gt; 111\n100 --(f)--&gt; 000\n101 --(f)--&gt; 110\n110 --(f)--&gt; 101\n111 --(f)--&gt; 011\n</code></pre>\n\n<p>Observa como ninguna de las combinaciones se repite en ninguno de los dos lados. <strong>keccak-f</strong> es una permutación de 1600 bits.</p>\n\n<p>La construcción de esponja divide los bits de la salida en dos partes: <em>velocidad</em> y <em>capacidad</em>. Esta división arbitraria, en el caso de <strong>Keccak</strong> depende de la versión que se quiera usar. La parte de la <em>velocidad</em> define cuántas veces se tiene que aplicar la función, ya que mientras más grande sea, más rápido se conseguirá el tamaño deseado. La parte de la <em>capacidad</em> define qué tan segura es la función, mientras más grande sea, más segura es la construcción de esponja (y más pequeña es la parte de velocidad, por lo que la función hash tardará más).</p>\n\n<p>Keccak empieza este ciclo con un estado inicial de puros ceros. La entrada se divide en bloques del tamaño de la velocidad (si es más pequeña que la velocidad, se <a href=\"https://crypto.stackexchange.com/questions/40511/padding-in-keccak-sha3-hashing-algorithm\">aplica un padding</a>). Se aplica un XOR entre cada bloque y el primer bloque de la velocidad, y se le da como entrada a la función de permutación. Esto se hace <strong>tantas veces como bloques haya</strong>. Esta fue la etapa de absorción.</p>\n\n<p>Finalmente, para obtener el hash, se “exprime” la función, siendo el primer bloque del resultado la parte de la <em>velocidad</em> de la última iteración y para obtener los siguientes bloques se aplica la función de permutación sucesivamente hasta obtener la cantidad de bytes requeridos. La siguiente imagen ilustra el proceso (con una permutación de 8 bits y una velocidad de  5 bits):</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1666498363/Screen_Shot_2022-10-22_at_21.51.41_h0u7s0.png\" alt=\"Arquitectura interna de una función construcción de esponja\" class=\"align-center\" />\n<em>Ejemplo de construcción de esponja con permutación de 5 bits. (Tomado del libro <a href=\"https://www.manning.com/books/real-world-cryptography\">Real World Cryptography de David Wong</a>)</em></p>\n\n<p>Ahora ya sabes cómo funciona a grandes rasgos <strong>Keccak</strong> internamente. <strong>¿Por qué nos interesa esto?</strong> Las funciones de esponja pueden ser configuradas para que absorban más o menos bits y por lo tanto son bastante flexibles, lo que permite crear funciones configurables y que pueden crear salidas de diferentes tamaños.</p>\n\n<h2 id=\"tamaños-de-keccak\">Tamaños de Keccak</h2>\n\n<p>Keccak ofrece los mismos tamaños de salida que SHA-2. Existen las siguientes versiones:</p>\n\n<ul>\n  <li><strong>SHA-3-224</strong>: 224 bits</li>\n  <li><strong>SHA-3-256</strong>: 256 bits</li>\n  <li><strong>SHA-3-384</strong>: 384 bits</li>\n  <li><strong>SHA-3-512</strong>: 512 bits</li>\n</ul>\n\n<p>Como siempre, mientras más grande sea la salida, más bits de seguridad ofrece y más difícil es de ser vulnerada.</p>\n\n<h2 id=\"usando-keccak\">Usando Keccak</h2>\n\n<p>El siguiente ejemplo muestra cómo usar Keccak como SHA-3-256 en Python (SHA-3 está disponible desde la versión 3.6 de Python):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">sha3_256</span>\n\n<span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">sha3_256</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">\"Hello world\"</span><span class=\"p\">).</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n<span class=\"c1\"># resultado '369183d3786773cef4e56c7b849e7ef5f742867510b676d6b38f8e38a222d8a2'\n</span>\n</code></pre></div></div>\n\n<p>Aquí hay un ejemplo en Go:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span>\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n <span class=\"s\">\"fmt\"</span>\n <span class=\"s\">\"golang.org/x/crypto/sha3\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"s\">\"hello world\"</span>\n\n <span class=\"c\">// Un hash de 256 bits</span>\n <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">sha3</span><span class=\"o\">.</span><span class=\"n\">New256</span><span class=\"p\">()</span>\n <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">Write</span><span class=\"p\">([]</span><span class=\"kt\">byte</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\n <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"no\">nil</span><span class=\"p\">)</span> <span class=\"c\">// terminamos la cadena</span>\n\n <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"c\">// hello world</span>\n <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"%x</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"p\">)</span> <span class=\"c\">// 369183d3786773cef4e56c7b849e7ef5f742867510b676d6b38f8e38a222d8a2</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Aquí hay una implementación de Java:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kn\">import</span> <span class=\"nn\">java.security.MessageDigest</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.security.NoSuchAlgorithmException</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">MessageDigest</span> <span class=\"n\">md</span><span class=\"o\">;</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nc\">MessageDigest</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">(</span><span class=\"s\">\"SHA3-256\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">NoSuchAlgorithmException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalArgumentException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"na\">digest</span><span class=\"o\">(</span><span class=\"s\">\"Hello world\"</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">());</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"na\">bytesToHex</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">));</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">bytesToHex</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">StringBuilder</span> <span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"s\">\"%02x\"</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Además, aquí puedes ver ejemplos de cómo usar Keccak (SHA-3) en otros lenguajes:</p>\n\n<ul>\n  <li><a href=\"https://www.npmjs.com/package/sha3\">SHA-3 en JavaScript o TypeScript</a></li>\n  <li><a href=\"https://github.com/johanns/sha3\">SHA-3 en Ruby</a></li>\n  <li><a href=\"https://www.erlang.org/doc/man/crypto.html#type-hash_algorithm\">SHA-3 en Elixir, usando Erlang</a></li>\n</ul>\n\n<h2 id=\"por-qué-usar-keccak\">¿Por qué usar Keccak?</h2>\n\n<p>SHA-3 o Keccak es una función más fuerte, sin vulnerabilidades conocidas, estandarizada y lista para ser usada como reemplazo de SHA-2 en cualquier lado sin grandes cambios. No hay pretexto para no usarla si existe una buena implementación en tu lenguaje.</p>\n",
      "date_published": "Wed, 12 Oct 2022 00:00:00 -0500"
      }
    
  ]
}
       <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>
        </div>

        
      </section>

      <footer class="page__meta">
        
        


        


      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2023 The Dojo MX Blog. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
