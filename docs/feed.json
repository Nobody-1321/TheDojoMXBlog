<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.24.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>The Dojo MX Blog</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="The Dojo MX Blog">
<meta property="og:title" content="The Dojo MX Blog">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="The Dojo MX Blog Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->
<!-- for mathjax support -->

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZNSYMJDY5S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZNSYMJDY5S');
</script>

<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": "The Dojo MX Blog",
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>



  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt="The Dojo MX Blog"></a>
        
        <a class="site-title" href="/">
          The Dojo MX Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  


  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          

        </header>
      

      <section class="page__content e-content" itemprop="text">
        
        <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>

        </div>
        {
  "version": "https://jsonfeed.org/version/1",
  "title": "The Dojo MX Blog",
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":"https://til.hectorip.com/"}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2023/04/17/composicion-en-el-software.html",
      "url": "https://blog.thedojo.mx/2023/04/17/composicion-en-el-software.html",
      "title": "Composición en el software",
      "content_html": "<p>Composición:</p>\n\n<blockquote>\n  <p>Es la acción de combinar componentes individuales para formar un sistema más complejo.</p>\n</blockquote>\n\n<p>Componer es la técnica más efectiva para construir software de manera organizada. La composición nos permite crear software complejo porque nos permite construir piezas pequeñas que resuelven problemas manejables y luego “juntarlas” para entregar la solución de nuestro problema.</p>\n\n<p>Veamos algunas formas de hacer composición en el software y por qué es más efectivo que otras formas de reutilizar código.</p>\n\n<h2 id=\"por-que-es-importante-aprender-a-usar-la-composición\">¿Por que es importante aprender a usar la composición?</h2>\n\n<blockquote>\n  <p>Nuestra habilidad para descomponer un problema en partes, depende\ndirectamente de nuestra habilidad para combinar soluciones. - <strong>John Hughes</strong></p>\n</blockquote>\n\n<p>John Hughes es un gran proponente e investigador de la programación funcional en la actualidad. Él propone que la composición es importante porque nos da la confianza de poder romper nuestros problemas en problemas más pequeños, sabiendo que después podremos juntarlos de manera efectiva para entregar una solución al problema original.</p>\n\n<blockquote>\n  <p>Divide y vencerás</p>\n</blockquote>\n\n<p>Una ventaja secundaria de dividir el software en piezas pequeñas, es que si diseñamos correctamente nuestros componentes y tenemos las herramientas adecuadas para unirlas después, podemos <strong>reutilizar</strong> las piezas que ya hemos construido en otras partes.</p>\n\n<p>Veamos dos formas de aplicar la composición en el software.</p>\n\n<h2 id=\"composición-de-funciones\">Composición de funciones</h2>\n\n<p>Las funciones son la unidad de abstracción más pequeña que tenemos en la programación. Crear pequeñas funciones útiles que resuelvan problemas generales, de manera <strong>completa y precisa</strong>, es muy buena idea.</p>\n\n<p>¿Cómo aplicamos la composición? Puedes usar la composición al dividir tu problema principal en funciones sencillas y luego juntarlas.Veamos un ejemplo: vamos a crear un validador de contraseñas. Este debe verificar las siguientes condiciones:</p>\n\n<ul>\n  <li>Verificar una longitud mínima, que podría ser 8 caracteres.</li>\n  <li>Checar que no tenga ciertas palabras (lista negra).</li>\n  <li>Verificar que tiene un número</li>\n  <li>Verificar que tiene un carácter especial</li>\n</ul>\n\n<p>Podríamos hacer esto en una sola función que verificara todas estas características, una por una a través de un serie de if’s. Pero veamos una implementación usando composición, y sus ventajas.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">min_length</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">has_number</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">.</span><span class=\"n\">isdigit</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">has_special_char</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"s\">\"!@#$%^&amp;*()_+\"</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">blacklist</span><span class=\"p\">:</span>\n      <span class=\"n\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'password'</span><span class=\"p\">,</span> <span class=\"s\">'12345678'</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">password</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">blacklist</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\\n           <span class=\"n\">has_number</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\\n           <span class=\"n\">has_special_char</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\\n           <span class=\"n\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Quiero que te fijes especialmente en la última función, <code class=\"language-plaintext highlighter-rouge\">validate_password</code>. Aunque funciona, es un poco rígida. La composición puede ayudarnos a hacerla más flexible.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'b1'</span><span class=\"p\">,</span> <span class=\"s\">'b2'</span><span class=\"p\">]):</span>\n    <span class=\"n\">validators</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span>\n        <span class=\"n\">has_number</span><span class=\"p\">,</span>\n        <span class=\"n\">has_special_char</span><span class=\"p\">,</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'palabra_uno'</span><span class=\"p\">,</span> <span class=\"s\">'palabra_dos'</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">validator</span> <span class=\"ow\">in</span> <span class=\"n\">validators</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Esta función es más flexible, pudiendo agregar o quitar validadores sin tener que modificar más código, simplemente modificando la lista de validadores, pero todavía no es como la queremos. ¿Qué pasas si queremos agregar el conjunto de errores por los que falla una validación? Tenemos que ir <strong>acumulando</strong>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'b1'</span><span class=\"p\">,</span> <span class=\"s\">'b2'</span><span class=\"p\">]):</span>\n    <span class=\"s\">\"\"\"Devuelve la lista de errores de la contraseña, si está vacía, la contraseña es válida\"\"\"</span>\n    <span class=\"n\">validators</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"s\">\"mesage\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña es muy corta\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"n\">has_number</span><span class=\"p\">,</span> <span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña no tiene un número\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"n\">has_special_char</span><span class=\"p\">,</span> <span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña no tiene un carácter especial\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'palabra_uno'</span><span class=\"p\">,</span> <span class=\"s\">'palabra_dos'</span><span class=\"p\">]),</span> <span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña tiene palabras prohibidas\"</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"p\">:</span> <span class=\"n\">errors</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"p\">[</span><span class=\"s\">\"message\"</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validator</span><span class=\"p\">[</span><span class=\"s\">\"validator\"</span><span class=\"p\">](</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">errors</span>\n\n</code></pre></div></div>\n\n<p>Aquí <code class=\"language-plaintext highlighter-rouge\">reduce</code> que recibe una función, una lista de elementos por las que iterar y un valor inicial, nos ayuda a acumular los errores. Si quisiéramos hacerlo aún más flexible, podríamos hacer dos cosas:</p>\n\n<ul>\n  <li>Hacer que la función <code class=\"language-plaintext highlighter-rouge\">validate_password</code> reciba una lista de validadores (junto con el mensaje), en vez de tenerlos definidos dentro de la función</li>\n  <li>Definir una clase <code class=\"language-plaintext highlighter-rouge\">Validator</code> que tenga un método <code class=\"language-plaintext highlighter-rouge\">validate</code> y un atributo <code class=\"language-plaintext highlighter-rouge\">message</code> y que reciba una función y un mensaje en su constructor, para tener una interfaz más clara.</li>\n</ul>\n\n<h3 id=\"composición-matemática\">Composición matemática</h3>\n\n<p>Este tipo de composición fue un poco más empírica, simplemente juntando funciones. A veces, cuando oigas de composición, se van a referir a la composición de funciones en sentido matemático. Veamos un ejemplo en Python:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">ascii_letters</span>\n\n<span class=\"n\">LETTERS</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ascii_letters</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">quitar_no_ascii</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">char</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">texto</span> <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">LETTERS</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reemplazar_acentos</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">):</span>\n    <span class=\"n\">accents</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'á'</span><span class=\"p\">:</span> <span class=\"s\">'a'</span><span class=\"p\">,</span>\n        <span class=\"s\">'é'</span><span class=\"p\">:</span> <span class=\"s\">'e'</span><span class=\"p\">,</span>\n        <span class=\"s\">'í'</span><span class=\"p\">:</span> <span class=\"s\">'i'</span><span class=\"p\">,</span>\n        <span class=\"s\">'ó'</span><span class=\"p\">:</span> <span class=\"s\">'o'</span><span class=\"p\">,</span>\n        <span class=\"s\">'ú'</span><span class=\"p\">:</span> <span class=\"s\">'u'</span><span class=\"p\">,</span>\n        <span class=\"s\">'ñ'</span><span class=\"p\">:</span> <span class=\"s\">'n'</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">accents</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"n\">char</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">texto</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">limpiar_cadena</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">quitar_no_ascii</span><span class=\"p\">(</span><span class=\"n\">reemplazar_acentos</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n\n<p>El código anterior deja una cadena solamente con letras ASCII, sin acentos. Lo que ves en la función <code class=\"language-plaintext highlighter-rouge\">limpiar_cadena</code> es una composición de funciones, en el sentido matemático, aplicar una función después de otra, o la salida de una como argumento de la otra.</p>\n\n<p>Siempre que pienses en un proceso que lleve una cadena de pasos, lo puedes representar como una cadena de funciones. En lenguajes funcionales hay operadores para hacer esto.</p>\n\n<p>Puedes pensar en este tipo de composición como en hacer <strong>fluir</strong> la información por un conjunto de funciones. Ejemplos en lenguajes como Haskell, Clojure y Elixir te pueden ayudar a expandir sobre esto, puedes buscarlo como “composición funcional”.</p>\n\n<h2 id=\"composición-de-objetos\">Composición de objetos</h2>\n\n<p>Otra técnica que te puede ayudar a crear mejor software es la composición de objetos. Esta se entiende como formar objetos más complejos a partir de objetos más simples. Aunque la <strong>herencia</strong> es una forma de composición, al hacer completamente dependientes una clase de otra, no es la mejor forma de crear objetos complejos. De hecho, hay grandes dudas sobre si la herencia es una buena idea. Pero no estamos aquí para discutir sobre las ventajas y desventajas de la herencia, sino para aprender a usar otros tipos de composición.</p>\n\n<p>Una forma de crear objetos complejos, en vez de tener la relación “es un” que nos da la herencia, es tener la relación “tiene un”. No estamos diciendo que la herencia nunca se deba usar, pero en muchas ocasiones podemos pensar en la composición como una alternativa mejor.</p>\n\n<p>Observa el siguiente ejemplo, en el que representamos la información de un usuario y su relación con al entidad Empleado:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">Usuario</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nombre</span><span class=\"p\">,</span> <span class=\"n\">apellido</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">nombre</span> <span class=\"o\">=</span> <span class=\"n\">nombre</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">apellido</span> <span class=\"o\">=</span> <span class=\"n\">apellido</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">email</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Empleado</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">usuario</span><span class=\"p\">,</span> <span class=\"n\">puesto</span><span class=\"p\">,</span> <span class=\"n\">salario</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">info_usuario</span> <span class=\"o\">=</span> <span class=\"n\">usuario</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">puesto</span> <span class=\"o\">=</span> <span class=\"n\">puesto</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">salario</span> <span class=\"o\">=</span> <span class=\"n\">salario</span>\n</code></pre></div></div>\n\n<p>Esta implementación está menos acoplada o es menos dependiente que la implementación basada en herencia. Por ejemplo, si queremos evolucionar la clase <code class=\"language-plaintext highlighter-rouge\">Usuario</code>, no tenemos que hacer que nada de esto afecte directamente a la clase <code class=\"language-plaintext highlighter-rouge\">Empleado</code>.</p>\n\n<p>Otra forma de usar la composición es la <strong>delegación</strong>, a la que le dedicaremos más tiempo en un futuro. Esta te la puedes imaginar como que un objeto le deja todo el trabajo a otro a través, por ejemplo, de un método. Esto es más común en lenguajes no basados en clases, ya que se da de manera más natural, como en JavaScript, donde puedes usar <code class=\"language-plaintext highlighter-rouge\">Object.assign</code> para copiar las propiedades de un objeto a otro.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aprender a usar la composición es <strong>obligatorio para desarrollar buen software</strong>. Lo quieras o no, mientras desarrollas, siempre estás juntando componentes, es decir <em>componiendo</em>, si conoces las técnicas correctas, podrás crear software de mejor calidad de manera más rápida.</p>\n\n<p>Piensa en el desarrollo de software como el arte de deconstruir los problemas, resolverlos por cachitos y después juntar las soluciones de regreso para tener la solución completa.</p>\n",
      "date_published": "Mon, 17 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/15/usando-langchain-para-crear-software-basado-en-llm-s.html",
      "url": "https://blog.thedojo.mx/2023/04/15/usando-langchain-para-crear-software-basado-en-llm-s.html",
      "title": "Usando LangChain 🦜 para crear software basado en LLM's",
      "content_html": "<p>Los grandes modelos de lenguaje o LLM’s (Large Language Models) han sido noticia en este 2023. Es por eso que han surgido muchos proyectos y herramientas que permiten crear software basado en estas herramientas.</p>\n\n<p>En este artículo vamos a poner un pequeño tutorial de una herramienta creada para hacer aplicaciones basadas en LLM’s: <a href=\"https://python.langchain.com/en/latest/index.html\">LangChain</a>.</p>\n\n<h2 id=\"qué-es-langchain\">¿Qué es LangChain?</h2>\n\n<p>Las aplicaciones basadas en procesamiento de lenguaje natural, sea como una herramienta de comunicación o como su producto principal, normalmente requieren fuentes de información para potenciar sus capacidades.</p>\n\n<p>También es una muy buena idea que estas aplicaciones puedan actuar por sí mismas usando las instrucciones creadas por un LLM. Para hacer esto podemos usar <strong>agentes</strong>.</p>\n\n<p><strong>LangChain</strong> provee componentes que te permiten lograr estas dos tareas, para que tú los uses como quieras, pero también te provee\nde cadenas de componentes (<em><a href=\"/\">composición</a> de software, ¿te suena?</em>) con casos de uso comunes, digamos que prefabricados, para hacer software basado en LLM’s de manera más rápida.</p>\n\n<p>Hablemos de qué componentes te provee LangChain para empezar a construir tus programas basados en LLM’s.</p>\n\n<h2 id=\"componentes-principales\">Componentes principales</h2>\n\n<p>LangChain provee varios tipos de componentes, muchos de los cuales son abstracciones de los conceptos más usados en la interacción con LLM’s, veamos algunos de ellos:</p>\n\n<ul>\n  <li>\n    <p><strong>Texto</strong>. La abstracción más básica es la que representa un texto cualquiera que le mandamos a un LLM. Este texto puede provenir de diferentes fuentes, como archivos, por ejemplo.</p>\n  </li>\n  <li>\n    <p><strong>Divisores de texto</strong>. Generalmente, un modelo de lenguaje no puede consumir mucho texto al mismo tiempo, por lo que para poder procesar textos grandes hay que mandárselos por partes. Este componente se encarga de ayudarte a dividir el texto en partes que el LLM pueda procesar.</p>\n  </li>\n  <li>\n    <p><strong>Índices</strong>. Es una abstracción que presenta el texto de mejor manera para que un LLM pueda acceder a la información mejor. Los índices se tienen que guardar de alguna manera y LangChain provee una interfaz para guardarlos en una base de datos especializada.</p>\n  </li>\n  <li>\n    <p><strong>Modelo</strong>. Esto es la interfaz con un modelo de lenguaje. Te lo puedes imaginar como el equivalente a un conector a base de datos, abstraen los detalles de la conexión y te dan una interfaz común.</p>\n  </li>\n  <li>\n    <p><strong>Agente</strong>. Un agente puede recibir instrucciones en forma de alguna abstracción de texto, para ejecutar acciones en <em>sistemas externos</em> o consultando para consultar al LLM.</p>\n  </li>\n  <li>\n    <p><strong>Cadena</strong>. Las cadenas son conjuntos de componentes que sirven para resolver problemas comunes o crear aplicaciones completas.</p>\n  </li>\n</ul>\n\n<p>Ya que entendemos las cosas que LangChain nos da, veamos cómo usarlas.</p>\n\n<h2 id=\"creando-una-aplicación-de-ejemplo\">Creando una aplicación de ejemplo</h2>\n\n<p>Vamos a crear una aplicación que nos permita consultar todos los posts de este blog y contestar preguntas. Por suerte, existe una cadena que ya nos permite hacer esto.</p>\n\n<h3 id=\"instalación\">Instalación</h3>\n\n<p>Primero veamos los requisitos: además de LangChain, necesitas los siguientes paquetes:</p>\n\n<ul>\n  <li>openai</li>\n  <li>chromadb</li>\n  <li>tiktoken</li>\n</ul>\n\n<p>Por lo que tu requirements.txt debería verse así:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>langchain\nopenai\nchromadb\ntiktoken\n</code></pre></div></div>\n\n<p>Aquí, recomiendo usar un entorno virtual con <a href=\"https://www.anaconda.com/products/distribution\">Anaconda</a>, sobre todo si tienes planes de seguir trabajando con cosas relacionadas con\nprocesamiento de datos.</p>\n\n<p>Para hacer la creación e instalación puedes correr los siguientes comandos si tienes <code class=\"language-plaintext highlighter-rouge\">conda</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\nconda create <span class=\"nt\">-n</span> entorno_langchain pip\nconda activate entorno_langchain\npip <span class=\"nb\">install </span>requeriments.txt\n\n</code></pre></div></div>\n\n<p>Aquí <code class=\"language-plaintext highlighter-rouge\">entorno_langchain</code> es el nombre de nuestro entorno virtual y puede ser cualquiera que tú quieras.\nTambién, para empezar, necesito una fuente de datos para empezar a probar, por lo que voy a copiar algunos posts de este blog, que están en formato markdown y pueden ser consumidas sin ningún programa adicional. Voy a crear una carpeta llamada docs y dentro copiaré los archivos markdown de este blog, que están en _posts. Tú puedes poner ahí los diferentes archivos que quieras consultar, tal vez directamente en docs.</p>\n\n<p>Mi estructura de archivos se ve así (mi carpeta de trabajo es <code class=\"language-plaintext highlighter-rouge\">thedojo_agent</code>):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\nthedojo_agent\n├── docs\n│   ├── _posts\n│   │   ├── 2018-10-28-bienvenidos.md\n... muchos archivos más\n├── requeriments.txt\n</code></pre></div></div>\n\n<p>Teniendo esto listo podemos seguir el ejemplo básico del tutorial de LangChain.</p>\n\n<h2 id=\"creando-un-script-mínimo-que-funciona\">Creando un script mínimo que funciona</h2>\n\n<p>Dentro de un archivo que se llame <code class=\"language-plaintext highlighter-rouge\">main.py</code> vamos a escribir el siguiente código:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.document_loaders</span> <span class=\"kn\">import</span> <span class=\"n\">TextLoader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.indexes</span> <span class=\"kn\">import</span> <span class=\"n\">VectorstoreIndexCreator</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">TextLoader</span><span class=\"p\">(</span><span class=\"s\">\"./docs/_posts/2023-04-07-cuando-separar-el-codigo.md\"</span><span class=\"p\">)</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">VectorstoreIndexCreator</span><span class=\"p\">().</span><span class=\"n\">from_loaders</span><span class=\"p\">([</span><span class=\"n\">loader</span><span class=\"p\">])</span>\n\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s\">\"¿Cuándo separar el código?\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">))</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s\">\"¿Qué es un módulo?\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">query_with_sources</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n\n<p>Primero importamos el componente <code class=\"language-plaintext highlighter-rouge\">TextLoader</code> que nos permitirá cargar texto de un archivo y el componente <code class=\"language-plaintext highlighter-rouge\">VectorstoreIndexCreator</code> que nos permitirá crear un índice y almacenarlo como un vector.</p>\n\n<p>Ya nos estamos empezando a meter en cosas que no son tan conocidas. Vamos a explicarlas. Un índice es parecido a lo que se hace en las bases de datos, se analiza la información del texto para guardarle de manera organizada, para que cuando necesitemos encontrar algo, sea fácil de encontrar. Por ejemplo, podría estar organizado por palabras clave y con las referencias a donde se puede encontrar en los textos.</p>\n\n<p>Que se guarde como un vector tiene que ver con la forma en que trabajan los modelos de lenguaje. Lo que en realidad ve un modelo es una lista de tokens, que son números que representan el texto. Cuando un modelo te da una respuesta, te da una lista de tokens junto con la probabilidad de que cada token vaya en ese orden. Esto son los “embeddings”, y a final de cuenta son colecciones de números, como listas, lo que se conoce como vectores en este mundo del procesamiento de datos.</p>\n\n<p>Así que primero generamos un índice, que consiste en un conjunto de vectores y después lo guardamos.</p>\n\n<p>Eso es justo lo que hacen las dos líneas que siguen al import.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">TextLoader</span><span class=\"p\">(</span><span class=\"s\">\"./docs/_posts/2023-04-07-cuando-separar-el-codigo.md\"</span><span class=\"p\">)</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">VectorstoreIndexCreator</span><span class=\"p\">().</span><span class=\"n\">from_loaders</span><span class=\"p\">([</span><span class=\"n\">loader</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Después de esto, ahora consultamos el texto de dos formas:</p>\n\n<ol>\n  <li>Primero que nos de la respuesta solita.</li>\n  <li>Que nos de la respuestas junto con la fuente de donde la sacó.</li>\n</ol>\n\n<p>Este ejemplo básico ya empieza a hacer por nosotros lo que queríamos en un principio: consultar un texto y obtener una respuesta.</p>\n\n<p>Vamos a ir un poco más hondo en el código.</p>\n\n<h3 id=\"qué-hace-vectorstoreindexcreator\">¿Qué hace VectorstoreIndexCreator?</h3>\n\n<p>La parte que más magia esconde es el objeto <code class=\"language-plaintext highlighter-rouge\">VectorstoreIndexCreator</code>. Este objeto es una composición de otros que cumplen estos roles:</p>\n\n<ol>\n  <li>Un “cortador” de texto, que ayuda a procesar el texto de la fuente.</li>\n  <li>Un modelo de lenguaje para generar los embeddings.</li>\n  <li>Un almacén de datos, en nuestro caso, un <code class=\"language-plaintext highlighter-rouge\">Vectorstore</code>, o una base de datos que almacene vectores.</li>\n</ol>\n\n<p>El objeto ya hace por nosotros todo el trabajo, el flujo de información, desde la fuente, que en el ejemplo es un texto cargado desde un conjunto de archivos, hasta el almacén de datos, que en el ejemplo es ChromaDB, que es una base de datos que almacena vectores.</p>\n\n<p>ChromaDB puede correr en memoria o como servidor, pero aquí corre como base de datos en memoria, usando por debajo DuckDB, una base de datos completamente en memoria, así que cuando salgas del programa, se borra todo.</p>\n\n<p>Vamos a dejar para un artículo futuro la creación de un índice, explicando sus parámetros.</p>\n\n<p>Si quieres ver un ejmplo funcionando, Alex y yo hicimos un ejemplo y platicamos más de esto en este directo:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/IamEow08Zas\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<hr />\n\n<p>¡Esperamos tus comentarios!</p>\n",
      "date_published": "Sat, 15 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/07/cuando-separar-el-codigo.html",
      "url": "https://blog.thedojo.mx/2023/04/07/cuando-separar-el-codigo.html",
      "title": "Cuando separar el código",
      "content_html": "<p>Hay quienes afirman que mientras más pequeñas sean tus clases o funciones, mejor. Hasta llegan a poner un límite de la líneas que pueden ir en un método o función. Esto crea código súper fragmentado que llega a ser complejo por el simple hecho de tener muchos elementos individuales que luego se tienen que unir mediante más código. Además, trazar la causa de algo a través de un código similar es casi imposible o, por lo menos, te puede tomar mucho tiempo.</p>\n\n<p>Es por eso que otros proponentes sobre diseño de software mencionan que mientras más cosas estén detrás de un interfaz y que oculten una implementación, mejor. Esto implica que las funciones y los métodos deben tener un tamaño razonable, sin llegar a ser demasiado grandes. Y este es el punto de este artículo, ¿cómo sabemos cuando es buena idea separar el código en otro módulo? Recuerda que a lo que nos referimos con módulo es cualquier construcción de tu lenguaje que permita encapsular una implementación: clases, funciones, paquetes, etc.</p>\n\n<p>Dominar la división de software en módulos es una pilar del buen diseño de software. Veamos algunos de los criterios que John Ousterhout propone en su libro <a href=\"https://web.stanford.edu/~ouster/cgi-bin/book.php\">A Philosophy of Software Design</a>, precisamente en el capítulo nueve que llama “¿Mejor juntos o separados?” (<em>“Better together or better apart?”</em>). Empecemos hablando de cuándo es mejor dejarlo junto.</p>\n\n<p>Lo que tienes que mantener enfrente es que la meta de hacerte es pregunta es disminuir complejidad de tu código en general, pero también de hacerlo más fácil de evolucionar haciéndolo <strong>más modular</strong>.</p>\n\n<h2 id=\"cuando-dejarlo-junto-o-combinarlo\">Cuando dejarlo junto o combinarlo</h2>\n\n<p><strong>Acceso a la información</strong>. Lo primero que hay que considerar es la información con la que el módulo trata. Si es un slo conjunto de información que en sí mismo es difícil de separar, entonces el código que trata con él <strong>debería permanecer junto</strong>. También te puedes imaginar un protocolo como HTTP, que para simplemente para verificar que el mensaje está bien formado, se requiere de un información para parsearlo. En este caso, el parseo y la verificación del mensaje deberían estar juntos.</p>\n\n<p><strong>Cercanía semántica</strong>. Si dos partes de código se pueden categorizar fácilmente bajo la misma categoría, muy probablemente ese código puede estar bajo la misma clase, módulo o paquete. El ejemplo que da Ousterhout tiene que ver con cadenas de texto y las funciones que las transforman.</p>\n\n<p><strong>Dependencia</strong>. Si siempre que quieras entender una parte, de código tienes que mirar a otra, estas dos piezas de código probablemente deben de vivir bajo el mismo módulo. Esto mismo aplica si se usan siempre (o casi siempre) juntas esas dos piezas de código.</p>\n\n<p><strong>Eliminación de código duplicado</strong>. Esta es una situación a la que hay que prestarle especial atención. Si notas que estás duplicando código en alguna parte, lo más sensato es juntarlo en un alguna clase o función y llamar desde los diferentes lugares en donde lo estás ocupando. Aquí hay que poner un poco de atención: si este código duplicado son unas pocas líneas, puede que no sea conveniente pasar por la molestia de crear un nuevo módulo y las cosas que se requieren para integrarlo en tu código actual. Algo todavía mejor que puedes hacer es refactorizar tu código para que en vez de se llame en diferentes lugares, se reduzca el número de lugares en donde se llama. Esto es posible sobre todo con las excepciones, dependiendo de  tu lenguaje de programación y su estilo de manejo de errores.</p>\n\n<p>Juntar el código a veces traerá un beneficio extra: eliminarás interfaces que no necesitas. Imagínate dos piezas de código que siempre llamas en secuencia, por ejemplo, la función <code class=\"language-plaintext highlighter-rouge\">obtenerHash</code> y <code class=\"language-plaintext highlighter-rouge\">verificarHash</code>. Si el 99% de las veces necesitas verificar un hash después de crearlo y al revés, casi siempre que verificas un Hash es porque lo acabas de crear, entonces es mejor que ambas funciones estén juntas, algo como <code class=\"language-plaintext highlighter-rouge\">crearHashVerificado</code>. Esto es una buena señal de que el código debería estar junto: <strong>si terminas con menos interfaces que al principio, o con interfaces más sencillas</strong>.</p>\n\n<h2 id=\"cuando-separar-el-código\">Cuando separar el código</h2>\n\n<p>Algunas personas cuentan la líneas de código y creen que esto es un buen indicador de cuando romper una pieza de código en varias. Esto no es conveniente porque aunque es cierto que mientras más grande sea algo, más probable es que sea difícil de entender, no tiene por qué ser así si está bien organizado.</p>\n\n<p>Un buen criterio para separar el código es por su <strong>nivel de abstracción</strong>. No es buena idea tener junto código general y específico para la misma funcionalidad en el mismo módulo, ya que cambios en las funcionalidades específicas podrían afectar a la implementación más general.</p>\n\n<p><strong>Ejemplo</strong>: imagina que tienes que crear un editor de texto. Un editor de texto tiene funciones generales como insertar texto donde está el cursor, pero también funcionalidades más específicas, como por ejemplo, seleccionar texto con una interfaz gráfica. Aquí decimos que la inserción de texto es general porque todos los editores de texto lo tienen, mientras que la selección de texto es específica porque no todos los editores de texto tienen una interfaz gráfica (piensa que puedes editar texto mediante instrucciones en un API, por ejemplo).</p>\n\n<p>En este caso, dejar en el core solamente las funciones más básicas de edición de texto es buena idea. La selección y borrado de texto pueden ser implementados en otro módulo usando las funciones que el core provee.</p>\n\n<p>Esto lo puedes ver en práctica en los sistemas diseñados en capas, sobre todo en los MVC: el modelo tiene toda la información específica del negocio, la vista todo lo relacionado con la interfaz hacia el exterior y el controlador la conexión entre estas dos partes. Hay componentes extra, como el ORM o el sistema que se encargue de persistir la información. Aunque esto es un buen comienzo, no es suficiente. Tu propio código debe ser organizado de forma que sea fácil de entender siguiendo estos principios.</p>\n\n<h2 id=\"ejemplo-funcionalidad-de-undo-deshacer-en-un-editor-de-texto\">Ejemplo: funcionalidad de UNDO (Deshacer) en un editor de texto</h2>\n\n<p>John Ousterhout da el ejemplo de la funcionalidad de “deshacer” en editor de texto. Eso que sucede cuando das <code class=\"language-plaintext highlighter-rouge\">CTRL+Z</code> en casi cualquier programa. ¿En qué consiste? En que cuando se realiza una acción, se guarda para que pueda ser contrarrestada con la acción contraria. Esta función puede ser implementada en el módulo central del editor o fuera de él. ¿Cuál es la mejor opción? Imagina que no sólo tienes que poder deshacer acciones directas en el texto, sino también cosas como selecciones o posicionamiento del cursor.</p>\n\n<p>Una forma de hacerlo sería implementarlo directamente en el módulo o clase encargado de manejar el texto, guardando la lista de acciones que se pueden deshacer y cuando se invoque la acción de deshacer o rehacer, este módulo sería el encargado de ejecutar las acciones de regreso. Este diseño crearía una interacción un poco extraña entre el módulo de interfaz, por ejemplo y el módulo de texto, ya que las acciones de interfaz que se tengan que deshacer, viajarían hacia “arriba”.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1680914313/separacion_gvalss.png\" alt=\"arquitectura conjunta de lo descrito\" class=\"align-center\" /></p>\n\n<p>Un mejor diseño sería separar completamente el módulo de encargado de mantener las acciones que se pueden deshacer, al que podemos llamar Historia. Este módulo sería encargado de guardar y administrar todas las acciones que el usuario tiene disponibles para rehacer o deshacer. Las acciones pueden estar autocontenidas: cada una tiene además información sobre cómo revertirla. ¿Quién pone las acciones en la historia? El módulo que realizó la acción. Por ejemplo, si es una inserción de texto, el encargado sería el módulo core, encargado de manejar el texto. Si es una selección visual, puede ser el módulo de interfaz de usuario. Las acciones son clases con una interfaz común que el módulo de historia puede invocar para deshacer o rehacer.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1680914316/separacion_2_nnuihs.png\" alt=\"Imagen separada\" class=\"align-center\" /></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aprender a separar tu código es algo que se logra con la práctica y que sin duda vale la pena hacer, porque un código con una complejidad controlada logra un equilibrio entre módulos demasiado pequeños (que hacen muy poco) y demasiado grandes (que juntan mucha información).</p>\n\n<p>La guía principal para saber cuándo separar o juntar tu código es esta: escoge la estructura que genere menores dependencias, oculte mejor el conocimiento y cree interfaces más simples.</p>\n",
      "date_published": "Fri, 07 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/01/el-principio-de-segregacion-de-interfaces.html",
      "url": "https://blog.thedojo.mx/2023/04/01/el-principio-de-segregacion-de-interfaces.html",
      "title": "El principio de segregación de Interfaces",
      "content_html": "<p>Continuemos con el estudio de los principios SOLID. En esta ocasión hablaremos del cuarto principio: El principio de segregación de interfaces.</p>\n\n<p>Recuerda que el objetivo de estos artículos <strong>no es explicártelos como si fueran una religión que estás mal si no sigues</strong>, sino analizarlos bajo una luz crítica y decidir si de verdad son útiles o podemos usar otro principio.</p>\n\n<p>Analicemos primero el enunciado, junto con algunos ejemplos y veamos si nos conviene aplicarlo directamente o no.</p>\n\n<h2 id=\"el-principio-de-segregación-de-interfaces\">El principio de segregación de interfaces</h2>\n\n<p>La frase que define el principio es:</p>\n\n<blockquote>\n  <p>Los clientes no deberían ser forzados a depender de interfaces que no usan.</p>\n</blockquote>\n\n<p>Creo que el nombre y este enunciado lo hace sonar demasiado complicado para lo que es: se trata de pensar bien tus interfaces para que no sean lo más sencillo que se pueda. <em>“Los clientes”</em> son todas las partes del código que usan <strong>una interfaz</strong>.</p>\n\n<p>Al hacer tus interfaces lo más sencillas que puedas, evitarás que los clientes tengan que implementar métodos que no usan, y que no deberían tener que implementar.</p>\n\n<p>Pongamos un ejemplo de la vida real:</p>\n\n<p>¿Te ha tocado llenar un formulario que te pregunta cosas que no te aplican? Por ejemplo un formulario que te pregunta por los datos de tus hijos independientemente si no tienes o no. Sin duda es molesto y una pérdida de tiempo. Aquí, te están forzando a cumplir con una interfaz que no usas.</p>\n\n<p>Lo mismo exactamente puede pasar con el software. Si una interfaz, por ejemplo, al usar un método con muchos parámetros obligatorios que no siempre se ocupan, o una clase con métodos que corresponden a otros usos.</p>\n\n<p>Esto se puede dar cuando tienes una clase o una función que implementa algo que puede ser ocupado en diversos lugares (estos son sus <em>clientes</em>). Imagina que los diferentes lugares tienen ligeras variaciones, por las que hay que modificar la interfaz para que se pueda usar en cada uno de ellos. Hacer esto te llevaría a crear una interfaz complicada de usar y además frágil.</p>\n\n<p>Es por esto que John Ousterhout da varios consejos relacionados:</p>\n\n<ol>\n  <li>Mientras más simple la interfaz, mejor.</li>\n  <li>Son mejores los módulos de propósito <strong>general</strong>, que después puedan ser especializados o combinados para crear interfaces específicas, para cada caso.</li>\n  <li>Crear las interfaces pensando en el caso más común.</li>\n</ol>\n\n<p>Sin embargo, este último consejo de Ousterhout puede ir en contra de este principio, pero aquí preferimos la practicidad sobre la pureza. Más adelante daremos un ejemplo.</p>\n\n<h2 id=\"ejemplos-de-aplicación\">Ejemplos de aplicación</h2>\n\n<p>Empecemos con un ejemplo que nos pude ayudar a entender el problema y la solución mediante un conjunto de clases.</p>\n\n<p>Usemos un ejemplo común este blog: una plataforma para enviar mensajes a diferentes canales, como Telegram, WhatsApp, Messenger, Instagram. Una forma de representar la interfaz de un mensaje sería la siguiente:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1680394988/clase_texto_ylaj7m.png\" alt=\"Clase única\" class=\"align-center\" /></p>\n\n<p>Aunque podríamos nombrar algunos de estos argumentos como opcionales (lo cuál evitaría que en estricto sentido los clientes estén forzados a usarlos), la interfaz sigue siendo confusa e impráctica. Por ejemplo, si quieres mandar algo por SMS, no tienes la opción de mandar tarjetas multimedia.</p>\n\n<p>Una mejor solución sería crear un interfaz base, con especializaciones para cada caso. Por ejemplo:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1680398494/Screen_Shot_2023-04-01_at_19.21.23_m7wuws.png\" alt=\"Composición de clases\" class=\"align-center\" /></p>\n\n<p>Esta forma no sigue la herencia (un mensaje con tarjetas es un mensaje de texto), sino la composición (un mensaje con tarjetas tiene un mensaje de texto). Esto nos permite tener una interfaz más sencilla y fácil de usar, que puede ser especializada por cada caso.</p>\n\n<h2 id=\"llevándolo-al-extremo\">Llevándolo al extremo</h2>\n\n<p>Si llevamos este consejo al extremo, podemos quedar con una cantidad tan grande de interfaces y tan especializadas que el código quedaría más difícil de entender y mantener. Imagínate el infierno que sería navegar por ese código. <strong>Recuerda que las interfaces son simplemente la parte accesible de una funcionalidad</strong>. Ousterhout dice que a veces, la complejidad viene de la cantidad de cosas con las que tenemos que tratar.</p>\n\n<p>Además, separar el código a veces conlleva código extra: el que se usa para seleccionar qué interfaz o código usar.</p>\n\n<p>Así que la pregunta básica es: ¿cuándo debo separar o romper código que hace algo en partes más pequeñas? Pensar que este principio es la guía más fuerte es un error, el análisis debe ir mucho más al fondo, no sólo pensar en las interfaces y si alguien está “obligado” a implementar o lidiar con cosas que no usa.</p>\n\n<p>Por ejemplo, ¿qué pasa si el 90% de las veces que vayas a usar un módulo como una función vas a usarla en la versión más complejas? ¿Valdrá la pena separarla en dos funciones? Yo creo que vale más la pena que los lugares donde no la usas completa, se trate de manera especial.</p>\n\n<p>Para un análisis más profundo, escribiré un artículo basado en el capítulo “Better Together o Better Apart?” de <a href=\"https://web.stanford.edu/~ouster/cgi-bin/book.php\">A Philosophy of Software Design</a> de John Ousterhout.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aunque es una buena idea que las interfaces sean demasiado complejas para no forzar al código que las usa a implementar cosas que no le corresponden, llevarlo al extremo podría hacer que tu base de código sea más compleja de lo que empezó.</p>\n\n<p>Este principio de diseño no debería ser la única fuente de decisión para saber si deber <em>segregar</em> o como diríamos más cotidianamente <em>separar</em> una interfaz. Recuerda que al separar la interfaz estás separando la implementación y la lógica de tu programa, por lo que debes pensarlo muy bien antes de hacerlo.</p>\n\n<p>Finalmente, es muy poco probable que te pase algo similar si piensas en hacer interfaces que sean lo más sencillo posible.</p>\n",
      "date_published": "Sat, 01 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/03/25/descomponiendo-tu-aplicacion-en-modulos.html",
      "url": "https://blog.thedojo.mx/2023/03/25/descomponiendo-tu-aplicacion-en-modulos.html",
      "title": "Descomponiendo tu aplicación en módulos",
      "content_html": "<p>Hay un dicho que tiene que ver con la guerra que es un gran consejo para crear gran software:</p>\n\n<blockquote>\n  <p>Divide y vencerás</p>\n</blockquote>\n\n<p>Dividir un problema para resolverlo por partes tiene muchas ventajas, en este artículo vamos a hablar de ellas, así como de las técnicas y los criterios que puedes seguir para hacerlo efectivamente. Específicamente, en este artículo vamos a hablar de cómo dividir la aplicación en módulos. Pero antes definamos lo que es un módulo.</p>\n\n<h2 id=\"qué-es-un-módulo\">¿Qué es un módulo?</h2>\n\n<p>En este artículo los módulos son cualquier cosa que encapsule una implementación detrás de una API o interfaz. Los módulos tienen diferentes nombres dependiendo del lenguaje de programación, pueden ser:</p>\n\n<ul>\n  <li>Paquetes en Python</li>\n  <li>Módulos en JavaScript</li>\n  <li>Clases y paquetes en Java</li>\n  <li>Bibliotecas en C</li>\n  <li>Aplicaciones en Erlang o Elixir</li>\n  <li>Un microservicio en una arquitectura de distribuida</li>\n  <li>Otro sistema</li>\n</ul>\n\n<p>Esta lista no es para nada exhaustiva, pero comunica la idea de lo que es un módulo conceptualmente, repitiendo: cualquier artefacto que encapsule una implementación o funcionalidad detrás de una API, es decir que tenga una <em>asignación de responsabilidad</em> (según David L. Parnas).</p>\n\n<h3 id=\"ventajas-de-dividir-tu-aplicación-en-módulos\">Ventajas de dividir tu aplicación en módulos</h3>\n\n<p>¿Qué es más sencillo? ¿Subir 100 escalones de 15cm o dar un salto de 15m? Humanamente ni siquiera es posible dar un salto de 15m, por lo que tenemos que recurrir a usar las escaleras.</p>\n\n<p>Lo mismo sucede intelectualmente, la mayoría de los problemas que resolvemos en programación son más grandes de lo que puede caber en nuestra mente en un tiempo determinado. Es por esto que tenemos que descomponer los problemas en partes más pequeñas.</p>\n\n<p>La modularización te permite cambiar el sistema de forma más sencilla, mientras respetes la interfaz entre los módulos (su <em>API</em>), puedes cambiar el módulo que resuelve cierta parte del problema sin afectar el sistema entero. A esto a veces le llaman <strong>programación por contrato</strong>.</p>\n\n<p>Crear módulos lo más independientes posible te permite reutilizarlos en otros sistemas, lo que llamamos reutilización de código. Si sigues los lineamientos de tu lenguajes de programación, probablemente puedas crear el artefacto para distribuirlo y que incluso otras personas lo usen.</p>\n\n<p>Finalmente, dependiendo de lo independiente que sean los módulos, puedes asignarle la tarea de la implementación a otras personas.</p>\n\n<h3 id=\"desventajas\">Desventajas</h3>\n\n<p>Al igual que si pudiéramos mágicamente dar un salto de 15m nos evitaría construir unas escaleras, con todo lo que ello implica, el uso de módulos en tu aplicación agregar algo más de complejidad.</p>\n\n<p>En primera, se requiere una infraestructura para que los módulos puedan comunicarse entre sí. Si los módulos son construcciones naturales de tus sistema de programación, entonces sólo tienes que preocuparte por usarlos bien y crear interfaces convenientes.</p>\n\n<p>Pero si estás haciendo sistemas independientes, microservicios, etc. entonces también tienes que preocuparte por el transporte de información, la seguridad, etc. Este tipo de modularidad convierte tu aplicación en un sistema distribuido, lo que agrega gran complejidad.</p>\n\n<p>Además, dividir en módulos introduce el riesgo de crear complejidad adicional debida a las dependencias entre los módulos.</p>\n\n<p>Pero normalmente, las ventajas de modularizar te habilitan para lograr cosas que no es posible hacer de otra forma, así que ahora surge la pregunta, ¿por dónde empiezo?</p>\n\n<h2 id=\"criterios-para-dividir-tu-aplicación-en-módulos\">Criterios para dividir tu aplicación en módulos</h2>\n\n<p>Esto en realidad es una exploración de las diferentes formas en las que tu aplicación podría estar dividida y las abstracciones que creas. ¿Los divido por grupos de funcionalidades? ¿Por el tipo de información a los que tienen acceso? ¿Por el lugar en el que van a estar implementados? ¿Por el nivel de abstracción?</p>\n\n<p>David Parnas explica en <a href=\"https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf\">“On the Criteria to be Used in Decomposing Systems into Modules”</a> dos diferentes formas o criterios de dividir un sistema en módulos:</p>\n\n<ol>\n  <li>\n    <p>La que él piensa que era la más común cuando se escribió el artículo, es la de dividir el programa en sus pasos lógicos. Después de hacer un diagrama de flujo del proceso que quieres automatizar o representar, los pasos del diagrama se convierten en módulos.</p>\n  </li>\n  <li>\n    <p>La segunda forma es la de dividir o “cortar” el programa en módulos por <em>especialidad</em>, es decir, por las cosas que saben hacer y que ocultan de los demás módulos. Estos módulos encapsulan <strong>decisiones de diseño</strong>.</p>\n  </li>\n</ol>\n\n<h2 id=\"ejemplo-práctico-una-pasarela-de-pago\">Ejemplo práctico: una pasarela de pago</h2>\n\n<p>La función de una pasarela de pago es procesar las transacciones de pago de los usuarios. Debe registrar datos como quién hace el pago, a quién se lo hace, el monto, la fecha y hora, el método de pago y el estado de la transacción.</p>\n\n<p>Hagamos el ejercicio de descomponer el sistema en módulos. Primero usemos el primer criterio. Pensando en el flujo de operaciones que se tienen que hacer podemos pensar en los siguientes pasos:</p>\n\n<ol>\n  <li>Recibir los datos de la transacción a ejecutar.</li>\n  <li>Recibir los datos de pago del usuario.</li>\n  <li>Validar los datos de la transacción.</li>\n  <li>Intentar ejecutar la transacción.</li>\n  <li>Registrar el estado de la transacción.</li>\n  <li>Notificar a los involucrados del resultado de la operación.</li>\n</ol>\n\n<p>Vamos a delimitar las funciones para hacerlo más sencillo: pongamos que sólo se puede pagar con tarjeta de crédito y que se notificará al usuario por correo electrónico.</p>\n\n<p>Los módulos que podríamos crear usando este flujo son:</p>\n\n<ol>\n  <li>\n    <p><strong>Módulo de recepción de datos</strong>. Este sistema recibe los datos de la transacción a ejecutar y los pone en una base de datos. También se encarga de validarlos.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de recepción de datos del usuario</strong>. Recibe los datos de pago del usuario y actualiza el registro de la transacción.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de ejecución de la transacción</strong>. Lee los datos de la transacción de la base de datos e intenta ejecutar la transacción, actualizando el registro con el resultado de la operación.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de notificación</strong>. Es capaz de leer el registro de la base de datos para extraer los datos de la transacción y enviar un correo electrónico al usuario.</p>\n  </li>\n  <li>\n    <p><strong>Módulo central</strong>. Se encarga de coordinar el funcionamiento de los demás módulos, los llama en el orden correcto y maneja los errores.</p>\n  </li>\n</ol>\n\n<p>Este diseño sin duda funcionaría, pero tiene algunas desventajas. ¿Qué pasaría si se aumentara la información que se tiene que registrar de la transacción? A todos los módulos les afectaría, ya que todos leen de un repositorio central que es la base de datos. ¿Y si en vez de recibir los datos por separado, se quisiera leer todos los datos de un archivo para ejecutar pagos en masa? Por lo menos dos módulos saldrían afectados, el de recepción de información de la transacción y de información del usuario.</p>\n\n<p>Para dividir el trabajo en varios equipos, antes tendría que establecerse la forma en la que se van a guardar los datos en la base de datos y cualquier cambio les afectaría a todos.</p>\n\n<h3 id=\"dividiendo-por-especialidad\">Dividiendo por especialidad</h3>\n\n<p>En vez de dividirlo por el flujo de operaciones, como si fuera una cadena de producción usemos el criterio de la especialidad, o de <strong>ocultar información</strong>. ¿Cuáles son las decisiones de diseño que quisiéramos ocultar detrás de una interfaz?</p>\n\n<p>Usando este criterio podemos tener los siguientes módulos:</p>\n\n<ol>\n  <li>\n    <p><strong>Módulo de recepción de información</strong>. Recibe todos los datos, tanto de la transacción como se pago y los valida. Envía estos datos al almacenamiento indicado mediante una interfaz. ¿Qué decisiones de diseño oculta? La forma en la que se reciben y validan los datos</p>\n  </li>\n  <li>\n    <p><strong>Módulo de registro de transacciones</strong>. Recibe la información de las transacciones, las almacena y es capaz de devolver la transacción solicitada. También puede actualizar los datos de una transacción y borrarla. ¿Qué decisiones de diseño oculta? La forma en la que se <em>persiste</em> la información. Ninguno de los otros módulos necesita saber cómo se almacenan los datos.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de procesamiento de transacciones.</strong>. Este módulo recibe los datos absolutamente necesarios para procesar una transacción con la institución bancaria, la ejecuta y devuelve un estado de la transacción. Tiene funciones para ejecutar, re-intentar y revertir transacciones. ¿Qué decisiones de diseño oculta? La comunicación con la institución bancaria, la forma en la que se reciben los datos de estas y el procesamiento de errores en la transacción.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de notificaciones</strong>. Es capaz de mandar notificaciones por correo electrónico, recibiendo los datos de los destinatarios y el mensaje que se tiene que mandar. ¿Qué decisiones de diseño oculta? La forma de comunicación con los medios de transporte de notificaciones, en este caso, el correo electrónico.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de coordinación o central</strong>. Es el encargado de usar los módulos anteriores para procesar el pago.</p>\n  </li>\n</ol>\n\n<p>La principal diferencia de este diseño con el anterior, es la forma en la que los módulos se comunican y la información que cada módulo debe de tener. Cualquier cambio en la implementación de sus funciones no afectará a los demás módulos, sobre todo cambios en la persistencia de la información, que era un punto crítico en el diseño anterior.</p>\n\n<p>¿Que pasa si quisiéramos cambiar la forma en la que se reciban los datos, por ejemplo, con el archivo para procesar los pagos en masa? El módulo de recepción de información se vería afectado o reemplazado, pero los demás módulos no.</p>\n\n<p>Si queremos dividir el trabajo en equipos, cada equipo puede trabajar en un módulo siempre y cuando se establezca la interfaz de su módulo, y las dependencias entre ellos se reducen.</p>\n\n<h2 id=\"resumen\">Resumen</h2>\n\n<p>No existe una forma absolutamente correcta de dividir tu sistema, casi siempre es subjetiva y todas presentan ventajas y desventajas. Pero una decisión con la que no te puedes equivocar es la de aislar los detalles de implementación y las decisiones de diseño en módulos autocontenidos.</p>\n\n<p>Piensa en un módulo como en una caja que <em>sabe hacer algo</em> y que puedes usar en varios lugares de tus sistema, no como en un paso de un proceso, que normalmente lo casa con esa posición y lo hace poco reutilizable, además de que puede hacer que no esté tan autocontenido como debería, dejando escapar información que crea dependencias entre módulos.</p>\n\n<h2 id=\"recursos-para-aprender-más\">Recursos para aprender más</h2>\n\n<p>El artículo en el que está basado este artículo es <a href=\"https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf\">“On the Criteria to be Used in Decomposing Systems into Modules”</a> de David L. Parnas.</p>\n\n<p>Otro recurso del que tal vez ya estés harto de escuchar si lees este blog es <a href=\"https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201\">A Philosophy of Software Design</a>. Aquí se explican varios principios para poder descomponer tu aplicación en módulos de forma efectiva, tomando como principal referencia este artículo de Parnas, y expandiéndolo con la experiencia de Ousterhout.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Descomponer tus aplicaciones en módulos es algo esencial en el desarrollo de software. Pensarlo un poco antes de hacerlo nos dará una gran ventaja para crear software de mejor calidad, que sea más fácil de mantener y que podamos evolucionar mejor.</p>\n\n<p>Esta descomposición no siempre te va a salir bien a la primera, por lo que hay que tener la capacidad de evaluar la efectividad de tu diseño y la humildad para reconocer o aceptar los puntos débiles y cambiarlos. Es cierto que ciertas plataformas te pueden ayudar a descomponer mejor tu aplicación que otras, por lo que también es un gran punto a considerar cuando estés eligiendo la tecnología para tu próximo proyecto.</p>\n\n<p>Sigue cultivando esta habilidad, porque es de lo más importante que un desarrollador de software puede saber, pensando también que a futuro tal vez seamos en gran parte diseñadores mientras la implementación estará a cargo de máquinas (te estoy viendo, <a href=\"https://openai.com/blog/openai-codex\">Codex</a>).</p>\n",
      "date_published": "Sat, 25 Mar 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/03/18/que-es-un-api.html",
      "url": "https://blog.thedojo.mx/2023/03/18/que-es-un-api.html",
      "title": "¿Qué es una API?",
      "content_html": "<p>A veces limitamos el uso de la palabra <strong>API</strong> a un programa que nos regresa información mediante una conexión web, generalmente en un formato que una máquina puede procesar. Pero muchas otras veces se usa de manera más amplia. En este artículo hablaremos de otras acepciones y qué tiene que ver con la buena programación.</p>\n\n<h2 id=\"application-programming-interface\">Application Programming Interface</h2>\n\n<p>La realidad es que el inicialismo “API” es casi auto-explicativo: Interfaz de Programación de Aplicación. Bueno, vamos a analizarlo un poco.</p>\n\n<h3 id=\"interfaz\">Interfaz</h3>\n\n<p>Primeramente es un <strong>interfaz</strong>. Una interfaz es el lugar en donde dos sistemas o entidades convergen e <strong>interactúan</strong>. Podemos entender como interfaz a la parte que te permite usar un aparato electrónico, por ejemplo. En una computadora, su interfaz para los humanos son el teclado, la pantalla y el mouse o trackpad. En una televisión, la interfaz es la pantalla, el control remoto y los controles integrados en el cuerpo principal.</p>\n\n<p>La interfaz normalmente <strong>esconde</strong> la mayor parte del sistema y muestra solamente las partes que son relevantes o <em>que se pueden usar</em> por un sistema externo. En el caso de la computadora, ver o interactuar directamente con el procesador o la RAM no nos interesa, por eso la computadora expone un conjunto limitado de todas las características que la componen. Esta interfaz en realidad representa una <strong>abstracción</strong> de lo que el sistema completo es. Este elemento habilita y simplifica el uso de este sistema. Las interfaces definen <strong>la forma</strong> de un sistema para entidades externas a él.</p>\n\n<p>Una interfaz podría entenderse como un iceberg: la parte “visible” o con la que puedes interactuar es la punta, mientras que la gran masa es la funcionalidad que está oculta y a la que no puedes acceder.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1679188585/Ilustracio%CC%81n_sin_ti%CC%81tulo_3_fi05qn.png\" alt=\"Una interfaz es como un Iceberg\" class=\"align-center\" /></p>\n\n<p>(Probablemente ese iceberg está mal dibujado: <a href=\"https://axbom.com/iceberg/\">The topple of an iceberg: You’re drawing it wrong</a>)</p>\n\n<h3 id=\"interfaz-de-programación\">Interfaz de Programación</h3>\n\n<p>Ya que sabemos que es una interfaz, ahora agreguemos el siguiente término: <strong>programación</strong>. Que sea un interfaz de programación nos indica la forma en la que esta interfaz puede ser usada: mediante el fino arte de la programación. Otra forma en la que creo que suena bien la traducción es <em>Interfaz Programática</em>. Así como las interfaces visuales se entienden mediante la visión, las interfaces programáticas se entienden y usan con <strong>programas</strong>.</p>\n\n<p>¿Qué hace que una interfaz pueda ser usada de manera sencilla por un programa? Listemos algunas de las características:</p>\n\n<ol>\n  <li>La comunicación con la interfaz se puede hacer por medio un programa. La manera más sencilla es por medio de texto plano en formatos establecidos o formatos binarios. Estos pueden ser, por ejemplo, HTTP y para facilitar más las cosas JSON o XML. Hay formatos binarios usados como <a href=\"https://protobuf.dev/\">Protcol Buffers</a>. Pero no <strong>tiene</strong> que ser ninguno de estos. Mientras el formato se pueda procesar de manera automática con un programa, es una interfaz de programación. Por ejemplo, una aplicación podría escribir a un archivo y la otra simplemente leerlo de ahí (ejem. así funcionan los <em>sockets</em> en UNIX). O por ejemplo, la “aplicación” puede ser cargada en el mismo espacio de memoria y ser usada por el mismo entorno de ejecución.</li>\n  <li>La interfaz puede recibir peticiones o instrucciones creadas por un programa. Muy en la línea del punto anterior, la interfaz debe exponer formas de que otro programa la llame mediante medios programables.</li>\n</ol>\n\n<p>Si la interfaz cumple con esto, entonces es una interfaz de programación.</p>\n\n<h3 id=\"interfaz-de-programación-de-aplicación\">Interfaz de Programación de Aplicación</h3>\n\n<p>El último término nos dice a quién la pertenece esta interfaz: <strong>a otra APLICACIÓN</strong>. Esto nos dice que la interfaz pertenece a un programa para que <strong>otro programa se comunique</strong>.</p>\n\n<p>Resumen: un API es lo que permite la comunicación entre dos programas de manera automática, es decir, sin que tengan que intervenir humanos en esa comunicación. Le permite a un programa usar otro.</p>\n\n<p>Con el tiempo, lo que llamamos <em>“aplicación”</em> se ha extendido para referirse a cualquier programa o parte de un programa, como un módulo, una clase, etc.</p>\n\n<h3 id=\"uso-de-api-en-el-contexto-actual\">Uso de “API” en el contexto actual</h3>\n\n<p>Recapitulemos: una API es una interfaz entre dos programas, que permite a ambos una comunicación unidireccional o bidireccional.</p>\n\n<p>El uso más común tiene que ver con interfaces que tienen comunicación a través de una red de computadoras, como Internet. Normalmente son un servidores HTTP que pueden responder con formatos que pueden ser procesados de automáticamente de manera sencilla, los más comunes son JSON y XML.\nDependiendo de los estándares que sigan, estas API’s pueden ser llamadas <strong>RPC</strong> (Remote Procedure Call), <strong>ReST</strong> (Representational State Transfer) o <strong>SOAP</strong> (Simple Object Access Protocol).</p>\n\n<p>Este tipo de comunicación a través de la red tiene varias versiones, no sólo HTTP. Por ejemplo, existen alternativas más modernas como <strong>gRPC</strong> (Google Remote Procedure Call), que usa HTTP2 como medio de transporte y Protocol Buffers com formato de serialización (el lenguaje que puede ser fácilmente procesado por otro programa).</p>\n\n<p>Seguro existen muchas otras formas de crear un API en un sistema distribuido pero la idea básica ya la tienes. Este es el uso más común de la palabra.</p>\n\n<p>Ahora hablemos de otro uso de la palabra: en el diseño de software.</p>\n\n<h3 id=\"apis-en-el-diseño-de-software\">API’s en el diseño de software</h3>\n\n<p>Cuando se usa la palabra API en contexto de diseño de software, normalmente se refiere a la interfaz que otro sistema, módulo, o en general, componente del software presenta.</p>\n\n<p>Por ejemplo, podemos decir que una clase tiene un API en el sentido de que presenta una cara a los demás parte del sistema para que lo usen, pero sobre todo <strong>oculta</strong> la implementación de las funciones que da. Como te podrás dar cuenta, una API es la parte pragmática de una <a href=\"/2023/03/13/que-es-la-abstraccion.html\">abstracción</a>, y por eso es importante entenderlas.</p>\n\n<p>El diseño del API de tus módulos, clases y aplicaciones en general es importantísimo para hacer buen software.</p>\n\n<p>Retomando lo que siempre repetimos en este blog: <strong>las interfaces bien diseñadas te permiten ocultar información</strong> que no quieres que otras partes del sistema tengan en cuenta.</p>\n\n<p>Por ejemplo en <a href=\"https://elixirlang.com\">Elixir</a>, la forma de crear separación entre diferentes partes del sistema, a parte de módulos, son lo que llamamos <strong>aplicaciones</strong>. Esta aplicación puede tener un API bien definida que permita que sea 1) fácil de usar 2) que oculte todos los detalles de implementación posibles para que no se escape nada de información no concerniente a otras aplicaciones.</p>\n\n<h3 id=\"cómo-diseñar-una-buena-api\">Cómo diseñar una buena API</h3>\n\n<p>En esta sección voy a mencionar lo que a mi me ha servido para crear interfaces que, al mismo tiempo que son fáciles de usar, son efectivas escondiendo información.</p>\n\n<p><strong>Las interfaces deben tener una complejidad relativa a la funcionalidad que están ocultando</strong>. Es decir si tienes una función o clase que hace muy poquito, como por ejemplo, hacer un cálculo sencillo y casi auto-explicativo, no te conviene que tengas que pasar veinte datos diferentes para que lo puedas usar, lo único que vas a lograr es que tu programa sea más complicado de usar. En cambio, si la funcionalidad que está detrás de la API es grande y compleja, por supuesto que vale más la pena que la interfaz sea más compleja y requiera que pienses más para usarla.</p>\n\n<p>Como analogía: el control de una bicicleta consiste en un manubrio análogo, mientras que el de un avión tiene decenas (¿tal vez más de 100?) de botones.</p>\n\n<p>Esto está muy relacionado con el concepto que John Ousterhout presenta en <a href=\"https://amzn.to/2H92nwA\">“A Philosophy of Software Design”</a>: crear módulos profundos, es decir, que tengan una interfaz lo más pequeña posible en relación con su funcionalidad, que debe ser lo más grande posible. Como un iceberg.</p>\n\n<p><strong>Documenta bien las interfaces</strong>. No sirve de mucho una interfaz que nadie sepa como usar. Como en las películas de ciencia ficción donde encuentran aparatos que nadie tiene idea de cómo funcionan, así nos puede pasar con una pieza de software. La documentación de la interfaz debe incluir, además de los nombres de los métodos o llamadas, los tipos de datos esperados (enteros, flotantes, cadenas, fechas), el comportamiento dependiendo de la entrada y el tipo y estructura de la información que devuelve. Es supremamente importante además que se mencione si el uso de la interfaz tiene un efecto secundario, como el disparo de un correo, la creación o manipulación de un archivo.</p>\n\n<p><strong>Explica la razón de ser</strong>. Esta parte de la documentación cuenta como un ejercicio que tiene dos objetivos: aclararte a ti mismo la razón de la existencia de la interfaz (aquí te vas a dar cuenta de que tal vez no vale la pena crearla o de que debe ser diferente de alguna forma). Si encuentras una buena explicación, entonces definitivamente el contenedor que tiene una API debe ser creado, y lo que vale la pena ser creado en programación, vale la pena ser documentado.</p>\n\n<p><strong>No ocultes información demasiado temprano</strong>. Los puntos anteriores te pueden ayudar a no caer en este error, pero por si las dudas vamos a dejarlo claro: no tienes por qué separar o crear abstracciones de todo y ponerlo detrás de una API. La separación de implementaciones a final de cuentas puede crear una carga extra: cómo transferir la información. El caso más claro es el de las interfaces que se comunican a través de un red, en las que necesitamos usar una capa de transporte. Pero en otras ocasiones también implica un poco de trabajo extra, que puede no valer la pena si no estamos en la etapa correcta.</p>\n\n<h2 id=\"ventajas-de-usar-un-api-bien-diseñada\">Ventajas de usar un API bien diseñada</h2>\n\n<p>Usar un API tiene varias ventajas, pero yo veo tres principales que pueden llevar tu desarrollo a niveles que no esperabas. Hablemos de ellas y tú evaluarás si es algo que te interese.</p>\n\n<h3 id=\"menor-carga-cognitiva\">Menor carga cognitiva</h3>\n\n<p>Al separar tu software en varios componentes o aplicaciones que trabajen mediante interfaces, puedes reducir el número de cosas que tienes que mantener en la cabeza debido a que no te preocuparás por todos los detalles: solamente te interesarás por la interacción entre las API’s o tu software y un API.</p>\n\n<p>Esto es justo lo que pasa cuando un front-end se hace separado de un backend. Después de establecer la forma de la API, cuando trabajas en un lado, en front por ejemplo, sólo te preocupas de mostrar los datos que sabes a recibir de la interfaz sin preocuparte de los detalles de procesamiento o de almacenamiento de información de los que el backend se hace cargo.</p>\n\n<h3 id=\"mejor-evolución-del-software\">Mejor evolución del software</h3>\n\n<p>Esto se logra gracias a que, si los diferentes componentes de un sistema están comunicados por API’s claramente definidas, que además protejan bien los detalles de implementación de escaparse, estas partes pueden cambiarse internamente sin necesidad de afectar a otras parte si la forma de la interfaz se respeta. Además permite extender el software si creamos otro componente con la misma interfaz pero otro funcionamiento, por ejemplo.</p>\n\n<p>Podríamos decir que las piezas son intercambiables, tal como cuando tienes un foco que se descompone y quieres reemplazarlo por otro, o simplemente quieres cambiar tu viejo foco incandescente por uno de led. Mientras consigas uno con la misma interfaz y que trabaje con el mismo voltaje, no importa la “implementación”, es decir, cómo cumpla con su función de entregar luz: podría ser otro incandescente, fluorescente, de led, o incluso podrías poner una cámara o un ventilador.</p>\n\n<p>Esto se puede llevar al extremo si la interfaz que estás usando está estandarizada y tienes un programa que sepa utilizar este tipo de interfaces automáticamente. Por ejemplo esa es la idea de ReST y GraphQL.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1679188820/paul-hanaoka-RJkKjLu8I9I-unsplash_o5k8ex.jpg\" alt=\"Power plug\" class=\"align-center\" /></p>\n\n<p>Las interfaces proveen la función de <strong>“plug and play”</strong>, mientras el aparato tenga la misma interfaz, podemos conectar cualquier cosa, como en los contactos eléctricos.</p>\n\n<h3 id=\"mejor-separación-del-trabajo\">Mejor separación del trabajo</h3>\n\n<p>Esto se puede inferir del comentario que hicimos, en el primer punto de las ventajas de usar un API. Si creas una interfaz estable y bien documentada, puedes delegar el trabajo de implementar las funciones detrás de esa interfaz a otra personas, otro equipo o de plano otra empresa.</p>\n\n<p>En Open Source, por ejemplo, después de definir la API de un componente y hacer una implementación de referencia, se deja en manos de la comunidad crear otras implementaciones de ese módulo.</p>\n\n<h2 id=\"cómo-decidir-los-módulos\">Cómo decidir los módulos</h2>\n\n<p>Finalmente, surge la pregunta, ¿cómo puedo decidir qué irá detrás de una interfaz y cómo crear la separación de funciones entre módulos?</p>\n\n<p>De eso hablaremos en un artículo futuro, basándonos en un artículo de David L. Parnas, <a href=\"https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf\">“On the Criteria to be Used in Decomposing Systems into Modules”</a>.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Lo importante de saber que es un API es entender su función y tener técnicas para diseñarlas lo mejor posible. Recuerda, un API no se limita a un servidor web que sirve JSON, sino que es toda aquella interfaz que puede ser usada con un programa. De ahí que los navegadores expongan API’s como la File API, Fetch API, Device API, <a href=\"https://www.educative.io/answers/what-are-browser-apis\" target=\"_blank\">etc.</a>, que no tienen nada que ver con una API de un servidor web, sino con el <strong>uso de otras partes del software</strong> y que mediante esta interfaz nos olvidamos de los detalles de implementación.</p>\n\n<p>Cuando a ti te toque diseñar un API, recuerda su principal función: separar dos partes de un software al mismo tiempo que permites la comunicación.</p>\n",
      "date_published": "Sat, 18 Mar 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/03/13/que-es-la-abstraccion.html",
      "url": "https://blog.thedojo.mx/2023/03/13/que-es-la-abstraccion.html",
      "title": "¿Qué es la abstracción?",
      "content_html": "<p>Gran parte del trabajo que hacemos como desarrolladores de software consiste en “abstraer”, pero a veces no entendemos lo que esto significa.</p>\n\n<p>En este artículo vamos a empezar explicando qué es la abstracción en general y luego cómo puedes mejorar tu habilidad de abstraer para programar más rápido y para crear mejores programas. La capacidad de <strong>crear mejores abstracciones te permitirá crear programas que no creías que pudieran existir o que tú pudieras crear</strong>.</p>\n\n<p>Empecemos por las mismísimas bases.</p>\n\n<h2 id=\"etimología-de-dónde-viene-la-palabra-abstracción\">Etimología: ¿de dónde viene la palabra abstracción?</h2>\n\n<p><strong>“Abstracción”</strong> viene del latín <em>abstrahere</em>, que tiene dos partes principales: <strong>abs</strong> que significa “fuera de”, “sin”, “a distancia” y <strong>trahere</strong> que significa “tirar”. La palabra <em>abstrahere</em> significa literalmente “tirar fuera”.</p>\n\n<p>La palabra <em>abstrahere</em> se usa en el sentido de “separar” o “extraer” en el contexto de la filosofía, la matemática y la física. En el contexto de las matemáticas, la abstracción es el proceso de separar un concepto de sus propiedades físicas.</p>\n\n<p>A veces entendemos el proceso de abstraer como la capacidad de generalización. Por ejemplo, si queremos abstraer el concepto de “mesa”, lo que hacemos es quitar todas las <em>características concretas</em> de todas las mesas que hemos visto en la vida y entonces vemos lo que tienen todas en común: nos permiten hacer algo sobre ellas, sea parados o sentados. De esta manera tenemos el concepto abstracto de una mesa en nuestra mente. Después podemos aplicar ese concepto a diferentes cosas que veamos.</p>\n\n<p><strong>Los seres humanos somos máquinas de abstraer.</strong> Si a un niño pequeño le presentas unos cuantos gatos o perros, es capaz de aprender el concepto “gato” y extenderlo a otros gatos que vea aunque no se parezcan mucho a los que ya vio. Lo que no es capaz de hacer normalmente, es definir en palabras lo que es un “gato” de manera precisa.</p>\n\n<p>Como <strong>resumen</strong>: abstraer es “tirar fuera”, sacar las características que definen algo de su contexto concreto y ser capaz de entender ese concepto de manera general. Esta capacidad nos permite comprender el mundo y movernos en él.</p>\n\n<p>Algunos definen las abstracciones como lo contrario: quitarle todo lo que no es necesario a un concepto para 1) resaltar y hacer <strong>visible</strong> lo que importa y 2) Ocultar detalles que <em>no deben</em> ser tomados en cuenta.</p>\n\n<p>A estas abstracciones a veces las llamamos <em><strong>modelos</strong></em>. <strong>¿Te suena?</strong></p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1678944166/Ilustracio%CC%81n_sin_ti%CC%81tulo_2_cwrhak.png\" alt=\"Imagen que ilustra la abstracción\" class=\"align-center\" /></p>\n\n<h2 id=\"cómo-la-usamos-en-la-programación\">Cómo la usamos en la programación</h2>\n\n<p>Aunque los seres humanos nos la pasamos abstrayendo todo lo que vemos en la vida real (de hecho, lo único que tenemos en nuestra cabeza son abstracciones), no siempre podemos hacer las siguientes dos cosas:</p>\n\n<ol>\n  <li>Delimitar <strong>precisamente</strong> la abstracción</li>\n  <li>Expresar o explicar esa abstracción a otras personas, en lenguaje común.</li>\n</ol>\n\n<p>Y esto <strong><em>precisamente</em></strong> es lo que necesitamos al programar: delimitar nuestras abstracciones y expresarlas en algún lenguaje de programación, como una tabla en una base de datos o de alguna otra forma que las computadoras puedan capturar y procesar, <strong>a esto es a lo que nos referimos cuando hablamos de abstraer en la programación</strong>.</p>\n\n<p>Lo que hace más difíciles las abstracciones en la programación es que normalmente los conceptos no son tan sencillos e incluso son de áreas con las que no estamos familiarizados o no tenemos experiencia.</p>\n\n<p>La capacidad de abstraer es muy importante en casi todo trabajo intelectual, sobre todo aquellos relacionados con la lógica, por eso es supremamente importante en la programación. Aquí es donde la programación se parece al trabajo de un matemático: <strong>debes traducir un problema informal de la vida real, normalmente en lenguaje natural a un lenguaje formal que una computadora pueda entender</strong>. Para hacer esto, debes dejar los aspectos más importantes del problema para representarlos de manera efectiva en tu programa final.</p>\n\n<p>Pero recuerda que las abstracciones en programación también deben <em>ocultar</em> detalles que no <em>queremos</em> que se vean en otras partes del programa, por lo que se incluye una tarea más: refinar estas abstracciones hasta que contengan la información completamente necesaria.</p>\n\n<p>La abstracciones las podemos ver en muchas formas en la programación:</p>\n\n<ul>\n  <li>Modelos de datos</li>\n  <li>Tipos de datos</li>\n  <li>Objetos</li>\n  <li>Funciones</li>\n  <li>Clases</li>\n  <li>Módulos</li>\n  <li>Interfaces</li>\n</ul>\n\n<p>Todas estas cosas que mencionamos tienen una característica en común: presentan una <strong>interfaz</strong>. Así estas abstracciones lo pueden ser en dos sentidos:</p>\n\n<ol>\n  <li>La representación de un concepto de la vida real en el programa</li>\n  <li>El lugar donde se <em>ocultan</em> detalles o información detrás de una interfaz a otra parte del programa</li>\n</ol>\n\n<h3 id=\"ejemplos-de-abstracciones\">Ejemplos de abstracciones</h3>\n\n<p>Hablemos de algunos ejemplos y cómo caen en las definiciones que hemos hablado.</p>\n\n<h3 id=\"carrito-de-compras\">Carrito de compras</h3>\n\n<p>Cuando queremos representar algo en un carrito de compra en un programa, lo que hacemos es abstraer el concepto de “carrito de compra” y representarlo en el programa.</p>\n\n<p>En la vida real, un carrito o una bolsa de compra es donde almacenamos las cosas que estamos a punto de comprar mientras estamos en la tienda.</p>\n\n<p>La abstracción del carrito de compra, entonces, es un conjunto de productos, cada uno con su precio y cantidad. En el programa, el carrito de compra es una lista de productos que se guarda mientras el usuario no termine de comprar.</p>\n\n<p>En esta abstracción se mantuvieron las propiedades importantes:\npara no ir a pagar artículo por artículo, se tiene un contenedor que nos ayuda a mantener lo que vamos a comprar y pagarlo todo de una vez.</p>\n\n<p>La abstracción consiste en que “tiramos fuera” esas propiedades y eliminamos los detalles, por ejemplo si es un carrito, una canasta, una bolsa, un acompañante que carga tus productos, etc.</p>\n\n<p>Aquí entra otra de las características de las abstracciones. Aunque normalmente somos capaces de entender para lo que sirve el carrito de compra, si le preguntas a un cliente común sobre la abstracción, va a ser difícil que la ponga en palabras, por lo que simplemente usamos ese objeto para representar la abstracción para el usuario. No le decimos “contenedor de tus productos mientras terminas la compra” sino simplemente “carrito de compras”.</p>\n\n<p>En la segunda forma en la que este carrito de compras puede ser una abstracción es que en tu programa, tal vez hay un clase que representa este contenedor. Para el resto del programa, este carrito tiene una interfaz que podría consistir en:</p>\n\n<ul>\n  <li>Agregar producto</li>\n  <li>Obtener total</li>\n  <li>Vaciar carrito</li>\n  <li>Agregar Cupón</li>\n  <li>Obtener total</li>\n</ul>\n\n<p>La manera en que esta clase hace todas esas operaciones debería estar oculta de todo el resto del programa. Incluso la manera en que almacena la información sólo le concierne a esta <em>abstracción</em>. Esto permite <strong>ocultar información</strong> y hace que las piezas del programa sean menos dependientes entre ellas.</p>\n\n<h3 id=\"abstracción-de-un-usuario\">Abstracción de un usuario</h3>\n\n<p>Esta es una de las abstracciones más comunes en los sistemas de software. ¿Qué características esenciales necesitamos de alguna entidad para que use nuestro sistema? Nota que mencionamos “entidad” y no “humano”, porque puede que el usuario de nuestro sistema sea otro sistema, por ejemplo.</p>\n\n<p>En sistemas como AWS, GCP y Azure, por ejemplo, existen cuentas para computadoras o para que sean usadas por otro servicio (se llaman <em>cuentas de servicio</em>).</p>\n\n<p>Pensando en esto, ¿qué representa a un usuario? Yo me atrevería a decir que los únicos datos absolutamente esenciales para esta abstracción son los que permiten verificar <strong>la identidad</strong>, aquellos que le permiten a la entidad comprobar que en efecto es ella, o en el caso de sistemas, que puede actuar en nombre de ella.</p>\n\n<p>Pensando más ampliamente, la abstracción del usuario tendrá más atributos dependiendo de lo que aplicación haga. Imagínate una aplicación en la que los usuarios sean pacientes clínicos. ¿Qué datos nos interesan de una persona para esta aplicación?</p>\n\n<h2 id=\"niveles-de-abstracción\">Niveles de abstracción</h2>\n\n<p>Cuando hablamos de abstracciones en programación, a veces se escucha el término “nivel de abstracción”.\n¿A qué se refiere un “nivel”? La siguiente imagen nos puede ayudar a entenderlo:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1678759133/Ilustracio%CC%81n_sin_ti%CC%81tulo_f7ag0e.png\" alt=\"Niveles de abstracción\" class=\"align-center\" /></p>\n\n<p>Mientras más cerca esté de la implementación técnica (llegando hasta el hardware), podemos decir que la abstracción está más “abajo”. Mientras más cerca esté de los pensamientos o la forma en la que los humanos vemos las cosas cotidianamente, la abstracción está más “arriba”.</p>\n\n<p>A esto se refiere la abstracción de bajo nivel y la abstracción de alto nivel. Cuando hacemos un programa, utilizamos una “cadena” de abstracciones, es decir, abstracciones que se sirven de otras abstracciones para funcionar. Usemos de nuevo el carrito de compras como ejemplo.</p>\n\n<p>El carrito es la abstracción de más alto nivel, porque es la que más se acerca al pensamiento cotidiano. Esta se sirve de la abstracción del “contenedor”. Si lo implementamos como una lista, esta es la siguiente abstracción. La lista, dependiendo del lenguaje en el que estemos, puede servirse de la abstracción de un arreglo dinámico. El arreglo, a su vez, se sirve de la abstracción de los bloques y direcciones de memoria. La memoria usa la abstracción de los bits. Y finalmente los bits son un voltaje presente en un circuito, pero esto, a lo que llamamos “voltaje” sigue siendo una abstracción.</p>\n\n<p>Un <strong>nivel de abstracción</strong> está compuesto por todas las abstracciones de nuestro programa que están más o menos igual de separadas de el pensamiento humano. Por ejemplo, el carrito de compras, el checkout (terminar y pagar la compra), una biblioteca, un producto, etc. son abstracciones que están al mismo nivel porque son cosas que el usuario puede entender y con las que trata directamente. Una lista, un cola, un árbol (estructura de datos), una pila, son cosas que están al mismo nivel porque las entendemos como maneras de organizar datos.</p>\n\n<h2 id=\"dificultades-para-abstraer\">Dificultades para abstraer</h2>\n\n<p>Abstraer no es tan sencillo como ha parecido hasta ahorita. Más bien, abstraer es algo que hacemos todo el tiempo, pero crear abstracciones adecuadas y expresarlas correctamente no es tan sencillo. De hecho, si te has dedicado a programar por un tiempo, puede que ya te hayas dado cuenta de eso. La primera dificultad es <strong>la naturaleza de la información</strong>.</p>\n\n<p>No nos vamos a poner a filosofar sobre qué es lo que permite definir algo, para eso te recomiendo el libro <a href=\"https://www.goodreads.com/en/book/show/1753248\">Data and Reality de William Kent</a>, que te romperá la cabeza con respecto a las abstracciones y las diferentes cosas que debes analizar para representar la realidad en una computadora, más concretamente, en una base de datos.</p>\n\n<p>Lo único que quiero sacar de este libro por el momento es: el mundo real, a diferencia del mundo ideal que nos imaginamos, <strong>no tiene límites definidos</strong>, no existen los conceptos tan delimitados y tan claros como los queremos hacer ven en los diccionarios.</p>\n\n<p>Esto nos lleva a que las representaciones (las abstracciones que hacemos en el código) <strong>siempre sean subjetivas y arbitrarias</strong>. No existe <strong>LA ABSTRACCIÓN</strong> que represente la realidad sin fallas, todas ellas tienen un punto de vista y se tienen que adecuar para la función que las necesites. Una misma cosa puede ser representada de millones de maneras diferentes y todas estas maneras pueden ser válidas.</p>\n\n<p>Otra dificultad es lo que hablamos arriba sobre los <em>niveles de abstracción</em>. Algo para lo que se usan las abstracciones en la programación es para <em>ocultar</em> información entre componentes del sistema. Crear abstracciones que no revelen detalles no necesarios a veces no es tan sencillo, y se tienen que pensar detenidamente.</p>\n\n<p>Finalmente, la complejidad intrínseca de los elementos que representamos puede ser en sí mismo un gran reto para crear abstracciones convenientes. Por ejemplo, en vez de representar gatos, tenemos que representar un proceso de suministro de insumos para una cadena de producción, la logística compleja de programación de vuelos y asignación de aviones y tripulación para una aerolínea, o el estado de una conversación compleja entre dos entidades.</p>\n\n<p>Es por eso que a veces creemos que necesitamos ayuda para mejorar nuestras capacidades de abstracción.</p>\n\n<h2 id=\"cómo-mejorar-tu-capacidad-de-abstraer\">Cómo mejorar tu capacidad de abstraer</h2>\n\n<p>Esta es una de las preguntas que todo programador se hace cuando quiere mejorar su manera y velocidad al programar. Cuando hablamos de “la manera” de programar, nos referimos a <em>la calidad</em> del código que produce.</p>\n\n<p>Vamos a hablar de las técnicas que puedes seguir para mejorar tu capacidad de crear y <em>expresar</em> mejores abstracciones.</p>\n\n<h3 id=\"consigue-información-y-ejemplos\">Consigue información y ejemplos</h3>\n\n<p>Ya hemos dicho que los seres humanos somos <em>muy buenos</em> creando abstracciones por naturaleza, pero somos tan buenos que podemos crear abstracciones demasiado temprano cuando entendemos algo bien.</p>\n\n<p>Para evitar las abstracciones tempranas, <strong>consigue la mmayor cantidad de información posible</strong>. Mientras más ejemplos diferentes del mismo fenómeno o entidad tengamos, mejores abstracciones vamos a crear, ya que encontraremos ejemplos que se contradicen entre ellos, excepciones y casos límite (aquellos que están en los valores extremos o combinaciones de características raras).</p>\n\n<h3 id=\"crear-niveles-de-abstracción-cerrados\">Crear niveles de abstracción cerrados</h3>\n\n<p>Es importante entender los <em>niveles de abstracción</em> porque esto nos permitirá diseñar abstracciones que no dejen pasar detalles de niveles superiores o inferiores hacia el otro lado de la cadena de abstracción. Por ejemplo, al cliente no le debería afectar si el carrito está implementado como una lista, un arreglo directamente, una tupla o un árbol. Dejar pasar esos detalles afectaría la experiencia del usuario, al mismo tiempo que haría más difícil de mantener el código.</p>\n\n<p>Estos niveles de abstracción se mantienen de dos formas:</p>\n\n<ol>\n  <li>Creando conjuntos de abstracciones relacionados que tengan el mismo nivel. A esto le llamamos una “capa”.</li>\n  <li>Creando interfaces que oculten los detalles de capas superiores o inferiores.</li>\n</ol>\n\n<p>Es muy difícil que este diseño te quede bien a la primera, por lo que debes tener en cuenta que tus interfaces y tus abstracciones irán evolucionando con el tiempo.</p>\n\n<h3 id=\"encontrar-patrones\">Encontrar patrones</h3>\n\n<p>Quiero citar a <a href=\"https://altenwald.com/\"><strong>Manuel Rubio</strong></a> en una respuesta que me dio personalmente:</p>\n\n<blockquote>\n  <p>Estar atento a estos patrones y saber cómo aprovecharlos en nuestro beneficio puede ayudarnos a crear abstracciones del código que desarrollamos. Hay que ser metódico y organizar bien los datos, nombrar las cosas correctamente, mantener las responsabilidades desligadas unas de otras y entonces los patrones se ven claros.</p>\n</blockquote>\n\n<p>Este consejo está directamente ligado a la cantidad de información que tenemos sobre el problema. Mientras más diversa y rica sea, más probable es que encontremos los patrones que subyacen en los comportamientos y procesos que tenemos que abstraer (o modelar). Aquí lo importante es ser explícitos con esos patrones, expresarlos y documentarlos de la manera más clara posible.</p>\n\n<p>Haber visto y sobre todo documentado una gran cantidad de patrones también nos puede ayudar a diseñar abstracciones de manera más efectiva y rápida en el futuro. Esto es de lo que los <strong>patrones de diseño</strong> se tratan: soluciones comunes a problemas recurrentes. Sólo hay que ser muy cuidadosos de no encajar problemas en patrones que no corresponden completamente al problema, sólo por el hecho de querer salir rápido del problema o de querer aplicar cierto patrón.</p>\n\n<h3 id=\"diseña-dos-veces\">Diseña dos veces</h3>\n\n<p>El diseño del software puede hacerse como la escritura: primero escribes y después editas. Son dos etapas diferentes y tan independientes que dos personas diferentes las pueden hacer. El diseño en el software puede hacerse de manera parecida. Primero diseñas tus representaciones y puedes pedirle a alguien que te corrija o revise, o puedes hacerlo tú mismo después de haber dejado pasar un poco de tiempo.</p>\n\n<p>Esta revisión te llevará a pensar cosas como “¿Qué estaba pensando cuando escribí esto?” o “Creo que esta no es la abstracción correcta, porque deja escapar detalles no necesarios”, gracias a que normalmente te has parado un poco a distancia de tu propio diseño.</p>\n\n<h2 id=\"desarrolla-la-capacidad-de-absorber-información\">Desarrolla la capacidad de absorber información</h2>\n\n<p>Debido a que tienes que representar cosas de dominios en los que probablemente no conoces, tener la capacidad de estudiar de manera efectiva te permitirá analizar la información necesaria para crear buenas abstracciones.</p>\n\n<h3 id=\"expande-tu-mente\">Expande tu mente</h3>\n\n<p>Mientras más cosas sepas de diferentes campos o dominios, será más probable que encuentres cosas que te puedan servir para <em>entender</em> lo que estás tratando de representar y sobre todo para extraer sus componentes principales, así como la información que vale la pena excluir. Así que no te limites en aprender todo lo que puedas de todos los campos posibles, pero recuerda también que esto tiene rendimientos decrecientes: mientras más profundices en un campo, más te costará adquirir nueva información que valga la pena.</p>\n\n<p>Es por esto mismo que muchos programadores son buenos programando para ciertos dominios: financiero, de automatización industrial, de juegos, de programas científicos, etc. No lo podemos saber todo y muchas veces son el conocimiento de una sola área es suficiente para entretenernos por décadas.</p>\n\n<h3 id=\"practica\">Practica</h3>\n\n<p>Este es el consejo más gastado de todos, pero aquí le vamos a dar un pequeño giro. No sirve de mucho para mejorar sólo hacer abstracciones sin reflexionar en ellas. Tienes que pensar detenidamente en tus diseños y contestar preguntas como:</p>\n\n<ul>\n  <li>¿Qué información tenía disponible y pasé por alto?</li>\n  <li>¿Cómo hubiera podido conocer u obtener esa información?</li>\n  <li>¿Qué detalles de implementación dejé escapar de mi abstracción?</li>\n  <li>¿Quién pudo haberme dado más ejemplos sobre el problema?</li>\n  <li>¿Quién puede hacer una revisión sobre el diseño y darme comentarios para mejorar?</li>\n</ul>\n\n<p>A esto se le llama práctica enfocada y hay ejercicios llamados <a href=\"http://codekata.com/\">Code Katas</a> que te pueden ayudar a mejorar en el diseño de software.</p>\n\n<p>¿Tienes algún consejo más que te haya ayudado a mejorar la forma en la que creas abstracciones? Me gustaría escucharlo en los comentarios.</p>\n\n<h2 id=\"evita-los-extremos\">Evita los extremos</h2>\n\n<p>A veces nos pasamos con las abstracciones, tanto en el nivel como en el momento en el que lo hacemos. En esta sección nos referimos exclusivamente a las abstracciones que generalizan un proceso o concepto, y las que ocultan información de otras partes del programa.</p>\n\n<p>Una señal de que estamos abstrayendo demasiado es que haya una gran diferencia entre la dificultad natural del problema base y nuestro código. Por ejemplo, imagina que tienes que encontrar una cadena de texto en un texto más grande. La cadena a encontrar es una de tres posibles “Kilo”, “Mega”, “Giga”. ¿Valdrá la pena hacer la abstracción de un buscador general de cadenas cualquiera en textos arbitrarios con el uso de autómatas finitos deterministas? Lo más probable es que no: con un un simple “contains” o la función equivalente usado en el lugar de la búsqueda es suficiente.</p>\n\n<p>Esto se puede meter directamente con nuestro <em>orgullo</em>: lo fácil o sencillo no nos hace parecer inteligentes. Pero recuerda que <strong>la simplicidad es la mejor sofisticación</strong>. Mientras más simples sean tus diseños, mejor. Más fácil será reconocerlos en el futuro, más fácil será que otros los entiendan y lo mejor: los bloques de construcción simples son el mejor fundamento para crear cosas complejas mediante la composición de estos.</p>\n\n<p>El otro punto importante es <strong>cuándo</strong> creamos estas abstracciones. Si quieres crear el programa más complejo desde el principio, lo más probable es que vas a tardar mucho en implementarlo, además de que puede que crees abstracciones que no vas a necesitar. Mejor usa las cosas más concretas posible hasta que de verdad el problema o los requerimientos de los usuarios te hagan generalizar algo. Es cierto que a veces prever algún cambio simplificará tu trabajo en el futuro, pero la mayoría de veces nos equivocamos. Lo hacemos tanto, que existe un inicialismo para refrenarnos de crear abstracciones prematuramente: YAGNI (You aren’t gonna need it - <strong>No lo vas a necesitar</strong>).</p>\n\n<h2 id=\"el-costo-de-las-abstracciones\">El costo de las abstracciones</h2>\n\n<p>Una abstracción del tipo que esconde código de otras partes del programa, es decir, de las que están detrás de una interfaz (Clase, módulo, función, etc), normalmente cuestan más en tiempo de diseño, de compilación o de ejecución. Normalmente en los tres, a menos que sea una abstracción con la que tengas mucha familiaridad. Esta es otra razón para refrenarnos de crear todas las abstracciones que se nos ocurran en un programa, o de crear cadenas de abstracciones demasiado grandes.</p>\n\n<p>Esto lo tienes que pensar sobre todo cuando los beneficios de crear cierta abstracción no están tan claros. Con algunos entornos, hay excepciones.</p>\n\n<h3 id=\"zero-cost-abstractions-abstracciones-sin-costo\">Zero-cost abstractions (Abstracciones sin costo)</h3>\n\n<p>Las abstracciones de costo cero son una propuesta de algunos entornos y lenguajes de programación modernos. Como abstraer normalmente supone un costo en el tiempo de ejecución del programa, las abstracciones sin costo proponen que, aunque puedes usar elementos de más alto nivel en el código, no te van a costar rendimiento en tiempo de ejecución.</p>\n\n<p>¿Entonces en dónde cuestan? Normalmente le cuestan al compilador, reemplazar o expandir macros en tiempo de construcción. Rust es un ejemplo de esto, aunque estas abstracciones están a bastante bajo nivel (te evitan manejos de memoria que podrían ser complicados, por ejemplo).</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Mejorar tu capacidad de abstraer conceptos, pero sobre todo de representarlos de manera eficiente en el lenguaje de programación de tu elección te llevará lejos en la carrera de desarrollo de software.</p>\n\n<p>Este tema es de los más importantes en las ciencias de la computación y desarrollo de software, así que es algo de lo que puedes seguir aprendiendo a lo largo de toda tu carrera. Algunos documentos que puedes consultar para aprender más son:</p>\n\n<ol>\n  <li><a href=\"https://www.docdroid.com/ST0qbY8/programacion-y-tecnologia-un-camino-equivocado-pdf\">Programación y Tecnología: Un camino equivocado hacia la construcción de\nartefactos</a></li>\n  <li><a href=\"/assets/pdfs/EJ1329311.pdf\">Abstraction in Computer Science Education:\nAn Overview</a></li>\n  <li><a href=\"/assets/pdfs/chap02.pdf\">Abstraction</a></li>\n</ol>\n\n<p>Espero que este artículo te sirva en tu camino profesional en la carrera de desarrollo de software.</p>\n",
      "date_published": "Mon, 13 Mar 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/03/06/el-principio-de-substitucion-de-liskov.html",
      "url": "https://blog.thedojo.mx/2023/03/06/el-principio-de-substitucion-de-liskov.html",
      "title": "El principio de sustitución de Liskov",
      "content_html": "<p>El tercer principio enunciado en los principios <strong>SOLID</strong> es el principio de sustitución de Liskov. ¿Qué significa este principio? Y más importante, ¿vale la pena seguirlo? Pero antes de hablar del principio, hablemos de <strong>Barbara Liskov</strong>, la persona que lo inspiró y que estableció los conceptos principales.</p>\n\n<h2 id=\"un-poco-de-historia-barbara-liskov\">Un poco de historia: Barbara Liskov</h2>\n\n<p>Barbara Liskov es una matemática muy reconocida en las ciencias de la computación por los grandes aportes que ha hecho. Es conocida por su trabajo en el diseño de lenguajes de programación y la teoría de tipos. En 1994 junto con Jeannette Wing publicó el artículo del que Robert Martin se sacó lo que el llamó “el principio de sustitución de Liskov” o “LSP” (Liskov Substitution Principle). Ya ves que los <em>inicialismos</em> le dan un aire de importancia a lo que escribes.</p>\n\n<p>En su libro, <a href=\"https://www.marcombo.com/mentes-geniales-la-vida-y-obra-de-12-grandes-informaticos-9788426733573/\">“Mentes Geniales. La vida y obra de 12 grandes informáticos”</a>, Camilo Chacón nos da una semblanza de las contribuciones de Barbara a las ciencias de la computación. Sus principales aportaciones, resumidas son:</p>\n\n<ul>\n  <li>Lenguajes de programación que aplican ideas de polimorfismo, modularidad, abstracción de datos y manejo de excepciones</li>\n  <li>Sistemas distribuidos (inventó Paxos antes que Leslie Lamport)</li>\n  <li>Abstracción de datos y tipos de datos abstractos</li>\n</ul>\n\n<p>Si quieres saber más de ella en poco tiempo, te recomiendo mucho su capítulo en ese libro, es muy interesante, además de que obtiene lecciones muy valiosas de su vida. Ahora sí hablemos de lo que más gente conoce de ella.</p>\n\n<h2 id=\"el-principio-de-sustitución-de-liskov\">El principio de sustitución de Liskov</h2>\n\n<p>El artículo en el que lo definió se llama <a href=\"/assets/pdfs/subtyping.pdf\">“A Behavioral Notion of Subtyping”</a>. Tiene notación matemática que cuesta un poco leer si no tienes nociones de lenguaje matemático formal, pero resumiremos las ideas básicas aquí.</p>\n\n<p>El espíritu del LSP está basado en las ideas de <strong>subtipado</strong> que Liskov describió en este artículo. Estas ideas tienen <em>muy poco</em> que ver en realidad con herencia en los lenguajes de programación orientados a objetos y mucho más con la <strong>abstracción</strong> y restricciones que hay que tener en cuenta para considerar que un tipo es un subtipo de otro.\nEs cierto que Liskov usó las jerarquías de clases para ilustrar sus ideas, pero el principio de su trabajo tiene que ver mucho más con el comportamiento externo de un tipo de datos que con la forma en la que se encapsula este comportamiento.</p>\n\n<p>Pero vayamos a la parte más profunda de la teoría para entender si lo que Liskov propone tiene sentido.</p>\n\n<h3 id=\"qué-es-un-tipo\">¿Qué es un tipo?</h3>\n\n<p>Un tipo es la definición de lo que un valor almacenado tiene, puede hacer o las operaciones que se pueden hacer sobre él.</p>\n\n<p>Pongamos un ejemplo. En JavaScript el tipo <code class=\"language-plaintext highlighter-rouge\">Number</code> define un valor que representa un número de cualquier tipo. Este tipo de dato define las operaciones que podemos hacer sobre los valores con este tipo, por ejemplo:</p>\n\n<ul>\n  <li>Podemos usar el operador <code class=\"language-plaintext highlighter-rouge\">+</code> para sumar dos datos de este tipo</li>\n  <li>Podemos usar el operador <code class=\"language-plaintext highlighter-rouge\">-</code> para restar dos datos de este tipo</li>\n  <li>Las operaciones (excepto las comparativas) entre el tipo de dato <code class=\"language-plaintext highlighter-rouge\">Number</code> siempre devuelven un valor de este tipo</li>\n</ul>\n\n<p>También definen la <em>interfaz</em> de este tipo de datos, es decir, la forma en la que podemos interactuar con ellos. Normalmente, en lenguajes orientados a objetos, esta interfaz está compuesta por los métodos públicos que se pueden llamar sobre este tipo de dato.</p>\n\n<p>Por ejemplo en JavaScript, el tipo <code class=\"language-plaintext highlighter-rouge\">Number</code> tiene definido el método <code class=\"language-plaintext highlighter-rouge\">toString</code> que nos devuelve este valor como una cadena de texto.</p>\n\n<p>Pero Bárbara Liskov expandió esto, proponiendo lo que llamamos <strong>Abstract Data Type</strong> o <strong>Tipo de Dato Abstracto</strong> (les llamaremos <strong>ADT</strong>). Un tipo abstracto de dato es una <strong>definición de un tipo de dato</strong>.</p>\n\n<p>Este tipo de dato no tiene una implementación concreta, sino que define la interfaz que debe tener cualquier implementación de este tipo de dato, siendo responsabilidad del programador implementar esta interfaz.</p>\n\n<p>Ejemplos de ADT’s son por ejemplo las Colas (Queues), Listas (Lists), Pilas (Stacks), etc. El ADT define que interfaz debe tener cualquier implementación de este, y cada lenguaje o programador puede implementarlo como le convenga.</p>\n\n<p>Ahora, ¿qué es un subtipo?</p>\n\n<h3 id=\"qué-es-un-subtipo\">¿Qué es un subtipo?</h3>\n\n<p>Un subtipo es una derivación de un tipo. Esta derivación puede ser una variación, una generalización o una especialización de este tipo. Normalmente se usan para hacer <strong>especializaciones</strong>.</p>\n\n<p>Y aquí es donde empezamos a entrar en el terreno del LSP. Una de las restricciones más importantes que Liskov propone es que si un tipo de dato tiene definido un método X, entonces cualquier subtipo de este tipo (que en relación con este se llama “supertipo”) también debe tener este método definido.</p>\n\n<p>Para hacerlo más generalizable podemos cambiar “método” por cualquier elemento visible en la interfaz de este tipo de dato.</p>\n\n<p>Así, nos podremos usar que estas clases sean intercambiables entre ellas, sin siquiera tener que hacer consciente a la parte del programa que la usa de qué clase se está usando, mientras sea una clase derivada de la clase base.</p>\n\n<p>Un ejemplo de la vida real puede ser con un cámara. Todos tenemos en la mente las funciones básicas de una cámara electrónica:</p>\n\n<ul>\n  <li>Podemos encenderla y apagarla</li>\n  <li>Puede tomar fotos (disparador)</li>\n  <li>Puede mostrarnos las fotos</li>\n  <li>Podemos descargar las fotos</li>\n  <li>Podemos borrar las fotos</li>\n</ul>\n\n<p>Mientras la cámara cumpla con esas características (su interfaz) no tendremos problema para usarla, independientemente de la marca o modelo de la cámara. Los subtipos del tipo de dato abstracto <code class=\"language-plaintext highlighter-rouge\">Cámara</code> podría ser entonces:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">Cámara DSLR</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Cámara Compacta</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Cámara Mirrorless</code></li>\n  <li><code class=\"language-plaintext highlighter-rouge\">Cámara de teléfono móvil</code></li>\n</ul>\n\n<p>En realidad en la programación, esta interfaz es un poco más estricta: los métodos deben de llamarse igual y tener la misma firma (parámetros y tipo de retorno). Es como si la cámara tuviera los botones en el mismo lugar y se usaran de la misma forma.</p>\n\n<p>Y esto es básicamente el principio de sustitución de Liskov, la capacidad de usar clases derivadas de una clase principal sin ningún cambio en el código que rodea. ¿Crees que es útil?</p>\n\n<h2 id=\"crítica-sobre-el-lsp\">Crítica sobre el LSP</h2>\n\n<p>Tal como lo describimos aquí (mal llamado, para mi) principio de sustitución de Liskov parece una muy buena idea, ya que permitirá que crees nuevos comportamientos en partes específicas de tu código sin en tener que afectar a muchas partes de tu código.</p>\n\n<p>Lo que no estuvo tan bien, <em>históricamente</em>, es que este principio siempre ha sido explicado y relacionado con la HERENCIA de clases, en lugar de poner énfasis en la abstracción de tipos de datos. Esto ha hecho que muchos desarrolladores piensen que esta práctica sólo aplica a la programación orientada a objetos y no al paradigma funcional, por ejemplo.</p>\n\n<p>De hecho, el principio como es enunciado en <a href=\"/assets/pdfs/DesignPrinciplesAndPatterns.pdf\">Design Principles and Patterns</a> dice:</p>\n\n<blockquote>\n  <h2 id=\"subclasses-should-be-substitutable-for-their-base-classes\">Subclasses should be substitutable for their base classes.</h2>\n  <p>Las subclases deben ser sustituibles por sus clases base.</p>\n</blockquote>\n\n<p>También, como se menciona en el artículo en el que se presenta originalmente este principio dice:</p>\n\n<blockquote>\n  <h2 id=\"functions-that-use-pointers-or-references-to-base-classes-must-be-able-to-use-objects-of-derived-classes-without-knowing-it\">FUNCTIONS THAT USE POINTERS OR REFERENCES TO BASE CLASSES MUST BE ABLE TO USE OBJECTS OF DERIVED CLASSES WITHOUT KNOWING IT</h2>\n  <p>Funciones que usen punteros o referencias a clases base deben ser capaces de usar objetos de clases derivadas sin saberlo</p>\n</blockquote>\n\n<p>Como puedes ver, el consejo es que está directamente relacionado con la herencia de clases y jerarquías de objetos. Incluso llega a hablar de punteros y referencias a clases base, es decir, a la clase padre.</p>\n\n<p>De hecho, esto tiene cierta justificación, porque Barbara Liskov siempre habla de objetos. Lo que Liskov nunca hace es hablar de <em>Clases</em> y jerarquías de clases. Ella habla de tipos de datos abstractos, que son una abstracción de los objetos, por lo que esta idea se extiende a <strong>cualquier artefacto computacional que se encargue de encapsular un comportamiento</strong>.</p>\n\n<p>¿Qué es encapsular? Es <strong>ocultar la implementación</strong> y exponer sólo lo necesario para que el resto del programa pueda usarlo. Esto es lo que hace una clase, un módulo, una función, etc.</p>\n\n<p>¿Qué te recuerda esto? Lo mismo de lo que hemos hablado en los principios anteriores: <strong>abstracción</strong>. Esconder lo más que se pueda la información, <em>Information Hiding</em>, como le llamaría John Ousterhout.</p>\n\n<p>Lo que es más, seguir esta idea de que diferentes tipos de datos puedan ser intercambiables hace que selecciones mejor los elementos que van a componer tu interfaz (en este caso le llamaríamos <strong>API</strong>).</p>\n\n<p>Para mí, las ideas de Liskov son un aplicación particular de la idea de ocultar la mayor cantidad de información posible dentro de interfaces lo mejor diseñadas posible, tal como se explica en el libro <a href=\"https://web.stanford.edu/~ouster/cgi-bin/book.php\">A Philosophy of Software Design de John Ousterhout</a>.</p>\n\n<h3 id=\"conclusión\">Conclusión</h3>\n\n<p>La ideas sobre <strong>subtipos</strong> y la forma de usarlos lo mejor posible que Bárbara Liskov y Jeannette Wing propusieron son muy útiles para crear mejor código, sobre todo mejor separación y ocultado de la implementación.</p>\n\n<p>Esto lo vamos a repetir hasta el cansancio: <strong>ocultar información</strong> te ayudará a hacer que tus programas sea más fáciles de entender y de mantener.</p>\n\n<p>Como lección, podemos decir que seguir las guías de Liskov para el subtipado es una forma de aplicar este principio de diseño aún más amplio, digamos que en realidad la especificación de cómo deben comportarse los subtipos es más como una <em>regla</em> de diseño que un <em>principio</em> de diseño.</p>\n\n<p>Entender el verdadero significado de lo que Liskov propone, te ayudará a ver que no sólo se aplica a la programación orientada a objetos, tal como se enunciaba en SOLID originalmente, sino a muchas otras situaciones.</p>\n",
      "date_published": "Mon, 06 Mar 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/02/27/que-es-un-modelo-transformador-de-inteligencia-artificial.html",
      "url": "https://blog.thedojo.mx/2023/02/27/que-es-un-modelo-transformador-de-inteligencia-artificial.html",
      "title": "¿Qué es un modelo transformador de inteligencia artificial?",
      "content_html": "<p>En los últimos años los modelos de inteligencia artificial generativos han avanzado mucho. Esto es en parte gracias a una nueva arquitectura para las redes neuronales llamada <em>transformer</em> o de transformador, como les llamaremos en este artículo. Hablemos de en qué consiste esta arquitectura y por qué es tan revolucionaria o porque ha ayudado tanto a avanzar en el campo de la inteligencia artificial.</p>\n\n<h2 id=\"redes-neuronales-recurrentes-rnn\">Redes neuronales recurrentes (RNN)</h2>\n\n<p>Estas eran el estándar para hacer varias tareas, entre ellas la traducción. Las redes neuronales recurrentes se llaman así porque sus entradas se alimentan en ciclos, es decir, en vez de siempre mandar su salida a las siguientes capas, también manda la salida a capas anteriores o a la misma capa.</p>\n\n<p>Esta arquitectura permite que la red desarrolle memoria, algo que sirve bien para tratar con textos porque normalmente las palabras que van adelante están influidas por las que están antes.</p>\n\n<p>Sin embargo, el entrenamiento de este tipo de redes neuronales requiere de mucho tiempo y recursos. Además, su memoria no es tan buena como para manejar textos muy largos. Así que la traducción o tratamiento de textos largos no les salía muy bien.</p>\n\n<p>Además, la forma secuencial de tratar las palabras las hace difíciles de entrenar. Aquí es cuando los investigadores de Google diseñaron otra arquitectura.</p>\n\n<h2 id=\"redes-neuronales-de-transformador-transformers\">Redes neuronales de transformador (Transformers)</h2>\n\n<p>Es una arquitectura más sencilla que las utilizadas anteriormente. Los transformadores están construidos en gran parte por mecanismos de <strong>atención</strong>. Podemos decir que tiene tres componentes principales:</p>\n\n<ol>\n  <li>Codificación de posición</li>\n  <li>Mecanismo de atención</li>\n  <li>Mecanismo de auto-atención</li>\n</ol>\n\n<p>Hablemos de cada una de estas partes más detenidamente, explicadas para un desarrollador de software.</p>\n\n<h3 id=\"codificación-de-posición\">Codificación de posición</h3>\n\n<p>Esta es la primera innovación del modelo transformador. En vez de procesar las palabras como una secuencia para conservar su orden, lo que limita el paralelismo o la capacidad de procesar varias palabras a la vez, se crean tuplas que contienen la palabra y su posición en el texto. Esto permite que la red pueda procesar varias palabras a la vez.</p>\n\n<p>La posición del texto como se explica en <a href=\"https://arxiv.org/abs/1706.03762\">Attention is all you need</a> depende de una función basada en el seno y coseno, no un número entero de donde se encontró en el texto.</p>\n\n<p>Esta primera innovación permite que el entrenamiento sea paralelizable y por lo tanto que se puedan procesar más ejemplos, lo que mejora el aprendizaje.</p>\n\n<h3 id=\"atención\">Atención</h3>\n\n<p>La atención se introdujo algunos años antes en el proceso de traducción automática. Este proceso consiste en que el modelo “mire” a otro texto para saber cómo traducir la palabra o el texto que está procesando. En las tareas de traducción, este mecanismo se da entre el texto que necesita ser traducido y la salida de la traducción.</p>\n\n<p>El mecanismo de atención le da un peso diferente a cada palabra del texto original, con respecto a la palabra que ese está procesando. Este peso determina en donde se está “fijando” el modelo para procesar la palabra actual.</p>\n\n<p>Este mecanismo de atención es básicamente un montón de operaciones matriciales.</p>\n\n<h3 id=\"auto-atención\">Auto-atención</h3>\n\n<p>El mecanismo de atención anterior tiene que ver con la influencia que otro texto en la salida del proceso actual. El mecanismo de auto-atención se refiere al análisis <strong>del mismo texto</strong> que se está procesando, y la relación entre las palabras.</p>\n\n<p>Este mecanismo de auto-atención permite que el modelo encuentre patrones a través de muchos ejemplos de entrenamiento. Estos patrones tienen que ver con el significado de la palabra, los sinónimos, la gramática, etc.</p>\n\n<p>Esta es la parte más importante de un transformador y es lo que hace que los modelos que tienen esta arquitectura sean tan poderosos, permitiéndoles trabajar con textos largos y con una gran variedad de tareas, más allá de solamente traducción.</p>\n\n<p>Esta es una explicación muy básica de los mecanismos dentro de un modelo de transformador, si quieres aprender más a profundidad puedes leer:</p>\n\n<ul>\n  <li>El documento donde se presentó la arquitectura: <a href=\"https://arxiv.org/abs/1706.03762\">Attention is all you need</a>.</li>\n  <li><a href=\"http://jalammar.github.io/illustrated-transformer/\">The Illustrated Transformer</a>, un artículo en donde con buenos dibujos se explica cómo funcionan.</li>\n  <li><a href=\"http://jalammar.github.io/illustrated-bert/\">The Illustrated BERT, ELMo, and co. (How NLP Cracked Transfer Learning)</a>, un artículo en donde se explica cómo funciona BERT, basado en ideas similares a las de los transformadores.</li>\n</ul>\n\n<h3 id=\"ventajas-de-los-transformadores\">Ventajas de los transformadores</h3>\n\n<p>La principal ventaja es que al ser más fáciles y eficientes de entrenar, se pueden crear modelos más grandes que normalmente harán mejor su tarea. Esto es lo que ha permitido que modelos como PALM y GPT-3 existan.</p>\n\n<p>Los modelos de transformador nos siguen sorprendiendo y parece que continuarán así en los próximos años.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Las redes neuronales con arquitectura de transformador permiten lograr cosas que no creíamos posibles y son la base de los grandes modelos de lengua natural como GPT-3. Conocer un poco más cómo funcionan nos puede dar una idea de lo que son capaces y sus límites, además de que es bastante interesante. Si quieres que hablemos de algún tema en específico puedes dejarnos un comentario.</p>\n",
      "date_published": "Mon, 27 Feb 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/02/27/code-review.html",
      "url": "https://blog.thedojo.mx/2023/02/27/code-review.html",
      "title": "Code Review: La practica Milenaria que seguimos haciendo mal.",
      "content_html": "<h2 id=\"qué-es-un-code-review\">¿Qué es un “Code Review”?</h2>\n\n<p>Es la práctica que realizan los equipos de ingeniería de software para verificar los cambios de código antes de fusionarlos con el código fuente principal.</p>\n\n<h2 id=\"dónde-se-aplica\">Dónde se aplica</h2>\n\n<p>En todas partes, cuando eres miembro de un equipo, como colaborador individual o como estudiante. Tienes la oportunidad de involucrarte, contribuir y dar tu opinión a código escrito por otra persona. Algunos ejemplos:</p>\n\n<h3 id=\"durante-una-sesión-de-pair-programming\">Durante una sesión de “pair programming”</h3>\n\n<blockquote>\n  <p>“Dos cabezas piensan mejor que una.”</p>\n</blockquote>\n\n<p>Revisando una pieza de código con alguien más, los desarrolladores podemos hacer recomendaciones, mejoras y adiciones a un sistema en tiempo real.</p>\n\n<h3 id=\"en-aplicaciones-de-control-de-versiones-tales-como\">En aplicaciones de control de versiones, tales como</h3>\n\n<ul>\n  <li>El Pull Request (PR) en GitHub.</li>\n  <li>El Merge Request (MR) en GitLab.</li>\n</ul>\n\n<p>Estas funciones permiten a los desarrolladores proponer cambios en un código propiedad de otra persona. Es una forma de revisar y discutir cambios propuestos antes de fusionarlos, lo que permite a otros desarrolladores dejar comentarios, solicitar cambios o aprobar una solicitud de forma asíncrona.</p>\n\n<h3 id=\"en-cualquier-fragmento-de-código-propuesto\">En cualquier fragmento de código propuesto</h3>\n\n<p>Hay otros canales o formas de compartir código con un equipo. A veces, los desarrolladores lo hacen a través de Slack (u otros servicios de mensajería) u otra, simplemente compartiendo enlaces.\nSi como desarrollador notas algo para mejorar o agregar, tu equipo de tecnología debe ser el lugar que permita que esas interacciones y comentarios sucedan orgánicamente.</p>\n\n<h2 id=\"beneficios-de-la-revisión-de-código\">Beneficios de la revisión de código</h2>\n\n<p>Esta práctica aumenta significativamente el trabajo en equipo. Involucrarse con el código de los demás e involucrar a otros en tus contribuciones aumenta el éxito en la creación de productos. Algunos de los beneficios son:</p>\n\n<h3 id=\"solución-77-temprana-de-errores\">Solución 77 temprana de errores</h3>\n<blockquote>\n\n  <p>“Aquel de ustedes que esté libre de romper producción, que tire la primera piedra.”</p>\n</blockquote>\n\n<p>Como humanos, los ingenieros de software no están exentos de cometer errores, y es una gran ventaja contar con un equipo que te apoye, revise y libere tareas en conjunto. Durante una revisión de código, estos errores se pueden detectar y corregir.</p>\n\n<h3 id=\"mejorar-la-calidad\">Mejorar la calidad</h3>\n<blockquote>\n\n  <p>“Es más barato hacer las cosas bien la primera vez.”</p>\n</blockquote>\n\n<p>Establecer reglas en el estilo de código que aumenten la legibilidad, el mantenimiento y la escalabilidad del código ayuda a escribir software de calidad.</p>\n\n<h3 id=\"intercambio-de-conocimientos\">Intercambio de conocimientos</h3>\n\n<p>El Code Review es una excelente herramienta para recibir y dar retroalimentación, aprender las mejores prácticas de los desarrolladores con más experiencia e intercambiar soluciones.</p>\n\n<h3 id=\"sincronización\">Sincronización</h3>\n\n<p>Con esta práctica, se puede saber en qué está trabajando cada miembro del equipo, evitar duplicación de esfuerzos y mantenerse actualizado con la lógica del negocio.</p>\n\n<h2 id=\"primeros-pasos\">Primeros pasos</h2>\n\n<p>Una buena idea para aplicar correctamente esta práctica en tu equipo es establecer reglas antes de empezar.</p>\n\n<ul>\n  <li>Establezca una plantilla de descripción con los puntos mínimos que el equipo necesitará para comprender el contexto y el propósito de una solicitud de cambios de código y apliquen esa plantilla de manera consistente en todas las solicitudes futuras.</li>\n  <li>El número mínimo de revisores para aprobar un fragmento de código; esto dependerá del tamaño del equipo.</li>\n  <li>Canales o herramientas de comunicación al equipo cuando un código este listo para ser revisado.</li>\n  <li>El tiempo entre las revisiones, es decir, que si un desarrollador marca un fragmento de código listo para revisarse y el equipo hace sugerencias o solicita cambios, y seguido de eso el desarrollador aplica los cambios solicitados, debe establecerse la cantidad de tiempo que debe pasar para solicitar una nueva revisión. Esta regla puede ser útil en equipos grandes que están involucrados en diferentes sistemas y necesitan dividir el tiempo entre el desarrollo y la revisión. En equipos pequeños, una regla de este tipo es opcional.</li>\n</ul>\n\n<h2 id=\"revisión-efectiva\">Revisión efectiva</h2>\n<blockquote>\n\n  <p>“Una buena revisión necesita de experiencia y profesionalismo y no de nivel de seniority.”</p>\n</blockquote>\n\n<p>Solo algunos desarrolladores son capaces de aplicar una buena revisión del código, esa es la razón principal por la que escribir esta publicación. El Code Review no es una práctica nueva en lo absoluto. Por el contrario, ha existido durante décadas, desde que las personas comenzaran a escribir código. Una de las primeras referencias a esta práctica como proceso formal se encuentra en el libro “The Mythical Man-Month” de Fred Brooks, publicado en 1975.</p>\n\n<p>Entonces, ¿por qué te pareció un tema importante? he estado trabajando con equipos de Ingeniería de Software durante aproximadamente 12 años y sigo leyendo comentarios que tienen un tono vago o agresivo o que carecen de explicación y contexto, lo que dificulta la aplicación efectiva de cambios en el código.</p>\n\n<h3 id=\"la-revisión-de-código-no-es-una-práctica-para\">La revisión de código <em>NO ES</em> una práctica para</h3>\n\n<ul>\n  <li>Demostrar superioridad.</li>\n  <li>Hacer que otros se sientan inseguros.</li>\n  <li>Imponer estilos de codificación.</li>\n  <li>En resumen, ser un idiota.</li>\n</ul>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1677550574/221453027-36a424b8-7ff5-4b17-bc8a-9bda2e223c22_rahapd.png\" alt=\"No\" class=\"align-center\" /></p>\n\n<p>Aquí algunos ejemplos.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,q_100,w_800/v1677550576/221453038-b93d320a-5389-40e8-bf58-cd24b42910c4_ta57tb.png\" alt=\"code example\" class=\"align-center\" /></p>\n\n<p>Mala revisión:\n“Este código es malo. ¿Por qué estás haciendo una búsqueda lineal?”</p>\n\n<p>Buena revisión:\n“Este bloque de código podría optimizarse mediante el uso de una búsqueda binaria en lugar de una lineal. Esto mejoraría el rendimiento al buscar en grandes conjuntos de datos”.</p>\n\n<p>Como puedes ver en la mala revisión, hay más críticas que propuestas de alternativas o solución, o carece de la explicación del por qué se debe mejorar el código. Por el otro lado, la buena revisión ofrece una optimización, explicando por qué el enfoque diferente puede mejorar la función.</p>\n\n<p>Más malos ejemplos:</p>\n\n<ul>\n  <li>\n    <p>“Este código apesta”. - Esto no es útil y no proporciona comentarios ni sugerencias para mejorar.</p>\n  </li>\n  <li>\n    <p>“No entiendo lo que estás tratando de hacer aquí”. - Esto es desdeñoso y no proporciona comentarios constructivos. Si hay una duda genuina de la implementación lo ideal es expresar esa duda lo mejor posible.</p>\n  </li>\n  <li>\n    <p>“Yo no lo haría de esta manera”. - Este comentario no es útil y le faltan razones o sugerencias para mejorar el código en revisión.</p>\n  </li>\n</ul>\n\n<p>Los comentarios en una revisión del código deben ser específicos, constructivos y aplicables, evitando agresiones personales, un lenguaje desdeñoso y generalizaciones.</p>\n\n<p>Evite por completo el uso de signos de exclamación e íconos para enfatizar comentarios negativos. Por último, recuerda que las malas interpretaciones son comunes en la comunicación escrita y pueden ocurrir aunque la intención sea buena.</p>\n\n<h3 id=\"la-revisión-de-código-si-es-una-práctica-para\">La revisión de código <em>SI ES</em> una práctica para</h3>\n\n<ul>\n  <li>Incentivar el trabajo en equipo.</li>\n  <li>Reconocer el buen trabajo.</li>\n  <li>Ser flexible con los estilos de código y aprender de el equipo.</li>\n  <li>En resumen, es para ser un miembro del equipo.</li>\n</ul>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1677550578/221453050-3cc5f85d-a2bd-4f67-9aa6-9a0e1ddf76b2_hol1iu.png\" alt=\"approved symbol\" class=\"align-center\" /></p>\n\n<p><em>Aquí te dejo una sugerencia poderosa</em>, no solo comentes lo que consideres que se puede cambiar o mejorar, sino también comenta lo que te gustó en una implementación, por ejemplo:</p>\n\n<ul>\n  <li>“¡Buen trabajo! Este código está muy bien organizado y es fácil de entender. Aprecio especialmente cómo usaste las funciones integradas en la biblioteca estándar de Go para simplificar el código. ¡Sigue con el excelente trabajo!””</li>\n</ul>\n\n<p>Adicionalmente, recuerda tomarte el tiempo. El trabajo es exigente y, a veces, no dedicamos suficiente tiempo a las revisiones, y comentamos “¡LGTM!” (Me parece bien) para seguir adelante, pero recordemos que el otro desarrollador dedicó tiempo a trabajar en esos cambios, por lo que vale la pena revisarlos con cuidado.</p>\n\n<p>Otra sugerencia que les dejo es establecer el prefijo “NIT” (<em>nitpicker</em>) en los comentarios, lo que significa que puedes sugerir un cambio, pero no bloquea ni impide que ese el código en revisión sea aceptado; es simplemente una “perfección” que sugieres pero que puede ser ignorada.</p>\n\n<h2 id=\"mi-código-es-el-que-esta-en-revisión\">Mi código es el que esta en revisión</h2>\n\n<p>Por último, ser la persona que recibe las revisiones también requiere práctica.</p>\n\n<ol>\n  <li>\n    <p>No te lo tomes como algo personal.\nAunque recibas un mal comentario, recuerda que el objetivo del equipo siempre será entregar un software de calidad. Se está revisando una parte de tu código, no su persona o tu trabajo en sí.</p>\n  </li>\n  <li>\n    <p>Se un miembro de equipo.\nOtras personas usarán el código que escribiste hoy. Por lo tanto, es fundamental estar abierto a modificar tu trabajo por el bien del equipo y del producto final.</p>\n  </li>\n  <li>\n    <p>Responde positivamente a los comentarios.\nHabrá casos en los que, como desarrollador que escribió el código en revisión, tendrás razones para creer que es la solución que debe fusionarse, sin embargo, si alguien solicita cambios o sugiere algo, debes comunicar tus razones de forma clara y justificada.</p>\n  </li>\n  <li>\n    <p>Participa en el intercambio de revisiones.\nNo seas solo un espectador que genera código para ser revisado. Considera que independientemente de tu nivel, la experiencia que se obtiene leyendo código al máximo no se ve superada por nada.</p>\n  </li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Estamos en el año 2023, y la IA nos acompaña a diario en nuestras actividades, algunas prácticas desaparecerán pero los diferenciadores permanecerán. Una máquina puede decirnos qué está mal o dónde se puede mejorar una parte del código, sin embargo, la calidez, la empatía y el apoyo que otro ser humano puede brindarnos no se puede reemplazar (todavía), sigamos practicándolo y demos lo mejor de nosotros en todos los procesos en los que participamos.</p>\n",
      "date_published": "Mon, 27 Feb 2023 00:00:00 -0600"
      }
    
  ]
}
       <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>
        </div>

        
      </section>

      <footer class="page__meta">
        
        


        


      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2023 The Dojo MX Blog. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
