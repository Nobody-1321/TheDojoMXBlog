<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.22.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title></title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="">
<meta property="og:title" content="">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>






<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title=" Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->


    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->


<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": null,
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>
  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt=""></a>
        
        <a class="site-title" href="/">
          The Dojo Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  


  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          

        </header>
      

      <section class="page__content e-content" itemprop="text">
        
        {
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2022/06/11/resumen-historia-de-los-lenguajes-de-programacion.html",
      "url": "https://blog.thedojo.mx/2022/06/11/resumen-historia-de-los-lenguajes-de-programacion.html",
      "title": "Resumen: Historia de los lenguajes de programación",
      "content_html": "<p>¿Te has preguntado cómo nacieron los primeros lenguajes de programación? Manuel Rubio, autor de ‘Historia de los lenguajes de programación’, nos habla lo explica de manera cronológica en el primer tomo de esta obra.</p>\n\n<h2 id=\"resumen-general\">Resumen general</h2>\n\n<p>El libro habla de manera más o menos cronológica del nacimiento de los primero lenguajes de programación, desde la época de 1940. La forma en que lo narra te hace comprender claramente por qué eran necesarios y las diferentes tendencias que se dieron.</p>\n\n<p>El libro abarca hasta el año 1960, poco antes del nacimiento de Lisp. Hablemos ahora de las fases que el libro cubre a grandes rasgos.</p>\n\n<h2 id=\"el-nacimiento-de-la-computación-automática\">El nacimiento de la computación automática</h2>\n\n<p>El primer capítulo trata sobe el nacimiento de la computación como la conocemos, cómo <strong>Alan Turing</strong>, <strong>Alonzo Church</strong> definieron lo que conocemos como computable, gracias al <a href=\"https://paginas.matem.unam.mx/videos/2017/marzo-2017/seminario-junior/427-acerca-del-problema-de-la-decision\">“Problema de la decisión”</a>, definido en los diez problemas del matemático David Hilbert.</p>\n\n<p>Además habla de las contribuciones de <a href=\"https://www.britannica.com/biography/John-von-Neumann\">John Von Neumann</a> para el diseño y la concreción de las computadoras como medios físicos.</p>\n\n<p>El segundo capítulo habla del camino independiente que tuvo <strong>Konrad Zuse</strong>, en la creación de máquinas automáticas para la computación de problemas lógicos y matemáticos. Habla de cómo hizo la <strong>Z1, Z2 y Z3</strong>, computadoras mecánicas, cada una mejor que la otra. Además habla de la creación de un lenguaje de programación teórico llamado <strong>Plankalkül</strong>.</p>\n\n<p>Estos dos capítulos son muy interesantes porque nos ayudan a comprender cómo la computación automática es algo que estaba muy cerca de ser logrado por la década de 1930, por diferentes mentes y de formas parecidas.</p>\n\n<h2 id=\"los-primero-lenguajes-que-corrían-en-computadoras\">Los primero lenguajes que corrían en computadoras</h2>\n\n<p>Los siguientes capítulos nos van hablando de la progresión de los lenguajes de programación, todos guiados principalmente por dos cosas:</p>\n\n<ol>\n  <li>La capacidad de la computaras existentes, pero sobre todo, sus <em>límitaciones</em>.</li>\n  <li>La intención de los usuarios de la computadora.</li>\n</ol>\n\n<p>No vamos a hablar de cada uno de los capítulos y lenguajes que se mencionan en el libro, pero hablemos de la progresión general que se fue dando y cómo se acercaban cada vez más los lenguajes que conocemos hoy.</p>\n\n<p>Las primeras computadoras programables requerían que se recablearan, es decir, esta era su forma de entrada de información, sin embargo, se empezaron a crear tablas de instrucciones que ayudaban a programar. Tenemos por ejemplo el <a href=\"https://hopl.info/showlanguage2.prx?exp=6030\">ENIAC Short Code</a>.</p>\n\n<p>También, durante esta época empezaron a crearse cosas que damos por sentado, pero que seguramente surgieron naturalmente durante el trabajo del día a día de las primeras <em>programadoras</em>:</p>\n\n<ol>\n  <li>La <strong>subrutina</strong>, como una plantilla de código reutilizable a la que sólo se le agregaban los datos en lugares designados para ello.</li>\n  <li>El <strong>punto de ruptura</strong>, que es una pausa en la ejecución de un programa, para revisar el estado general del sistema y el programa.</li>\n</ol>\n\n<p>Después de esto empezaron a nacer los primeros lenguajes <em>ensambladores</em>. Un lenguaje <strong>ensamblador</strong> es un conjunto de instrucciones apegadas al procesador que lo correrá, que sustituyen las instrucciones en binario y que para pasar a código máquina necesitan una fase de transformación, que los primeros programadores llamaban la fase de “ensamblaje”. En este sentido, lo que conocemos como lenguajes ensambladores, debieron haberse llamado <a href=\"https://softwareengineering.stackexchange.com/questions/405080/why-is-assembly-language-called-assembly\"><em>lenguajes ensamblados</em></a>.</p>\n\n<p>Estos lenguajes correspondían a su propia computadora y que por lo tanto, <em>no se podían usar en ningún otro lado</em>. Tenemos como ejemplo (y primer lenguaje ensamblador reconocido) el <strong>ARC Assembly de Kathleen Booth</strong>. Así surgieron más lenguajes de este estilo, cada uno para su máquina específica hasta la creación de los primeros intérpretes y compiladores.</p>\n\n<h2 id=\"el-primer-intérprete\">El primer intérprete</h2>\n\n<p>¿Qué nacio primero? Los compiladores o los intérpretes? Pues resulta que lo primero que permitió usar un lenguaje de alto nivel, es decir, algo no relacionado directamente con las instrucciones de específicas de un procesador, fue un <strong>intérprete</strong> propuesto por John Mauchly en 1949. Este fue llamado primero <em>Brief Code</em> y después <em>Short Code</em>.</p>\n\n<p>Un intérprete es un programa que transforma un lenguaje de alto nivel en código máquina, es decir, instrucciones para el procesador para el que este intérprete está implementado y además lo ejecuta.</p>\n\n<p><strong>Short Code</strong> fue un lenguaje pensado para representar y resolver expresiones matemáticas. Fue implementado para el <strong>BINAC</strong> en 1949 y para el <strong>UNIVAC I</strong> en 1950, por William Schmitt. Aquí empieza la historia de los lenguajes que no están pegados a la arquitectura de un procesador.</p>\n\n<h2 id=\"el-primer-compilador\">El primer compilador</h2>\n\n<p>Una de las primeras programadoras, <strong>Grace Hopper</strong>, después haber estado programando de forma arcaica mucho tiempo, comenzó a crear una colección de <em>subrutinas</em> para facilitarse el trabajo. Así que su trabajo se fue convirtiendo en juntar una serie de subrutinas que lograran la tarea en cuestión.</p>\n\n<p>El siguiente paso natural, por lo tanto, fue la automatización de este proceso, de juntar o <em>compilar</em> todas estas partes de código en un programa final. Así fue que nació el primer compilador, creado por Grace Hopper, el <strong>A-0</strong> para la <a href=\"https://www.computinghistory.org.uk/det/5487/Grace-Hopper-completes-the-A-0-Compiler/\">UNIVAC I</a>.</p>\n\n<p>Después de esto siguieron surgiendo compiladores, como el A-1, A-2, MATH-MATIC, ARITH-MATIC, por ejemplo. Estos lenguajes y compiladores surgieron por las diferentes necesidades de las empresas que poseían una computadora y un equipo capaz de desarrollar estos lenguajes.</p>\n\n<h3 id=\"fortran-i-y-ii\">Fortran I y II</h3>\n\n<p>La mayor desventaja de los lenguajes creados en la década de los 50’s es que representaban un gran intercambio entre velocidad <em>de programación</em> por velocidad <em>de ejecución</em>. Es por eso que <strong>John Backus</strong> hizo la propuesta de un lenguaje que fuera fácil de programar, y por lo tanto de enseñar, y que al mismo tiempo no representara una gran diferencia en velocidad de ejecución.</p>\n\n<p>Así presentó el informe sobre FORTRAN (<strong>FOR</strong>mula <strong>TRAN</strong>slator), en el que se mencionaban justo estas dos fortalezas: escribir en alto nivel fórmulas matemáticas al mismo tiempo que compilar un programa muy eficiente en ejecución para la computadora <strong>IBM 704</strong>.</p>\n\n<p>Aquí se empiezan a ver las malas capacidades de estimación de los desarrolladores: John Backus dijo que la implementación primera versión tomaría 6 meses, pero en realidad tomó 2 años y medio, 5 veces más.</p>\n\n<p>Sin embargo, el resultado de FORTRAN como producto fue impecable: a diferencia de los demás compiladores y lenguajes tenía una muy buena documentación que permitió su adopción masiva, convirtiéndose en la mejor arma de IBM para vender más computadoras, y en el estándar en América (sobre todo Estados Unidos) para la industria, debido a que después de implementó para otras computadoras de IBM.</p>\n\n<h3 id=\"algol-58\">Algol 58</h3>\n\n<p>Aunque FORTRAN había tenido mucho éxito como lenguaje en la industria, no había un lenguaje estándar para hacer computación científica, ni en América ni en Europa, por lo que no se podían compartir los resultados ni los programas entre universidades ni instituciones.</p>\n\n<p>Así nació la iniciativa de crear un lenguaje estándar para la industria y la academia, que permitiera compartir los resultados entre diferentes grupos de personas. La GAMM (<a href=\"https://www.gamm-ev.de/en/\">Gesellschaft für angewandte Mathematik und Mechanik</a> [Asociación de Matemáticas Aplicadas y Mecánica]), que es el equivalente a la ACM (<a href=\"https://www.acm.org/\">Association for Computing Machinery</a> [Asociación de Mecánica Computacional]) se pusieron de acuerdo para crear una especificación de un lenguaje que sirviera este propósito, reuniendo personas con mucha experiencia en la creación de lenguajes y en la programación de compiladores.</p>\n\n<p>El resultado de esto fue el <strong>International Algebraic Language</strong>, después conocido como <strong>ALGOL</strong>. Este lenguaje tenía las mejores características de los lenguajes modernos de aquella época, sin embargo, tenía un serio problema: sus implementaciones eran inconsistentes, por lo que no pudo cumplir su objetivo de tener una herramienta estandarizada para crear y compartir programas.</p>\n\n<p>La creación de esta recomendación, sin embargo, estableció las bases de cooperación entre las asociaciones relacionadas con la computación de Europa y América.</p>\n\n<h3 id=\"cobol\">COBOL</h3>\n\n<p>Hemos estado hablando de lenguajes usados para computación científica y cálculos matemáticos, sea en la academia o en la industria. <strong>Grace Hopper</strong>, una gran visionaria por lo que podemos ver, se dio cuenta de que los negocios necesitaban ayuda con cosas más mundanas: contaduría, inventarios, etc. De hecho, en retrospectiva, eso es algo que se estaba notando con lenguajes como <a href=\"https://en.wikipedia.org/wiki/FLOW-MATIC\">FLOW-MATIC</a> y <a href=\"https://en.wikipedia.org/wiki/AIMACO\">AIMACO</a>, especializados en tareas de procesamiento de datos, menos científicos y con instrucciones más adaptadas al mundo de los negocios.</p>\n\n<p>Así que <strong>Hopper</strong> se dio a la tarea de juntar a la gente necesaria para diseñar un lenguaje que cumpliera con estas características y que detuviera la proliferación innecesaria de lenguajes de negocio. Así nació el comité para diseñar <strong>COBOL</strong>, un lenguaje que cumpliera con las necesidades de las empresas.</p>\n\n<p>COBOL, en vez de enfocarse en matemáticas y fórmulas se enfocaría principalmente en palabras en inglés para hacerlo más fácil de programar y aplicar a las necesidades del día a día de los negocios. En el libro de Manuel puedes ver los detalles y los retos a los que tuvo que enfrentarse este comité.</p>\n\n<p>La especificación de COBOL se terminó en 1960, pero su implementación se tomó otros años. Para mi, COBOL es el lenguaje que precede a la gran mayoría de los que usamos hoy, como Java, Python, PHP, etc., ya que estos están enfocados en problemas de negocio más que en computación científica o matemática.</p>\n\n<h3 id=\"otros-lenguajes\">Otros lenguajes</h3>\n\n<p>No mencioné un montón de lenguajes, compiladores y computadoras que Manuel toca en libro, por lo que te recomiendo su lectura si quieres una visión más amplia del desarrollo de nuestra industria desde su nacimiento, la evolución de las necesidades y cómo los comercios, la academia y el gobierno se conjuntaron para ir creando lo que se fue necesitando hasta llegar al rico entorno que tenemos hoy.</p>\n\n<h2 id=\"aprendizajes\">Aprendizajes</h2>\n\n<p>Este libro, más allá de contarte la historia de la programación entre los años 1940-1960, te comunica varias lecciones que puedes aprender si lees entre líneas. A continuación listo mis aprendizajes.</p>\n\n<h3 id=\"perseverancia\">Perseverancia</h3>\n\n<p>La historia de <strong>Konrad Zuse</strong> me enseña que no siempre es necesario estar con un grupo de personas pensando igual o siquiera que te entiendan para crear algo.</p>\n\n<p><strong>Konrad</strong> persiguió sus intereses con perseverancia y logró cosas muy parecidas a lo que los grupos de principales de desarrollo de la computación lograron años después. Claro, él es una excepción, pero es una muestra de qué tan lejos te pueden llevar tus intereses.</p>\n\n<h3 id=\"acerca-de-los-equipos-de-trabajo\">Acerca de los equipos de trabajo</h3>\n\n<p>Para crear algo que vale la pena, como un lenguaje de programación, que es una creación bastante compleja, casi siempre hace falta la cooperación de muchas personas por un periodo sostenido (como ya vimos, hay excepciones). En por lo menos dos de los lenguajes mencionados arriba, se tuvieron que poner de acuerdo múltiples grupos de personas para lograr un objetivo común, como crear un lenguaje que cubriera las necesidades de un grupo amplio de personas e instituciones y evitar problemas estilo la “Torre de Babel”.</p>\n\n<h3 id=\"vender-las-ideas\">Vender las ideas</h3>\n\n<p>Una de las cosas que se menciona en el libro es que <strong>“la gente es alérgica al cambio”</strong>. Esto pasó con la idea primeramente de hacer intérpretes y después de los compiladores.</p>\n\n<p>Es por eso que las personas que tuvieron la idea inicialmente tuvieron que luchar porque otras personas tomaran sis ideas en serio, convencerlas de que valía la pena y poner de acuerdo a un grupo de personas.</p>\n\n<p>Tener la habilidad de <strong>vender tus ideas</strong> es algo que te ayudará a avanzar en tu carrera y conseguir tus objetivos.</p>\n\n<h3 id=\"siempre-habrá-celadores\">Siempre habrá celadores</h3>\n\n<p>Cuando se presentaban ideas que permitían abrir el campo hacia personas menos educadas que las que ya estaban, o que quitaban barreras para que otros programaran, siempre había personas que se sentían amenazadas y se oponían a esto.</p>\n\n<p>Esa es una actitud que seguimos viendo hasta hoy. Hay muchos “profesionales” que desprecias a las personas que no son tan educadas como ellos o que entran en el campo del desarrollo de software sin educación formal.</p>\n\n<p>Podemos ver en retrospectiva lo equivocados que estaban y podemos entender lo equivocados que están hoy los que tienen la misma actitud.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>El primer volumen de “Historia de los Lenguajes de Programación” es un libro que te puede enseñar mucho sobre tu industria y te puede dejar muchas lecciones. Lo recomiendo mucho a todos los desarrolladores de software que tengan interés en la historia y la filosofía de lo que hacen día a día y creo que debería ser una lectura obligatoria para todos los estudiantes de carreras afines a la computación.</p>\n\n",
      "date_published": "Sat, 11 Jun 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/06/02/consistencia-en-el-codigo.html",
      "url": "https://blog.thedojo.mx/2022/06/02/consistencia-en-el-codigo.html",
      "title": "Consistencia en el código",
      "content_html": "<p>Una de las mejores formas de ayudar a que tu código sea fácil de mantener es hacer que el estilo tanto de formateo como de programación en general sea consistente. Analicemos este concepto que se menciona en “A Philosophy of Software Design”.</p>\n\n<h2 id=\"qué-es-la-consistencia-en-el-código\">¿Qué es la consistencia en el código?</h2>\n\n<p>Básicamente, significa que las que cosas o el código que hace lo mismo luzca y se programen igual y las piezas de código que no hacen los mismo, luzcan y se programen diferente.</p>\n\n<p>Hay varios factores a tomar en cuenta respecto a la consistencia del código, que trataremos en las siguientes sub-secciones.</p>\n\n<h3 id=\"nombres\">Nombres</h3>\n\n<p>Para empezar, los nombres deben ser consistentes, tanto en estilo como en semántica. Es decir, si decidiste usar <strong>camelCase</strong>, debes buscar usarlo en todos lados. Muchos guías de estilo y linters incluso lo sugieren un estilo, o es común tener una costumbre dependiendo del lenguaje (por ejemplo en JS y Java se acostumbra mucho el <strong>camelCase</strong>, mientras que en Python se recomienda usar <strong>snake_case</strong>).</p>\n\n<p>El segundo punto, la semántica tiene que ver con que siempre te refieras a la misma idea con el mismo nombre, por ejemplo, si estás modelando algo que tiene que ver con boletos para un evento, es buena idea nombrar a las variables siempre de la misma forma, como <code class=\"language-plaintext highlighter-rouge\">ticket</code>, en vez de nombrarlas <code class=\"language-plaintext highlighter-rouge\">ticket</code>, <code class=\"language-plaintext highlighter-rouge\">bill</code>, <code class=\"language-plaintext highlighter-rouge\">entrance_ticket</code>, etc.</p>\n\n<p>Si decides usar nombres como <code class=\"language-plaintext highlighter-rouge\">i</code>, <code class=\"language-plaintext highlighter-rouge\">j</code> o <code class=\"language-plaintext highlighter-rouge\">n</code> para numerar cosas o en bloques, asegúrate de que tengan la misma semántica en todos lados, por ejemplo, usa <code class=\"language-plaintext highlighter-rouge\">i</code> para el primer índice en un ciclo, y <code class=\"language-plaintext highlighter-rouge\">j</code> para un índice interno.</p>\n\n<p>Tener un sistema de nombrado consistente hará que la <strong>carga cognitiva</strong> que requiere programar en tu base de código disminuya.</p>\n\n<h3 id=\"interfaces\">Interfaces</h3>\n\n<p>Crear una interfaz (o una clase abstracta, o una estructura, o un protocolo) o cualquier cosa que sirva para definir un <em>contrato</em> para un conjunto de módulos que hagan cosas similares, permitirá que tú código sea más fácil y rápido de entender. Basta con entender una sola de las implementaciones para comprender todas las demás.</p>\n\n<p>El ejemplo perfecto son los métodos de pago en un sistema de eCommerce. En vez de inventar cada vez un una nueva interfaz, puedes definir que la interfaz común sea algo como:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">PaymentMethod</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\"\n    Defines the interface for all payment methods\n    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">charge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refund</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">void</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n\n<p>Si tu lenguaje no tiene, puedes documentar y dejar claro para tu equipo cómo deben cumplirse las interfaces y contratos entre los diferentes módulos.</p>\n\n<h3 id=\"patrones-de-diseño-y-principios-de-programación\">Patrones de diseño y principios de programación</h3>\n\n<p>Muchas soluciones comunes a problemas comunes que encontramos en el desarrollo se han definido claramente y nombrado, para poder ser usadas y entendidas como una receta por muchos programadores.</p>\n\n<p>A estas soluciones las llamamos <strong>patrones de diseño</strong> y la familiaridad con ellos, pueden hacer que tú base de código se más fácil de mantener. Usarlos cuando es adecuado, puede ayudarte a darle consistencia a tu código, lo mismo que otro principios de programación, como por ejemplo, inversión de dependencias.</p>\n\n<p>Sólo debes tener en cuenta que para que tu equipo se beneficie de esto, debe <em>conocer</em> estas soluciones, ya que ese es uno de los principales objetivos de los patrones: que los programadores tengan un lenguaje común de soluciones que los ayuden a comunicarse más fácil.</p>\n\n<h2 id=\"invariantes\">Invariantes</h2>\n\n<p>Una <strong>condición que siempre se cumple</strong> en tu programa es una invariante. Por ejemplo, muchos los lenguajes funcionales te aseguran que todo es una expresión, por lo que siempre puedes usar cualquier construcción del lenguaje como algo que te devuelve un valor.</p>\n\n<p>Establecer invariantes en tu base de código y estilo de programación, ayudará a que el código sea consistente. Por ejemplo, en JQuery se creo la invariante de que todas las funciones que usan un elemento, devuelven este mismo elemento, por lo que puedes encadenar llamadas y siempre funcionará.</p>\n\n<p>Piensa en cosas que puedas hacer invariantes y ayudarás a que tu código sea más consistente.</p>\n\n<h2 id=\"asegura-la-consistencia-en-el-código\">Asegura la consistencia en el código</h2>\n\n<p>Hay varias formas de asegurar que tu equipo cree código consistente, no son excluyentes, sino que se ayudan unas a otras.</p>\n\n<p>La primera forma, y la más fuerte, es mediante el aseguramiento automático del cumplimiento de las reglas que pueden ser representadas en alguna herramienta. Por ejemplo, los <strong>linters</strong>, verificadores de complejidad del código, combinados con las herramientas dadas por los sistemas de versionamiento  de código (ver <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks\">git hooks</a>).</p>\n\n<p>Este conjunto de herramientas podría verificar y obligar que se cumplan las reglas de formateo de código y otras medidas de calidad.</p>\n\n<p>Otra herramienta es la <strong>documentación</strong>, y yo diría que es la más importante porque es en la que se define todas las cosas que deberían ser uniformes y trasciende a las personas, estructuras de equipo y herramientas. Es muy importante que (de preferencia) al iniciar el proyecto crees una guía de estilo y sugerencias de uniformidad que ayuden a tu equipo a crear código uniforme. Como te imaginarás, esto es trabajo extra, pero vale la pena.</p>\n\n<p>Finalmente <em>tienes</em> que promover la consistencia con tu ejemplo y mediante las revisiones de código, si las tienes. Cuando escribas código nuevo, busca la guía de estilo y las convenciones. Si no son explícitas, observa el código para que veas lo que puedes extraer como convención.</p>\n\n<h2 id=\"mantén-la-consistencia\">Mantén la consistencia</h2>\n\n<p>Es muy fácil querer cambiar algo porque encontramos una forma diferente de hacer las cosas que preferimos por gusto o porque es un poquito mejor. En estos casos, tienes que pensar muy bien si vale la pena romper la consistencia de tu base de código por una mejora.</p>\n\n<p>Como en muchas ocasiones en el código, esto implica un intercambio de valor y como responsable de esta decisión, tienes que evaluar los pros y los contras. Piensa: ¿me va a dar tanta ventaja como para que valga la pena meter esta complejidad extra? ¿vale tanto la pena para que haga replique este cambio en todo los otros lugares en los qu se hace esto?</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Mantener la consistencia, en la base de código es algo que vale la pena para reducir el esfuerzo cognitivo que a los desarrolladores les cuesta trabajar en tu código. Esto ayudará a que tu código sea mantenible y sea más probable que tenga una larga vida.</p>\n",
      "date_published": "Thu, 02 Jun 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/01/03/aprendiendo-desarrollo-efectivamente.html",
      "url": "https://blog.thedojo.mx/2022/01/03/aprendiendo-desarrollo-efectivamente.html",
      "title": "Aprendiendo desarrollo efectivamente",
      "content_html": "<p>Desde que comenzamos en la escuela, a muy pocos de nosotros nos han enseñado técnicas para aprender efectivamente, aunque la escuela trata de aprender lo más efectivamente posible.</p>\n\n<p>El desarrollo de software es un campo muy amplio en el que tenemos que aprender constantemente, sea por el cambio de las tecnologías, porque tenemos que aprender del área en la que estamos aplicando nuestro conocimiento tecnológico para crear software efectivo o simplemente porque queremos cambiar de área.</p>\n\n<p>En este artículo hablaremos sobre algunas de las cosas que el libro <a href=\"https://amzn.to/3r20CYr\">“A Mind for Numbers”</a><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> de <a href=\"https://barbaraoakley.com/\">Barbara Oakley</a> nos enseña sobre el aprendizaje de temas difíciles, como las matemáticas y las ciencias. Considerando que el desarrollo de software tiene temas difíciles, creemos que es aplicable lo mencionado en este libro.</p>\n\n<p>Primero hablemos de las bases de las recomendaciones que da el libro: los modos en los que puede estar tu cerebro, y las partes que ocupa para cada tipo.</p>\n\n<h2 id=\"modo-enfocado\">Modo enfocado</h2>\n\n<p>En este modo, llamado <strong>estado de alta atención</strong>, tu cerebro está <strong>concentrado</strong> en una tarea que tienes que lograr, como escribir este artículo, estudiar un tema específico o resolver un algoritmo. Digamos que todas las energías de tu cerebro están destinadas a esta tarea y no <em>divagas</em> en diferentes temas.</p>\n\n<p>Este modo es muy bueno para <em>terminar o avanzar</em> las tareas del día a día y para evitar errores mientras haces algo importante, pero no es muy bueno para aprovechar el poder natural de tu cerebro, ya que utilizamos las <em>funciones ejecutivas</em>, que nos permiten mantenernos atentos a algo pero nos cuestan mucha energía. La funciones ejecutivas se encuentran situadas principalmente en la corteza prefrontal.</p>\n\n<p>El modo enfocado es necesario para aprender, ya que podremos recordar lo que hemos estudiado en este modo, o hacer conexiones conscientes con otras cosas que ya sepamos. En este modo resolvemos problemas de forma secuencial y analítica.</p>\n\n<h2 id=\"modo-difuso\">Modo difuso</h2>\n\n<p>Oficialmente podemos llamar a este el <em>modo de descanso</em>. Este es el modo en el que estamos cuando no estamos pensando o aplicando nuestra mente a nada específico, digamos que es el estado por defecto del cerebro. Tu foco de atención está brincando de un lugar a otro constantemente. El modo difuso consume menos energía porque no necesitamos controlar la mente para hacerlo. El modo difuso entra en acción cuando estamos haciendo tareas que tenemos completamente dominadas, como caminar, bañarnos, o comer, en ninguna de estas actividades estamos completamente concentrados y nuestra mente está viajando por diferentes lugares.</p>\n\n<p>En el modo difuso podemos conectar ideas usando la capacidad del cerebro de hacer conexiones naturalmente, o brincar de un tema a otro sin ningún esfuerzo.</p>\n\n<p>Podríamos creer que el modo difuso es <em>malo</em> para el estudio, sin embargo, en este modo es cuando nuestro cerebro procesa inconscientemente lo que hemos estudiado de modo consciente y hace que permanezca. Por lo tanto, el modo difuso <strong>es esencial para aprender</strong>.</p>\n\n<p>El modo difuso no utiliza una parte específica del cerebro, sino que se reparte. Al consumir poca energía relativamente y utilizar todo el poder del cerebro, es una herramienta imprescindible para resolver problemas.</p>\n\n<p>Recuerda que en parte somos máquinas biológicas que necesitan procesos químicos para funcionar y los modos en los que puede estar nuestra mente se complementan para que funcionemos y para que aprendamos efectivamente.</p>\n\n<h2 id=\"técnicas-de-aprendizaje\">Técnicas de aprendizaje</h2>\n\n<p>Ahora que ya conocemos los dos modos en los que nuestro cerebro puede funcionar, veamos técnicas que nos ayudarán a aprovecharnos de esto para aprender de manera eficiente.</p>\n\n<h3 id=\"controla-el-tiempo-que-dedicas-a-estudiar\">Controla el tiempo que dedicas a estudiar</h3>\n\n<p>Nuestro cerebro tiene una <em>capacidad limitada</em> de absorción de información por unidad de tiempo, necesitamos tiempo para procesar las cosas y entender lo que sigue mejor, además de que la repetición a través del tiempo nos ayuda a retener la información por más tiempo. Es por eso que es muy importante controlar cuánto tiempo dedicas a estudiar, cuándo se lo dedicamos y las condiciones físicas y mentales en las que estamos.</p>\n\n<p>Dos técnicas que te pueden ayudar a dedicarle el tiempo <em>correctamente</em> al estudio son:</p>\n\n<ol>\n  <li>\n    <p><strong>Programar sesiones de estudio de un tema cortas pero constantes</strong>. Es mucho mejor dedicar una hora de estudio diaria durante diez d\nías, que 10 horas un día al mismo tema. Hacerlo de manera espaciada permitirá a tu cerebro procesar la información durante los periodos en los que está en el modo difuso, además de que mantener el modo enfocado por periodos cortos es más fácil y eficiente que hacerlo durante periodos largos. Esto se conoce como <strong>práctica distribuida</strong>.</p>\n  </li>\n  <li>\n    <p><strong>Cambiar constantemente de modos de pensamiento</strong>. Cambiar entre el modo enfocado y el modo difuso te ayudará aprender mejor y te mantendrá fresco. Una técnica que puedes aplicar es la técnica <em>pomodoro</em> en la que programas periodos de estudio o trabajo de 25 minutos y un descanso de 5 minutos. Esta técnica no es efectiva para todos por el tiempo que tardan en enfocarse, pero puedes incrementar los periodos de enfoque para que se acomode a tu estilo. El punto es tener una sesión de estudio <em>estructurada</em> y que te permita cambiar de modos de pensamiento <strong>para aprovechar todo el poder de tu cerebro</strong>.</p>\n  </li>\n</ol>\n\n<p>Estos dos técnicas le darán a tu cerebro tiempo para usar todo su poder: le darán al modo difuso tiempo para trabajar en problemas difíciles.</p>\n\n<h3 id=\"crea-un-mapa-de-lo-que-aprenderás\">Crea un mapa de lo que aprenderás</h3>\n\n<p>Es muy importante que cuando tengas un tema difícil que aprender hagas una sesión de pre-estudio, en el que veas lo que aprenderás. Esto lo puedes hacer mirando el índice si existe, las preguntas que guían el estudio en caso de que haya, leyendo (o viendo, o escuchando) solamente la introducción y conclusión y fijándote en los subtemas, capítulos, negritas, recuadros, etc.</p>\n\n<p>Esta sesión de pre-estudio te ayudará a organizar tus pensamientos sobre lo que aprenderás, un mapa que tendrá los puntos principales a aprender que después rellanarás estudiando a fondo el tema.</p>\n\n<h2 id=\"evitar-la-ilusión-de-aprendizaje\">Evitar la ilusión de aprendizaje</h2>\n\n<p>Una parte muy importante de aprender es evitar la <em>sensación</em> falsa de que aprendimos algo sin realmente haberlo aprendido. ¿Cómo podemos evitar esto?</p>\n\n<h3 id=\"auto-exámenes\">Auto-exámenes</h3>\n\n<p>Una de las formas más efectivas es buscar o fabricar exámenes o cuestionarios de las cosas de las que deberíamos ser conscientes una vez que terminemos de estudiar el tema. Hacer estos exámenes o prácticas sin consultar el material de estudio te ayudará averiguar si realmente has aprendido algo, y si fallas, tendrás puntos en los cuales mejorar.</p>\n\n<p>Estos auto-exámenes se han mostrado muy eficaces para muchos estudiantes de temas complejos.</p>\n\n<h3 id=\"practica-recorta-y-repite\">Practica, recorta y repite</h3>\n\n<p>Algunas de las cosas que tenemos que aprender consiste en una serie de pasos por ser un problema complejo. Una técnica de aprendizaje es aislar una parte del problema y practicarla hasta que la dominemos en diferentes contextos. Imagina por ejemplo que quieres dominar la configuración de servidores. Lo que más se te dificulta es la configuración de la parte de HTTPS. Entonces, deberías repetir estar parte con diferentes variables y opciones hasta que lo puedas hacer sin dificultad.</p>\n\n<h2 id=\"mejora-tu-memoria\">Mejora tu memoria</h2>\n\n<p>Finalmente hablemos de algo que ha adquirido muy mala fama: la <em>memoria</em>. Debido a que en la escuela nos hacían aprender de memoria cosas que parecen inútiles a lo largo de la vida, hemos demonizado el memorizar cosas. Sin embargo, memorizar es algo imprescindible para la resolución de problemas efectiva y la creatividad. Veamos algunas técnicas que te ayudarán a memorizar de manera más eficiente:</p>\n\n<ol>\n  <li><strong>Palacios de memoria</strong>. Esta es una técnica que consiste en aprovechar nuestra capacidad de ubicación espacial para memorizar cosas fácilmente. Puedes investigar más sobre ella y ver si te sirve.</li>\n  <li><strong>Repetición espaciada</strong>. Casi todo lo que consumimos lo olvidamos, a menos que se nos repita constantemente. La repetición espaciada consiste en repasar un tema con frecuencia cada vez más grande, para poder retenerlo a largo plazo. Puedes usar herramientas como <a href=\"https://apps.ankiweb.net/\">Anki</a> para automatizar esto.</li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Hemos hablado de los temas que a mi parecer son más aplicables a los desarrolladores. El libro habla de otros temas como la presentación de exámenes, la organización del tiempo, la motivación, etc. Te invito a que le eches un ojo si estás en la escuela y sobre todo si estás en un área de ciencias o físico-matemáticas.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Link de afiliados de Amazon <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Mon, 03 Jan 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/30/criptografia-para-desarrolladores-codigos-de-autenticacion-de-mensajes.html",
      "url": "https://blog.thedojo.mx/2021/12/30/criptografia-para-desarrolladores-codigos-de-autenticacion-de-mensajes.html",
      "title": "Criptografía para desarrolladores: Códigos de autenticación de mensajes",
      "content_html": "<p>Ya hemos hablado de los cifrados de bloque, de flujo y de los hashes, ahora hablemos de un híbrido entre ellos que funciona como un hash pero usa una llave como un cifrado. El uso principal de este tipo de algoritmos es la autenticación y verificación de mensajes, pero también pueden ser usados para generar derivados de una llave, por su carácter pseudo-aleatorio.</p>\n\n<p>En general este tipo de algoritmos se llaman <strong>hashes con llave</strong> o <em>Keyed Hashes</em>. Empecemos a hablar del tipo más sencillo y usado: la generación de códigos de autenticación de mensajes.</p>\n\n<h2 id=\"message-authentication-codes-macs\">Message Authentication Codes (MACs)</h2>\n\n<p>Un código de autenticación de mensajes es una función que recibe un mensaje y <em>una llave</em> (secreta) y devuelve lo que llamamos una etiqueta, que es una cadena de bits de los tamaños comunes en los hashes.</p>\n\n<p>En este tipo de algoritmos, si mantenemos la llave secreta, y la compartimos solamente con quien necesitamos verificar la autenticidad del mensaje, podemos comprobar el <em>origen</em> (gracias a que sabemos que la llave está protegida) y que el mensaje está intacto (gracias a que las propiedades del hash).</p>\n\n<p>Una forma de crear un hash con llave es simplemente poniendo la llave antes o después del mensaje que queremos autenticar y usando un algoritmo de hashing normal, <strong>aunque ninguna de las dos formas es muy segura</strong>, ya que es vulnerable a ataques de <a href=\"https://en.wikipedia.org/wiki/Length_extension_attack\"><em>extensión de longitud</em></a> o se pueden encontrar colisiones si se usa una llave de tamaño variable. Un ejemplo en Python sería el siguiente:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">sha3_512</span>\n\n<span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">'mi llave super secreta'</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s\">'mi mensaje que puede o no ser secreto, pero del que me importa el origen y que no haya sido cambiado'</span>\n\n<span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">sha3_512</span><span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"n\">message</span><span class=\"p\">).</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n</code></pre></div></div>\n\n<p>(Afortunadamente, ningún algoritmo de la familia SHA-3 es vulnerable a los ataques de extensión de longitud, por eso lo usamos aquí para el ejemplo)</p>\n\n<p>A nuestra contraparte le enviamos el mensaje junto con el tag y para verificar la autenticidad del mensaje el receptor debe hacer exactamente la misma operación, por lo que necesita tener previamente la llave. Si el tag resultante es igual, quiere decir que el mensaje es auténtico y no ha sido modificado, reemplazado o viene de alguien que no tiene la llave.</p>\n\n<p>Para que un MAC sea seguro, debe ser imposible crear un tag que parezca venir de alguien con la llave, sea por falsificarlo directamente o por poder adivinar la llave.</p>\n\n<p>Los MACs más comunes son los que están basados en hashes, conocidos como <strong>HMAC</strong>, un término que seguro has visto si has estado desarrollando por algún tiempo.</p>\n\n<h2 id=\"códigos-de-autenticación-de-mensajes-basados-en-hashes-hmac\">Códigos de autenticación de mensajes basados en hashes (HMAC)</h2>\n\n<p>Un <em>Hash based Message Authentication Code</em> es un MAC creado a partir de un hash, operando de una manera diferente a simplemente poner antes o después la llave. Los HMACs hacen uso de dos valores adicionales, un padding interno y un padding externo. Los combinan con la llave para crear una etiqueta que no sea vulnerable a los ataques de extensión de longitud.</p>\n\n<p>La construcción de HMAC funciona así:</p>\n\n<ol>\n  <li>Se combina la llave con el padding interno mediante la operación XOR.</li>\n  <li>Se hashea la la combinación de la llave y el padding interno junto con el mensaje del que queremos crear la etiqueta (a esto lo llamaremos H1).</li>\n  <li>Se combina la llave con el padding externo mediante la operación XOR.</li>\n  <li>Se hashea la la combinación de la llave y el padding externo junto con H1, el resultado de esto es la etiqueta de autenticación.</li>\n</ol>\n\n<p>Sin embargo, se conoce un ataque efectivos contra los HMACs que permiten falsificar tags computando <strong>2^n/2 operaciones</strong> en promedio, lo cuál no es cualquier cosa, pero un atacante motivado (y con recursos) podría lograrlo sin problemas si <strong>n</strong>, el tamanño interno del estado del hash es muy pequeño. Un hash moderno tiene un estado de 512 bits, por lo que un ataque de tamaño de 2^n512/2 = 2^256 es impráctico.</p>\n\n<p>Ya que un HMAC están basado en un algoritmo de hash, cuando se nombra se usa el nombre de este, por ejemplo: HMAC-SHA-256 o HMAC-SHA-3-512.</p>\n\n<h2 id=\"códigos-de-autenticación-de-mensajes-basados-en-cifrados-de-bloque-cmac\">Códigos de autenticación de mensajes basados en cifrados de bloque (CMAC)</h2>\n\n<p>Ya que los hashes pueden estar basados en cifrados de bloque, una construcción más directa es usar un cifrado de bloque como la base para un MAC. Así nacen lo CMACs, códigos de autenticación de mensajes basados en cifrados de bloque, por ejemplo AES-CMAC.\nAunque se siguen usando en algunos protocolos de seguridad, los más MACs más eficientes son los que no se basan en Hashes o cifrados de bloque, sino que tienen un diseño independiente.</p>\n\n<h2 id=\"macs-con-diseño-independiente\">MACs con diseño independiente</h2>\n\n<p>Un MAC seguro es más fácil de lograr que un hash completamente funcional y seguro o que un cifrado de bloque con las mismas características, ya que al usar un llave secreta evitan que se pueda atacar tan fácilmente como un hash y al exponer una etiqueta pequeña, revelan menos información que un cifrado de bloque.</p>\n\n<p>Es por eso que un MAC no requiere todo el poder de un hash ni de un cifrado de bloque. Gracias a esto se han dieseñado algortimos que usan esta ventaja para ser más eficientes. Hablemos de tres ejemplos:</p>\n\n<ol>\n  <li><a href=\"http://cr.yp.to/siphash/siphash-20120918.pdf\">SipHash</a>: Es una familia de algoritmos optimizada para autenticar mensajes cortos, originalmente diseñada para reemplazar las funciones hash en los diccionarios implmentados como hashtables.</li>\n  <li><a href=\"http://cr.yp.to/mac/poly1305-20050329.pdf\">Poly1305</a>: Es una función de autenticación de mensajes muy rápida y eficiente, más que cualquiera basada completamente en un algoritmo de bloque o un hash, usada para autenticar paquetes en dispositivos de bajo rendimiento en Android, por ejemplo.</li>\n  <li><a href=\"https://eprint.iacr.org/2005/088.pdf\">Pelican 2.0</a>: Es un MAC basado en AES (Rijndael), pero que no utiliza todo su poder y que funciona de forma eficiente gracias a esto. Sin embargo, este algoritmo no está implementado en ningún lugar importante.</li>\n</ol>\n\n<p>Si lo que buscas es eficiencia, manteniendo la seguridad relativa de tus etiquetas de autenticación, este tipo de MACs son los que deberías usar.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Conocer sobre los códigos de autenticación de mensajes es importante para no navegar perdidos entre todas esas siglas que luego vemos en las suites de seguridad de IPSec, TLS, SSL, SSH, HTTPS, etc. Ahora ya sabes lo que significa HMAC-SHA-512, AES-CMAC o Poly1305.</p>\n",
      "date_published": "Thu, 30 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/26/el-tiempo-monotono.html",
      "url": "https://blog.thedojo.mx/2021/12/26/el-tiempo-monotono.html",
      "title": "El tiempo monótono",
      "content_html": "<p>Saber cuánto tiempo ha pasado desde cierto evento en nuestro programa es algo que podemos requerir en algunos casos. Uno de los casos que más he visto es cuando se está midiendo el tiempo que tarda una parte del programa o un evento externo.</p>\n\n<p>El <strong>tiempo o reloj monótono</strong> es un concepto que todo programador debería conocer, para evitar errores y código frágil al <em>medir</em> el tiempo en los programas.</p>\n\n<h2 id=\"el-reloj-de-pared\">El reloj de “pared”</h2>\n\n<p>Lo primero que se nos viene a la cabeza cuando se trata de medir el tiempo entre dos eventos de nuestro programa es usar alguna función de nuestro lenguaje de programación que obtenga la fecha y hora actual. Este reloj o tiempo se llama de “tiempo real” y algunos programadores le llaman el reloj de pared, porque es como si voltearas a ver un reloj de esos que pones en tu pared para que te de la hora constantemente.</p>\n\n<p>Un ejemplo de esto en Python sería:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># hacer algo (lo que queremos medir)\n</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Esto puede parecer inofensivo, pero tiene una falla que hace a nuestro programa frágil ante eventualidades fuera del sistema. La función <code class=\"language-plaintext highlighter-rouge\">time.time()</code> devuelve un número de segundos desde el 1 de Enero de 1970 (esta fecha conocida como el <strong>Epoch</strong>) como un flotante. Este número siempre será incremental, es decir, no <em>debería</em> devolverte un número menor que una llamada previa. Sin embargo, para calcular ese número de segundos (conocido como el <strong>Tiempo Unix</strong>), Python se basa en la hora del <em>sistema</em> en el que está corriendo el programa.</p>\n\n<p>¿Alcanzas a notar por qué esta forma de calcular cuánto tiempo ha pasado desde un evento es frágil? Por ejemplo, imagina que entre una medida de tiempo (en nuestro programa, la variable <code class=\"language-plaintext highlighter-rouge\">start</code>) y la siguiente(<code class=\"language-plaintext highlighter-rouge\">end</code>), ocurriera un cambio de hora en el sistema. Puede ser que alguien esté jugando con las configuraciones o que por pura casualidad el sistema haya ajustado el tiempo por uno de los segundos de ajuste de nuestro calendario (leap seconds) o que corra durante el cambio de hora por el horario de verano.</p>\n\n<p>Todas estas circunstancias podrían afectar como mide el tiempo tu programa si usamos el reloj del sistema. Es aquí en donde entra el tiempo o reloj monótono.</p>\n\n<h2 id=\"el-tiempo-monótono\">El tiempo monótono</h2>\n\n<p>El reloj monótono es un <strong>contador del sistema que sólo avanza hacia adelante</strong>, contando a partir de un punto arbitrario en el pasado. Este reloj no tiene conexión con el calendario y el tiempo real del sistema, sino que simplemente sirve para medir el tiempo que ha pasado (<strong>siempre en aumento</strong>) desde el punto que se eligió.</p>\n\n<p>Así, este reloj es confiable para medir el tiempo que pasó entre dos eventos, porque podemos tener la seguridad de que el una llamada posterior a la lectura de este reloj <em>siempre</em> va a devolver algo mayor que la lectura anterior.</p>\n\n<p>La manera de usarlo en Python también es mediante el módulo <code class=\"language-plaintext highlighter-rouge\">time</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">monotonic</span><span class=\"p\">()</span>\n<span class=\"c1\"># hacer algo (lo que queremos medir)\n</span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">monotonic</span><span class=\"p\">()</span>\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span>\n\n</code></pre></div></div>\n\n<p>La función <code class=\"language-plaintext highlighter-rouge\">time.monotonic()</code> devuelve el tiempo monótono como un flotante, en segundos. Con estas dos puntos que están conectados al mismo marco de referencia obligatoriamente, hacemos que nuestra medición entre los dos eventos sea confiable. Lo mismo sucedería si quisieras coordinar dos sistemas diferentes: cada uno puede confiar en su reloj monótono sabiendo que el tiempo no saltará hacia atrás de ninguna manera.</p>\n\n<p>Con vergüenza te comento que la primera vez que escuché de este concepto fue con más de 10 años de carrera, mediante el libro <a href=\"https://books.altenwald.com/book/elixir\">Elixir para Alquimistas</a> de Manuel Rubio, un libro que recomiendo mucho.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Cuando estés midiendo tiempo o coordinando tareas en tu programa, no confíes en las fechas y horas del sistema en el que está corriendo tu programa. Usa el reloj monótono para garantizar que tienes el mismo marco de referencia siempre que hagas una medición de tiempo. Tu lenguaje de programación debería darte acceso a esta medición, sólo investiga o busca en Google: <em>“Lenguaje X monotonic time”</em>.</p>\n",
      "date_published": "Sun, 26 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/25/matematicas-para-criptografia.html",
      "url": "https://blog.thedojo.mx/2021/12/25/matematicas-para-criptografia.html",
      "title": "Matemáticas para criptografía",
      "content_html": "<p>¿Quieres entender por qué los algoritmos criptográficos pueden <em>prometer</em> seguridad? Todos están basados en operaciones matemáticas, problemas difíciles de resolver, probabilidad y estadística.</p>\n\n<p>Veamos un plan de estudios de matemáticas que podrías usar para adquirir las habilidades matemáticas necesarias para entender mejor los algoritmos criptográficos.</p>\n\n<h2 id=\"básico-básico\">Básico básico</h2>\n\n<p>Empecemos por los fundamentos más profundos que debes tener, que hasta pueden parecer obvios. Lo importante es que tengas <em>la seguridad de que los dominas</em> y si no, te proporcionamos algunos recursos para que los repases.</p>\n\n<h3 id=\"álgebra\">Álgebra</h3>\n\n<p>Es necesario conocer los procedimientos algebraicos a fondo porque en esto se basa la resolución de problemas de muchas otras áreas. Además la factorización es uno de los problemas más importantes de la criptografía actual, y aquí es donde aprenderás el concepto básico en práctica. Si sientes que te falta aprender un poco, puedes tomar estos cursos:</p>\n\n<ul>\n  <li><a href=\"https://www.khanacademy.org/math/algebra\">Álgebra 1 - Khan Academy</a></li>\n  <li><a href=\"https://www.khanacademy.org/math/algebra2\">Álgebra 2 - Khan Academy</a></li>\n  <li><a href=\"https://www.coursera.org/learn/algebra-basica\">Algebra básica - UNAM</a></li>\n  <li><a href=\"https://platzi.com/cursos/algebra/\">Curso de Álgebra en Platzi</a></li>\n</ul>\n\n<h3 id=\"probabilidad-y-estadística\">Probabilidad y estadística</h3>\n\n<p>Siempre que hablamos de que un algoritmo es seguro, lo decimos basados en la probabilidad de que alguien pueda encontrar una solución a un problema muy difícil en un <em>número de intentos razonable</em>.</p>\n\n<p>Por ejemplo: confiamos en que la probabilidad de que alguien rompa un cifrado es cercana a cero, pero realmente esta probabilidad nunca es cero absoluto, sino algo como <strong>1/2^128</strong> por intento, pero alguien motivado podría hacer <em>miles de millones</em> de intentos. Para poder calcular estas probabilidades hay que entender lo básico de probabilidad y estadística.</p>\n\n<p>La probabilidad también te ayudará a entender lo que es una <strong>distribución de probabilidad</strong>, que es muy importante tanto para atacar algoritmos criptográficos como para verificar que las salidas de estos son seguras.</p>\n\n<p>Puedes aprender un poco de esto en los siguientes cursos:</p>\n\n<ul>\n  <li><a href=\"https://www.khanacademy.org/math/statistics-probability\">Probabilidad y estadística - Khan Academy</a></li>\n  <li><a href=\"https://www.coursera.org/learn/estadistica-probabilidad\">Estadística y Probabilidad - UNAM</a></li>\n</ul>\n\n<h2 id=\"matemáticas-discretas\">Matemáticas discretas</h2>\n\n<p>Me atrevería a decir que esta es la rama <strong>más importante de matemáticas</strong> que debes de conocer como programador y como criptógrafo. La mayoría de los operaciones criptográficas y de algoritmos de programación están basadas en el conocimiento que aprenderás aquí. <a href=\"https://blog.thedojo.mx/2019/12/25/las-matematicas-que-debes-saber-para-programar.html#l%C3%B3gica-matem%C3%A1ticas-discretas\">Ya hemos mencionado</a> que las matemáticas discretas son el estudio de las cosas que se pueden contar, sean finitas o infinitas, a diferencia de las matemáticas continuas que estudian los números reales o cosas que son continuas, incontables y sin divisiones claras.</p>\n\n<p>A continuación te listamos algunos de los temas que debes dominar o por lo menos conocer bien.</p>\n\n<h3 id=\"lógica\">Lógica</h3>\n\n<p>La lógica tiene la intención de formalizar el razonamiento de tal manera que lo podamos estudiar, entender y aplicar a otras áreas.</p>\n\n<p>En este tema se habla de cosas como tablas de verdad, lógica proposicional, deducción, <a href=\"https://www.fing.edu.uy/~amiquel/fundamentos/teoriasymodelos.pdf\">teorías y lógica de primer orden</a>, etc.</p>\n\n<h3 id=\"teoría-de-números\">Teoría de números</h3>\n\n<p>La teoría de números trata acerca de los números enteros, sus propiedades, operaciones y relaciones. Esta es <strong>la base de varios problemas difíciles que sirven para crear los algoritmos criptográficos modernos</strong>. En esta rama se estudia la divisibilidad, los números primos, la aritmética modular y los algoritmos relacionados con estas operaciones.</p>\n\n<p>Si no vas a estudiar nada más, entender los temas de un curso de teoría de números enfocado en criptografía es suficiente para no sentirte sin rumbo. Estos cursos pueden ayudarte a aprender lo que necesitas:</p>\n\n<ul>\n  <li><a href=\"https://www.coursera.org/learn/number-theory-cryptography\">Number Theory for Cryptography</a></li>\n  <li><a href=\"http://personal.cimat.mx:8181/~hgallegos/teaching/teoriaDeNumeros/\">Temario con Bibliografía y tareas del curso de Teoría de Números del CIMAT</a></li>\n  <li><a href=\"https://www.coursera.org/learn/mathematical-foundations-cryptography\">Mathematical foundations of cryptography</a></li>\n  <li><a href=\"https://math.libretexts.org/Bookshelves/Combinatorics_and_Discrete_Mathematics/Yet_Another_Introductory_Number_Theory_Textbook_-_Cryptology_Emphasis_(Poritz)\">Yet Another Introductory Number Theory Textbook - Cryptology Emphasis</a></li>\n</ul>\n\n<h3 id=\"combinatoria\">Combinatoria</h3>\n\n<p>Esta sub-rama de las matemáticas discretas tiene que ver con el <em>conteo, combinaciones y arreglos de objetos en estructuras discretas</em> (con objetos claramente separados) como los grafos y conjuntos. Normalmente estas estructuras discretas contienen números, pero podrían contener palabras, textos, frases. La combinatoria incluye el conteo de objetos y combinaciones que llevamos a a cabo en probabilidad y estadística: las operaciones de combinación y permutación.</p>\n\n<p>Algunos recursos que te ayudarán a aprender combinatoria a fondo se encuentran aquí: <a href=\"https://math.libretexts.org/Bookshelves/Combinatorics_and_Discrete_Mathematics\">Combinatorics and Discrete Mathematics</a> que tiene un conjunto de libros sobre combinatoria con diferentes enfoques.</p>\n\n<h3 id=\"cursos-de-matemáticas-discretas-generales\">Cursos de matemáticas discretas generales</h3>\n\n<p>Algunos cursos y temarios que puedes tomar son:</p>\n\n<ul>\n  <li><a href=\"https://compilandoconocimiento.com/discretas/\">Curso de matemáticas discretas</a></li>\n  <li><a href=\"https://posgrados.inaoep.mx/archivos/PosCsComputacionales/Curso_Propedeutico/TEMARIOS/2_MateDiscretas-VersionGeneral.pdf\">Temario sobre matemáticas discretas para Maestría en Ciencias de la Computación</a></li>\n</ul>\n\n<h3 id=\"geometría-analítica\">Geometría analítica</h3>\n\n<p>Conocer las propiedades matemáticas de los objetos geométricos te ayudará a comprender intuitivamente algunas de los problemas difíciles en los que está basada la criptografía.</p>\n\n<p>Algunos cursos que puedes tomar:</p>\n\n<ul>\n  <li><a href=\"https://www.coursera.org/learn/https://www.eusal.es/eusal/catalog/book/978-84-1311-463-7trigonometria\">Trigonometría y geometría analítica - UNAM</a></li>\n</ul>\n\n<h2 id=\"álgebra-lineal\">Álgebra lineal</h2>\n\n<p>El álgebra lineal tiene que ver con el estudio de ecuaciones lineales (que pueden ser graficadas en el plano cartesiano con una recta), sus soluciones y su tratamiento a través de vectores y matrices.</p>\n\n<p>Muchas de las técnicas utilizadas en álgebra lineal son ocupadas en criptografía para crear algoritmos seguros que sean imposibles de revertir sin conocer la llave correcta. Un ejemplo es el algoritmo Rijndael, el actual AES.</p>\n\n<p>Algunos recursos que te ayudarána a aprender matemáticas discretas son:</p>\n\n<ul>\n  <li><a href=\"https://www.coursera.org/projects/aprendiendo-python-con-algebra-lineal\">Aprendiendo Python con Álgebra Lineal</a></li>\n  <li><a href=\"https://www.edx.org/course/fundamentos-de-algebra-lineal-2?index=product&amp;queryID=4f34318ca69382d83eb24655d433f655&amp;position=1\">Fundamentos de álgebra lineal</a></li>\n  <li><a href=\"http://buzzard.ups.edu/courses/2013spring/projects/berger-aes-ups-434-2013.pdf\">Cómo funciona AES (Rijndael)</a></li>\n</ul>\n\n<h2 id=\"opcionales\">Opcionales</h2>\n\n<p>Si quieres avanzar a campos muy adelantados de la criptografía, debes estudias campos aún más específicos de las matemáticas discretas como:</p>\n\n<ul>\n  <li>Teoría de grupos</li>\n  <li>Teoría de grafos</li>\n  <li>Retículas (algo muy importante para la criptografía post-cuántica)</li>\n</ul>\n\n<h2 id=\"cursos-completos\">Cursos completos</h2>\n\n<p>Para finalizar, te quiero presentar recursos que tienen un conjunto completo básico de todas las matemáticas necesarias para entender los algoritmos criptográficos modernos.</p>\n\n<ul>\n  <li><a href=\"https://www.eusal.es/eusal/catalog/book/978-84-1311-463-7\">MANUAL DE CRIPTOGRAFÍA: FUNDAMENTOS MATEMÁTICOS DE LA CRIPTOGRAFÍA PARA UN ESTUDIANTE DE GRADO</a> - Tiene apartados para todos los tipos de algoritmos criptográficos usados en la actualidad, explicando su soporte matemático. Si quieres profundizar en algún tema de estos, podrías tomar el curso específico que sugerimos aquí.</li>\n  <li><a href=\"https://www.coursera.org/specializations/discrete-mathematics\">Especialización en matemáticas discretas en Coursera</a> - Tiene todos los temas relacionados con matemáticas para computación y criptografía divididos en varios cursos, lo puedes tomar de manera gratuita.</li>\n  <li><a href=\"https://www.coursera.org/learn/mathematical-foundations-cryptography?\">Mathematical foundations of Cryptography</a> - Tiene todos los temas necesarios para entender la criptografía, incluyendo los temas selectos de todas las matemáticas para ir directo al grano. Esto requerirá que tengas cubierto las matemáticas básicas para no perderte.</li>\n  <li><a href=\"https://www.isical.ac.in/~rcbose/mtechCrS.pdf\">Temario de maestría en seguridad de la ISICAL</a> - Tiene todos los cursos que alguien debería de tomar para especializarse en ciberseguridad, con temarios completos y bibliografía, lo que te puede servir como una guía si lo que prefieres es aprender de los libros.</li>\n</ul>\n\n<p>Bonus: <a href=\"https://www.coursera.org/learn/cryptography-boolean-functions\">Cryptogaphy, Boolean Functions and related problems</a></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Como podrás observar, hay una gran cantidad de recursos para aprender lo necesario para entender la criptografía a fondo, desde sus bases matemáticas. Puedes usar estas recomendaciones como guía, o ver los temas y buscar tus propios recursos para seguir aprendiendo. Si tienes alguna recomendación no dudes en compartirla con nosotros para poder actualizar nuestra lista y cada vez hacerla mejor.</p>\n",
      "date_published": "Sat, 25 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/15/http-1-1-http-2-y-http-3.html",
      "url": "https://blog.thedojo.mx/2021/12/15/http-1-1-http-2-y-http-3.html",
      "title": "HTTP 1.1, HTTP/2 y HTTP/3",
      "content_html": "<p>HTTP es el estándar más importante de la web actual, porque permite la transmisión de información entre los diferentes actores de la red. Hablemos un poco de su evolución como estándar para servir mejor a los intereses de la industria y de los usuarios y de su estado actual.</p>\n\n<table>\n  <tbody>\n    <tr>\n      <td><strong>TL;DR</strong></td>\n      <td>HTTP/3 hará que tus páginas web descarguen mucho más rápido, gracias a que trabaja de forma diferente a bajo nivel. Empieza a aprenderlo porque esto vendrá con nuevos retos para los desarrolladores.</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"qué-es-http\">¿Qué es HTTP?</h2>\n\n<p>El <strong>Protocolo de Transferencia de Hyper-Texto</strong> (<strong>H</strong>yper <strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol) es un estándar definido en el <a href=\"https://tools.ietf.org/html/rfc2616\">RFC 2616</a> que permite la comunicación entre dos computadoras a nivel de aplicación, es decir, a nivel de software y con contenido relacionado a lo que tu aplicación de red está haciendo.</p>\n\n<p>El que sea un protocolo a nivel de aplicación también implica que necesita otros protocolos debajo de él para encargarse de otras partes del proceso de comunicación, como la conexión física, la conexión de software, el transporte de datos y el enrutamiento de la información.</p>\n\n<p>HTTP es un protocolo con arquitectura <strong>cliente-servidor</strong>, en el que un cliente hace <em>peticiones</em> (requests) al servidor y el servidor contesta con la información solicitada, a lo que nos referimos como <em>respuesta</em> (response).</p>\n\n<p>La parte de hyper-texto nacio por la necesidad de transferir información más rica que el texto plano, es decir, con metadatos, links a otra parte de la información u otros documentos. Al agregar imágenes, videos y otro tipo de información multimedia lo estamos convirtiendo en <strong>Hypermedia</strong>, información relacionada entre sí que no es puro texto.</p>\n\n<h2 id=\"http11\">HTTP/1.1</h2>\n\n<p>Este es el estándar que la mayoría de nosotros consideraríamos como “HTTP”, ha estado en uso por bastante tiempo. La versión 1.0 fue liberada en 1996, pero en 1997 se liberó la versión 1.1, que es lo que la mayoría de los devs que “crecimos” junto con la web llamaríamos <em>HTTP</em>.</p>\n\n<p>Las limitaciones técnicas de HTTP/1.1 son lo que han hecho que necesitemos un nuevo estándar, ya que la web actual requiere muchas más descargas que cuando se creó. En 2021 se descargan aproximadamente 1.9 MB en promedio por página, pero esto repartido en múltiples archivos HTML, CSS, JavaScript e imágenes (74 en promedio). Puedes ver más información sobre el tamaño de las páginas web aquí: <a href=\"https://httparchive.org/reports/page-weight\">HTTP Archive - Page Weight</a></p>\n\n<p>HTTP 1.1 solamente permite descargar un archivo a la vez, por lo que los navegadores tienen que abrir múltiples conexiones a un mismo servidor, limitadas por los recursos de la computadora. Esto crea un cuello de botella que puede hacer que la experiencia en web no sea óptima.</p>\n\n<p>Por eso llegó HTTP/2.</p>\n<h2 id=\"http2\">HTTP/2</h2>\n\n<p>En 2015 por fin llegó una especificación más adecuada para la web moderna que HTTP/1.1: <a href=\"https://datatracker.ietf.org/doc/html/rfc7540\">HTTP/2</a>.</p>\n\n<p>HTTP/2 se centra en la <em>multiplexación de conexiones</em>, es decir, permite mantener varias “conversaciones” con el servidor al mismo tiempo en la misma conexión. Esto permite la descarga de múltiples archivos simultáneamente sin tener que consumir tantos recursos como en HTTP/1.1.</p>\n\n<p>El problema con HTTP/2 es que sigue funcionando sobre TCP, que no permite la multiplexación de conexiones, así al intentar la descarga de archivos paralelamente se pueden producir cuellos de botella ya que si se presentan problemas de descarga con un archivo, hay que esperar hasta que llegue el paquete que corrija el error, pudiendo este tardar mucho tiempo por estar en la misma conexión en la que se están descargando otros archivos.</p>\n\n<p>Esto último causa que HTTP/2 sea insuficiente para las necesidades actuales, e incluso más lento que HTTP/1.1 en muchos casos de uso de la vida real: cuando las conexiones son poco estables. HTTP/2 fue bastante promovido por Google por un tiempo, pero ahora ha sido reemplazado por HTTP/3, que promete ser mucho mejor.</p>\n\n<h2 id=\"http3\">HTTP/3</h2>\n\n<p>El último borrador del estándar fue publicado en <a href=\"https://quicwg.org/base-drafts/draft-ietf-quic-http.html#name-delegation-to-quic\">Mayo de 2021</a>, o sea que es muy, muy nuevo, todavía no está en uso ampliamente y el estándar todavía no es el final.</p>\n\n<p>HTTP/3 es básicamente las mejoras propuestas por HTTP/2 sobre una nueva capa de transporte que no es TCP: <a href=\"https://quicwg.org/\">QUIC</a>. QUIC está basado en UDP, <strong>pero establece la forma de crear canales con control de flujo, cifrado y multiplexación</strong> para poder servir mejor a la web moderna.</p>\n\n<p>QUIC permite <a href=\"https://www.rfc-editor.org/rfc/rfc9000.html\">usar TLS</a> para establecer los parámetros de cifrado e incluso permite adelantar el intercambio de información antes de negociar completamente los parámetros de cifrado, haciendo un poco más débil el cifrado pero incrementando la velocidad de descarga.</p>\n\n<h2 id=\"benchmarks\">Benchmarks</h2>\n\n<p>HTTP/3 es mucho mucho más rápido que HTTP/1.1 y mucho más <em>confiable y rápido</em> que HTTP/2. En el artículo <a href=\"https://requestmetrics.com/web-performance/http3-is-fast\">HTTP/3 is Fast</a> podrás encontrar una comparación del comportamiento de las tres versiones variando diferentes factores, como la confiabilidad y distancia de la conexión.</p>\n\n<h2 id=\"conclusiones\">Conclusiones</h2>\n\n<p>Mantenernos actualizados con respecto a las nuevas tecnologías es muy importante para ofrecerles lo mejor a los usuarios de nuestro software, sean desarrolladores o usuarios finales. Si quieres empezar a usar HTTP/3 échale un ojo a tus servidores HTTP, por ejemplo <a href=\"https://www.nginx.com/blog/our-roadmap-quic-http-3-support-nginx/\">NGINX ya tiene planes para soportarlo completamente</a>, <a href=\"https://doc.traefik.io/traefik/master/routing/entrypoints/#http3\">Traefik ya lo soporta de manera experimental</a>, pero parece que Apache <a href=\"https://www.reddit.com/r/apache/comments/o6a86x/why_is_apache_failing_to_implement_quic_http3/\">no lo hará por ahora</a>.</p>\n\n<p>También si usas algún servicio de servidores administrados AWS, GCP, Azure, DigitalOcean o similar, revisa su documentación para verificar si puedes activarlo. También debes tener en cuenta que no todos los navegadores lo soportan, pero los que lo hagan se beneficiarán enormemente de que lo actives. Puedes revisar la lista de compatibilidad constantemente aquí: <a href=\"https://caniuse.com/http3\">Can I Use HTTP/3?</a>.</p>\n",
      "date_published": "Wed, 15 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptograficos-cifrados-de-flujo.html",
      "url": "https://blog.thedojo.mx/2021/12/12/tipos-de-algoritmos-criptograficos-cifrados-de-flujo.html",
      "title": "Tipos de algoritmos criptográficos: cifrados de flujo",
      "content_html": "<p>Ya hablamos de <a href=\"/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html\">lo que es la criptografía</a> y del tipo de cifrado más fuerte y seguro que existe en la criptografía: <a href=\"/2020/12/03/tipos-de-algoritmos-criptograficos.html\">los cifrados de bloque</a>.</p>\n\n<p>Ahora hablemos de cómo puedes transformar cadenas de texto plano de tamaño indeterminado en cadenas de texto cifradas del mismo tamaño. Esto se logra con los cifrados de <em>flujo</em> o <strong>stream ciphers</strong>.</p>\n\n<h2 id=\"definición-de-cifrado-de-flujo\">Definición de cifrado de flujo</h2>\n\n<p>La mejor manera de entenderlos es en <em>contraste</em> con los cifrados de bloque: mientras los cifrados de bloque toman pedazos de contenido de tamaño fijo y los cifran, aplicando diferentes técnicas para abarcar todo el contenido, los cifrados de flujo toman <strong>contenido de tamaño arbitrario y lo cifran</strong>, bit por bit, devolviéndote un texto cifrado del mismo tamaño.</p>\n\n<p>Son muy útiles cuando no sabes el tamaño del contenido que vas a cifrar o cuando van ir llegando de manera continua sin que sepas exactamente cuánto y cada cuando, justamente como un <strong>flujo de información</strong>.</p>\n\n<p>Los cifrados de flujo se consideraban “cifrados de hardware” porque eran más ligeros que los de bloque y se podían implementar en menos espacio en un chip, pero ahora tanto los cifrados de bloque como los de flujo son adecuados para implementarse en hardware.</p>\n\n<h2 id=\"funcionamiento\">Funcionamiento</h2>\n\n<p>Un cifrado de flujo trabaja generando una cadena de bits pseudo-aleatorios que después combina con el contenido que va a cifrar mediante la operación <strong>XOR</strong>, también conocida como <strong>suma módulo 2</strong>. Para descifrar un texto cifrado, algoritmo genera los mismos bits pseudo-aleatorios y los vuelve a combinar, dejando así solamente el texto claro. A esta cadena de bits pseudo-aleatoria se le conoce como el <em>keystream</em> o <em>cadena de bits de clave</em>. En el video <a href=\"https://youtu.be/74MYHpGzRR8\">“XOR de tamaño fijo | Cryptopals Crypto Challenges”</a> explicamos por qué el XOR es una operación perfecta para usarse en criptografía y por qué en algunos recursos se la llama “suma módulo 2”.</p>\n\n<p>La parte más importante es entonces el generador del <em>keystream</em>, y que sea capaz de volver a generar los mismos bits pseudo-aleatorios para descifrar.</p>\n\n<p>Un cifrado de flujo normalmente utiliza una llave y un <strong>nonce</strong>, un número usado una única vez con esa llave.</p>\n\n<p>A muy alto nivel, los cifrados de flujo pueden trabajar de dos formas:</p>\n\n<ol>\n  <li><strong>Mediante mantener un estado secreto</strong>. Después de haber sido inicializados con una llave y un nonce, el algoritmo mantiene un estado interno que se va actualizando en cada nueva llamada.</li>\n  <li><strong>Mediante un contador</strong>. Este tipo de algoritmos recibe a parte de la llave y el nonce, un contador que se incrementa en cada llamada, de esta manera no es necesario mantener un estado interno secreto.</li>\n</ol>\n\n<h2 id=\"ejemplos-de-cifrados-de-flujo\">Ejemplos de cifrados de flujo</h2>\n\n<p>Veamos algunos ejemplos de cifrados de flujo, sus características y sus usos, así como qué tan seguros son.</p>\n\n<h3 id=\"rc4\">RC4</h3>\n\n<p>Es el cifrado de software que se usaba para la comunicación entre los routers WI-FI que usaban WEP y tus dispositivos. También se usaba en las comunicaciones TLS. Fue diseñado por el mismo inventor de MD5, <a href=\"https://people.csail.mit.edu/rivest/\">Ron Rivest</a>. Trivia: RC significaba originalmente: “<strong>R</strong>on’s <strong>C</strong>ode”. Se conocen ataques contra el cifrado y sobre todo sobre sus implementaciones, pero se sigue usando, así que ten mucho cuidado cuando los dispositivos que usas te ofrezcan configurarlo (como en el caso de los routers con “seguridad” WEP).</p>\n\n<h3 id=\"a51\">A5/1</h3>\n\n<p>Fue el cifrado de flujo de hardware de que se usaba para cifrar las comunicaciones inalámbricas 2G. Se encontraron vulnerabilidades en él, al principio de la década de los 2000 y ahora se puede descifrar completamente.</p>\n\n<h2 id=\"grain-128a\">Grain-128a</h2>\n\n<p>Es uno de los cifrados de flujo recomendados por la <a href=\"http://www.ecrypt.eu.org/stream/project.html\">´EAM competition</a>,\nusa una llave 128 bits y un nonce de 96 bits. Está pensado para ser implementado en hardware.</p>\n\n<p>Es seguro todavía y usado en sistemas de hardware de bajo presupuesto que requieran un cifrado ligero.</p>\n<h3 id=\"salsa20\">Salsa20</h3>\n\n<p>Es un cifrado de flujo, orientado a software que también fue recomendado por la ´EAM competition. Tiene una implementación sencilla, lo que lo ha hecho popular. Usa una llave, un nonce y un contador para generar el flujo de cifrado.</p>\n\n<p>Aplica una serie de transformaciones en “rounds” y tiene tres variaciones, dependiendo del nivel de seguridad necesario y la velocidad que deseemos: Salsa20 (20 rounds), Salsa20/12 (12 rounds), Salsa20/8 (8 rounds), siendo el de 8 rounds el que menos seguridad  ofrece. Hay un ataque teórico contra Salsa20/8 que reduce su seguridad a 2^251 operaciones, todavía imposible de llevar a la práctica.</p>\n\n<h3 id=\"aes-ctr\">AES-CTR</h3>\n\n<p>Este es un cifrado de bloque disfrazado de cifrado de flujo, como diría JP Aumasson, el autor de “Serious Cryptography”. Es el cifrado AES usado en <strong>Counter Mode</strong> o <strong>modo contador</strong>, que ya explicamos en el <a href=\"/2020/12/03/tipos-de-algoritmos-criptograficos.html\">artículo sobre los cifrados de bloque y sus modos de operación</a>. Cualquier cifrado de bloque que pueda ser usado en modo <strong>counter</strong> se comportará como un cifrado de flujo.</p>\n\n<p>La desventaja de esto es que normalmente queremos que los cifrados de flujo sean ligeros y rápidos y la velocidad de esta implementación dependerá en gran medida del cifrado que se use.</p>\n\n<h2 id=\"evitando-errores\">Evitando errores</h2>\n\n<p>Si estás usando un cifrado de flujo, <strong>debes evitar en todo momento re-usar el nonce</strong>, recuerda que la única razón de existencia del <em>nonce</em> es ser usado una única vez con la misma llave. Esta es la forma más fácil de usar mal los cifrados de flujo, y elimina completamente la seguridad teórica que puedan ofrecer.</p>\n\n<h2 id=\"conclusión-y-aplicaciones\">Conclusión y aplicaciones</h2>\n\n<p>Los cifrados de flujo actualmente son seguros (Salsa20, Grain-128a y  AES-CTR) y los puedes usar con confianza siempre que requieras cifrar datos de longitud desconocida o que llega (o se va) con un flujo de información.</p>\n\n<p>Evita reutilizar el Nonce, el counter y elige una llave segura, lo más aleatoria posible y estarás listo para usarlos en cualquier desarrollo.</p>\n",
      "date_published": "Sun, 12 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/11/criptografia-vs-computacion-cuantica.html",
      "url": "https://blog.thedojo.mx/2021/12/11/criptografia-vs-computacion-cuantica.html",
      "title": "Criptografía VS computación cuántica",
      "content_html": "<blockquote>\n  <p>“If you are not completely confused by quantum mechanics, you do not understand it.” - Richard Feynman</p>\n</blockquote>\n\n<p>La computación cuántica es una tecnología muy prometedora que lleva <em>décadas</em> en gestación y cada vez la vemos más cerca. Una de las cosas que más llama la atención es la capacidad de cómputo que las computadoras cuánticas pueden tener, en este artículo aclararemos de qué se trata todo esto y <strong>cómo se relaciona con la criptografía</strong>, uno de los campos más afectados.</p>\n\n<p>Si no has escuchado mucho sobre la computación cuántica, este video de una presentación dada por <a href=\"https://www.xataka.com/investigacion/algun-dia-se-construye-ordenador-cuantico-plenamente-funcional-sera-gracias-parte-a-este-cientifico-espanol-hablamos-ignacio-cirac\">Ignacio Cirac</a> nos da una introducción a lo que promete y las bases de funcionamiento.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/WJ3r6btgzBM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<hr />\n\n<p>Ahora veamos a más detalle cómo <strong>computa una máquina cuántica</strong> y entendamos por qué no <em>toda la criptografía está perdida</em>, aunque tuviéramos una computadora cuántica funcional hoy mismo.</p>\n\n<h2 id=\"principios-de-funcionamiento-de-una-computadora-cuántica\">Principios de funcionamiento de una computadora cuántica</h2>\n\n<p>Hablemos un poco de los <em>principios físicos y matemáticos</em> que hacen especial a una computadora cuántica.</p>\n\n<h3 id=\"superposición-cuántica\">Superposición cuántica</h3>\n\n<p>Una computadora cuántica está basada en el <a href=\"https://es.wikipedia.org/wiki/Superposici%C3%B3n_cu%C3%A1ntica\">principio de superposición cuántica</a>, que establece, en palabras comunes, que una partícula tiene magnitudes físicas (como la posición o el momento) indeterminadas hasta que se realiza una medición sobre ellas. La partícula se comporta como si tuviera todos los estados posibles, algunos con más probabilidad que otros. Una forma fácil en la que se ha mencionado este principio es que <strong>“puede estar en dos lugares a la vez”</strong>.</p>\n\n<p>Lo que se escapa de nuestra comprensión común de la física es que esto de tener múltiples estados <strong>desaparece cuando lo observamos</strong>, se dice que su <em>función de onda</em> colapsa, lo que significa que la partícula “se decide” por uno de los múltiples estados en los que podía estar. La función de onda es la ecuación que describe todas las “probabilidades” de cada estado.</p>\n\n<p>El ejercicio mental del <a href=\"https://www.youtube.com/watch?v=lzxKZx7we4s\">Gato de Schrödinger</a> te puede ayudar a imaginarlo, pero en <a href=\"https://www.youtube.com/watch?v=9JlOmEEyTOU\">este video puedes de Quantum Fracture</a> te ayudará a profundizar más en la complejidad del tema y como no es tan sencillo como “puede estar en dos estados a la vez”, sino en un número <em>infinito de estados</em>.</p>\n\n<p>Este artículo te explicará el principio de superposición cuántica sin matemáticas avanzadas: <a href=\"https://www.elclaustro.edu.mx/agnosia/index.php/component/k2/item/427-superposicion-una-aproximacion-sin-matematicas-avanzadas-a-la-motivacion-de-la-mecanica-cuantica\">Superposición, una aproximación sin matemáticas avanzadas a la motivación de la mecánica cuántica</a>.</p>\n\n<p><strong>Resumen:</strong> Una particula como un átomo, un electron o un fotón, puede poseer múltiples estados físicos a la vez, con diferentes combinaciones entre todos sus posibles estados, dando lugar a <em>una infinidad de estados posibles</em>. Las probabilidades de cada estado están contenidas en su <em>función de onda</em>, y cuando medimos (miramos) una partícula se define en un estado de todos los posibles.</p>\n\n<h3 id=\"amplitud-de-onda-y-qubits\">Amplitud de onda y Qubits</h3>\n\n<p>Cada uno de los estados posibles de una partícula y sus probabilidades están representados en lo que se llama su <strong>amplitud</strong>. En el caso de la computación cuántica, nos interesa si una partícula <em>representa un cero o un uno</em>. Por esto, un <strong>Qubit</strong> (un bit cuántico) está representado por una amplitud de onda, que se puede entender parcialmente como la probabilidad de que ese bit sea cero o uno. Un qubit está caracterizado por dos amplitudes: una para el estado <strong>cero</strong> y otra para el estado <strong>uno</strong>. Estas amplitudes son números complejos, números que tienen un parte real y una parte imaginaria, como <code class=\"language-plaintext highlighter-rouge\">2 + 3i</code>, por ejemplo.</p>\n\n<p>Una <em>palabra</em> o conjunto de qubits está representado por <strong>2^n amplitudes</strong>, donde n es el número de qubits. Así que en una palabra de 8 bits, tenemos 256 amplitudes de onda. Y aquí está el secreto de por qué la computación cuántica puede ser tan poderosa: <strong>con sólo <em>n</em> objetos (qubits), puedes almacenar y procesar 2^n números complejos, mientras que en una computadora clásica necesitarías 2^n espacios de memoria</strong>.</p>\n\n<h3 id=\"compuertas-cuánticas\">Compuertas cuánticas</h3>\n\n<p>Una compuerta cuántica es el equivalente cuántico a la compuertas lógicas clásicas. Son una serie de transformaciones que se le aplica a las amplitudes que caracterizan nuestro conjunto de qubits para obtener los resultados deseados.</p>\n\n<p>Después de aplicarle un serie de compuertas cuánticas a los qubits, lo que se conoce como un <strong>circuito cuántico</strong>, se realiza una medición sobre uno o varios qubits para saber el resultado.</p>\n\n<p>Las compuertas se comportan como multiplicaciones de matrices y vectores de gran tamaño, que serían imposibles de hacer para computadoras comunes, pero en la computadora cuántica se realizan mediante manipulaciones físicas que equivalen a estas transformaciones de matrices gigantescas.</p>\n\n<p>No vamos a entrar en profundidad en este tema, pero si quieres leer más, <a href=\"https://josueacevedo.medium.com/computaci%C3%B3n-cu%C3%A1ntica-compuertas-o-circuitos-cu%C3%A1nticos-27910f5338c8\">este artículo te puede servir</a>.</p>\n\n<h3 id=\"aceleración-cuántica\">Aceleración cuántica</h3>\n\n<p>Gracias a las cualidades de las computadoras cuánticas antes descritas, es posible resolver algunos problemas de la computación mediante nuevos algoritmos cuánticos que reducen el tiempo esperado de ejecución de O(2^n) a O(n^k), siendo <em>k</em> una constante. Es decir: <strong>aceleran la resolución de algunos problemas exponencialmente</strong>.</p>\n\n<p>Ahora que tenemos los conceptos más básicos de cómo funciona la computación cuántica y por qué puede ejecutar muchos más cálculos, hablemos de de algunas amenazas que presenta contra la criptografía.</p>\n\n<h2 id=\"el-algoritmo-de-shor\">El algoritmo de Shor</h2>\n\n<p>Uno de los problemas en los que está basada la criptografía asimétrica actual, es el problema de la factorización de números primos, es decir, encontrar los componentes primos de un número entero. <em>Creemos</em> que encontrar los factores de un número lo suficientemente grande es casi imposible para nuestras computadoras clásicas actuales, incluso las más poderosas.</p>\n\n<p>El <strong>algoritmo de Shor</strong>, propuesto en 1995, traslada el problema de la factorización a otro problema difícil de las ciencias de la computación: encontrar el periodo de una función exponencial. Aquí puedes encontrar una explicación más a profundidad de esta transformación: <a href=\"https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm#period-finding\">Period Finding</a>.</p>\n\n<p>Lo importante de esta transformación es lo siguiente: <strong>para una computadora cuántica, el problema de encontrar el periodo de una función exponencial no es tan difícil</strong>. Una computadora cuántica resuelve este problema con una complejidad de O(log n) aproximadamente, ya que existen circuitos cuánticos que permiten encontrar el periodo de la función exponencial.</p>\n\n<p>Esto significa que cuando una computadora cuántica tenga los suficientes qubits para representar los números que se usan en la generación de llaves asimétricas, la mayor parte de la criptografía asimétrica actual dejará de ser útil.</p>\n\n<h2 id=\"el-algoritmo-de-grover\">El algoritmo de Grover</h2>\n\n<p>Buscar un elemento que cumpla cierta condición en un conjunto es uno de los problemas que nos ayudarían a romper la criptografía actual. Por ejemplo, imagina que tienes un texto cifrado con AES con una llave de 128 bits. Si quieres romper la seguridad, vas a tener que probar 2^128 llaves en promedio para encontrar la correcta.</p>\n\n<p>El <a href=\"\">algoritmo de Grover</a> permite acelerar esta operación de manera cuadrática, es decir, te tomaría en promedio la raíz cuadrada de <em>n</em> encontrar el elemento que cumpla con la condición. En el caso del ejemplo anterior te tomaría en promedio 2^(128/2) = 2^64 operaciones.</p>\n\n<p>Lo mismo podría pasar para todos cifrados simétricos (que usan la misma llave para cifrar y descifrar) y hasheados, el ataque consistiría en un estilo de fuerza bruta más inteligente o <em>cuadráticamente más rápida</em>.</p>\n\n<p>Sin embargo, como podrás notar, esto no es un problema tan grande, ya que para mantener el mismo nivel de seguridad que tenemos actualmente <strong>bastaría con duplicar el tamaño de las llaves usadas</strong>.</p>\n\n<p>Esto seguirá siendo así mientras no se descubran debilidades en los algoritmos de cifrado simétricos o en las funciones de comprensión de los hashes que usamos.</p>\n\n<h2 id=\"criptografía-post-quantum\">Criptografía post-quantum</h2>\n\n<p>Debido a las amenazas que presenta la computación cuántica a la criptografía de llave pública gracias al algoritmo de Shor, los criptográfos están manos a la obra diseñando nuevos algoritmos basados en otros principios aún no amenazados por la computación cuántica.</p>\n\n<p>Algunos ejemplos que se ven prometedores son:</p>\n\n<ul>\n  <li>Entramados (Lattice Cryptography)</li>\n  <li>Códigos de corrección de errores (Error-correcting codes)</li>\n  <li>Multivariada (Multivariate cryptography)</li>\n  <li>Hashes (Hash-based cryptography)</li>\n</ul>\n\n<p>La explicación de cada uno de estos posibles caminos para la criptografía la dejaremos para otro artículo, déjanos un comentario si te interesa alguna en especial.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La criptografía cuántica acelera la capacidad de cómputo, pero además es fundamentalmente <em>diferente</em>  de la computación clásica, lo que permite resolver problemas con otros métodos imposibles de alcanzar con la computación actual.</p>\n\n<p>Pero no toda la <strong>criptografía actual esta destinada a perderse con el avance de las computadas cuánticas</strong>, solamente la criptografía asimétrica y toda aquella basada en la factorización de números primos.</p>\n\n<p>Ciertamente, la seguridad de la criptografía simétrica se ve menguada por el poder de cómputo y los algoritmos cuánticos, pero no lo suficiente para darla por perdida, sino que bastará con fortalecerla con el mismo poder de cómputo cuántico y <strong>aumentando el tamaño de las llaves</strong>.</p>\n\n<p>Finalmente, los investigadores ya están trabajando en formas para sustituir lo que se va a romper.</p>\n",
      "date_published": "Sat, 11 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito.html",
      "url": "https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito.html",
      "title": "La regla del 'Cero, Uno o Infinito'",
      "content_html": "<p>La regla del ‘Cero, Uno o Infinito’ es una guía para diseñar software que sea más fácil de usar, tanto para otros desarrolladores como para los usuarios finales. La regla en inglés es:</p>\n\n<blockquote>\n  <p>“Allow none of foo, one of foo, or any number of foo.” - Willem van der Poel</p>\n</blockquote>\n\n<p>Esta regla establece que respecto a la existencia de elementos, deberías permitir que no exista ninguno, solamente uno o un número arbitrario (potencialmente infinito, mientras las limitantes ) de estos elementos. La idea <strong>principal es que no existan límites arbitrarios impuestos por alguna idea sin explicación</strong>.</p>\n\n<p>Algunos ejemplos de esta regla, puesta en práctica:</p>\n\n<ul>\n  <li>Una estructura de datos no limita arbitrariamente el grado de anidado que puede tener</li>\n  <li>No existe un normalmente un límite impuesto de recursividad (más allá del dado por el tamaño del <em>stack</em> de ejecución)</li>\n  <li>En las bases de datos relacionales existen tres cardinalidades: 1-1 (permitir una), 1-N (un padre puede tener muchos hijos), N-N (varios artículos pueden pertenecer a la misma categoría y un artículo puede tener varias categorías)</li>\n  <li>Los caracteres especiales básicos de las expresiones regulares son: <code class=\"language-plaintext highlighter-rouge\">.</code> (un carácter cualquiera), <code class=\"language-plaintext highlighter-rouge\">+</code> (uno o más caracteres), <code class=\"language-plaintext highlighter-rouge\">*</code> (cualquier número de caracteres).</li>\n</ul>\n\n<p>Y esta regla parece que también existe en la naturaleza:</p>\n\n<ul>\n  <li>La procreación es ilimitada mientras los recursos sean suficientes (puedes tener N hijos)</li>\n  <li>Tus ancestros directos son uno de cada género (tienes un padre y una madre)</li>\n  <li>Tus ancestros indirectos pueden ser infinitos (tu linea genealógica y los hijos de tus hijos pueden ser infinitos)</li>\n  <li>Cuando tienes un límite de uno y lo abres para dos, ¿entonces por qué no abrirlo para tres? Si aplicamos esta regla recursivamente llegamos infinito</li>\n  <li>En un consejo de administración hay una (1) persona encargada con acceso a la información de un sistema o un equipo (N - infinito)</li>\n  <li>Como conjunto, un vehículo puede transportar N pasajeros, luego limitado por el caso de negocio o modelo específico. Cuando esta lleno puede transportar cero personas más</li>\n</ul>\n\n<p>Ahora veamos algunos ejemplos en los que puedes poner límites arbitrarios sin darte cuenta.</p>\n\n<h2 id=\"modelando-bases-da-datos\">Modelando bases da datos</h2>\n\n<p>En modelados de bases de datos. Imagínate que tienes que modelar una tipo de usuario en el que te dicen que tienes que guardar diez propiedades arbitrarias. Podrías cometer el error de crear específicamente diez campos para guardar estas propiedades, lo cuál crearía un límite arbitrario en la capacidad de guardar estas propiedades. La mejor forma de modelarlo sería con una relación 1-N, ya que te da la flexibilidad de aumentar o reducir este límite mediante lógica específica para el caso de uso.</p>\n\n<p>Lo mismo podrías pensar en cuanto a asignación de categorías, tags, comentarios, etc.</p>\n\n<h2 id=\"modelando-software\">Modelando software</h2>\n\n<p>Veamos algunos ejemplos que te puedes encontrar creando software.</p>\n\n<h3 id=\"ctrl-z\">CTRL-Z</h3>\n\n<p>Imagina que tienes que diseñar un editor de texto y estás pensando en agregar la funcionalidad de “deshacer”. Primeramente piensas que es buena idea solamente permitir que se deshaga la acción inmediata anterior, así que lo implementas como una variable que se está sustituyendo constantemente.</p>\n\n<p>Pero ahora quieres permitir que se deshagan más acciones. ¿Cuál sería tu siguiente límite? El límite natural tendría que ser “infinito” o “hasta el principio del tiempo”, ya que cualquier otro límite sería arbitrario y difícil de comprender o justificar. Así que tu implementación cambia de una variable a una pila de acciones que va manteniendo tantas acciones como sea posible.</p>\n\n<h3 id=\"modelando-una-conversaciǿn\">Modelando una conversaciǿn</h3>\n\n<p>Ahora estamos creando un modelo para almacenar y correr una conversación de un chatbot con un usuario. Cada mensaje puede comportarse de tres maneras: darle la oportunidad al usuario de contestar con una respuesta fija, llevar a otro mensaje sin darle oportunidad al usuario de contestar, o terminar la conversación.</p>\n\n<p>Como puedes observar, esto es un caso perfecto de la regla del ‘Cero, Uno o Infinito’. Un mensaje puede tener cero mensajes siguientes, por lo que termina la conversación. Puede tener un solo mensaje siguiente, que es cuando continuamos sin esperar respuesta. O puede tener N mensajes siguientes, uno correspondiente a cada respuesta posible de parte del usuario. Imponer un número limitado de respuestas posibles dentro de tu sistema no una buen idea, ya que limita sin razón alguna la flexibilidad de nuestro sistema.</p>\n\n<h2 id=\"críticas-a-la-regla-del-cero-uno-o-infinito\">Críticas a la regla del ‘Cero, Uno o Infinito’</h2>\n\n<p>Una de las principales críticas a esta regla es que <strong>está dejando fuera el dos</strong>, que también es un número muy especial para ciertos casos: muchas cosas en la naturaleza vienen en pares. Los booleanos, prendido/apagado, arriba/abajo, izquierda/derecha.</p>\n\n<p>En mi opinión es un número que también se debe considerar, pero solo en caso de que los dos elementos carguen un significado como en los ejemplos anteriores, normalmente son cosas opuestas que se relacionan con un centro, pero incluso, si no se considera un número especial, podemos modelar estos casos siguiendo la regla del ‘Cero, Uno o Infinito’: si tomamos como punto de referencia uno de estos valores, el otro es nuestro <em>“uno”</em> que estamos permitiendo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aprender principios de diseño de software te ayudará a crear mejores sistemas que puedan ser usados más fácilmente tanto por otros desarrolladores como por usuario. Espero que este pequeño ejemplo te lleve a aprender otros principios que puedas aplicar en tu trabajo diario. Déjanos un comentario si quieres que lo platiquemos más profundamente o con otros ejemplos.</p>\n",
      "date_published": "Fri, 10 Dec 2021 00:00:00 -0600"
      }
    
  ]
}
        
      </section>

      <footer class="page__meta">
        
        


        

      </footer>

      

      
    </div>

    
  </article>

  
  
</div>
    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2022 . Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
