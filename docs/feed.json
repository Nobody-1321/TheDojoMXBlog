<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.24.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>The Dojo MX Blog</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="The Dojo MX Blog">
<meta property="og:title" content="The Dojo MX Blog">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="The Dojo MX Blog Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZNSYMJDY5S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZNSYMJDY5S');
</script>

<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": "The Dojo MX Blog",
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>

  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt="The Dojo MX Blog"></a>
        
        <a class="site-title" href="/">
          The Dojo MX Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  


  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          

        </header>
      

      <section class="page__content e-content" itemprop="text">
        
        <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>

        </div>
        {
  "version": "https://jsonfeed.org/version/1",
  "title": "The Dojo MX Blog",
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2022/12/18/como-aprender-rust.html",
      "url": "https://blog.thedojo.mx/2022/12/18/como-aprender-rust.html",
      "title": "¿Cómo aprender Rust? Recursos para empezar",
      "content_html": "<p>En el <a href=\"/2022/12/13/por-que-aprender-rust.html\">artículo pasado</a> hablamos de por qué te conviene aprender Rust, un lenguaje moderno, seguro y productivo. Ahora hablemos de cómo empezar. Empecemos con los recursos en español y sigamos con recursos en inglés.</p>\n\n<h2 id=\"guía-oficial\">Guía oficial</h2>\n\n<p>En la página oficial de Rust puedes encontrar una página que te da muchos recursos para aprender Rust: <a href=\"https://www.rust-lang.org/es/learn\">Aprende Rust</a>. Lo malo es que la mayoría de los recursos a los que refiere están en inglés. Si lo manejas bien no tienes que seguir este artículo y puedes dirigirte a esta página y seguirla.</p>\n\n<p>Si quieres otros recursos en español, pero además otros tipos de recursos, sigue leyendo.,</p>\n\n<h2 id=\"empezando-en-español\">Empezando en español</h2>\n\n<p>De esta sección deberías escoger uno de los recursos que sugerimos. Si no entiendes bien el inglés, los primeros que sugerimos están en español.</p>\n\n<p>El recurso más recomendado por todos los que han aprendido Rust es el libro oficial: <a href=\"https://doc.rust-lang.org/book/title-page.html\">The Rust Programming Language</a>. El idioma original del libro es inglés y tiene traducciones a diferentes idiomas, entre ellos el español que puedes encontar aquí: <a href=\"https://github.com/ManRR/rust-book-es\">El lenguaje de programación Rust</a>. Sin embargo, parece que la traducción tiene bastante tiempo sin avanzar, por lo que la mejor opción es leer la versión en línea en inglés (volvemos al tema de que aprender inglés es una muy buena idea si trabajas en sistemas).</p>\n\n<p>Hay un recurso de <em>Freecodecamp</em> interactivo: <a href=\"https://www.freecodecamp.org/espanol/news/rust-en-replit/#descripci-n-de-rust\">Aprende Rust en Replit</a>, con el que podrás hacer los ejercicios interactivamente en <a href=\"https://replit.com/\">Replit</a>.</p>\n\n<p>Otro curso en línea es el que Microsoft ofrece en <a href=\"https://learn.microsoft.com/es-es/training/paths/rust-first-steps/\">Microsoft Learn: Primeros pasos con Rust</a>.</p>\n\n<p>Hay otros recursos que se mencionan en la página oficial de Rust, que no están en español, entre ellos:</p>\n\n<ul>\n  <li><a href=\"https://doc.rust-lang.org/stable/rust-by-example/\">Rust by Example</a>. Un curso completamente práctico que te enseña las bases.</li>\n  <li><a href=\"https://github.com/rust-lang/rustlings/\">Rustlings</a>. Un curso práctico que puedes correr en tu propia computadora.</li>\n</ul>\n\n<h3 id=\"recursos-introductorios-en-video-de-paga\">Recursos introductorios en video (de paga)</h3>\n\n<p>Encontré dos cursos introductorios en plataformas en español:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://codigofacilito.com/cursos/rust-introduccion\">Curso de Introducción a Rust</a> de Código facilito. Este curso es para programadores principiantes, ya que te explica lo básico de Rust con ejemplos sencillos.</p>\n  </li>\n  <li>\n    <p><a href=\"https://platzi.com/cursos/rust-basico/\">Rust básico</a> de Platzi. Tiene exactamente el mismo objetivo que el anterior, ayudar a programadores principiantes a aprender Rust.</p>\n  </li>\n</ul>\n\n<p>No recomiendo ninguno de los dos cursos si eres un programador experimentado, ya que sentirás que avanzan demasiado lento, pero si estás empezando, estos dos cursos están bastante bien por las cosas que explican como detalles.</p>\n\n<p>Un recurso en inglés que parece bastante prometedor si te gustan los cursos en video es <a href=\"https://www.udemy.com/course/ultimate-rust-crash-course/\">Ultimate Rust Crash Course</a>. Tiene bastantes buenas calificacioenes y lo que yo he tomado del curso parece tener un muy buen nivel y avanzar a buen paso.</p>\n\n<h2 id=\"avanzando-más-allá-de-lo-básico\">Avanzando más allá de lo básico</h2>\n\n<p>Casi todos los recursos de los que vamos a hablar ahora están en inglés.</p>\n\n<h3 id=\"libros\">Libros</h3>\n\n<p>Hay dos libros que me llaman especialmente la atención:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://nostarch.com/rust-rustaceans\">Rust for Rustaceans</a>. Es un recurso pensado para programadores experimentados y que ya saben Rust, trata temas avanzados relacionados con el diseño de programas que sean más eficientes y fáciles de mantener.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.zero2prod.com/index.html\">From Zero to Production in Rust</a>. Es un libro para principiantes en Rust enfocado en el desarrollo web backend.</p>\n  </li>\n</ul>\n\n<h3 id=\"cursos-en-video\">Cursos en video</h3>\n\n<p>La continuación de <a href=\"https://www.udemy.com/course/ultimate-rust-crash-course/\">Ultimate Rust Crash Curse</a>, que se llama <a href=\"https://www.udemy.com/course/ultimate-rust-2/\">Ultimate Rust 2: Intermediate Concepts</a> avanza en conceptos más profundos del lenguaje, impartido por Nathan Stocks (alias <a href=\"https://github.com/CleanCut\">CleanCut</a>), también. El curso termina con un proyecto que es un prototipo de un juego en un motor de videojuegos creado por el propio Nathan, llamado <a href=\"https://github.com/CleanCut/rusty_engine\">Rusty Engine</a>.</p>\n\n<p>Esto es un conjunto de cursos que componen lo que llamaríamos una especialidad: <a href=\"https://www.educative.io/path/become-a-rust-professional\">Become a Rust Professional</a>. La plataforma <a href=\"https://educative.io\">Educative</a> tiene el modelo de suscripción, por lo que si tienes tiempo, puedes pagar un solo mes y tomar todos los cursos, aunque también puedes comprar cada curso individualmente, conforme vayas avanzando.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Existen un montón de recursos para aprender Rust, sobre todo en inglés, pero también puedes empezar sin ningún problema en español, sobre todo gracias a los esfuerzos que la comunidad y las empresas que lo usan y patrocinan están haciendo para que la mayor cantidad de personas lo puedan aprender.</p>\n\n<p>Empieza tan pronto como puedas si está dentro de tus objetivos.</p>\n",
      "date_published": "Sun, 18 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/13/por-que-aprender-rust.html",
      "url": "https://blog.thedojo.mx/2022/12/13/por-que-aprender-rust.html",
      "title": "¿Por qué aprender Rust en 2023?",
      "content_html": "<p>Rust se ha establecido como uno de los lenguajes más queridos entre los desarrolladores en los últimos años y desde 2016 está en el número uno, según la encuesta anual de <a href=\"https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted\">Stack Overflow</a>. Esto no es de extrañar, ya que Rust es un lenguaje que ofrece <strong>muchas cosas buenas</strong> a aquellos que lo usan.</p>\n\n<p>En este artículo vamos a hablar de algunas de sus características, las ventajas de su ecosistema, y por qué te conviene aprenderlo. Además vamos a hablar de cuándo no es tan buena idea.</p>\n\n<h2 id=\"historia-y-concepción\">Historia y concepción</h2>\n\n<blockquote>\n  <p>No siempre fue así de claro, pero el lenguaje de programación Rust trata acerca de <em>empoderamiento</em>: no importa qué tipo de código estés escribiendo ahora, Rust te habilita para llegar más lejos, para programar con confianza en una variedad de dominios más amplia que la que antes hacías. - Nicholas Matsakis and Aaron Turon</p>\n</blockquote>\n\n<p>Rust nació en 2006 como un proyecto personal de <a href=\"https://github.com/graydon\">Graydon Hoare</a>, un empleado de Mozilla en ese entonces, que siempre ha trabajado en lado de los compiladores. Después de mostrárselo a su jefe, a Mozilla le interesó como una alternativa mejor que C y C++ para crear su motor de renderizado web llamado <a href=\"https://servo.org/\">Servo</a>. Y, efectivamente, Servo actualmente estás escrito en Rust.</p>\n\n<h3 id=\"idea-detrás-de-rust\">Idea detrás de Rust</h3>\n\n<p>Según <a href=\"https://www.infoq.com/news/2012/08/Interview-Rust/\">la entrevista</a> que le hicieron a Graydon, en Rust quiso implementar todas las características que le parecían interesantes y amadas de otros lenguajes, pero para un lenguaje dedicado a la creación sistemas, con la teoría de que las concesiones y condiciones que hacen que lenguajes como C y C++ siempre fueran favorecidos, han cambiado desde que nacieron.</p>\n\n<p>Así que Rust nació con la <strong>seguridad de memoria y la concurrencia en mente</strong>, pensando que el internet y la apertura que este provee hace que estas características sean muy importantes. Hablemos de estas características.</p>\n\n<h2 id=\"características-de-rust\">Características de Rust</h2>\n\n<p>Rust en un lenguaje que quiere reemplazar a C y C++, por lo que necesita características que les compitan y los mejoren, hablemos de tres de ellas con las que lo está intentando.</p>\n\n<h3 id=\"rendimiento\">Rendimiento</h3>\n\n<p>C y C++ se distinguen por ser los lenguajes para creación de sistemas más eficientes, y por eso Rust tiene que ser por lo menos tan eficiente como ellos. Rust, en la mayoría de los casos logra equipararse al rendimiento de C y C++.</p>\n\n<p>Aquí puedes ver algunas mediciones de Rust contra C++: <a href=\"https://programming-language-benchmarks.vercel.app/cpp-vs-rust\">Benchmarks Rust vs C++</a>. Y aquí hay otros un poco más entendibles: <a href=\"https://levelup.gitconnected.com/which-is-faster-rust-or-c-lets-find-out-who-is-the-usain-bolt-87495c774c8\">Rust vs C</a>. La conclusión a la que podemos llegar es que Rust es un contendiente muy serio para C y C++ en cuanto a velocidad y eficiencia.</p>\n\n<p>Lo que tenemos que recordar es que Rust provee características que C y C++, que hacen más fácil y segura la programación, por lo que si es casi tan rápido como estos, más sus características extra, entonces es una gran oferta para los desarrolladores.</p>\n\n<h3 id=\"seguridad-de-memoria\">Seguridad de memoria</h3>\n\n<p>La seguridad de memoria se refiere a la propiedad de los entornos de ejecución de los programas que te <strong>asegura que las referencias a memoria siempre son válidas</strong>. Si has programado en C y C++ has experimentado un entorno no seguro en memoria: puedes acceder a registros de memoria que no han sido inicializados y por lo tanto contienen información incierta. Para que la memoria siempre sea segura se necesita que siempre sea alocada por el programa y se del tipo y tamaño correcto.</p>\n\n<p>Un programa que no es seguro en memoria puede dar bugs aleatorios o fallar aleatoriamente sin explicación alguna. Además también puede ser inseguro respecto a la integridad de tus datos, ya que las fallas en el manejo de memoria pueden ser explotadas de formas creativas por los atacantes para acceder a información sensible.</p>\n\n<p>Uno de los objetivos de diseño en Rust es que sea seguro de memoria, para mi uno de los distintivos más grandes con C y C++.</p>\n\n<p>¿Cómo logra Rust la seguridad de memoria? Mediante un sistema de verificación estático de <a href=\"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\"><em>prestamos</em> y <em>pertenencia</em></a>. En artículos futuros explicaremos cómo se logra la seguridad de memoria con este sistema.</p>\n\n<h3 id=\"productividad\">Productividad</h3>\n\n<p>Como lo dice la cita del principio, la ventaja principal de Rust es que te permite ser más productivo en diferentes aspectos de la programación.</p>\n\n<p>Rust tiene a <a href=\"https://doc.rust-lang.org/cargo/\">cargo</a>, el manejador de paquetes que además te ayuda a crear proyectos, correr las pruebas, realizar reportes diversos sobre tu código, compilar y administrar paquetes, etc.</p>\n\n<p>Cargo te ayudará en formas que lenguajes más antiguos como C y C++ no pueden, no tendrás que crear los scripts de compilación a mano, o instalar un gestor de paquetes, etc.</p>\n\n<h3 id=\"abstracciones-sin-costo-en-tiempo-de-ejecución\">Abstracciones sin costo en tiempo de ejecución</h3>\n\n<p>Otra de las ventajas que Rust tiene para la productividad son las <a href=\"https://boats.gitlab.io/blog/post/zero-cost-abstractions/\">abstracciones sin costo</a> (zero-cost abstractions en inglés). Una abstracción sin costo se refiera a que puedes usar elementos de más alto nivel (que hacen más cosas por ti) en tus programas sin que esto genere un impacto negativo en el rendimiento del programa. Es decir, Rust genera el mismo código ensamblador sin importar si usas un for para sumar los elementos de un arrglo, si usas la función <code class=\"language-plaintext highlighter-rouge\">fold</code> o todavía a más alto nivel la función <code class=\"language-plaintext highlighter-rouge\">sum</code> en la que no tienes que hacer nada tú mismo. Sin duda estas abstracciones te pueden ayudar a ser más productivo, y lo mejor es que no tienes que pagar con rendimiento por ellas. Sabemos que las comidas gratis <a href=\"https://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch\">no existen</a>, ¿quién o dónde se paga el costo de estas abstracciones? <strong>Es el compilador</strong> quien se encarga de que estas formas más fáciles de programar no te cuesten nada en tiempo de ejecución, por lo tanto, te costarán en tiempo de compilación.</p>\n\n<p>Esto es un tema un poco controversial porque hay quienes dicen que estas no existen, pero yo creo sinceramente que su costo es tan bajo que podemos considerarlo como costo cero, además con las ganancias en productividad que se obtienen, se puede considerar como una ganancia neta.</p>\n\n<blockquote>\n  <p>Rust resuelve puntos dolorosos presentes en muchos otros lenguajes, dando un sólido paso adelante con pocas desventajas - Jake Goulding</p>\n</blockquote>\n\n<h3 id=\"comunidad\">Comunidad</h3>\n\n<p>La comunidad de Rust es vibrante y cada vez crece más. Rust cada vez se usa en más lugares y más empresas lo respaldan, es como una bola de nieve que se va haciendo cada vez más y más grande. Mi predicción es que la comunidad seguirá creciendo y desarrollando tanto Rust como paquetes y cosas prefabricadas para que sea cada vez más fácil crear software con Rust.</p>\n\n<h3 id=\"desventajas\">Desventajas</h3>\n\n<p>Rust, como todo, no es una solución mágica que vaya a resolver todos los problemas de la creación de software como si fuera un hechizo mágico. Algunas de las desventajas que le veo son:</p>\n\n<ol>\n  <li>\n    <p><strong>Novedad.</strong> Al ser un lenguaje tan nuevo, no hay tantos recursos desarrollados como para C, C++, Java o Python. Probablemente muchas de las cosas que hagas si trabajas en un dominio muy específico, las tendrás que programar desde cero o componer bugs al no haber tantas manos probándolo por mucho tiempo como en otros lenguajes.</p>\n  </li>\n  <li>\n    <p><strong>Dificultad de aprendizaje.</strong> Rust tiene conceptos que no estamos acostumbrados a manejar en otros lenguajes. Simplemente, uno de sus conceptos básicos, el de préstamos y pertenencia, es algo que a muchos programadores nos costará trabajo. El sistema de tipos y la dificultad de que algo compile es algo más que se escucha por ahí respecto a la dificultad de aprender y usar Rust.</p>\n  </li>\n  <li>\n    <p><strong>Está siendo desarrollado muy activamente.</strong> Esto puede ser tanto una ventaja como una desventaja, pero sin duda lo es para la estabilidad de tu código. Si algo cambia en una nueva versión del compilador, vas a tener que hacer un gran cambio en tu base de código o quedarte con tu versión atrasada. Por el lado bueno, a tu lenguaje base se le estarán agregando siempre nuevas y mejores funciones.</p>\n  </li>\n</ol>\n\n<p>Finalmente, puede que no <em>necesites</em> las cosas que te ofrece. El esfuerzo extra que tendrás que poner para hacer que el compilador acepte tus programas puede que valga la pena si el rendimiento, la seguridad en memoria o el acceso a bajo nivel no son algo que distinga a tu software, así que no te dejes llevar el miedo a perderte algo que no necesitas. Si estas haciendo un prototipo que tiene que salir lo más rápido posible, tal vez Rust no sea la mejor elección, por ejemplo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Rust es un lenguaje de programación moderno que ofrece grandes características para poder desarrollar software de diferentes niveles, desde sistemas a aplicaciones web, e incluso frontend con <a href=\"https://webassembly.org/\">WebAssembly</a>. Puede que sus características de seguridad, rendimiento y productividad (por lo menos comparado con C++) sean una razón suficiente para que quieras aprenderlo.</p>\n\n<p>Como desarrollador, también puedes pensar que Rust seguirá creciendo en popularidad y puede que el número de desarrolladores necesitados aumente en los próximos años, por lo que aprenderlo te abriría las posibilidades de encontrar buenos trabajos y bien pagados.</p>\n\n<p>En los próximos artículos hablaremos de las herramientas ya desarrolladas para facilitar el trabajo con Rust, es decir, su entorno Open Source y también de recursos para aprender Rust. ¿Qué piensas? ¿Valdrá la pena aprenderlo?</p>\n",
      "date_published": "Tue, 13 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/03/el-principio-abierto-cerrado-open-closed.html",
      "url": "https://blog.thedojo.mx/2022/12/03/el-principio-abierto-cerrado-open-closed.html",
      "title": "El principio Abierto/Cerrado (Open/Closed)",
      "content_html": "<p>El principio Abierto/Cerrado, originalmente establecido por Bertrand Meyer en 1988 (pero popularizado por <a href=\"https://drive.google.com/file/d/0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1/view?resourcekey=0-FsS837CGML599A_o5D-nAw\" target=\"_blank\">Robert Martin</a>), es para mi uno de los más útiles en el conjunto (tal vez el más útil) de SOLID.</p>\n\n<p>Vamos a analizarlo, ver sus caso de uso y finalmente a establecer sus relaciones con otros principios de diseño de software que te pueden ayudar a crear mejores programas.</p>\n\n<h2 id=\"el-principio-abiertocerrado\">El principio Abierto/Cerrado</h2>\n\n<p>Este principio establece que:</p>\n\n<blockquote>\n  <p>Cualquier módulo de software debería estar abierto para la extensión, pero cerrado para modificación.</p>\n</blockquote>\n\n<p>Otra vez nos encontramos con palabras vagas que tenemos que examinar, pero por suerte en este principio es más fácil llegar a una conclusión.</p>\n\n<p>En pocas palabras cuando tengas que modificar el comportamiento de un programa, lo último que deberías hacer siempre es modificar el código que ya existe, más bien, debes crear módulos (clases, métodos, funciones, paquetes) que permitan modificar su comportamiento agregando <strong>código nuevo</strong>.</p>\n\n<p>No hay ningún mecanismo casi en ningún lenguaje de programación que te permita “cerrar” o “abrir” módulos, así que estas ideas son puramente conceptuales y guías de comportamiento.</p>\n\n<h2 id=\"aplicaciones-y-ejemplos\">Aplicaciones y ejemplos</h2>\n\n<p>La forma de ejemplo más clásica de aplicarlo es mediante la preparación de tus módulos o clases para usar <strong>polimorfismo</strong>. Por ejemplo, imagínate que estás haciendo una aplicación para procesar pagos y quieres cobrar por diferentes medios. Cada uno de estos medios es un “método de pago”. Si implementas cada uno de estos métodos como dependientes de una clase padre, mediante la herencia, clases abstractas, protocolos o interfaces, tu procesador principal podrá, por ejemplo, llamar al método <code class=\"language-plaintext highlighter-rouge\">procesar</code> de cada clase, sin importar el tipo de método de pago que sea o sus detalles de implementación.</p>\n\n<p>En el ejemplo anterior, cuando quieras implementar un nuevo método de pago, simplemente creas un nuevo módulo que cumpla con las especificaciones de la clase padre y no tendrás que modificar el código existente. Así solo has añadido código nuevo y has eliminado la probabilidad de afectar cosas que ya existían y funcionaban bien.</p>\n\n<p>Como puedes ver, los principios de funcionamiento de estas técnicas tienen que ver con dos cosas:</p>\n\n<ul>\n  <li>\n    <p>Ocultar información (esconder la mayor cantidad de detalles de implementación de tus módulos, detrás de una interfaz)</p>\n  </li>\n  <li>\n    <p>Programación por contrato, cumplir con una interfaz dada para que otros módulos puedan usarla con seguridad. De esto hablaremos en otro artículo, pero quiero que veas como es un tema que se va a repetir.</p>\n  </li>\n</ul>\n\n<h2 id=\"aplicaciones-más-amplias\">Aplicaciones más amplias</h2>\n\n<p>Este principio también se puede aplicar a niveles diferentes del sistema, por ejemplo a nivel arquitectónico.</p>\n\n<p>Un situación en que puedes usar esta estrategia es cuando tienes un módulo que quieres cambiar pero no quieres deshacer o poner en riesgo el funcionamiento de todo el sistema, ya que puede tener consecuencias catastróficas.</p>\n\n<p>Para aplicarlo, tienes que dejar intacto el módulo de la funcionalidad afectada, mientras lo envuelves con tu nuevo código, usándolo como la interfaz principal cuando te conviene y reemplazándolo poco a poco cuando te sientas seguro.</p>\n\n<p>Como puedes notar, para poder aplicar esta técnica, los módulos deben ser completamente independientes o no podrías de ninguna manera aislar los cambios que estás intentando hacer. Esto casi siempre se logra con paso de mensajes, como por ejemplo una interfaz RPC, ReST o respetando un contrato (interfaz).</p>\n\n<h2 id=\"otros-ideas-parecidas\">Otros ideas parecidas</h2>\n\n<p>Lo primero que quiero que notes es que este principio tiene mucho que ver con la <strong>separación de funciones</strong>, la <strong>ocultación de información</strong> y el respeto a la interfaces.</p>\n\n<p>Espero que para este momento te empieces a dar cuenta de que todo lo que llamamos “principios SOLID” tienen en el fondo: <strong>Ocultar Información</strong>. Esto ha sido ha hablado mucho por <a href=\"https://levelup.gitconnected.com/open-closed-principle-is-nothing-about-the-code-270f1c04bebf\" target=\"_blank\">David L. Parnas</a>, y para mi, es gran parte de lo que se requiere para hacer gran software que pueda ser mantenido y funcional mucho tiempo.</p>\n\n<p>Esta mismo concepto ha sido tratado por otras personas, como Alistair Cockburn con su concepto de <a href=\"https://martinfowler.com/ieeeSoftware/protectedVariation.pdf\" target=\"_blank\">“Variación protegida”</a>.</p>\n\n<p>La idea natural del concepto, puedes entenderla más fácilmente con máquinas reales:</p>\n\n<ul>\n  <li>\n    <p>Una cámara con lentes intercambiables que, cuando requieres una nueva óptica, pones un lente con el mismo conector (interfaz)</p>\n  </li>\n  <li>\n    <p>Un carro, que cuando una llanta se poncha se la puedes cambiar, o si requieres para un terreno diferente, puedes ponerle llantas de otro tipo.</p>\n  </li>\n</ul>\n\n<p>El punto es darle a tu sistema puntos “naturales” de extensión, en los que los cambios puedan caber sin hacer grandes cambios en todo el sistema.</p>\n\n<h2 id=\"los-límites-de-la-extensión\">Los límites de la extensión</h2>\n\n<p>Es natural que llegue el punto en el que no puedas seguir extendiendo el sistema y tengas que cambiar código que ya está funcionando, nada de lo que estamos diciendo es una ley absoluta o moral que te tengas que sentir mal por no cumplir, recuerda que todo esto es por tu conveniencia, la de tus desarrollos y de tu equipo.</p>\n",
      "date_published": "Sat, 03 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/12/01/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html",
      "url": "https://blog.thedojo.mx/2022/12/01/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html",
      "title": "Análisis de los principios SOLID: Principio de Responsabilidad Única",
      "content_html": "<p>En esta serie de artículos vamos a hablar sobre los cinco <strong>principios SOLID</strong>. Se dice que todo programador que quiera crear código mantenible y <em>“limpio”</em> debe conocer y usar. La estructura de los artículos llevará la siguiente forma:</p>\n\n<ul>\n  <li>Explicación del principio</li>\n  <li>Ejemplos y contraejemplos para pensar</li>\n  <li>Críticas y alternativas</li>\n</ul>\n\n<p>Esta serie de artículos surge debido a que <strong>aunque son poco entendidos por la mayoría de los programadores</strong>, estos principios se toman como <em>verdades universales</em> que hay que seguir. Si queremos desarrollar buen software, no podemos ir por allí solamente aceptando lo que <em>la mayoría</em> dice que está bien sin entenderlo a fondo y cuestionarlo.</p>\n\n<p>Así que esta serie estará enfocada más bien en el lado débil de los principios SOLID y ver si tenemos mejores alternativas, o por lo menos, ver cuando podemos usarlos y cuando no.</p>\n\n<p>Empecemos diseccionando el primer principio de los aclamados SOLID: el principio de Responsabilidad Única. Como verás a lo largo de los artículos, estos principios casi siempre se aplican con ejemplos de programación orientada a objetos, por lo que los verás explicados con <em>“clases”</em> y <em>“objetos”</em>.</p>\n\n<h2 id=\"el-principio-de-responsabilidad-única\">El principio de Responsabilidad Única</h2>\n\n<p>Este principio se puede enunciar como:</p>\n\n<blockquote>\n  <p>“Una clase debe tener una única razón para ser modificada” según en libro <em>Rober Martin</em>.</p>\n</blockquote>\n\n<p>Otros lo enuncian como:</p>\n\n<blockquote>\n  <p>Una clase debe hacer sólo una cosa y hacerla bien.</p>\n</blockquote>\n\n<p>Esto es un resumen del principio que nos puede servir para ayudarnos a pensar sobre las <em>responsabilidades</em> que nuestro código tiene, específicamente una clase. Pero, ¿qué es una <em>responsabilidad</em>? Aquí es donde empiezan a entrar los problemas al definir este principio y a tomar pasos prácticos para aplicarlo. Pensemos en algunos ejemplos:</p>\n\n<ul>\n  <li>\n    <p>Una clase que se encarga de transformar un archivo de un formato en otro debería encargarse sólo de esta transformación. ¿En dónde empieza y dónde acaba la <em>responsabilidad</em> de esta clase? ¿Tiene que encargarse de leer y guardar el archivo? ¿Debe existir una clase para guardar el archivo y otra para leerlo?</p>\n  </li>\n  <li>\n    <p>Una clase que se encarga de la comunicación con la API, transformando las peticiones del programa interno en peticiones HTTP y transformando las respuestas de la API en objetos y tipos de datos internos. ¿Dónde acaba su <em>responsabilidad</em>?¿Es la encargada de verificar la condición de la red? ¿Se encarga de verificar que los datos sean correctos, o es responsabilidad de otra clase?</p>\n  </li>\n</ul>\n\n<p>Como puedes ver, el principio, aunque suena simple, deja muchas cosas sin resolver y vagas, por lo que pocos encuentran un manera clara de aplicarlo. A mi me parece que tiene aplicaciones, pero solamente si acotamos más su alcance y definimos algunos límites, incluso cambiando el enfoque del consejo.</p>\n\n<h2 id=\"el-problema\">El problema</h2>\n\n<p>El gran problema con este consejo es que la definición de lo que una <strong>responsabilidad</strong> significa es completamente arbitraria. Todo dependerá de quién esté dividiendo el problema más grande en <em>responsabilidades</em>. Además, esta división puede tener diferentes niveles de granularidad, por lo que una sola <em>responsabilidad</em> a cierto nivel puede significar varias <em>responsabilidades</em> en un nivel más bajo.</p>\n\n<h2 id=\"transformando-el-principio\">Transformando el principio</h2>\n\n<p>¿Cuál es la <em>esencia</em> del principio? Para mi el corazón de este consejo tiene que ver con controlar la <strong>información</strong> que una clase maneja. También tiene que ver con el <strong>cambio</strong>. Finalmente el consejo tiene que ver con la cantidad de información que podemos mantener en nuestra mente en un tiempo específico. Si una pieza de código hace demasiadas cosas, será difícil de entender y por lo tanto propensa a errores y omisiones.</p>\n\n<p>La primera  cosa de la que vamos a hablar es de la <strong>información</strong>. La idea de que se encapsule una responsabilidad en un una clase es que si la información que tenemos sobre un problema cambia, se propague por la menor cantidad de código posible en nuestra base, rediciendo el impacto y la posibilidad de crear problemas.</p>\n\n<p>Entonces, lo primero que tenemos que pensar es si el nivel de granularidad del que se está hablando (clases) es el correcto. Para mi, no se puede establecer un nivel de granularidad tan fijo, sino que dependerá del programador que decida dónde <strong>encapsular o esconder</strong> la información que esta responsabilidad maneja. Puede que sea un módulo, paquete, clase o función. Hay problemas grandes y pequeños.</p>\n\n<p>Para aplicar esto, piensa:</p>\n\n<ul>\n  <li>¿Qué procedimientos, información y datos va a manejar esta pieza de código? Si no tienes claro esto, puede que te falte pensar un poco más en problema, e incluso dividirlo mejor.</li>\n  <li>¿Cómo puedo aislar la información que esta pieza de código maneja, de tal forma que si cambiar, no afecte a todo lo que está fuera de ella?</li>\n  <li>¿De dónde viene y a dónde va la información que esta pieza de código transforma?</li>\n  <li>¿Cómo puedo definir <em>exactamente</em> qué hace esta pieza de código? Esta definición junto con la justificación de la decisión debería estar bien documentada.</li>\n</ul>\n\n<h2 id=\"técnicas-para-concretar-el-principio\">Técnicas para concretar el principio</h2>\n\n<ul>\n  <li>\n    <p>Divide en problemas (responsabilidades) bien definidas tu problema principal. No hay una forma correcta de hacerlo, estas divisiones siempre serán arbitrarias, así que trata de documentar estas decisiones lo mejor posible. Estas decisiones deben ser fáciles de entender en la medida de lo posible.</p>\n  </li>\n  <li>\n    <p>Define exactamente que hará cada pieza de código que tenga una interfaz. Un módulo, una clase y una función tienen una interfaz, una parte que permite a otras piezas de código usar su funcionalidad interna. La función de esta interfaz es <em>esconder</em> los detalles de implementación permitiendo el uso de la funcionalidad encapsulada. También esto debe estar bien documentado en el lugar adecuado. Documenta lo que hace, no cómo lo hace.</p>\n  </li>\n</ul>\n\n<p>Estos dos puntos anteriores los puedes aplicar recursivamente a nivel cada vez más bajo, hasta que consideres que el problema es lo suficientemente pequeño como para resolverlo directamente.</p>\n\n<p>El último consejo tiene varias partes, por lo que trataremos en un subtítulo aparte.</p>\n\n<h2 id=\"evita-las-fugas-de-información\">Evita las fugas de información</h2>\n\n<p>Aunque tengamos completamente claro lo que una clase, módulo o función hace, nuestros detalles de implementación pueden dejar escapar información que no es conveniente que esté fuera de ella.</p>\n\n<p>Piensa por ejemplo en la clase que se comunica con la API. ¿Qué pasaría si pasaras directamente los errores que la API da hacia las demás partes del código? Si esta parte cambia en el futuro, afectarás a todas estas partes que consumen esos errores.</p>\n\n<p>Puedes seguir estos consejos para evitar fugas de información:</p>\n\n<ul>\n  <li>\n    <p>Define estructuras de datos para comunicar información entre clases, módulos y funciones que sean uniformes a todos. Si alguien necesita un formato diferente, sólo lo transformará dentro de sus límites, siempre encargándose de devolver y  recibir la información en el formato correcto.</p>\n  </li>\n  <li>\n    <p>Evita las dependencias temporales. Siempre que tienes que llamar las mismas funciones, clases o módulos en el mismo orden quiere decir que tienes una dependencia temporal. La información se está escapando en el orden de las llamadas. Piensa si estas piezas de código en realidad debieron ser una sola pieza.</p>\n  </li>\n  <li>\n    <p>Evita usar la misma abstracción a diferentes niveles. Imagínate que estás haciendo una aplicación para editar texto. Tienes una clase central que se encarga de mantener el estado del texto. Esta clase tiene la interfaz básica para realizar todas las transformaciones necesarias básicas, pero no le puedes exponer esto al usuario. El usuario necesita comandos como Copiar, Pegar y Cortar. Sería una mala idea usar estas mismas abstracciones en tu clase central, porque encadenaría completamente tu interfaz con tu centro y viceversa. Por eso, la clase que maneja el código debe tener abstracciones más básicas, adecuadas para crear funcionalidades como Copiar, Pegar, Cortar, u otras, si se necesitara.</p>\n  </li>\n</ul>\n\n<p>Todos estos consejos se tratan de mejor manera en el libro “A Philosophy of Software Design” de John Ousterhout, pero también me gustaría hacer eco de un consejo de Dan North: <strong>Busca crear código simple.</strong></p>\n\n<p>Esta fue la crítica y aplicación del principio de Responsabilidad Única. En el siguiente artículo veremos el principio de Abierto/Cerrado (Open/Closed Principle).</p>\n",
      "date_published": "Thu, 01 Dec 2022 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/10/12/crea-hashes-resistentes-a-balas-con-keccak-tambien-llamado-sha-3.html",
      "url": "https://blog.thedojo.mx/2022/10/12/crea-hashes-resistentes-a-balas-con-keccak-tambien-llamado-sha-3.html",
      "title": "Crea hashes resistentes a balas con Keccak (SHA-3)",
      "content_html": "<p>Ya hemos hablado en este blog de lo que es un <a href=\"/2021/12/02/algoritmos-criptograficos-que-es-un-hash.html\">hash</a> e incluso qué hashes puedes usar para guardar tus <a href=\"/2021/12/03/algoritmos-criptograficos-hashes-seguros-para-alamcenar-passwords.html\">passwords de manera segura</a>.</p>\n\n<p>En este artículo vamos a hablar de uno en específico, el que estamos seguros que deberías usar para cualquier uso futuro en tus programas y sistemas, el que ha sido nombrado como el Secure Hash Algorithm 3 (<a href=\"https://www.nist.gov/publications/sha-3-standard-permutation-based-hash-and-extendable-output-functions?pub_id=919061\">SHA-3</a>): <strong>Keccak</strong>.</p>\n\n<h2 id=\"qué-es-keccak\">¿Qué es Keccak?</h2>\n\n<p><a href=\"https://keccak.team/\">Keccak</a> es una familia de funciones, creadas para cubrir la necesidad de un sucesor de la versión 2 del <em>Secure Hash Algorithm</em>, que tiene algunas limitaciones y vulnerabilidades (por ejemplo, el ataque de extensión de longitud).</p>\n\n<p>Está basada en una construcción de esponja, y usa internamente una función criptográfica llamada <strong>Keccak-f</strong>, que se encarga de permutar (cambiar de lugar o mezclar) los bits de la entrada de manera segura.</p>\n\n<p>Después de haber ganado la competición para la versión 3 del <em>Secure Hash Algorithm</em>, y por lo tanto ser nombrada <strong>SHA-3</strong>, ha sido estandarizada en diferentes documentos para diferentes usos. La estandarización implica que ha sido examinada y analizada criptográficamente por organismos internacionales, empresas e individuales para estar seguros de que no tiene deficiencias como función hash criptográfica.</p>\n\n<p>Un punto interesante es que uno de los diseñadores de esta función, también participó en la creación del actual AES: <a href=\"https://cs.ru.nl/~joan/\">Joan Daemen</a>, probablmente es un investigador al que le debamos prestar más atención, ya que casi toda nuestra seguridad actual y futura está influida por él.</p>\n\n<h2 id=\"qué-es-una-construcción-de-esponja\">¿Qué es una construcción de esponja?</h2>\n\n<p>La “arquitectura” interna de Keccak se distingue de otras funciones <em>hash criptográficas</em> por ser tener una <strong>construcción de esponja</strong>. SHA-1 y SHA-2 usan una construcción de <a href=\"https://www.coursera.org/lecture/crypto/the-merkle-damgard-paradigm-Hfnu9\">Merkle–Damgård</a>.</p>\n\n<p>¿Qué es una <strong>construcción de esponja</strong> y por qué nos importa como desarrolladores de software?</p>\n\n<p>Una construcción de esponja usa una función de <em>permutación</em> (en el caso de Keccak esta función se llama <strong>keccak-f</strong>). Un función de permutación mapea todas las combinaciones posibles de bits en la entrada a todas las combinaciones posibles de esa misma cantidad de bits, intercambiándolas. Por ejemplo, imagina una función que acepta 3 bits y devuelve 4 bits, y que intercambia los bits de la siguiente manera:</p>\n\n<pre><code class=\"language-center\">000 --(f)--&gt; 010\n001 --(f)--&gt; 100\n010 --(f)--&gt; 001\n011 --(f)--&gt; 111\n100 --(f)--&gt; 000\n101 --(f)--&gt; 110\n110 --(f)--&gt; 101\n111 --(f)--&gt; 011\n</code></pre>\n\n<p>Observa como ninguna de las combinaciones se repite en ninguno de los dos lados. <strong>keccak-f</strong> es una permutación de 1600 bits.</p>\n\n<p>La construcción de esponja divide los bits de la salida en dos partes: <em>velocidad</em> y <em>capacidad</em>. Esta división arbitraria, en el caso de <strong>Keccak</strong> depende de la versión que se quiera usar. La parte de la <em>velocidad</em> define cuántas veces se tiene que aplicar la función, ya que mientras más grande sea, más rápido se conseguirá el tamaño deseado. La parte de la <em>capacidad</em> define qué tan segura es la función, mientras más grande sea, más segura es la construcción de esponja (y más pequeña es la parte de velocidad, por lo que la función hash tardará más).</p>\n\n<p>Keccak empieza este ciclo con un estado inicial de puros ceros. La entrada se divide en bloques del tamaño de la velocidad (si es más pequeña que la velocidad, se <a href=\"https://crypto.stackexchange.com/questions/40511/padding-in-keccak-sha3-hashing-algorithm\">aplica un padding</a>). Se aplica un XOR entre cada bloque y el primer bloque de la velocidad, y se le da como entrada a la función de permutación. Esto se hace <strong>tantas veces como bloques haya</strong>. Esta fue la etapa de absorción.</p>\n\n<p>Finalmente, para obtener el hash, se “exprime” la función, siendo el primer bloque del resultado la parte de la <em>velocidad</em> de la última iteración y para obtener los siguientes bloques se aplica la función de permutación sucesivamente hasta obtener la cantidad de bytes requeridos. La siguiente imagen ilustra el proceso (con una permutación de 8 bits y una velocidad de  5 bits):</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1666498363/Screen_Shot_2022-10-22_at_21.51.41_h0u7s0.png\" alt=\"Arquitectura interna de una función construcción de esponja\" class=\"align-center\" />\n<em>Ejemplo de construcción de esponja con permutación de 5 bits. (Tomado del libro <a href=\"https://www.manning.com/books/real-world-cryptography\">Real World Cryptography de David Wong</a>)</em></p>\n\n<p>Ahora ya sabes cómo funciona a grandes rasgos <strong>Keccak</strong> internamente. <strong>¿Por qué nos interesa esto?</strong> Las funciones de esponja pueden ser configuradas para que absorban más o menos bits y por lo tanto son bastante flexibles, lo que permite crear funciones configurables y que pueden crear salidas de diferentes tamaños.</p>\n\n<h2 id=\"tamaños-de-keccak\">Tamaños de Keccak</h2>\n\n<p>Keccak ofrece los mismos tamaños de salida que SHA-2. Existen las siguientes versiones:</p>\n\n<ul>\n  <li><strong>SHA-3-224</strong>: 224 bits</li>\n  <li><strong>SHA-3-256</strong>: 256 bits</li>\n  <li><strong>SHA-3-384</strong>: 384 bits</li>\n  <li><strong>SHA-3-512</strong>: 512 bits</li>\n</ul>\n\n<p>Como siempre, mientras más grande sea la salida, más bits de seguridad ofrece y más difícil es de ser vulnerada.</p>\n\n<h2 id=\"usando-keccak\">Usando Keccak</h2>\n\n<p>El siguiente ejemplo muestra cómo usar Keccak como SHA-3-256 en Python (SHA-3 está disponible desde la versión 3.6 de Python):</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">sha3_256</span>\n\n<span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">sha3_256</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s\">\"Hello world\"</span><span class=\"p\">).</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n<span class=\"c1\"># resultado '369183d3786773cef4e56c7b849e7ef5f742867510b676d6b38f8e38a222d8a2'\n</span>\n</code></pre></div></div>\n\n<p>Aquí hay un ejemplo en Go:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span>\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n <span class=\"s\">\"fmt\"</span>\n <span class=\"s\">\"golang.org/x/crypto/sha3\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"s\">\"hello world\"</span>\n\n <span class=\"c\">// Un hash de 256 bits</span>\n <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">sha3</span><span class=\"o\">.</span><span class=\"n\">New256</span><span class=\"p\">()</span>\n <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">Write</span><span class=\"p\">([]</span><span class=\"kt\">byte</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">))</span>\n\n <span class=\"n\">bs</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"no\">nil</span><span class=\"p\">)</span> <span class=\"c\">// terminamos la cadena</span>\n\n <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"c\">// hello world</span>\n <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"%x</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"p\">)</span> <span class=\"c\">// 369183d3786773cef4e56c7b849e7ef5f742867510b676d6b38f8e38a222d8a2</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Aquí hay una implementación de Java:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kn\">import</span> <span class=\"nn\">java.security.MessageDigest</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.security.NoSuchAlgorithmException</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">MessageDigest</span> <span class=\"n\">md</span><span class=\"o\">;</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n      <span class=\"n\">md</span> <span class=\"o\">=</span> <span class=\"nc\">MessageDigest</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">(</span><span class=\"s\">\"SHA3-256\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">NoSuchAlgorithmException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">IllegalArgumentException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">md</span><span class=\"o\">.</span><span class=\"na\">digest</span><span class=\"o\">(</span><span class=\"s\">\"Hello world\"</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">());</span>\n    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"na\">bytesToHex</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">));</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">bytesToHex</span><span class=\"o\">(</span><span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">StringBuilder</span> <span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">byte</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">bytes</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"s\">\"%02x\"</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Además, aquí puedes ver ejemplos de cómo usar Keccak (SHA-3) en otros lenguajes:</p>\n\n<ul>\n  <li><a href=\"https://www.npmjs.com/package/sha3\">SHA-3 en JavaScript o TypeScript</a></li>\n  <li><a href=\"https://github.com/johanns/sha3\">SHA-3 en Ruby</a></li>\n  <li><a href=\"https://www.erlang.org/doc/man/crypto.html#type-hash_algorithm\">SHA-3 en Elixir, usando Erlang</a></li>\n</ul>\n\n<h2 id=\"por-qué-usar-keccak\">¿Por qué usar Keccak?</h2>\n\n<p>SHA-3 o Keccak es una función más fuerte, sin vulnerabilidades conocidas, estandarizada y lista para ser usada como reemplazo de SHA-2 en cualquier lado sin grandes cambios. No hay pretexto para no usarla si existe una buena implementación en tu lenguaje.</p>\n",
      "date_published": "Wed, 12 Oct 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/09/19/mi-experiencia-como-mentora.html",
      "url": "https://blog.thedojo.mx/2022/09/19/mi-experiencia-como-mentora.html",
      "title": "Mi experiencia como Mentora",
      "content_html": "<blockquote>\n  <p>“El círculo está completo. Cuando te dejé, yo erá el alumno. Ahora, soy el maestro”. - <strong>Darth Vader.</strong></p>\n</blockquote>\n\n<p>Intentando evitar ser una maestra del mal; en los últimos meses tuve la oportunidad de ser mentora de dos mujeres increíbles.</p>\n\n<p>El viaje comenzó con mi participación en un programa de capacitación en mi actual trabajo; la empresa invitó a personas con experiencia Senior para ser mentores de los niveles Junior y Mid. Creé un perfil siguiendo las recomendaciones del equipo en la empresa. La verdad es que al principio tenia algunas limitaciones, como por ejemplo:</p>\n\n<ul>\n  <li>“No sé qué compartir.”</li>\n  <li>“No estoy segura de que mi experiencia sea útil para alguien.”</li>\n  <li>“Tal vez, no tengo el perfil de una mentora.”</li>\n  <li>“¿Qué puedo enseñar que no sepan ya?”</li>\n</ul>\n\n<p>Afortunadamente, se me asignó una excelente Ingeniera de QA. Ella me ayudó a romper esos límites porque desde el principio creamos un sólido vínculo mentor-mentee. Compartir con ella sesiones de mentoría, escuchar sus situaciones, tratar de darle recomendaciones o hablar de mi experiencia fue una oportunidad que disfruté muchísimo.</p>\n\n<p>Casi al mismo tiempo, una persona de la comunidad tecnológica de mujeres en la que participo me contactó y me pidió que fuera mentora de otra mujer con un perfil diferente, esta vez más similar al mío (Ingeniera Backend), y nuevamente me llegaron mis limitaciones a la mente <em>“Oh… no sé si podré hacerlo.”</em></p>\n\n<p>Pero gracias a Dios acepté y una vez más, construimos un vínculo sólido mentor-mentee y fue una oportunidad muy buena para mí.</p>\n\n<p>Ahi estaba yo apoyando y compartiendo experiencias con dos ingenieras increíbles. Al día de hoy, no me arrepiento de nada; por el contrario, mis dos nuevas amigas me dieron retroalimentación muy positiva sobre mi desempeño como mentora. Además durante este tiempo, una de ellas decidió aceptar una nuevo trabajo y estuve ahi disfrutando del proceso con ella.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,q_64,w_540/v1663559999/190726122-af5f2027-62c3-4ccb-8e4e-0cd3d78061df_weepz8.png\" alt=\"Hercules 1\" class=\"align-center\" /></p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,q_61,w_540/v1663560004/190726136-7bce6bad-633b-457a-b7f7-fb0876b2822d_ebghm2.png\" alt=\"Hercules 2\" class=\"align-center\" /></p>\n\n<p><em>(Fuente de las imágenes: Hercules 1997 <a href=\"https://www.disney.com/\">Disney</a> película)</em></p>\n\n<p>Mis primeras mentees son mujeres, y estoy orgullosa de eso, pues hoy día sigo trabajando en equipos de ingeniería donde <strong>hay un 10% de presencia femenina</strong>. Sin embargo, no limito el compartir mis conocimientos por género; constantemente trato de hacerlo en charlas, artículos o simplemente ofreciendo mi ayuda en el trabajo. Creo que el primer paso para aportar a la comunidad es definitivamente <strong>“comenzar”</strong>; no permitas que tus inseguridades te impidan compartir tu <strong>conocimiento</strong>. Siempre tendremos algo que enseñar.</p>\n\n<h3 id=\"mis-aprendizajes\">Mis aprendizajes</h3>\n\n<p>Aquí una lista de cosas que aprendí de esta experiencia:</p>\n\n<ol>\n  <li>Todos tenemos inseguridades; ayuda a la persona que estés mentoreando a identificar y manejar las suyas.</li>\n  <li>Cuando nos comparten algo, debemos escuchar activamente, esto implica pedir detalles y así construir un espacio seguro.</li>\n  <li>Ayuda a la persona que estas mentoreando a ser consciente de sus capacidades; que sea capaz de reconocer y comparar su avance.</li>\n  <li>Por lo general, las personas no necesitan conocimientos; ya los tienen o saben dónde conseguirlos. Lo que necesitan es <strong>inspiración</strong>.</li>\n  <li>Ser abierto y compartir momentos vulnerables de nuestra vida puede ayudar a otros a identificar y atravesar sus momentos difíciles más rápido.</li>\n  <li>La visibilidad puede impulsar una carrera muy rápidamente. Apoya a la persona que estas mentoreando a ser visible en lo que hace en su equipo o trabajo.</li>\n  <li>Una charla informal puede ser más valiosa que una formal. Sin embargo, no pierdas de vista que en las mentorías profesionales, la relación que establecemos, debe mantenerse profesional, <strong>los ingenieros no somos psicólogos</strong>. Si lo consideras oportuno, puedes redirigirlos con un especialista.</li>\n  <li>Compartir tu experiencia en procesos de entrevista es importante; <strong>lo que hayas atravesado puede acelerar el proceso de alguien más</strong>.</li>\n  <li>Es muy importante brindar y solicitar <strong>retroalimentación</strong> constantemente. Todos estamos en continuo crecimiento como profesionales, intercambia información sobre tus y sus áreas de oportunidad.</li>\n  <li>Comparte tus fuentes de conocimiento, libros, publicaciones, podcasts, etc., cualquiera que pueda ser útil, pero recuerda que no debes compartirlo como tarea a completar; si la persona que estas mentoreando tienen la oportunidad, puede usar esos recursos.</li>\n  <li>Hemos sido testigos de cómo en el área de tecnología las oportunidades se multiplican cuando somos capaces de dominar otro idioma, usualmente es el inglés el que nos abre esas puertas. Si tu ya te eres capaz de manejar este idioma y la persona que estas mentoreando no, o aún tiene sus dudas, hacer las sesiones de mentoría en inglés puede ser muy útil.</li>\n</ol>\n\n<p>Podría enumerar más cosas aquí. Pero preferí limitarlo a estos puntos porque, al final, somos personas diferentes, y no hay una receta mágica para ser un <strong>buen mentor</strong>. Solo puedo decirte que si quieres intentarlo, hazlo y hazlo teniendo en mente que estamos en crecimiento constante como profesionales.</p>\n\n<h3 id=\"cuál-fue-mi-crecimiento-profesional-durante-esta-experiencia\">¿Cuál fue mi crecimiento profesional durante esta experiencia?</h3>\n\n<p>Identificó lo siguiente.</p>\n\n<ul>\n  <li>Aumento en mi confianza.</li>\n  <li>Oportunidad de repasar conocimientos.</li>\n  <li>Práctica en proceso de entrevista.</li>\n  <li>Mejoras en mi comunicación.</li>\n  <li>Aprendí de otras áreas.</li>\n  <li>Aumenté mis contactos en el área.</li>\n  <li>Experimenté sentimientos agradables (diversión, felicidad, me sentí orgullosa de ellas)</li>\n  <li>Aumento en mi disciplina.</li>\n</ul>\n\n<p>Por último, pero no menos importante. Quiero agradecer a las personas de las que fui mentora, por todo lo que me enseñaron durante este tiempo; hoy, gracias a ustedes, soy mejor Ingeniera Senior que ayer.</p>\n",
      "date_published": "Mon, 19 Sep 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/08/11/estas-cambiando-de-trabajo.html",
      "url": "https://blog.thedojo.mx/2022/08/11/estas-cambiando-de-trabajo.html",
      "title": "¿Estás cambiando de trabajo?",
      "content_html": "<p>Era noviembre de 2020, sí 2020, el primer año del caos… Momento, aqui va más contexto: llevaba 7 años trabajando para un comercio electrónico, era muy apreciada en ese trabajo y lo disfrutaba mucho. Fuimos una de las mejores empresas de comercio electrónico en LATAM. Empecé a trabajar allí cuando era una startup y disfruté participando en su crecimiento. Durante mi último año allí, una gran corporación multinacional de LATAM adquirió la empresa y con esa adquisición llegaron nuevos desafíos.</p>\n\n<h2 id=\"qué-estaba-haciendo-en-ese-entonces\">¿Qué estaba haciendo en ese entonces?</h2>\n\n<p>Estaba trabajando en algo importante, la primera API que desarrolle por mi cuenta y que tendría impacto en los procesos de negocio. Después de desarrollar el MVP, se unieron más desarrolladores al proyecto, y construimos la primera versión de la API (que, hasta donde yo sé, todavía está en uso). El equipo era genial, mi posición era buena y mis opiniones eran respetadas, perode repente, recibí el mensaje de un amigo:</p>\n\n<h3 id=\"oye-estoy-trabajando-en--y-me-gustaría-referirte-a-un-puesto-de-ingeniero-de-software-sénior-te-interesaría\">“¡Oye! Estoy trabajando en […] y me gustaría referirte a un puesto de ingeniero de software sénior, ¿te interesaría?”</h3>\n\n<p>Me tomó por sorpresa. Honestamente solía ser una persona que disfrutaba de la estabilidad antes del dinero o los desafíos (jaja), pero estábamos en plena pandemia y comencé a preguntarme:</p>\n\n<p>“Ya tengo 7 años de experiencia con este producto, ¿qué pasaría si cambio de trabajo?”\n“¿Es un buen momento para hacer este cambio?”</p>\n\n<p>¡En ese momento me di cuenta de que estaba en una especie de zona de confort! No me malinterpretén, no está mal disfrutar de la comodidad. Lo hice, y fue una etapa maravillosa. Pero en aquel entonces, estaba pensando en nuevos desafíos…</p>\n\n<h2 id=\"la-decisión\">La decisión</h2>\n\n<p>Mi amigo me habló de todas las cosas buenas que traería el nuevo puesto. Decidí comenzar el proceso y ¿adivinen qué? ¡Recibí la oferta! Respiré hondo y di un “salto de fe”. No fue fácil, ¿sabes? Hay ingenieros increíbles que a menudo cambian de trabajo y los admiro por su fuerza y ​​experiencia al hacerlo. Pero, por otro lado, estaba yo, especializándome en el producto de una empresa, siendo buena en mi trabajo y realmente no buscaba cambios hasta ese día.</p>\n\n<h2 id=\"qué-pasó-con-mi-trabajo-anterior\">¿Qué pasó con mi trabajo anterior?</h2>\n\n<p>Bueno, considerando que ya no era la única que trabajaba en la API, escribí la documentación, con algunas propuestas que imaginaba como los próximos pasos en el crecimiento de la API, hablé con mis compañeros de trabajo avisándoles con anticipación  de mi partida y dejé la empresa, un empresa que permanece en mi corazón como la que me ayudó a convertirme en la ingeniera que soy actualmente.</p>\n\n<h2 id=\"el-comienzo-de-una-nueva-etapa\">¡El comienzo de una nueva etapa!</h2>\n\n<p>No tenía idea de qué es lo que venía, pero la parte difícil ya estaba hecha. La empresa en la que trabajo actualmente es un proveedor global de servicios de tecnología, lo que significa que no estoy necesariamente trabajando en un producto específico. Para una persona como yo, que estuvo 7 años en el mismo lugar, esta fue una muy buena oportunidad. Comenzar el proceso de ser entrevistado, una vez más, obtener nuevas certificaciones y, lo más importante, cambiar a un nuevo lenguaje de programación. Sin duda, este último punto es algo que muchos pueden hacer sin cambiar de trabajo. Sin embargo, en mi opinión, hacer un proyecto paralelo en diferentes tecnologías no es lo mismo que obtener experiencia profesional en esas tecnologías en su trabajo de tiempo completo. En Noviembre 2022 cumpliré 2 años en este trabajo y la verdad es que disfruto mucho de mi puesto actual.</p>\n\n<p>Así es como evolucionó mi escritorio en casa durante este tiempo (Dios bendiga el home office):</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1660258408/182005458-80093fb7-e46c-49d9-ae4d-c35b8cf437ea_ptlwdt.png\" alt=\"Sag oficina en casa\" /></p>\n\n<h2 id=\"por-qué-escribo-este-post\">¿Por qué escribo este post?</h2>\n\n<p>Con los cambios actuales en la industria y la difícil situación de la economía mundial, hay muchas personas que estan cambiando de trabajo. Si eres uno de los afortunados como yo, y decidiste cambiar a un nuevo trabajo porque es una mejor oportunidad para ti, quiero felicitarte, toma esa curva de aprendizaje y no mires atrás. No es fácil, pero cada nuevo logro es un nuevo paso en el desarrollo de tu carrera. Por otro lado, si tuviste que cambiar de trabajo no porque quisieras, sino porque algo sucedió, déjame decirte que los cambios son buenos. Incluso si los sufrimos sin planearlo, definitivamente será difícil, pero ¿qué en la vida no lo es? Solo espero que puedas encontrar un buen lugar para tus próximos desafíos y que tu situación sea lo suficientemente buena para soportar el cambio.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Por último, pero no menos importante, para todos, como ingenieros de software, algunas claves, mantener un perfil profesional actualizado(LinkedIn, GitHub, etc.), estar abierto a nuevas ofertas de trabajo y establecer relaciones con otros profesionales en esta industria tanto como se pueda. Además, no seas egoísta con tus conocimientos y habilidades, estamos en el mismo gremio y es importante que nos apoyemos unos a otros para construir la tecnología que merecemos.</p>\n\n<p>Gracias por leer este pedacito de mi vida. Deseo, de todo corazón, que logres todas tus metas.</p>\n\n",
      "date_published": "Thu, 11 Aug 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/06/11/resumen-historia-de-los-lenguajes-de-programacion.html",
      "url": "https://blog.thedojo.mx/2022/06/11/resumen-historia-de-los-lenguajes-de-programacion.html",
      "title": "Resumen: Historia de los lenguajes de programación",
      "content_html": "<p>¿Te has preguntado cómo nacieron los primeros lenguajes de programación? Manuel Rubio, autor de <a href=\"https://altenwald.com/book/histlangprog\">‘Historia de los lenguajes de programación’</a>, nos habla lo explica de manera cronológica en el primer tomo de esta obra.</p>\n\n<h2 id=\"resumen-general\">Resumen general</h2>\n\n<p>El libro habla de manera más o menos cronológica del nacimiento de los primeros lenguajes de programación, desde la época de 1940. La forma en que lo narra te hace comprender claramente <strong>por qué eran necesarios</strong> y las diferentes tendencias que se dieron.</p>\n\n<p>El libro abarca hasta el año 1960, poco antes del nacimiento de Lisp. Hablemos ahora de las fases que el libro cubre a grandes rasgos.</p>\n\n<h2 id=\"el-nacimiento-de-la-computación-automática\">El nacimiento de la computación automática</h2>\n\n<p>El primer capítulo trata sobe el nacimiento de la computación como la conocemos, cómo <strong>Alan Turing</strong>, <strong>Alonzo Church</strong> y <strong>John von Neumann</strong> definieron lo que conocemos como computable, gracias al <a href=\"https://paginas.matem.unam.mx/videos/2017/marzo-2017/seminario-junior/427-acerca-del-problema-de-la-decision\">“Problema de la decisión”</a>, definido en los diez problemas del matemático David Hilbert.</p>\n\n<p>Además habla de las contribuciones de <a href=\"https://www.britannica.com/biography/John-von-Neumann\">John Von Neumann</a> para el diseño y la concreción de las computadoras como medios físicos.</p>\n\n<p>El segundo capítulo habla del camino independiente que tuvo <strong>Konrad Zuse</strong>, en la creación de máquinas automáticas para la computación de problemas lógicos y matemáticos. Habla de cómo hizo la <strong>Z1, Z2 y Z3</strong>, computadoras mecánicas, cada una mejor que la otra. Además habla de la creación de un lenguaje de programación teórico llamado <strong>Plankalkül</strong>.</p>\n\n<p>Estos dos capítulos son muy interesantes porque nos ayudan a comprender cómo la computación automática es algo que estaba muy cerca de ser logrado por la década de 1930, por diferentes mentes y de formas parecidas.</p>\n\n<h2 id=\"los-primero-lenguajes-que-corrían-en-computadoras\">Los primero lenguajes que corrían en computadoras</h2>\n\n<p>Los siguientes capítulos nos van hablando de la progresión de los lenguajes de programación, todos guiados principalmente por dos cosas:</p>\n\n<ol>\n  <li>La capacidad de la computaras existentes, pero sobre todo, sus <em>límitaciones</em>.</li>\n  <li>La intención de los usuarios de la computadora.</li>\n</ol>\n\n<p>No vamos a hablar de cada uno de los capítulos y lenguajes que se mencionan en el libro, pero hablemos de la progresión general que se fue dando y cómo se acercaban cada vez más los lenguajes que conocemos hoy.</p>\n\n<p>Las primeras computadoras programables requerían que se recablearan, es decir, esta era su forma de entrada de información, sin embargo, se empezaron a crear tablas de instrucciones que ayudaban a programar. Tenemos por ejemplo el <a href=\"https://hopl.info/showlanguage2.prx?exp=6030\">ENIAC Short Code</a>.</p>\n\n<p>También, durante esta época empezaron a crearse cosas que damos por sentado, pero que seguramente surgieron naturalmente durante el trabajo del día a día de las primeras <em>programadoras</em>:</p>\n\n<ol>\n  <li>La <strong>subrutina</strong>, como una plantilla de código reutilizable a la que sólo se le agregaban los datos en lugares designados para ello.</li>\n  <li>El <strong>punto de ruptura</strong>, que es una pausa en la ejecución de un programa, para revisar el estado general del sistema y el programa.</li>\n</ol>\n\n<p>Después de esto empezaron a nacer los primeros lenguajes <em>ensambladores</em>. Un lenguaje <strong>ensamblador</strong> es un conjunto de instrucciones apegadas al procesador que lo correrá, que sustituyen las instrucciones en binario y que para pasar a código máquina necesitan una fase de transformación, que los primeros programadores llamaban la fase de “ensamblaje”. En este sentido, lo que conocemos como lenguajes ensambladores, debieron haberse llamado <a href=\"https://softwareengineering.stackexchange.com/questions/405080/why-is-assembly-language-called-assembly\"><em>lenguajes ensamblados</em></a>.</p>\n\n<p>Estos lenguajes correspondían a su propia computadora y que por lo tanto, <em>no se podían usar en ningún otro lado</em>. Tenemos como ejemplo (y primer lenguaje ensamblador reconocido) el <strong>ARC Assembly de Kathleen Booth</strong>. Así surgieron más lenguajes de este estilo, cada uno para su máquina específica hasta la creación de los primeros intérpretes y compiladores.</p>\n\n<h2 id=\"el-primer-intérprete\">El primer intérprete</h2>\n\n<p>¿Qué nacio primero? Los compiladores o los intérpretes? Pues resulta que lo primero que permitió usar un lenguaje de alto nivel, es decir, algo no relacionado directamente con las instrucciones de específicas de un procesador, fue un <strong>intérprete</strong> propuesto por John Mauchly en 1949. Este fue llamado primero <em>Brief Code</em> y después <em>Short Code</em>.</p>\n\n<p>Un intérprete es un programa que transforma un lenguaje de alto nivel en código máquina, es decir, instrucciones para el procesador para el que este intérprete está implementado y además lo ejecuta.</p>\n\n<p><strong>Short Code</strong> fue un lenguaje pensado para representar y resolver expresiones matemáticas. Fue implementado para el <strong>BINAC</strong> en 1949 y para el <strong>UNIVAC I</strong> en 1950, por William Schmitt. Aquí empieza la historia de los lenguajes que no están pegados a la arquitectura de un procesador.</p>\n\n<h2 id=\"el-primer-compilador\">El primer compilador</h2>\n\n<p>Una de las primeras programadoras, <strong>Grace Hopper</strong>, después haber estado programando de forma arcaica mucho tiempo, comenzó a crear una colección de <em>subrutinas</em> para facilitarse el trabajo. Así que su trabajo se fue convirtiendo en juntar una serie de subrutinas que lograran la tarea en cuestión.</p>\n\n<p>El siguiente paso natural, por lo tanto, fue la automatización de este proceso, de juntar o <em>compilar</em> todas estas partes de código en un programa final. Así fue que nació el primer compilador, creado por Grace Hopper, el <strong>A-0</strong> para la <a href=\"https://www.computinghistory.org.uk/det/5487/Grace-Hopper-completes-the-A-0-Compiler/\">UNIVAC I</a>.</p>\n\n<p>Después de esto siguieron surgiendo compiladores, como el A-1, A-2, MATH-MATIC, ARITH-MATIC, por ejemplo. Estos lenguajes y compiladores surgieron por las diferentes necesidades de las empresas que poseían una computadora y un equipo capaz de desarrollar estos lenguajes.</p>\n\n<h3 id=\"fortran-i-y-ii\">Fortran I y II</h3>\n\n<p>La mayor desventaja de los lenguajes creados en la década de los 50’s es que representaban un gran intercambio entre velocidad <em>de programación</em> por velocidad <em>de ejecución</em>. Es por eso que <strong>John Backus</strong> hizo la propuesta de un lenguaje que fuera fácil de programar, y por lo tanto de enseñar, y que al mismo tiempo no representara una gran diferencia en velocidad de ejecución.</p>\n\n<p>Así presentó el informe sobre FORTRAN (<strong>FOR</strong>mula <strong>TRAN</strong>slator), en el que se mencionaban justo estas dos fortalezas: escribir en alto nivel fórmulas matemáticas al mismo tiempo que compilar un programa muy eficiente en ejecución para la computadora <strong>IBM 704</strong>.</p>\n\n<p>Aquí se empiezan a ver las malas capacidades de estimación de los desarrolladores: John Backus dijo que la implementación primera versión tomaría 6 meses, pero en realidad tomó 2 años y medio, 5 veces más.</p>\n\n<p>Sin embargo, el resultado de FORTRAN como producto fue impecable: a diferencia de los demás compiladores y lenguajes tenía una muy buena documentación que permitió su adopción masiva, convirtiéndose en la mejor arma de IBM para vender más computadoras, y en el estándar en América (sobre todo Estados Unidos) para la industria, debido a que después de implementó para otras computadoras de IBM.</p>\n\n<h3 id=\"algol-58\">Algol 58</h3>\n\n<p>Aunque FORTRAN había tenido mucho éxito como lenguaje en la industria, no había un lenguaje estándar para hacer computación científica, ni en América ni en Europa, por lo que no se podían compartir los resultados ni los programas entre universidades ni instituciones.</p>\n\n<p>Así nació la iniciativa de crear un lenguaje estándar para la industria y la academia, que permitiera compartir los resultados entre diferentes grupos de personas. La GAMM (<a href=\"https://www.gamm-ev.de/en/\">Gesellschaft für angewandte Mathematik und Mechanik</a> [Asociación de Matemáticas Aplicadas y Mecánica]), que es el equivalente a la ACM (<a href=\"https://www.acm.org/\">Association for Computing Machinery</a> [Asociación de Mecánica Computacional]) se pusieron de acuerdo para crear una especificación de un lenguaje que sirviera este propósito, reuniendo personas con mucha experiencia en la creación de lenguajes y en la programación de compiladores.</p>\n\n<p>El resultado de esto fue el <strong>International Algebraic Language</strong>, después conocido como <strong>ALGOL</strong>. Este lenguaje tenía las mejores características de los lenguajes modernos de aquella época, sin embargo, tenía un serio problema: sus implementaciones eran inconsistentes, por lo que no pudo cumplir su objetivo de tener una herramienta estandarizada para crear y compartir programas.</p>\n\n<p>La creación de esta recomendación, sin embargo, estableció las bases de cooperación entre las asociaciones relacionadas con la computación de Europa y América.</p>\n\n<h3 id=\"cobol\">COBOL</h3>\n\n<p>Hemos estado hablando de lenguajes usados para computación científica y cálculos matemáticos, sea en la academia o en la industria. <strong>Grace Hopper</strong>, una gran visionaria por lo que podemos ver, se dio cuenta de que los negocios necesitaban ayuda con cosas más mundanas: contaduría, inventarios, etc. De hecho, en retrospectiva, eso es algo que se estaba notando con lenguajes como <a href=\"https://en.wikipedia.org/wiki/FLOW-MATIC\">FLOW-MATIC</a> y <a href=\"https://en.wikipedia.org/wiki/AIMACO\">AIMACO</a>, especializados en tareas de procesamiento de datos, menos científicos y con instrucciones más adaptadas al mundo de los negocios.</p>\n\n<p>Así que <strong>Hopper</strong> se dio a la tarea de juntar a la gente necesaria para diseñar un lenguaje que cumpliera con estas características y que detuviera la proliferación innecesaria de lenguajes de negocio. Así nació el comité para diseñar <strong>COBOL</strong>, un lenguaje que cumpliera con las necesidades de las empresas.</p>\n\n<p>COBOL, en vez de enfocarse en matemáticas y fórmulas se enfocaría principalmente en palabras en inglés para hacerlo más fácil de programar y aplicar a las necesidades del día a día de los negocios. En el libro de Manuel puedes ver los detalles y los retos a los que tuvo que enfrentarse este comité.</p>\n\n<p>La especificación de COBOL se terminó en 1960, pero su implementación se tomó otros años. Para mi, COBOL es el lenguaje que precede a la gran mayoría de los que usamos hoy, como Java, Python, PHP, etc., ya que estos están enfocados en problemas de negocio más que en computación científica o matemática.</p>\n\n<h3 id=\"otros-lenguajes\">Otros lenguajes</h3>\n\n<p>No mencioné un montón de lenguajes, compiladores y computadoras que Manuel toca en libro, por lo que te recomiendo su lectura si quieres una visión más amplia del desarrollo de nuestra industria desde su nacimiento, la evolución de las necesidades y cómo los comercios, la academia y el gobierno se conjuntaron para ir creando lo que se fue necesitando hasta llegar al rico entorno que tenemos hoy.</p>\n\n<h2 id=\"aprendizajes\">Aprendizajes</h2>\n\n<p>Este libro, más allá de contarte la historia de la programación entre los años 1940-1960, te comunica varias lecciones que puedes aprender si lees entre líneas. A continuación listo mis aprendizajes.</p>\n\n<h3 id=\"perseverancia\">Perseverancia</h3>\n\n<p>La historia de <strong>Konrad Zuse</strong> me enseña que no siempre es necesario estar con un grupo de personas pensando igual o siquiera que te entiendan para crear algo.</p>\n\n<p><strong>Konrad</strong> persiguió sus intereses con perseverancia y logró cosas muy parecidas a lo que los grupos de principales de desarrollo de la computación lograron años después. Claro, él es una excepción, pero es una muestra de qué tan lejos te pueden llevar tus intereses.</p>\n\n<h3 id=\"acerca-de-los-equipos-de-trabajo\">Acerca de los equipos de trabajo</h3>\n\n<p>Para crear algo que vale la pena, como un lenguaje de programación, que es una creación bastante compleja, casi siempre hace falta la cooperación de muchas personas por un periodo sostenido (como ya vimos, hay excepciones). En por lo menos dos de los lenguajes mencionados arriba, se tuvieron que poner de acuerdo múltiples grupos de personas para lograr un objetivo común, como crear un lenguaje que cubriera las necesidades de un grupo amplio de personas e instituciones y evitar problemas estilo la “Torre de Babel”.</p>\n\n<h3 id=\"vender-las-ideas\">Vender las ideas</h3>\n\n<p>Una de las cosas que se menciona en el libro es que <strong>“la gente es alérgica al cambio”</strong>. Esto pasó con la idea primeramente de hacer intérpretes y después de los compiladores.</p>\n\n<p>Es por eso que las personas que tuvieron la idea inicialmente tuvieron que luchar porque otras personas tomaran sis ideas en serio, convencerlas de que valía la pena y poner de acuerdo a un grupo de personas.</p>\n\n<p>Tener la habilidad de <strong>vender tus ideas</strong> es algo que te ayudará a avanzar en tu carrera y conseguir tus objetivos.</p>\n\n<h3 id=\"siempre-habrá-celadores\">Siempre habrá celadores</h3>\n\n<p>Cuando se presentaban ideas que permitían abrir el campo hacia personas menos educadas que las que ya estaban, o que quitaban barreras para que otros programaran, siempre había personas que se sentían amenazadas y se oponían a esto.</p>\n\n<p>Esa es una actitud que seguimos viendo hasta hoy. Hay muchos “profesionales” que desprecias a las personas que no son tan educadas como ellos o que entran en el campo del desarrollo de software sin educación formal.</p>\n\n<p>Podemos ver en retrospectiva lo equivocados que estaban y podemos entender lo equivocados que están hoy los que tienen la misma actitud.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>El primer volumen de “Historia de los Lenguajes de Programación” es un libro que te puede enseñar mucho sobre tu industria y te puede dejar muchas lecciones. Lo recomiendo mucho a todos los desarrolladores de software que tengan interés en la historia y la filosofía de lo que hacen día a día y creo que debería ser una lectura obligatoria para todos los estudiantes de carreras afines a la computación.</p>\n\n<p>Aquí nos puedes ver platicando con el autor y como bonus tenemos a Camilo Chacón Sartori como invitado, platicando de su libro <a href=\"https://www.youtube.com/watch?v=FgbJdgBFS58\">Mentes Geniales</a>:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/xYClAk5LDyo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n\n<hr />\n\n<p>Puedes comprar aquí el libro por sólo 12 Euros: <a href=\"https://altenwald.com/book/histlangprog\">Historia de los lenguajes de programación, Años 1940-1959</a>.</p>\n",
      "date_published": "Sat, 11 Jun 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/06/02/consistencia-en-el-codigo.html",
      "url": "https://blog.thedojo.mx/2022/06/02/consistencia-en-el-codigo.html",
      "title": "Consistencia en el código",
      "content_html": "<p>Una de las mejores formas de ayudar a que tu código sea fácil de mantener es hacer que el estilo tanto de formateo como de programación en general sea consistente. Analicemos este concepto que se menciona en “A Philosophy of Software Design”.</p>\n\n<h2 id=\"qué-es-la-consistencia-en-el-código\">¿Qué es la consistencia en el código?</h2>\n\n<p>Básicamente, significa que las que cosas o el código que hace lo mismo luzca y se programen igual y las piezas de código que no hacen los mismo, luzcan y se programen diferente.</p>\n\n<p>Hay varios factores a tomar en cuenta respecto a la consistencia del código, que trataremos en las siguientes sub-secciones.</p>\n\n<h3 id=\"nombres\">Nombres</h3>\n\n<p>Para empezar, los nombres deben ser consistentes, tanto en estilo como en semántica. Es decir, si decidiste usar <strong>camelCase</strong>, debes buscar usarlo en todos lados. Muchos guías de estilo y linters incluso lo sugieren un estilo, o es común tener una costumbre dependiendo del lenguaje (por ejemplo en JS y Java se acostumbra mucho el <strong>camelCase</strong>, mientras que en Python se recomienda usar <strong>snake_case</strong>).</p>\n\n<p>El segundo punto, la semántica tiene que ver con que siempre te refieras a la misma idea con el mismo nombre, por ejemplo, si estás modelando algo que tiene que ver con boletos para un evento, es buena idea nombrar a las variables siempre de la misma forma, como <code class=\"language-plaintext highlighter-rouge\">ticket</code>, en vez de nombrarlas <code class=\"language-plaintext highlighter-rouge\">ticket</code>, <code class=\"language-plaintext highlighter-rouge\">bill</code>, <code class=\"language-plaintext highlighter-rouge\">entrance_ticket</code>, etc.</p>\n\n<p>Si decides usar nombres como <code class=\"language-plaintext highlighter-rouge\">i</code>, <code class=\"language-plaintext highlighter-rouge\">j</code> o <code class=\"language-plaintext highlighter-rouge\">n</code> para numerar cosas o en bloques, asegúrate de que tengan la misma semántica en todos lados, por ejemplo, usa <code class=\"language-plaintext highlighter-rouge\">i</code> para el primer índice en un ciclo, y <code class=\"language-plaintext highlighter-rouge\">j</code> para un índice interno.</p>\n\n<p>Tener un sistema de nombrado consistente hará que la <strong>carga cognitiva</strong> que requiere programar en tu base de código disminuya.</p>\n\n<h3 id=\"interfaces\">Interfaces</h3>\n\n<p>Crear una interfaz (o una clase abstracta, o una estructura, o un protocolo) o cualquier cosa que sirva para definir un <em>contrato</em> para un conjunto de módulos que hagan cosas similares, permitirá que tú código sea más fácil y rápido de entender. Basta con entender una sola de las implementaciones para comprender todas las demás.</p>\n\n<p>El ejemplo perfecto son los métodos de pago en un sistema de eCommerce. En vez de inventar cada vez un una nueva interfaz, puedes definir que la interfaz común sea algo como:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">PaymentMethod</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\"\n    Defines the interface for all payment methods\n    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">charge</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refund</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">def</span> <span class=\"nf\">void</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n\n<p>Si tu lenguaje no tiene, puedes documentar y dejar claro para tu equipo cómo deben cumplirse las interfaces y contratos entre los diferentes módulos.</p>\n\n<h3 id=\"patrones-de-diseño-y-principios-de-programación\">Patrones de diseño y principios de programación</h3>\n\n<p>Muchas soluciones comunes a problemas comunes que encontramos en el desarrollo se han definido claramente y nombrado, para poder ser usadas y entendidas como una receta por muchos programadores.</p>\n\n<p>A estas soluciones las llamamos <strong>patrones de diseño</strong> y la familiaridad con ellos, pueden hacer que tú base de código se más fácil de mantener. Usarlos cuando es adecuado, puede ayudarte a darle consistencia a tu código, lo mismo que otro principios de programación, como por ejemplo, inversión de dependencias.</p>\n\n<p>Sólo debes tener en cuenta que para que tu equipo se beneficie de esto, debe <em>conocer</em> estas soluciones, ya que ese es uno de los principales objetivos de los patrones: que los programadores tengan un lenguaje común de soluciones que los ayuden a comunicarse más fácil.</p>\n\n<h2 id=\"invariantes\">Invariantes</h2>\n\n<p>Una <strong>condición que siempre se cumple</strong> en tu programa es una invariante. Por ejemplo, muchos los lenguajes funcionales te aseguran que todo es una expresión, por lo que siempre puedes usar cualquier construcción del lenguaje como algo que te devuelve un valor.</p>\n\n<p>Establecer invariantes en tu base de código y estilo de programación, ayudará a que el código sea consistente. Por ejemplo, en JQuery se creo la invariante de que todas las funciones que usan un elemento, devuelven este mismo elemento, por lo que puedes encadenar llamadas y siempre funcionará.</p>\n\n<p>Piensa en cosas que puedas hacer invariantes y ayudarás a que tu código sea más consistente.</p>\n\n<h2 id=\"asegura-la-consistencia-en-el-código\">Asegura la consistencia en el código</h2>\n\n<p>Hay varias formas de asegurar que tu equipo cree código consistente, no son excluyentes, sino que se ayudan unas a otras.</p>\n\n<p>La primera forma, y la más fuerte, es mediante el aseguramiento automático del cumplimiento de las reglas que pueden ser representadas en alguna herramienta. Por ejemplo, los <strong>linters</strong>, verificadores de complejidad del código, combinados con las herramientas dadas por los sistemas de versionamiento  de código (ver <a href=\"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks\">git hooks</a>).</p>\n\n<p>Este conjunto de herramientas podría verificar y obligar que se cumplan las reglas de formateo de código y otras medidas de calidad.</p>\n\n<p>Otra herramienta es la <strong>documentación</strong>, y yo diría que es la más importante porque es en la que se define todas las cosas que deberían ser uniformes y trasciende a las personas, estructuras de equipo y herramientas. Es muy importante que (de preferencia) al iniciar el proyecto crees una guía de estilo y sugerencias de uniformidad que ayuden a tu equipo a crear código uniforme. Como te imaginarás, esto es trabajo extra, pero vale la pena.</p>\n\n<p>Finalmente <em>tienes</em> que promover la consistencia con tu ejemplo y mediante las revisiones de código, si las tienes. Cuando escribas código nuevo, busca la guía de estilo y las convenciones. Si no son explícitas, observa el código para que veas lo que puedes extraer como convención.</p>\n\n<h2 id=\"mantén-la-consistencia\">Mantén la consistencia</h2>\n\n<p>Es muy fácil querer cambiar algo porque encontramos una forma diferente de hacer las cosas que preferimos por gusto o porque es un poquito mejor. En estos casos, tienes que pensar muy bien si vale la pena romper la consistencia de tu base de código por una mejora.</p>\n\n<p>Como en muchas ocasiones en el código, esto implica un intercambio de valor y como responsable de esta decisión, tienes que evaluar los pros y los contras. Piensa: ¿me va a dar tanta ventaja como para que valga la pena meter esta complejidad extra? ¿vale tanto la pena para que haga replique este cambio en todo los otros lugares en los qu se hace esto?</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Mantener la consistencia, en la base de código es algo que vale la pena para reducir el esfuerzo cognitivo que a los desarrolladores les cuesta trabajar en tu código. Esto ayudará a que tu código sea mantenible y sea más probable que tenga una larga vida.</p>\n",
      "date_published": "Thu, 02 Jun 2022 00:00:00 -0500"
      },
    
    {
      "id": "https://blog.thedojo.mx/2022/01/03/aprendiendo-desarrollo-efectivamente.html",
      "url": "https://blog.thedojo.mx/2022/01/03/aprendiendo-desarrollo-efectivamente.html",
      "title": "Aprendiendo desarrollo efectivamente",
      "content_html": "<p>Desde que comenzamos en la escuela, a muy pocos de nosotros nos han enseñado técnicas para aprender efectivamente, aunque la escuela trata de aprender lo más efectivamente posible.</p>\n\n<p>El desarrollo de software es un campo muy amplio en el que tenemos que aprender constantemente, sea por el cambio de las tecnologías, porque tenemos que aprender del área en la que estamos aplicando nuestro conocimiento tecnológico para crear software efectivo o simplemente porque queremos cambiar de área.</p>\n\n<p>En este artículo hablaremos sobre algunas de las cosas que el libro <a href=\"https://amzn.to/3r20CYr\">“A Mind for Numbers”</a><sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> de <a href=\"https://barbaraoakley.com/\">Barbara Oakley</a> nos enseña sobre el aprendizaje de temas difíciles, como las matemáticas y las ciencias. Considerando que el desarrollo de software tiene temas difíciles, creemos que es aplicable lo mencionado en este libro.</p>\n\n<p>Primero hablemos de las bases de las recomendaciones que da el libro: los modos en los que puede estar tu cerebro, y las partes que ocupa para cada tipo.</p>\n\n<h2 id=\"modo-enfocado\">Modo enfocado</h2>\n\n<p>En este modo, llamado <strong>estado de alta atención</strong>, tu cerebro está <strong>concentrado</strong> en una tarea que tienes que lograr, como escribir este artículo, estudiar un tema específico o resolver un algoritmo. Digamos que todas las energías de tu cerebro están destinadas a esta tarea y no <em>divagas</em> en diferentes temas.</p>\n\n<p>Este modo es muy bueno para <em>terminar o avanzar</em> las tareas del día a día y para evitar errores mientras haces algo importante, pero no es muy bueno para aprovechar el poder natural de tu cerebro, ya que utilizamos las <em>funciones ejecutivas</em>, que nos permiten mantenernos atentos a algo pero nos cuestan mucha energía. La funciones ejecutivas se encuentran situadas principalmente en la corteza prefrontal.</p>\n\n<p>El modo enfocado es necesario para aprender, ya que podremos recordar lo que hemos estudiado en este modo, o hacer conexiones conscientes con otras cosas que ya sepamos. En este modo resolvemos problemas de forma secuencial y analítica.</p>\n\n<h2 id=\"modo-difuso\">Modo difuso</h2>\n\n<p>Oficialmente podemos llamar a este el <em>modo de descanso</em>. Este es el modo en el que estamos cuando no estamos pensando o aplicando nuestra mente a nada específico, digamos que es el estado por defecto del cerebro. Tu foco de atención está brincando de un lugar a otro constantemente. El modo difuso consume menos energía porque no necesitamos controlar la mente para hacerlo. El modo difuso entra en acción cuando estamos haciendo tareas que tenemos completamente dominadas, como caminar, bañarnos, o comer, en ninguna de estas actividades estamos completamente concentrados y nuestra mente está viajando por diferentes lugares.</p>\n\n<p>En el modo difuso podemos conectar ideas usando la capacidad del cerebro de hacer conexiones naturalmente, o brincar de un tema a otro sin ningún esfuerzo.</p>\n\n<p>Podríamos creer que el modo difuso es <em>malo</em> para el estudio, sin embargo, en este modo es cuando nuestro cerebro procesa inconscientemente lo que hemos estudiado de modo consciente y hace que permanezca. Por lo tanto, el modo difuso <strong>es esencial para aprender</strong>.</p>\n\n<p>El modo difuso no utiliza una parte específica del cerebro, sino que se reparte. Al consumir poca energía relativamente y utilizar todo el poder del cerebro, es una herramienta imprescindible para resolver problemas.</p>\n\n<p>Recuerda que en parte somos máquinas biológicas que necesitan procesos químicos para funcionar y los modos en los que puede estar nuestra mente se complementan para que funcionemos y para que aprendamos efectivamente.</p>\n\n<h2 id=\"técnicas-de-aprendizaje\">Técnicas de aprendizaje</h2>\n\n<p>Ahora que ya conocemos los dos modos en los que nuestro cerebro puede funcionar, veamos técnicas que nos ayudarán a aprovecharnos de esto para aprender de manera eficiente.</p>\n\n<h3 id=\"controla-el-tiempo-que-dedicas-a-estudiar\">Controla el tiempo que dedicas a estudiar</h3>\n\n<p>Nuestro cerebro tiene una <em>capacidad limitada</em> de absorción de información por unidad de tiempo, necesitamos tiempo para procesar las cosas y entender lo que sigue mejor, además de que la repetición a través del tiempo nos ayuda a retener la información por más tiempo. Es por eso que es muy importante controlar cuánto tiempo dedicas a estudiar, cuándo se lo dedicamos y las condiciones físicas y mentales en las que estamos.</p>\n\n<p>Dos técnicas que te pueden ayudar a dedicarle el tiempo <em>correctamente</em> al estudio son:</p>\n\n<ol>\n  <li>\n    <p><strong>Programar sesiones de estudio de un tema cortas pero constantes</strong>. Es mucho mejor dedicar una hora de estudio diaria durante diez d\nías, que 10 horas un día al mismo tema. Hacerlo de manera espaciada permitirá a tu cerebro procesar la información durante los periodos en los que está en el modo difuso, además de que mantener el modo enfocado por periodos cortos es más fácil y eficiente que hacerlo durante periodos largos. Esto se conoce como <strong>práctica distribuida</strong>.</p>\n  </li>\n  <li>\n    <p><strong>Cambiar constantemente de modos de pensamiento</strong>. Cambiar entre el modo enfocado y el modo difuso te ayudará aprender mejor y te mantendrá fresco. Una técnica que puedes aplicar es la técnica <em>pomodoro</em> en la que programas periodos de estudio o trabajo de 25 minutos y un descanso de 5 minutos. Esta técnica no es efectiva para todos por el tiempo que tardan en enfocarse, pero puedes incrementar los periodos de enfoque para que se acomode a tu estilo. El punto es tener una sesión de estudio <em>estructurada</em> y que te permita cambiar de modos de pensamiento <strong>para aprovechar todo el poder de tu cerebro</strong>.</p>\n  </li>\n</ol>\n\n<p>Estos dos técnicas le darán a tu cerebro tiempo para usar todo su poder: le darán al modo difuso tiempo para trabajar en problemas difíciles.</p>\n\n<h3 id=\"crea-un-mapa-de-lo-que-aprenderás\">Crea un mapa de lo que aprenderás</h3>\n\n<p>Es muy importante que cuando tengas un tema difícil que aprender hagas una sesión de pre-estudio, en el que veas lo que aprenderás. Esto lo puedes hacer mirando el índice si existe, las preguntas que guían el estudio en caso de que haya, leyendo (o viendo, o escuchando) solamente la introducción y conclusión y fijándote en los subtemas, capítulos, negritas, recuadros, etc.</p>\n\n<p>Esta sesión de pre-estudio te ayudará a organizar tus pensamientos sobre lo que aprenderás, un mapa que tendrá los puntos principales a aprender que después rellanarás estudiando a fondo el tema.</p>\n\n<h2 id=\"evitar-la-ilusión-de-aprendizaje\">Evitar la ilusión de aprendizaje</h2>\n\n<p>Una parte muy importante de aprender es evitar la <em>sensación</em> falsa de que aprendimos algo sin realmente haberlo aprendido. ¿Cómo podemos evitar esto?</p>\n\n<h3 id=\"auto-exámenes\">Auto-exámenes</h3>\n\n<p>Una de las formas más efectivas es buscar o fabricar exámenes o cuestionarios de las cosas de las que deberíamos ser conscientes una vez que terminemos de estudiar el tema. Hacer estos exámenes o prácticas sin consultar el material de estudio te ayudará averiguar si realmente has aprendido algo, y si fallas, tendrás puntos en los cuales mejorar.</p>\n\n<p>Estos auto-exámenes se han mostrado muy eficaces para muchos estudiantes de temas complejos.</p>\n\n<h3 id=\"practica-recorta-y-repite\">Practica, recorta y repite</h3>\n\n<p>Algunas de las cosas que tenemos que aprender consiste en una serie de pasos por ser un problema complejo. Una técnica de aprendizaje es aislar una parte del problema y practicarla hasta que la dominemos en diferentes contextos. Imagina por ejemplo que quieres dominar la configuración de servidores. Lo que más se te dificulta es la configuración de la parte de HTTPS. Entonces, deberías repetir estar parte con diferentes variables y opciones hasta que lo puedas hacer sin dificultad.</p>\n\n<h2 id=\"mejora-tu-memoria\">Mejora tu memoria</h2>\n\n<p>Finalmente hablemos de algo que ha adquirido muy mala fama: la <em>memoria</em>. Debido a que en la escuela nos hacían aprender de memoria cosas que parecen inútiles a lo largo de la vida, hemos demonizado el memorizar cosas. Sin embargo, memorizar es algo imprescindible para la resolución de problemas efectiva y la creatividad. Veamos algunas técnicas que te ayudarán a memorizar de manera más eficiente:</p>\n\n<ol>\n  <li><strong>Palacios de memoria</strong>. Esta es una técnica que consiste en aprovechar nuestra capacidad de ubicación espacial para memorizar cosas fácilmente. Puedes investigar más sobre ella y ver si te sirve.</li>\n  <li><strong>Repetición espaciada</strong>. Casi todo lo que consumimos lo olvidamos, a menos que se nos repita constantemente. La repetición espaciada consiste en repasar un tema con frecuencia cada vez más grande, para poder retenerlo a largo plazo. Puedes usar herramientas como <a href=\"https://apps.ankiweb.net/\">Anki</a> para automatizar esto.</li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Hemos hablado de los temas que a mi parecer son más aplicables a los desarrolladores. El libro habla de otros temas como la presentación de exámenes, la organización del tiempo, la motivación, etc. Te invito a que le eches un ojo si estás en la escuela y sobre todo si estás en un área de ciencias o físico-matemáticas.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Link de afiliados de Amazon <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Mon, 03 Jan 2022 00:00:00 -0600"
      }
    
  ]
}
       <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>
        </div>

        
      </section>

      <footer class="page__meta">
        
        


        


      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2022 The Dojo MX Blog. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
