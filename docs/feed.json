<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.24.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>The Dojo MX Blog</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="The Dojo MX Blog">
<meta property="og:title" content="The Dojo MX Blog">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="The Dojo MX Blog Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->
<!-- for mathjax support -->

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZNSYMJDY5S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZNSYMJDY5S');
</script>

<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": "The Dojo MX Blog",
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>



  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt="The Dojo MX Blog"></a>
        
        <a class="site-title" href="/">
          The Dojo MX Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  


  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          

        </header>
      

      <section class="page__content e-content" itemprop="text">
        
        <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>

        </div>
        {
  "version": "https://jsonfeed.org/version/1",
  "title": "The Dojo MX Blog",
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":"https://til.hectorip.com/"}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs.html",
      "url": "https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs.html",
      "title": "Libros que todo desarrollador de software debería leer: ciencias de la computación",
      "content_html": "<p>Hablemos de algunos libros que te pueden ayudar a avanzar en tu carrera como desarrollador de software, por diferentes razones, por ejemplo te ayudarán a fortalecer tus bases, o te darán ideas para hacer mejor software, mejores arquitecturas o a mejorar como profesional en general.<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup></p>\n\n<p>Empecemos por los fundamentos mismos de lo que hacemos. Los siguientes libros te ayudarán a entender mejor cómo  funciona la computación desde sus raíces.</p>\n\n<p>Aunque esta sección está en primer lugar, no significa que debas leerlos antes que todo. Por ejemplo, cuando aprendiste español no aprendiste primero teoría de lenguajes, semántica, semiótica y todas las cosas que soportan el lenguaje. Aprendiste a hablar y a escribir, y luego, para profundizar aprendiste los soportes teóricos, por gusto o por necesidad. Lo mismo pasa con la computación.</p>\n\n<p>Lamentablemente, la mayoría de los libros de este artículo están en inglés. Pero aquí viene otro consejo que hemos aprendido con los golpes de los años: <strong>la gran mayoría de la información en ciencias de la computación está en inglés, y es un idioma indispensable para un desarrollador de software.</strong></p>\n\n<p>Empecemos con la lista de libros.</p>\n\n<h2 id=\"computational-thinking---peter-j-denning-y-matti-tedre\">Computational Thinking - Peter J. Denning y Matti Tedre</h2>\n\n<p><a href=\"https://mitpress.mit.edu/9780262536561/computational-thinking/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683954800/content_ylyx0g.png\" alt=\"Portada de Computational Thinking\" class=\"align-center\" /></a></p>\n\n<p>Este libro me parece una lectura fundamental para todos los estudiantes de ciencias de la computación pero también para desarrolladores de software con más experiencia práctica.</p>\n\n<p>Está escrito por <strong>Matti Tedre</strong> y <strong>Peter J. Denning</strong>, y es una lectura muy amena y fácil de entender. Pero no por eso es superficial, trata profundamente una pregunta: ¿qué es el pensamiento computacional? Explora el tema por varios aspectos:</p>\n\n<ul>\n  <li>Las máquinas y el nacimiento de la computación como disciplina</li>\n  <li>La ingeniería y el diseño de software</li>\n  <li>La educación de las ciencias de la computación</li>\n  <li>La relación de la ciencia tradicional con la computación</li>\n</ul>\n\n<p>Los dos autores son parte del grupo que se encarga de la recomendación de los temarios de ciencias de la computación de la ACM. Por lo que tienen una visión muy amplia de lo que es la computación y cómo se enseña. Este libro te dejará claro de lo que hablamos con “computación” y el tipo de pensamiento que se requiere para hacerla. También aclarará si todos necesitan estudiarla y algunos mitos alrededor de ella.</p>\n\n<p>Puedes comprarlo aquí: <a href=\"https://amzn.to/3M3Tg2l\" target=\"_blank\" rel=\"noopener\">https://amzn.to/3LJf95S</a></p>\n\n<h2 id=\"computer-science-distilled---wladston-ferreira-filho\">Computer Science Distilled - Wladston Ferreira Filho</h2>\n\n<p><a href=\"https://code.energy/computer-science-distilled/\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683955925/book_ipakcs.jpg\" alt=\"Portada de Computer Science Distilled\" class=\"align-center\" /></a></p>\n\n<p>Para muchos esto parecerá una mala elección, sin embargo, para mi este libro tiene todo lo que se necesita para ser una buena introducción a los temas principales de la ciencias de la computación, de manera práctica y sencilla. Es cierto que por su extensión no puede tratar ninguno a profundidad, pero te da una visión amplia de todos los temas que tienes que conoces.</p>\n\n<p>Explica de manera sencilla los pilares principales de las ciencias de la computación y lo mejor es que te da referencias para que puedas profundizar en cada uno de los temas. Te servirá más si eres un principiante, pero aún si eres un desarrollador experimentado te puede servir para reforzar algunos temas que no tengas claro o para tener una referencia rápida de algunos temas.</p>\n\n<p>Este es un libro que creo que <strong>sí debes leer lo más temprano posible en tu carrera</strong>.</p>\n\n<p>Puedes comprarlo en <a href=\"https://amzn.to/3nZVHKb\" target=\"_blank\" rel=\"noopener\">Amazon</a> o en su <a href=\"https://code.energy/computer-science-distilled/\" target=\"_blank\" rel=\"noopener\">página oficial</a>.</p>\n\n<h3 id=\"the-elements-of-computing-systems-building-a-modern-computer-from-first-principles---noam-nisan-y-shimon-schocken\">The Elements of Computing Systems: building a modern computer from first principles - Noam Nisan y Shimon Schocken</h3>\n\n<p><a href=\"https://www.nand2tetris.org/book\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683954809/Screen_Shot_2023-05-12_at_8.38.27_nzachg.png\" alt=\"Portada de The Elements of Computing Systems\" class=\"align-center\" /></a></p>\n\n<p>En este libro encontrarás un entendimiento básico del funcionamiento de una computadora digital, pero desde el mismísimo fondo. Es un libro MUY profundo, en el que contruirás una computadora digital desde cero, tanto el hardware como el software.</p>\n\n<p>No es un libro que recomiende leer al principio de la carrera ni mucho menos como un prerrequisito para empezar a trabajar, es más bien, algo que ir consumiendo con los años, para entender cada vez mejor cómo funciona fundamentalmente el aparato que usas a diario.</p>\n\n<p>El principio más fundamental de este libro es “aprender haciendo”, por que lo que mejor se aprende es <strong>mediante la práctica</strong>.</p>\n\n<p>Lo puedes comprar aquí: <a href=\"https://amzn.to/3nXJvJR\" target=\"_blank\" rel=\"noopener\">The Elements of Computing Systems</a></p>\n\n<h2 id=\"the-great-principles-of-computing---peter-j-denning\">The Great Principles of Computing - Peter J. Denning</h2>\n\n<p><a href=\"https://amzn.to/3O8gk1u\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1684031325/great_principles_i5btll.jpg\" alt=\"Portada de The Great Principles of Computing\" class=\"align-center\" /></a></p>\n\n<p>En este libro, Peter J. Denning y Craig H. Martell explican los principios que le dan forma e influyen en el campo de la coputación. Estos principios están divididos en 6 categorías:</p>\n\n<ul>\n  <li>Cálculos</li>\n  <li>Comunicación</li>\n  <li>Coordinación</li>\n  <li>Recolección</li>\n  <li>Diseño</li>\n  <li>Evaluación</li>\n</ul>\n\n<p>Cada uno de estos principios limitan y le dan formas a las tecnologías que usamos, por lo que entenderlos profundamente sin duda te ayudará a ser mejor usando las computadoras y más específicamente, a ser un mejor desarrollador de software.</p>\n\n<p>No creo que este libro se tenga que leer antes de cualquier otra cosa, pero sí siento que mientras más temprano lo hagas en tu carrera, mejor.</p>\n\n<p>Lo puedes comprar aquí: <a href=\"https://amzn.to/3O8gk1u\" target=\"_blank\" rel=\"noopener\">The Great Principles of Computing</a></p>\n<h3 id=\"the-algorithm-design-manual---steven-s-skiena\">The Algorithm Design Manual - Steven S. Skiena</h3>\n\n<p><a href=\"https://amzn.to/42GGAnv\" target=\"_blank\" rel=\"noopener\"><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683777664/Screen_Shot_2023-05-10_at_21.48.04_cwmr6v.png\" alt=\"Portada de The Algorithm Design Manual\" class=\"align-center\" /></a></p>\n\n<p>Este es uno de los mejores libros para aprender sobre algoritmos y estructuras de datos, es una lectura que te ayudará mucho.</p>\n\n<p>Está escrito por <strong>Steven S. Skiena</strong> y va en su 3ra edición. Y es una lectura que puede ayudarte de manera <em>no tan compleja</em> a aprender sobre algoritmos y estructuras de datos. Es un libro bastante extenso y que va avanzando poco a poco en los temas relacionados con algoritmos y estructuras de datos, bellamente ilustrado, sin demasiada carga matemática.</p>\n\n<p>Tampoco es un libro que te tengas que leer de principio a fin, o muy temprano en la carrera. Puedes empezar con los primeros capítulos lo más pronto posible e irlo estudiando con el tiempo, o dejando los temas más avanzados para cuando los necesites puntualmente.</p>\n\n<p>Puedes comprarlo aquí: <a href=\"https://amzn.to/42GGAnv\" target=\"_blank\" rel=\"noopener\">The Algorithm Design Manual</a></p>\n\n<p>También puedes leer de manera gratuita la segunda edición en <a href=\"https://mimoza.marmara.edu.tr/~msakalli/cse706_12/SkienaTheAlgorithmDesignManual.pdf\">este link</a></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Estas son mis recomendaciones en este apartado importante de nuestra área del conocimiento. Si tienes alguna recomendación, no dudes en ponerte en contacto conmigo para que la agregue.</p>\n\n<p>Personalmente, siento que los libros son los mejores maestros que puedes tener. Un libro serio, bien escrito y bien editado es un maestro que acumula la experiencia de muchas personas, principalmente del autor, pero también de los editores, correctores y otras personas que participan en su creación.</p>\n\n<p>Un libro acumula muchos años de experiencia, y es la forma más directa de “parte en hombros de gigantes”. Es cierto, leerlos cuesta trabajo, pero es algo que te va a devolver mucho más de lo que inviertes en ellos.</p>\n\n<p>En los próximos artículos hablaremos de libros de otras áreas relacionadas con el desarrollo de software, como la ingeniería de software, la arquitectura y otros temas variados.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Algunos de los links son links de afiliado de Amazon, por lo que puede que me lleve una pequeña comisión si compras el libro a través de ellos. Esto no afecta el precio que pagas por el libro además de que no afecta para NADA mi recomendación. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Sat, 13 May 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/05/06/por-que-deberias-leer-data-and-reality.html",
      "url": "https://blog.thedojo.mx/2023/05/06/por-que-deberias-leer-data-and-reality.html",
      "title": "¿Por qué deberías leer Data and Reality?",
      "content_html": "<p>Gran parte de nuestro trabajo como desarrolladores consiste en <strong>modelar entidades</strong> del mundo real en el código, transformarlas, guardarlas y recuperarlas. Estas entidades se pasan entre diferentes procesos para producir un resultado. A veces también nos tenemos que inventar entidades para representar conceptos abstractos que no existen físicamente.</p>\n\n<p><strong>Modelar datos</strong> es una de las habilidades <strong>fundamentales</strong> cuando estamos desarrollando.Cuando estás programando un algoritmo, estás modelando un <em>procedimiento</em> de la vida real en código. Este proceso normalmente incluye <strong>datos</strong>, que son representaciones de <em>entidades</em> del mundo real.</p>\n\n<p>Por lo anterior, cualquier cosa que puedas aprender sobre modelado de datos, te ayudará directamente en tu carrera como desarrollador. En este artículo hablaremos de un libro muy especial que te puede ayudar a ser mejor en esta área, independientemente del nivel en el que te encuentres en tu carrera. Y si después de leerlo lo meditas más profundamente, puede que te ayude a desarrollar una forma de pensar más adecuada a los problemas que queremos resolver en la actualidad.</p>\n\n<p><strong>Data and Reality</strong> trata sobre modelado de datos, escrito po William Kent, alguien con mucha experiencia en el tema. El libro tiene tres ediciones la primera es de 1978, la segunda (una actualización) es de 2000 y la tercera, después que Kent murió, es de 2012.</p>\n\n<p>La mejor de todas es segunda edición, ya que la tercera se podría considerar un libro completamente diferente, recortado y con comentarios de <a href=\"https://technicspub.com/steve-hoberman/\">Steve Hoberman</a>, otro modelador de datos pero siento que con un enfoque bastante diferente al de Kent.</p>\n\n<p>Hablemos de los temas principales del libro y por qué te conviene leerlo. Pero antes, veamos algo de lo que se habla en el prefacio de la edición de 2012 que me parece muy relevante.</p>\n\n<h2 id=\"buscando-las-respuestas-donde-parece-más-sencillo\">Buscando las respuestas donde parece más sencillo</h2>\n\n<p>Hay muchas cosas difíciles de resolver en el desarrollo de software y parece que siempre estamos buscando la respuesta en el lugar que parece más obvio o en el que es más fácil buscar, en lugar de donde es más probable que encontremos las respuestas.</p>\n\n<p>El ejemplo que utilizan en el libro para explicarlo y que me parece acertado es una broma acerca de un borracho que pierde sus llaves y se la pasa toda la noche buscando bajo una farola. Cuando alguien le pregunta por qué no busca en otro lado, <strong>el borracho responde que es porque AHÍ HAY MÁS LUZ.</strong></p>\n\n<p>En el desarrollo de software podría parecer que a veces hacemos exactamente lo mismo. Para buscar la solución a un problema siempre nos vamos a los mismos lados porque es donde nos sentimos cómodos o porque <strong>SIEMPRE SE HA BUSCADO AHÍ</strong>. Por ejemplo, nos centramos en la tecnología, en las plataformas o en los lenguajes. Pero es muy probable que el problema no esté ahí, sino en lugares más profundos.</p>\n\n<p>Es por eso que este libro se enfoca en cuestiones profundas del modelado de datos. No en los lugares comunes, ni siquiera en hablar de cómo hacerlo, sino en preguntas que te llevaran a pensar cosas de las que se habla poco y que probablemente modifiquen tu visión del mundo y tu forma de trabajar <strong>permanentemente</strong>.</p>\n\n<p>La intención de este artículo es dejarte con más dudas, pero llevarte a lugares en los que tal ve no habías estado antes, tal como avanzar a un nuevo lugar en el mapa en un juego de video.</p>\n\n<h2 id=\"cuestiones-principales\">Cuestiones principales</h2>\n\n<p>Hablemos de los conceptos principales de representación de información en los sistemas electrónicos.</p>\n\n<h3 id=\"entidades\">Entidades</h3>\n\n<p>Cuando guardamos cosas en una base de datos o las representamos en código, casi siempre nos referimos a ellas como <strong>entidades</strong>.</p>\n\n<p>Por eso el libro empieza cuestionando, <strong>¿qué es una entidad?</strong></p>\n\n<p>La primera respuesta es que una entidad “es un <strong><em>estado</em></strong> de la mente”. <strong>¿Cómo?</strong> Está bastante rara esa definición. Esta frase significa que una <strong>entidad</strong> más allá de algo que exista en la <strong>realidad</strong> como algo identificable e indivisible, algo que tiene límites fijos, es algo a lo que nosotros le damos significado, y que nosotros delimitamos o entendemos en ciertos contextos. Esta delimitación normalmente no es singular, tiene que ser compartida por un grupo de personas para que tenga sentido.</p>\n\n<p>Pongamos algunos ejemplos para entender eso. La leyenda del barco de <strong>Teseo</strong> relata que cuando él regresó de Creta, donde había matado al Minotauro, el pueblo de Atenas le rindió honores y conservó su barco en lo alto de una colina como un monumento para recordar su hazaña.</p>\n\n<p>Con el tiempo, el barco se fue deteriorando y se le fueron cambiando las partes, hasta que ya no quedó ninguna parte original.</p>\n\n<p>La pregunta es: ¿sigue siendo el <em>“Barco de Teseo”</em>? ¿Es el mismo barco si no tiene ninguna parte original? ¿Es el mismo barco si se le cambia una sola parte, o muy pocas?</p>\n\n<p>Esta historia sirve para ilustrar que las entidades como objetos inmutables y permanentes no existen en la vida real, sino que son cosas que en nuestra mente delimitamos y que, junto con otras personas, les asignamos una identidad y un significado. El <em>“Barco de Teseo”</em> sigue siendo el mismo mientras nosotros lo consideremos así.</p>\n\n<p>Exactamente así se comportan las entidades que como desarrolladores modelamos en nuestros programas. No son cosas permanentes, a veces ni siquiera cosas completamente definidas, sino que nosotros les asignamos límites y <strong>significado</strong>.</p>\n\n<p>Las personas, los objetos e incluso los conceptos están en constante evolución y parte de nuestro trabajo es capturar esa evolución en nuestros sistemas.</p>\n\n<h2 id=\"identidad-y-cambio\">Identidad y cambio</h2>\n\n<p>Cuando queremos registrar algo en una computadora, normalmente necesitamos una forma de referirnos a ese registro para después poder recuperarlo. Esto que usamos para referirnos a las entidades se llama <strong>identificador</strong>.</p>\n\n<p>Un identificador es un elemento inmutable y único entre todas las entidades de nuestro sistemas. Aquí nos podemos encontrar con varios casos:</p>\n\n<ul>\n  <li>La entidad no tiene nada único por lo que podamos referirnos a ella (elementos que se repiten, por ejemplo libros producidos en serie)</li>\n  <li>El conjunto de todos los <em>atributos</em> de la entidad puede constituir una identidad</li>\n  <li>Las entidades tienen varios atributos únicos y hay que escoger uno</li>\n</ul>\n\n<p>Pensar en la naturaleza de nuestro problema, en los términos de arriba nos puede llevar a la solución de seleccionar un elemento identificador. Piensa en el primer caso, por ejemplo: cuando algo no tiene identificador natural, tendemos a asignar un identificador único arbitrario a la entidad cuando la metemos en el sistema.</p>\n\n<p>Por ejemplo, es un práctica muy común asignar identificadores numéricos incrementales. La primera entidad registrada del tipo es la 1, la segunda es la 2, etc. También se pueden usar los UUIDs, que son identificadores únicos generados aleatoriamente, y que por lo general evitan problemas como el de permitir que alguien adivine el identificador de otra entidad.</p>\n\n<p>Pero si la entidad tiene un identificador único inmutable, ¿por qué no usarlo? <strong>¿Puede ser una solución más <em>natural</em>?</strong></p>\n\n<p>¿Qué pasa cuando lo que creíamos inmutable cambia? Eso es algo que normalmente rompe lo que hicimos y tenemos que idear formas de componerlo. Todo este tipo de preguntas pensadas por adelantado te pueden llevar a crear sistemas de software que soporten mejor el paso del tiempo y te den menos problemas cuando estén funcionando en producción.</p>\n\n<h2 id=\"relaciones\">Relaciones</h2>\n\n<p>Will Kent afirma que las relaciones son el tejido de la información que representamos en nuestros sistemas. Se puede entender una relación como una asociación o una conexión entre mínimo dos entidades.</p>\n\n<p>Las relaciones tienen varias características que las pueden definir:</p>\n\n<ul>\n  <li>Grado: El número de entidades de diferentes tipos que participan en la relación</li>\n  <li>Dominios: El conjunto de valores que son válidos en cada lado de la relación</li>\n  <li>Rol: El papel que juega cada entidad en la relación</li>\n  <li>Complejidad (cardinalidad): el número de entidades de cada tipo que participan en la relación</li>\n</ul>\n\n<p>Aquí en las relaciones y su representación empezan a surgir diferentes preguntas y problemas ya de definición, por ejmplo: ¿cómo identificas una relación? Algunas relaciones sólo son significativas con un contexto, ¿cómo lo representas? ¿Deberían ser las relaciones entidades también?</p>\n\n<p>Sin duda, leer este capítulo del libro te ayudará a plantearte todas estas cuestiones y a entender mejor cómo representar la información en tus sistemas.</p>\n\n<h3 id=\"atributos\">Atributos</h3>\n\n<p>Los atributos son los datos que “pertenecen” a una entidad. Forman el conjunto de información que tenemos sobre esta.</p>\n\n<p>Los atributos en el mundo real pueden ser infinitos, pero a nosotros normalmente sólo nos interesa un subconjunto de ellos. Data and Reality propone que los atributos son un conjunto de tres elementos:</p>\n\n<ul>\n  <li>El sujeto, la entidad a la que pertenece el atributo</li>\n  <li>El objeto, el valor del atributo</li>\n  <li>La <em>relación</em>, que es por lo que el sujeto y el objeto están conectados</li>\n</ul>\n\n<p>Supongamos por ejemplo el atributo <code class=\"language-plaintext highlighter-rouge\">nombre</code> de una persona. “Él se llama Héctor”: El sujeto es la persona a la que nos estamos refiriendo, el objeto es el nombre “Héctor” y la relación es el hecho de que la persona se llama así.</p>\n\n<p>Si puedes ver, esto nos empieza a meter en problemas de definición. Son realmente los atributos, ¿relaciones?</p>\n\n<h2 id=\"símbolos-y-valores\">Símbolos y valores</h2>\n\n<p>Otra cosa que hay que aprender a distinguir cuando estamos modelando entidades y registrándolas es la diferencia entre el valor y el <strong>símbolo</strong>. Cuando ponemos un valor para representarlo en una computadora usamos una representación, esto es el símbolo. El valor es la entidad que estamos representando.</p>\n\n<p>Por ejemplo, hablando de atributos podemos querer expresar la altura de una persona. Esta altura se puede expresar como “172cm”, “1.72m”, “5’8’’”, <code class=\"language-plaintext highlighter-rouge\">172</code> (como entero) etc. Todos estos son símbolos que representan el valor de la altura de la persona. Lo que en realidad queremos expresar es la distancia que existe entre dos puntos.</p>\n\n<h2 id=\"categorías\">Categorías</h2>\n\n<p>Cuando guardamos información en los sistemas informáticos normalmente queremos organizarla. Las categorías son una forma de hacerlo, y la manera intuitiva de entenderlo parece suficiente.</p>\n\n<p>Sin embargo, la creación de categorías es algo que también se debe pensar muy bien, ya que esto repercutirá en la forma en que guardamos información y en cómo la recuperamos.</p>\n\n<p>Algunos de los problemas en los que tienes que pensar:</p>\n\n<ul>\n  <li>¿Qué pasa cuando una entidad puede pertenecer a más de una categoría?</li>\n  <li>¿Qué clasificación es más conveniente para el problema que estás resolviendo?</li>\n</ul>\n\n<p>Las respuestas a estas preguntas son completamente arbitrarias y finalmente dependen del problema y del campo para el que estés programando.</p>\n<h2 id=\"filosofía-del-conocimiento\">Filosofía del conocimiento</h2>\n\n<p>Finalicemos este resumen hablando de la cosa más profunda o analítica que el libro trata: la naturaleza del conocimiento mismo. Hay varias posturas con respecto a “la realidad”. Las dos extremas son:</p>\n\n<ol>\n  <li>No existe una realidad objetiva, todo es subjetivo, y los seres humanos construyen esta realidad con su mente.</li>\n  <li>Existe una realidad objetiva, y los seres humanos la perciben y la pueden conocer siempre.</li>\n</ol>\n\n<p>En el libro se habla sobre una postura intermedia, y que me parece completamente razonable: es que existe una realidad objetiva, pero que los seres humanos <strong>no la pueden conocer completamente</strong>, la accedemos a través de la percepción, pero como en mucha posturas filosóficas, la percepción es imperfecta.</p>\n\n<h3 id=\"qué-es-un-modelo\">¿Qué es un modelo?</h3>\n\n<p>De esto ya hemos hablado repetidas veces en este blog, pero vamos a decirlo una vez más: uno modelo es una abstracción, una representación simplificada de la realidad.</p>\n\n<p>Lo que el análisis de este libro nos hace entender es que esa <strong>representación simplificada</strong> tiene más que ver con NUESTRA VISIÓN y NUESTROS INTERESES que con una visión objetiva de la realidad.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La conclusión más grande que me gustaría sacar de este libro es esta:</p>\n\n<p><strong>La realidad es compleja, confusa y no tiene los límites que nos imaginamos</strong>. Todo el orden que intentamos poner en nuestros sistemas es en realidad <strong>uno de los múltiples</strong> órdenes posibles que podemos ponerle a la realidad, es un punto de vista, y eso no quiere decir que sea el mejor o el más correcto, o que los demás son incorrectos. La representación de la realidad en los sistemas de información dependerá siempre de para quién lo estemos haciendo, y del uso que se le vaya a dar.</p>\n\n<p>Hablando del dominio de modelado de datos, no hay una distinción clara entre lo que es un atributo, una categoría y una relación, nosotros definimos cuándo un aspecto del mundo real se comporta como uno u otro.</p>\n\n<p>Las entidades, su naturaleza y permanencia, están completamente definidos por el uso que les vayamos a dar.</p>\n\n<p>En resumen: <strong>gran parte de lo que creemos que es una representación objetiva, en realidad es una representación subjetiva y arbitraria</strong>. Pero eso no es malo, es como las cosas funcionan y tenerlo en cuenta nos ayudará a tener discusiones más productivas y a entender mejor los sistemas que construimos.</p>\n\n<p>Algunas representaciones son más útiles que otras desde el punto de vista de otras personas, así que esforzarnos por entender lo que otros están viendo es muy buena idea.</p>\n\n<h3 id=\"qué-sigue\">¿Qué sigue?</h3>\n\n<p>Pensar en todas estas cuestiones te ayudará a notar que no todo lo que tiene que ver con la tecnología y más importante aún: <strong>no siempre hay una respuesta correcta</strong>. Sigue flexibilizando tu pensamiento y abriéndolo, sigue pensando más allá de lo establecido y no te centres en la tecnología.</p>\n\n<p>No seas como el borracho que busca las llaves perdidas bajo el poste porque ahí hay más luz, busca las llaves donde sea más probable encontrarlas.</p>\n",
      "date_published": "Sat, 06 May 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/22/el-principio-de-inversion-de-dependencias.html",
      "url": "https://blog.thedojo.mx/2023/04/22/el-principio-de-inversion-de-dependencias.html",
      "title": "El principio de Inversión de Dependencias",
      "content_html": "<p>Este es el artículo final sobre el análisis de los principios SOLID. En este artículo veremos el principio de <strong>Inversión de Dependencias</strong>, el cual nos dice que las clases de alto nivel no deben depender de las clases de bajo nivel, sino que ambas deben <strong>depender de abstracciones</strong>.</p>\n\n<p>Veamos qué tan útil es en la vida real, aplicándolo día a día, cuáles son las formas de implementarlo y algunos ejemplos, asó como <strong>algunas críticas</strong>.</p>\n\n<h2 id=\"principio-de-inversión-de-dependencias\">Principio de Inversión de Dependencias</h2>\n\n<p>El principio se establece en dos partes:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>A. Los módulos de alto nivel no deberían depender de los módulos de bajo nivel, ambos deben depender de abstracciones.\n\nB. Las abstracciones no deberían depender de los detalles, los detalles deben depender de las abstracciones.\n</code></pre></div></div>\n\n<p>Esto es el principio de <strong>Sustitución de Liskov</strong>, pero llevado al extremo. Veamos algunos ejemplos en Python.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">Database</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MySQLDatabase</span><span class=\"p\">(</span><span class=\"n\">Database</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Connecting to MySQL\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Disconnecting from MySQL\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Querying MySQL\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PostgreSQLDatabase</span><span class=\"p\">(</span><span class=\"n\">Database</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Connecting to PostgreSQL\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Disconnecting from PostgreSQL\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Querying PostgreSQL\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseManager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">database</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">database</span> <span class=\"o\">=</span> <span class=\"n\">database</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">database</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">database</span><span class=\"p\">.</span><span class=\"n\">disconnect</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">database</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">database_manager</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">database_manager</span> <span class=\"o\">=</span> <span class=\"n\">database_manager</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">database_manager</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s\">\"INSERT INTO ...\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">DatabaseManager</span><span class=\"p\">(</span><span class=\"n\">MySQLDatabase</span><span class=\"p\">()))</span>\n</code></pre></div></div>\n\n<p>En este ejemplo vemos claramente como la clase <code class=\"language-plaintext highlighter-rouge\">Model</code> no depende directamente de una clase concreta de base de datos, sino que depende de una abstracción, la clase <code class=\"language-plaintext highlighter-rouge\">DatabaseManager</code>. De esta manera el código de “alto nivel”, es decir, el modelo, no depende de un código de “bajo nivel”, la base de datos.</p>\n\n<p>Aquí <strong>alto nivel</strong>, se refiere a la lógica de negocio, mientras que <strong>bajo nivel</strong> se refiere a la implementaciones de cosas no diferenciadas, como conexiones a base de datos y otras cosas similares.</p>\n\n<p>Esto se ve muy sencillo aquí, justo en un lenguaje de tipado dinámico. Pero en lenguajes de tipado estático, como Java, esto se vuelve un poco más complicado, sobre todo cuando quieres que las clases se puedan cambiar de manera dinámica.</p>\n\n<p>Es por esto que nació la técnica de <strong>Inyección de Dependencias</strong>, la cual consiste en inyectar una dependencia en una clase, en lugar de crearla dentro de la clase (la cuál tiene múltiples formas de aplicación). También se puede usar la <strong>Inversión de Control</strong>, que consiste en que en vez de que sea la clase o el método principal el que instancie alguna dependencia, sea un “contenedor”, que normalmente es un framework, el que se encargue de instanciar las dependencias y pasarlas a la clase o método que las necesita. Puedes leer más sobre <a href=\"https://medium.com/ssense-tech/dependency-injection-vs-dependency-inversion-vs-inversion-of-control-lets-set-the-record-straight-5dc818dc32d1\">DI vs IoC</a>.</p>\n\n<p>Finalmente, existe también el descubrimiento de servicios, en el que se “pide” an <strong>Localizador de Servicios</strong> que nos de lo que necesitamos para trabajar. Puedes leer sobre la aplicación de esto aquí, en un artículo de Martin Fowler: <a href=\"https://martinfowler.com/articles/injection.html\">Inversion of Control Containers and the Dependency Injection pattern</a></p>\n\n<p>A mi gusto, todo esto es muy complicado. Veamos algunas críticas a este principio.</p>\n\n<h2 id=\"crítica-de-dan-north\">Crítica de Dan North</h2>\n\n<p>Analicemos la crítica de <a href=\"https://dannorth.net/about/\">Dan North</a> (un reconocido desarrollador de software, consultor y coach) a este principio, al que no le parecen útiles los principios SOLID, sino que prefiere el código simple:</p>\n\n<blockquote>\n  <p>While there is nothing fundamentally wrong with DIP, I don’t think it is an overstatement to say that our obsession with dependency inversion has single-handedly caused billions of dollars in irretrievable sunk cost and waste over the last couple of decades. - <strong>Dan North</strong></p>\n</blockquote>\n\n<p>En resumen, <a href=\"https://dannorth.net/2021/03/16/cupid-the-back-story/\">Dan North</a> dice que aunque el principio en sí mismo no tiene nada de malo, el hecho de que nos obsesionemos con la <em>inversión de dependencias</em> ha causado miles de millones de dólares en pérdidas irreversibles.</p>\n\n<p>Veamos otra cita de <strong>Dan North</strong>:</p>\n\n<blockquote>\n  <p><strong>Most dependencies don’t need inverting, because most dependencies aren’t options, they are just the way we are going to do it this time.</strong> So my - by now entirely unsurprising - suggestion is to write simple code, by focusing on use rather than reuse.</p>\n</blockquote>\n\n<p>Esta cita la podemos traducir como:</p>\n\n<blockquote>\n  <p>La mayoría de las dependencias no necesitan invertirse, porque la mayoría de las dependencias no son opciones, son simplemente la forma en que lo haremos esta vez. Así que mi - en este momento, completamente predecible - sugerencia <strong>es escribir código simple, centrándose en el uso en lugar de en la reutilización</strong>.</p>\n</blockquote>\n\n<p>Estoy completamente de acuerdo con esta crítica. La mayoría de veces no vas a necesitar reemplazar algo. Es mejor enfocarse en lo que va a suceder 98% de las veces que hacer algo súper complejo o que requiera de una gran cantidad de código en sí mismo como pegamento para que funcione.</p>\n\n<p>Según el que propuso este principio, debería aplicarse siempre. Siempre deberías conectar cosas abstractas con otras cosas abstractas y luego hay algo que “rellena” estas cosas abstractas, o a lo que le puedes pedir que te de una implementación concreta de algo abstracto. <strong>Repito:</strong> a mi gusto es muy complicado y no es necesario en la mayoría de los casos.</p>\n\n<p>Sin embargo, creo que hay casos, sobre todo aquellos en los que tienes concretamente los casos en las que las implementaciones pueden variar, en los que sí es útil. Por ejemplo imagina algo que tenga que conectarse a diferentes API’s para proveer el mismo servicio, como por ejemplo, para enviar mensajes de texto a través de múltiples canales. En este caso, sí es útil, porque puedes tener una interfaz que defina el comportamiento de un servicio de mensajería, y luego múltiples implementaciones de esta interfaz, una para cada canal de mensajería, e inyectar las implementaciones de forma dinámica o mediante configuración.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este artículo hemos visto el principio de Inversión de Dependencias, el cual nos dice que las clases de alto nivel no deben depender de las clases de bajo nivel, sino que ambas deben depender de abstracciones.</p>\n\n<p>Aunque puede ser útil en ciertos casos, para mi <strong>bastante específicos</strong>, creo que intentar aplicarlo siempre ha creado más problemas que luego hacen código difícil de entender y mantener, agregándole complejidad al código innecesariamente. Es mejor tener interfaces bien diseñadas, que sea fácil entenderlas y mantener en la cabeza.</p>\n\n<p>En general, respecto a los principios <strong>SOLID</strong>, opino algo muy similar a lo que Dan North menciona: es más importante escribir código simple, que se entienda fácilmente.</p>\n\n<p>Todos los principios se pueden resumir en estos que son el fundamento de la buena programación:</p>\n\n<ol>\n  <li>Código simple, lo más simple posible (Single Responsiility Principle)</li>\n  <li>Ocultar información detrás de interfaces bien diseñadas (Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation Principle)</li>\n  <li>Pensar bien las abstracciones que se usarán y mejorarlas constantemente (Dependency Inversion Principle)</li>\n</ol>\n\n<p>Nunca tendrás el diseño perfecto y siempre podrás mejorar tanto la arquitectura como tu código. Mientras más simple sea el código original, más probable es que tu código evolucione en algo que cumpla con lo que se espera de él. Por eso, siempre debes estar mejorando tu diseño en lo que puedas, revisando el diseño y creando mejores abstracciones.</p>\n\n<p>Por último, siempre se habla de los principios SOLID como si fueran los dogmas de una religión y se habla de “violarlos” como si estos fueran obligatorios, o principios morales que siempre se deben seguir. Además, siempre se habla de ellos como si fueran las reglas que definen lo bueno y lo malo.</p>\n\n<p>Para mi, conviene más seguir principios más generales, que un acrónimo creado con nombres de principios rimbombantes, que muchas veces son tan ambiguos que nadie qué significan exactamente, y cuando tienen aplicaciones reales, son tan complicadas que no se conviene aplicar en la mayoría de los casos.</p>\n",
      "date_published": "Sat, 22 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/20/creando-agentes-con-langchain-y-gpt-4.html",
      "url": "https://blog.thedojo.mx/2023/04/20/creando-agentes-con-langchain-y-gpt-4.html",
      "title": "Creando agentes con LangChain y GPT-4",
      "content_html": "<p>En este pequeño tutorial vamos a hablar de cómo puedes crear agentes que interactúen con el mundo exterior, usando LangChain y como modelo de lenguaje GPT-4. Como siempre, la mejor manera de aprender es haciendo algo, por lo que vamos a crear un agente</p>\n\n<h3 id=\"qué-es-un-agente\">¿Qué es un agente?</h3>\n\n<p>En este contexto, además de una cosa que puede actuar por sí mismo, se entiende que un agente puede hacer dos cosas más:</p>\n\n<ul>\n  <li>Decidir qué hacer y qué herramienta usar</li>\n  <li>Aprender a usar herramientas automáticamente (si le proporcionas las cosas que necesita)</li>\n</ul>\n\n<p>Los agentes tradicionalmente se entienden como programas que trabajan de manera autónoma y con su propio espacio de memoria, con los que te comunicas por medio de mensajes, pero que no tienes el control completo sobre ellos. Un agente puede decidir qué hacer con tu mensaje.</p>\n\n<p>Combinando ambos contextos, un agente es un pedazo del programa que actúa autónomamente, que decide cómo lograr lo que has pedido y que aprende a hacerlo por su cuenta. Al estar basado en un LLM, no está garantizado su éxito.</p>\n\n<h2 id=\"agentes-en-langchain\">Agentes en LangChain</h2>\n\n<p><strong>LangChain</strong> provee de un conjunto de agentes prefabricados. Los más fáciles de usar están basados en un framework llamado ReAct, que propone una forma de crear estos agentes. Puedes ver el documento en el que se habla de ReAct en el siguiente documento: <strong><a href=\"https://arxiv.org/abs/2210.03629\">ReAct: Synergizing Reasoning and Acting in Language Models\n</a></strong>.</p>\n\n<p>Básicamente este framework da las guías para crear agentes que usen herramientas de manera efectiva. LangChain provee tres agentes básicos:</p>\n\n<ul>\n  <li>\n    <p><strong>zero-shot-react-description</strong>: este tipo de agentes determinan qué tipo de herramientas usar basándose en la descripción de las herramientas proporcionadas.</p>\n  </li>\n  <li>\n    <p><strong>react-docstore</strong>: basado completamente en el framework ReAct, este tipo de agentes usan herramientas para buscar documentos y luego buscar términos en esos documentos. Recibe una herramienta de búsqueda y una de consulta.</p>\n  </li>\n  <li>\n    <p><strong>self-ask-with-search</strong>: utiliza una sola herramienta llamada ‘Intermediate Answer’ que debe ser capaz de buscar respuestas correctas a preguntas. En el paper original de ReAct se usa Google como herramienta de búsqueda.</p>\n  </li>\n  <li>\n    <p><strong>conversational-react-description</strong>: está pensado para ser usado de manera conversacional, puede decidir qué herramienta usar y tiene memoria para recordar lo que ya se ha hablado.</p>\n  </li>\n</ul>\n\n<h3 id=\"creando-un-agente\">Creando un agente</h3>\n\n<p>El siguiente código crea un agente que puede usar herramientas para lograr sus objetivos:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c1\"># Creando un agente con LangChain\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">load_tools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">initialize_agent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">AgentType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.llms</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span>\n\n<span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">load_tools</span><span class=\"p\">([</span><span class=\"s\">\"serpapi\"</span><span class=\"p\">,</span> <span class=\"s\">\"llm-math\"</span><span class=\"p\">],</span> <span class=\"n\">llm</span><span class=\"o\">=</span><span class=\"n\">llm</span><span class=\"p\">)</span>\n\n<span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">initialize_agent</span><span class=\"p\">(</span>\n    <span class=\"n\">tools</span><span class=\"p\">,</span> <span class=\"n\">llm</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"o\">=</span><span class=\"n\">AgentType</span><span class=\"p\">.</span><span class=\"n\">ZERO_SHOT_REACT_DESCRIPTION</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Este agente puede buscar en Google y hacer aritmética básica.\"</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Pregunta algo: \"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">query</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n\n<p>El código anterior es suficiente para crear una agente que tiene dos capacidades: buscar en internet con Google y hacer operaciones matemáticas básicas. El código es bastante simple, pero vamos a explicarlo paso a paso.</p>\n\n<p>Como siempre, la primera parte es importar las funciones y tipos necesarios:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">load_tools</span> <span class=\"c1\"># Es una función que te ayuda a cargar las herramientas que los agentes serán capaces de usar\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">initialize_agent</span> <span class=\"c1\"># Es una función que te ayuda a crear un agente de manera sencilla\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.agents</span> <span class=\"kn\">import</span> <span class=\"n\">AgentType</span> <span class=\"c1\"># Es un tipo que te ayuda a especificar el tipo de agente que quieres crear, contiene todos los tipos de agentes que LangChain provee\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.llms</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span> <span class=\"c1\"># Es la clase que abstrae la conexión con el LLM que usaremos: GPT, creado por OpenAI\n</span>\n</code></pre></div></div>\n\n<p>Después, creamos una instancia de conexión con el LLM:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">(</span><span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>El que le digamos que queremos cero de temperatura significa que la respuesta será menos aleatoria, por lo que podemos pensar que será menos “creativa” o arriesgada. Esto es buena idea cuando quieres crear planes, usar herramientas con una interfaz formal, como una API. Para poder usarlo, tienes que poner en el entorno de ejecución la variable de entorno <code class=\"language-plaintext highlighter-rouge\">OPENAI_API_KEY</code> con tu API key de OpenAI.</p>\n\n<p>Seguido de esto, cargamos las herramientas que queremos que el agente pueda usar, indicando el modelo de lenguaje que usará para interactuar con ellas:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">tools</span> <span class=\"o\">=</span> <span class=\"n\">load_tools</span><span class=\"p\">([</span><span class=\"s\">\"serpapi\"</span><span class=\"p\">,</span> <span class=\"s\">\"llm-math\"</span><span class=\"p\">],</span> <span class=\"n\">llm</span><span class=\"o\">=</span><span class=\"n\">llm</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>La primera es una herramienta para buscar en Google, se llama <a href=\"https://serpapi.com/\">SerpApi</a>, y permite usar la búsqueda que nosotros hacemos en Google mediante una interfaz más amigable para programas. La versión gratuita te da 100 búsquedas mensuales.</p>\n\n<p>La segunda herramienta, <code class=\"language-plaintext highlighter-rouge\">llm-math</code>, tiene como objetivo permitir que el agente haga matemáticas básicas, aunque tampoco están garantizadas porque se ejecuta código que el LLM devuelve. El prompt que usa es (lo traduzco a español después):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>You are GPT-3, and you can't do math.\n\nYou can do basic math, and your memorization abilities are\nimpressive, but you can't do any complex calculations that\na human could not do in their head. You also have an annoying\ntendency to just make up highly specific, but wrong, answers.\n\nSo we hooked you up to a Python 3 kernel, and now you can execute\ncode. If you execute code, you must print out the final answer\nusing the print function. You MUST use the python package\nnumpy to answer your question. You must import numpy as np.\n\n\nQuestion: ${Question with hard calculation.}\n\n```python\n${Code that prints what you need to know}\nprint(${code})\n```\n```output\n${Output of your code}\n```\nAnswer: $\n\nBegin.\n\nQuestion: What is 37593 * 67?\n\n```python\nimport numpy as np\nprint(np.multiply(37593, 67))\n```\n```output\n2518731\n```\nAnswer: 2518731\n\nQuestion: {question}\n\n</code></pre></div></div>\n\n<p>Traducido al español:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\nEres GPT-3, y no puedes hacer matemáticas.\n\nPuedes hacer matemáticas básicas, y tus habilidades de\nmemorización son impresionantes, pero no puedes hacer ningún\ncálculo complejo que un humano no pudiera hacer en su cabeza.\nTambién tienes una tendencia molesta a inventar respuestas\nespecíficas, pero incorrectas.\n\nAsí que te conectamos a un kernel de Python 3, y ahora puedes\nejecutar código. Si ejecutas código, debes imprimir el resultado\nfinal usando la función print. DEBES usar el paquete Python\nnumpy para responder tu pregunta. Debes importar numpy como np.\n\nPregunta: ${Pregunta con cálculos duros.}\n\n```python\n${Código que imprime lo que necesitas saber}\nprint(${código})\n```\n```output\n${Salida de tu código}\n```\n```\nRespuesta: ${Respuesta}\n\nComienza.\n\nPregunta: ¿Cuánto es 37593 * 67?\n\n```python\nimport numpy as np\nprint(np.multiply(37593, 67))\n```\n```output\n2518731\n```\nRespuesta: 2518731\n\nPregunta: {Pregunta}\n</code></pre></div></div>\n\n<p>Este módulo después extrae la respuesta de la salida del LLM y la ejecuta en un ejecutor de Python y extrae de aquí la respuesta.</p>\n\n<p>Aunque por ser un ejecutor de Python tenemos garantizado que el cálculo es correcto, no tenemos garantizado que el código introducido sea adecuado, así que no confíes siempre en sus cálculos.</p>\n\n<p>Después de eso inicializamos un agente, al que le pasamos las herramientas que usará, el modelo de lenguaje y el tipo de agente que queremos crear. Además, le decimos que escriba en la salida estándar todo su proceso con la opción <code class=\"language-plaintext highlighter-rouge\">verbose=True</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">initialize_agent</span><span class=\"p\">(</span>\n    <span class=\"n\">tools</span><span class=\"p\">,</span>\n    <span class=\"n\">llm</span><span class=\"p\">,</span>\n    <span class=\"n\">agent</span><span class=\"o\">=</span><span class=\"n\">AgentType</span><span class=\"p\">.</span><span class=\"n\">ZERO_SHOT_REACT_DESCRIPTION</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"bp\">True</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>De este modo LangChain hará todo lo necesario para inicializar un agente que use actúe de manera autónoma. Ahora le podemos preguntar cosas:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Este agente puede buscar en Google y hacer aritmética básica.\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Creamos un loop para que\n</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s\">\"Pregunta algo: \"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">query</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">agent</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>Recuerda que esto puede contestar preguntas que se puedan encontrar en internet y hacer aritmética.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este tutorial hemos visto cómo crear un agente básico. Falta explorar los demás tipos de agentes, así como las demás herramientas que LangChain provee para que podamos crear agentes más complejos y funcionales. Además, hay que probar con diferentes agentes y ver cómo se comportan.</p>\n",
      "date_published": "Thu, 20 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/17/instrumentando-microservicios-con-X-Ray.html",
      "url": "https://blog.thedojo.mx/2023/04/17/instrumentando-microservicios-con-X-Ray.html",
      "title": "Instrumentando microservicios en Go con Gin y AWS X-Ray",
      "content_html": "<p>En una arquitectura de microservicios, las operaciones muchas veces abarcan múltiples servicios y recursos tales como gateways, microservicios, balanceadores de carga, bases de datos entre otros. La naturaleza distribuida de los microservicios es lo que hace invaluable la instrumentazión de software.</p>\n\n<p>Si nuestro código provee información de traceo para requests, y logs, podemos decir que está instrumentado y que podemos observar cómo se está desempeñando nuestro sistema.</p>\n\n<p>La instrumentación de servicios es especialmente útil para identificar y resolver problemas de rendimiento y errores. Los datos recolectados pueden ser usados para planear la capacidad de nuestros servicios al ayudarnos a entender el tráfico y patrones de uso en nuestras aplicaciones.</p>\n\n<p>Existen varias soluciones para instrumentar nuestros servicios, como <a href=\"https://opentelemetry.io/\">OpenTelemetry</a>, <a href=\"https://zipkin.io/\">Zipkin</a> y <a href=\"https://www.datadoghq.com/\">datadog</a>. AWS también ofrece una <a href=\"https://aws-otel.github.io/\">Distribución de OpenTelemetry</a> para poder usar OpenTelemetry como backend de obserbabilidad mientras usas X-Ray o cualquier otra solución de terceros para recibir datos de telemetría y proveer procesamiento, agregación y visualización de éstos.</p>\n\n<p>En este post, les voy a contar sobre mi experiencia al instrumentar un microservicio en Go usando Gin y AWS X-Ray.</p>\n\n<h2 id=\"gin\">Gin</h2>\n\n<p>Gin es un framework para el lenguaje de programación Go para crear aplicaciones web, se destaca por ser ligero y tener un alto rendimiento, diseñado para facilitar la creación de aplicaciones web escalables de una manera rápida.</p>\n\n<p>Ofrece una API minimalista, un router robusto, soporte para middleware y características de seguridad integradas, lo que lo convierte en una opción ideal para construir microservicios y otras aplicaciones web de alto rendimiento.</p>\n\n<p>Si bien Gin puede tener una curva de aprendizaje empinada y características limitadas integradas, su simplicidad y capacidad de extensión lo convierten en una opción popular para los desarrolladores que priorizan el rendimiento y la escalabilidad.</p>\n\n<p><strong>Crear un servicio de Gin desde cero está fuera del alcance de esta publicación</strong>, pero puedes leer más sobre Gin en la <a href=\"(https://gin-gonic.com/docs/)\">página oficial de su documentación</a>.</p>\n\n<h2 id=\"aws-x-ray\">AWS X-Ray</h2>\n\n<p>AWS X-Ray es un servicio de AWS que recolecta datos sobre los requests servidos por tu aplicación y provee herramientas para ver, filtrar y obtener información sobre esos datos para identificar problemas y oportunidades de optimización.</p>\n\n<p>Algunos puntos a favor de X-Ray sobre otras herramientas similares son:</p>\n\n<ul>\n  <li>Facilidad de integración con otros servicios de AWS.</li>\n  <li>No hay infraestructura extra qué mantener (el daemon de X-Ray está incluído en las plataformas AWS Elastic Beanstalk y AWS Lambda).</li>\n  <li>Puede funcionar sólo como visualizador (usando OpenTelemetry como tracer).</li>\n  <li>Para servicios soportados, el SDK de X-Ray puede enviar y rastrear automáticamente los “ID de request” entre los servicios.</li>\n  <li>Es administrado por AWS.</li>\n  <li>Los primeros 100k rastreos del mes son gratis.</li>\n  <li>El primer millón de rastreos obtenidos o escaneados cada mes es gratis.</li>\n</ul>\n\n<p>Sin embargo algunos puntos en contra son:</p>\n\n<ul>\n  <li>AWS X-Ray sólo puede ser usado con aplicaciones corriendo en Amazon EC2, Amazon EC2 containser service, AWS Lambda, y AWS Elastic Beanstalk.</li>\n  <li>Después de agotar los rastreos gratuitos del mes, cada rastreo indexado y consultado tiene un costo.</li>\n  <li>Soporte limitado de lenguajes: Mientras que el SDK de X-Ray tiene soporte para varios lenguajes de programación, no soporta todos los lenguajes o plataformas, lo cual puede limitar su utilidad en algunos casos.</li>\n  <li>Vendor lock-in: El uso de X-Ray puede llevar a la dependencia exclusiva de AWS, ya que es un servicio propietario disponible sólo en la plataforma de AWS. Esto puede limitar su capacidad para cambiar a otros proveedores de nube o herramientas en el futuro.</li>\n</ul>\n\n<p>Si, después de leer algunos de los pros y contras, aún estás inclinado a usar X-Ray, entonces puedes seguir leyendo.</p>\n\n<h3 id=\"requerimientos\">Requerimientos</h3>\n\n<p>Para ver la información de rastreo en AWS X-Ray, necesitas una cuenta de AWS y una aplicación corriendo en la infraestructura de AWS o que esté integrada con los servicios de AWS. Además, necesitarás:</p>\n\n<ul>\n  <li>Una instancia del X-Ray daemon, que se puede ejecutar como un binario o como un contenedor de Docker. Puedes encontrar instrucciones detalladas sobre cómo ejecutar y configurar el daemon <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-local.html\">aquí</a>. Para éste artículo, estaré usando el binario para OS X.</li>\n  <li>Tu aplicación debe de tener los permisos necesarios para interactuar con AWS X-Ray y otros servicios que use.</li>\n</ul>\n\n<h4 id=\"iam-role\">IAM Role</h4>\n\n<p>Para permitir que tu aplicación mande información sobre tus requests a X-Ray, tienes que proveerle al daemon de X-Ray un rol. Para crear un rol, vamos a entrar a nuestra consola web de AWS y de allí navegamos a la página principal de IAM y allí encontraremos el botón “Create Role” (o “Crear Rol” si tienes configurado tu panel de AWS en español).</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/create-role.png\" alt=\"Crear nuevo rol\" /></p>\n\n<p>En el asistente, selecciona “AWS Account” para Trusted Entity y da click en “Next”/”Siguiente”. En la siguiente pantalla, busca por la política de permisos llamada “AWSXRayDaemonWriteAccess”. Da click en “Next”/”Siguiente” para continuar..</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/name-review-create.png\" alt=\"Nombra, Revisa y Crea\" /></p>\n\n<p>Agrega un nombre y descripción para el rol, y después da click en “Create Role”. Ésto te llevará a la lista de roles. Busca el rol que acabas de crear para ver y copiar su ARN.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/role-details.png\" alt=\"Detalles del rol\" /></p>\n\n<h3 id=\"x-ray-daemon\">X-Ray Daemon</h3>\n\n<p>Ahora que ya tenemos el rol para el daemon, vamos a configurarlo.</p>\n\n<p>Para mi proyecto de prueba, solo tuve que cambiar algunos valores de la configuración, como el nivel del logger, especificar el modo local a verdadero, y agregar el ARN del rol que creamos y la región de AWS en la que estamos operando nuestros servicios.</p>\n\n<p>Aquí está la configuración que usé:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># Send segments to AWS X-Ray service in a specific region</span>\n<span class=\"na\">Region</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">us-west-2\"</span>\n<span class=\"na\">Socket</span><span class=\"pi\">:</span>\n  <span class=\"c1\"># Change the address and port on which the daemon listens for UDP packets containing segment documents.</span>\n  <span class=\"na\">UDPAddress</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">127.0.0.1:2000\"</span>\n  <span class=\"c1\"># Change the address and port on which the daemon listens for HTTP requests to proxy to AWS X-Ray.</span>\n  <span class=\"na\">TCPAddress</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">127.0.0.1:2000\"</span>\n<span class=\"na\">Logging</span><span class=\"pi\">:</span>\n  <span class=\"c1\"># Change the log level, from most verbose to least: dev, debug, info, warn, error, prod (default).</span>\n  <span class=\"na\">LogLevel</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">dev\"</span>\n<span class=\"c1\"># Turn on local mode to skip EC2 instance metadata check.</span>\n<span class=\"na\">LocalMode</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n<span class=\"c1\"># Assume an IAM role to upload segments to a different account.</span>\n<span class=\"na\">RoleARN</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">arn:aws:iam::269174633178:role/X-Ray_Daemon_role\"</span>\n<span class=\"c1\"># Daemon configuration file format version.</span>\n<span class=\"na\">Version</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n</code></pre></div></div>\n\n<p>En <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-configuration.html\">la guía del desarrollador de AWS X-Ray</a> puedes aprender más sobre otros valores que puedes configurar.</p>\n\n<h3 id=\"instrumentando-tu-microservicio-en-go\">Instrumentando tu microservicio en Go</h3>\n\n<p>Ahora que ya tenemos el X-Ray daemon configurado y corriendo, podemos proceder a instrumentar nuestro servicio.</p>\n\n<p>AWS recomienda empezar agregando rastreo para requests entrantes envolviendo los controladores de servicio con <code class=\"language-plaintext highlighter-rouge\">xray.Handler</code>. Pero, como estamos usando Gin, el enfoque que implementaremos es ligeramente diferente.</p>\n\n<p>Mientras buscaba recursos sobre cómo instrumentar una aplicación con Gin, me encontré con éste <a href=\"https://raw.githubusercontent.com/oroshnivskyy/go-gin-aws-x-ray\">middleware</a>, el cual está basado en la función <a href=\"https://raw.githubusercontent.com/aws/aws-xray-sdk-go/1e154184282bb3b0166cb1b154f2b4abed0b1e6f/xray/handler.go#L99\"><code class=\"language-plaintext highlighter-rouge\">xray.Handler</code></a>.</p>\n\n<p>Éste middleware hace el mismo trabajo que <code class=\"language-plaintext highlighter-rouge\">xray.Handler</code>, abrirá y cerrará un segmento para cada request recibido. También se encargará de manejar el header para IDs de rastreo (<code class=\"language-plaintext highlighter-rouge\">\"x-amzn-trace-id\"</code>), que es un header que contiene un identificador que será generado para cada petición nueva y que será propagado a travéz de todos nuestros microservicios.</p>\n\n<p>Así que vamos a agregar el middleware a las rutas que queremos intrumentar:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">// as part of my gin routes</span>\n<span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">(</span><span class=\"s\">\"/auth/roles\"</span><span class=\"p\">,</span> <span class=\"n\">xraymid</span><span class=\"o\">.</span><span class=\"n\">Middleware</span><span class=\"p\">(</span><span class=\"n\">xray</span><span class=\"o\">.</span><span class=\"n\">NewFixedSegmentNamer</span><span class=\"p\">(</span><span class=\"s\">\"GetRoles\"</span><span class=\"p\">)),</span> <span class=\"n\">controller</span><span class=\"o\">.</span><span class=\"n\">GetRoles</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Aquí estamos agregando el middleware de X-Ray (con el alias <code class=\"language-plaintext highlighter-rouge\">xraymid</code>) a una ruta del grupo <code class=\"language-plaintext highlighter-rouge\">v1</code>. El valor que estamos pasando como argumento a <code class=\"language-plaintext highlighter-rouge\">NewFixedSegmentNamer</code> debe de ser un nombre descriptivo para tu ruta. Éste será el nombre para el grupo principal de rastreo para éste endpoint.</p>\n\n<p>¡Bien! ¡Ahora veamos si funciona! Inicia tu servicio y verifica que el daemon esté corriendo.</p>\n\n<p>Después de hacer un request, podemos ver en los logs del daemon algo como:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>2023-03-21T13:10:47-06:00 [Debug] Received request on HTTP Proxy server : /GetSamplingRules\n2023-03-21T13:10:48-06:00 [Debug] processor: sending partial batch\n2023-03-21T13:10:48-06:00 [Debug] processor: segment batch size: 1. capacity: 50\n2023-03-21T13:10:48-06:00 [Info] Successfully sent batch of 1 segments (0.109 seconds)\n2023-03-21T13:10:49-06:00 [Debug] Send 1 telemetry record(s)\n</code></pre></div></div>\n\n<p>¡Parece que está funcionando! Vamos a ver qué dice la consola de AWS.</p>\n\n<p>En tu consola web de AWS, ve a CloudWatch y en el panel lateral busca la opción para X-Ray, y da click en la opción “traces”.</p>\n\n<p>Si todo salió bien, deberías estar viendo el número de rastreos recibidos recientemente, y una tabla con la información de esos rastreos.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/cloudwatch-xray-traces.png\" alt=\"Cloudwatch -&gt; X-Ray -&gt; Traces\" /></p>\n\n<p>En la tabla de registros, da click en alguno. Aparecerá la vista de rastreo/seguimiento, donde puedes ver la información registrada.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/simple-trace-info.png\" alt=\"Información de rastreo\" /></p>\n\n<p>Aquí podemos ver los datos de seguimiento. Hasta el momento sólo estamos creando un segmento y cerrándolo para cada llamada, por lo que no tenemos mucha otra información, pero podemos ver el código de estado de respuesta, el tiempo que tomó para que se atendiera la solicitud y, por supuesto, el mapa de seguimiento, que por ahora incluye sólo el cliente y el servicio.</p>\n\n<h4 id=\"creando-sub-segmentos\">Creando sub segmentos</h4>\n\n<p>Ahora que tenemos nuestra configuración básica de instrumentación, ¿qué más podemos rastrear?</p>\n\n<p>Hasta el momento, solo estamos rastreando una solicitud y algunos de sus metadatos. Pero, ¿qué pasa si queremos ser más detallados?</p>\n\n<p>Digamos que tenemos un proceso intensivo que se ejecuta como parte de la solicitud; podemos agregar un subsegmento para monitorearlo.</p>\n\n<p>En algún lugar de mi servicio, se ejecuta el siguiente código cuando llamo al endpoint <code class=\"language-plaintext highlighter-rouge\">auth/roles</code>:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">// dentro de alguna función</span>\n<span class=\"n\">roles</span> <span class=\"o\">:=</span> <span class=\"nb\">make</span><span class=\"p\">([]</span><span class=\"n\">Role</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rolesList</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">roleItem</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">rolesList</span> <span class=\"p\">{</span>\n\t<span class=\"n\">role</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">buildRole</span><span class=\"p\">(</span><span class=\"n\">roleItem</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">RoleList</span><span class=\"p\">{},</span> <span class=\"n\">err</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"n\">roles</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">role</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Aquí podemos envolver el bucle <code class=\"language-plaintext highlighter-rouge\">for</code> en un subsegmento para ver cuánto tiempo del request tarda en ejecutar éste proceso.</p>\n\n<p>Para crear el subsegmento, envolvemos el ciclo:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">xray</span><span class=\"o\">.</span><span class=\"n\">Capture</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"s\">\"BuildRolesDetail\"</span><span class=\"p\">,</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">ctx1</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">)</span> <span class=\"kt\">error</span> <span class=\"p\">{</span>\n\t<span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">roleItem</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">rolesList</span> <span class=\"p\">{</span>\n\t\t<span class=\"n\">role</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">buildRole</span><span class=\"p\">(</span><span class=\"n\">roleItem</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n\t\t\t<span class=\"k\">return</span> <span class=\"n\">err</span>\n\t\t<span class=\"p\">}</span>\n\t\t<span class=\"n\">roles</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">role</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">xray</span><span class=\"o\">.</span><span class=\"n\">AddMetadata</span><span class=\"p\">(</span><span class=\"n\">ctx1</span><span class=\"p\">,</span> <span class=\"s\">\"No. roles built\"</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">roles</span><span class=\"p\">));</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n\t\t<span class=\"k\">return</span> <span class=\"n\">nepErrors</span><span class=\"o\">.</span><span class=\"n\">InternalServerError</span><span class=\"o\">.</span><span class=\"n\">WithDetail</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">())</span>\n\t<span class=\"p\">}</span>\n\t<span class=\"k\">return</span> <span class=\"no\">nil</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>Vamos a correr nuestro servicio y llamemos de nuevo nuestro endpoint instrumentado.</p>\n\n<p>Éste es el nuevo registro en AWS CloudWatch -&gt; Traces:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/trace-with-sub-segment.png\" alt=\"Rastreo con subsegmentos\" /></p>\n\n<p>Ahora podemos ver que la petición tomó <strong>215ms</strong>, y de esos, el ciclo <code class=\"language-plaintext highlighter-rouge\">BuildRolesDetail</code> tomó <strong>205ms</strong>.</p>\n\n<p>¿Ya estás pensando en las posibilidades? ¡Deberías! puedes usar <code class=\"language-plaintext highlighter-rouge\">xray.AddMetadata</code> para agregar cualquier dato que te sea de utilidad. Únicamente toma en cuenta que el Daemon de X-Ray sólo envía a AWS <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html\">hasta 64KB de metadata por segmento</a>.</p>\n\n<h3 id=\"instrumentando-clientes-de-aws-con-x-ray\">Instrumentando clientes de AWS con X-Ray</h3>\n\n<p>Instrumentar clientes de AWS usando el SDK-V1 es bastante sencillo, puedes seguir la <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-awssdkclients.html\">guía oficial</a> para hacerlo.</p>\n\n<p>No hay mucha documentación sobre cómo instrumentar clientes de AWS usando el AWS SDK-v2, pero la configuración es bastante sencilla.</p>\n\n<p>En algún lugar en el código de tu servicio, estás inicializando tu(s) cliente(s) de AWS. Para instrumentarlos, necesitas proveer a tus clientes con un cliente HTTP de X-Ray y pasar el contexto del request para cada llamada.</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">LoadDefaultConfig</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n\t<span class=\"k\">return</span> <span class=\"no\">nil</span><span class=\"p\">,</span> <span class=\"n\">err</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">// Create an HTTP client</span>\n<span class=\"n\">httpClient</span> <span class=\"o\">:=</span> <span class=\"o\">&amp;</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">{}</span>\n\n<span class=\"c\">// Set the HTTP client as the AWS configuration's HTTP client</span>\n<span class=\"n\">cfg</span><span class=\"o\">.</span><span class=\"n\">HTTPClient</span> <span class=\"o\">=</span> <span class=\"n\">httpClient</span>\n\n<span class=\"c\">// Create an X-Ray client</span>\n<span class=\"n\">xrayClient</span> <span class=\"o\">:=</span> <span class=\"n\">xray</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">httpClient</span><span class=\"p\">)</span>\n\n<span class=\"n\">dynamoClient</span> <span class=\"o\">:=</span> <span class=\"n\">dynamodb</span><span class=\"o\">.</span><span class=\"n\">NewFromConfig</span><span class=\"p\">(</span><span class=\"n\">cfg</span><span class=\"p\">,</span> <span class=\"k\">func</span><span class=\"p\">(</span><span class=\"n\">options</span> <span class=\"o\">*</span><span class=\"n\">dynamodb</span><span class=\"o\">.</span><span class=\"n\">Options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\t<span class=\"c\">// Wrap the http.Client with an xray.Client</span>\n\t<span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">HTTPClient</span> <span class=\"o\">=</span> <span class=\"n\">xrayClient</span>\n<span class=\"p\">})</span>\n</code></pre></div></div>\n\n<p>Aquí, estoy agregando el cliente HTTP de X-Ray al cliente de AWS DynamoDB.</p>\n\n<p>Una vez hecho esto, llamemos de nuevo a nuestro endpoint instrumentado.</p>\n\n<p><img src=\"https://raw.githubusercontent.com/makkoman/blogposts/main/x-ray/images/instrumenting-ddb-client.png\" alt=\"Instrumentando el cliente de DynamoDB\" /></p>\n\n<p>Yo estoy corriendo DynamoDB localmente, pero ya puedes ver qué tanto tiempo toma cada llamada a DynamoDB. También podemos ver que el mapa de rastreo ha sido acualizado para mostrar mi instancia local de DynamoDB.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n<p>Instrumentar un servicio con X-Ray es relativamente sencillo, pero puede complicarse muy rápido dependiendo de las cosas que queremos monitorear. Debido a esto, el esfuerzo para agregar trazabilidad a su servicio puede variar de caso en caso.</p>\n\n<p>Otra cosa a considerar es el límite de 64KB por segmento. Puede que no sea suficiente si deseas rastrear muchos subsegmentos o agregar más metadatos. Existen formas de evitar esto, pero están fuera del alcance de esta publicación.</p>\n\n<p>En conclusión, implementar X-Ray en un microservicio en Go es un proceso sencillo que puede beneficiar enormemente la observabilidad y las capacidades de resolución de problemas de tu aplicación. El proceso de integración es relativamente fácil, y el SDK de X-Ray proporciona una serie de características útiles que facilitan la trazabilidad de las solicitudes y la identificación de cuellos de botella. Sin embargo, es importante tener en cuenta que X-Ray tiene algunas desventajas, como el costo asociado con su uso y las limitaciones de sus capacidades de muestreo.</p>\n\n<p>No obstante, con una consideración cuidadosa y una implementación adecuada, X-Ray puede ser una herramienta invaluable para la depuración y optimización de tu arquitectura de microservicios. Así que no dudes en probarlo y ver cómo puede mejorar el rendimiento y la confiabilidad de tus microservicios en Go.</p>\n",
      "date_published": "Mon, 17 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/17/composicion-en-el-software.html",
      "url": "https://blog.thedojo.mx/2023/04/17/composicion-en-el-software.html",
      "title": "Composición en el software",
      "content_html": "<p>Composición:</p>\n\n<blockquote>\n  <p>Es la acción de combinar componentes individuales para formar un sistema más complejo.</p>\n</blockquote>\n\n<p>Componer es la técnica más efectiva para construir software de manera organizada. La composición nos permite crear software complejo porque nos permite construir piezas pequeñas que resuelven problemas manejables y luego “juntarlas” para entregar la solución de nuestro problema.</p>\n\n<p>Veamos algunas formas de hacer composición en el software y por qué es más efectivo que otras formas de reutilizar código.</p>\n\n<h2 id=\"por-que-es-importante-aprender-a-usar-la-composición\">¿Por que es importante aprender a usar la composición?</h2>\n\n<blockquote>\n  <p>Nuestra habilidad para descomponer un problema en partes, depende\ndirectamente de nuestra habilidad para combinar soluciones. - <strong>John Hughes</strong></p>\n</blockquote>\n\n<p>John Hughes es un gran proponente e investigador de la programación funcional en la actualidad. Él propone que la composición es importante porque nos da la confianza de poder romper nuestros problemas en problemas más pequeños, sabiendo que después podremos juntarlos de manera efectiva para entregar una solución al problema original.</p>\n\n<blockquote>\n  <p>Divide y vencerás</p>\n</blockquote>\n\n<p>Una ventaja secundaria de dividir el software en piezas pequeñas, es que si diseñamos correctamente nuestros componentes y tenemos las herramientas adecuadas para unirlas después, podemos <strong>reutilizar</strong> las piezas que ya hemos construido en otras partes.</p>\n\n<p>Veamos dos formas de aplicar la composición en el software.</p>\n\n<h2 id=\"composición-de-funciones\">Composición de funciones</h2>\n\n<p>Las funciones son la unidad de abstracción más pequeña que tenemos en la programación. Crear pequeñas funciones útiles que resuelvan problemas generales, de manera <strong>completa y precisa</strong>, es muy buena idea.</p>\n\n<p>¿Cómo aplicamos la composición? Puedes usar la composición al dividir tu problema principal en funciones sencillas y luego juntarlas.Veamos un ejemplo: vamos a crear un validador de contraseñas. Este debe verificar las siguientes condiciones:</p>\n\n<ul>\n  <li>Verificar una longitud mínima, que podría ser 8 caracteres.</li>\n  <li>Checar que no tenga ciertas palabras (lista negra).</li>\n  <li>Verificar que tiene un número</li>\n  <li>Verificar que tiene un carácter especial</li>\n</ul>\n\n<p>Podríamos hacer esto en una sola función que verificara todas estas características, una por una a través de un serie de if’s. Pero veamos una implementación usando composición, y sus ventajas.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">min_length</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">has_number</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">.</span><span class=\"n\">isdigit</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">has_special_char</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"s\">\"!@#$%^&amp;*()_+\"</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[]):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">blacklist</span><span class=\"p\">:</span>\n      <span class=\"n\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'password'</span><span class=\"p\">,</span> <span class=\"s\">'12345678'</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">password</span> <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">blacklist</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\\n           <span class=\"n\">has_number</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\\n           <span class=\"n\">has_special_char</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"ow\">and</span> \\\n           <span class=\"n\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Quiero que te fijes especialmente en la última función, <code class=\"language-plaintext highlighter-rouge\">validate_password</code>. Aunque funciona, es un poco rígida. La composición puede ayudarnos a hacerla más flexible.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'b1'</span><span class=\"p\">,</span> <span class=\"s\">'b2'</span><span class=\"p\">]):</span>\n    <span class=\"n\">validators</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span>\n        <span class=\"n\">has_number</span><span class=\"p\">,</span>\n        <span class=\"n\">has_special_char</span><span class=\"p\">,</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'palabra_uno'</span><span class=\"p\">,</span> <span class=\"s\">'palabra_dos'</span><span class=\"p\">])</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">validator</span> <span class=\"ow\">in</span> <span class=\"n\">validators</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Esta función es más flexible, pudiendo agregar o quitar validadores sin tener que modificar más código, simplemente modificando la lista de validadores, pero todavía no es como la queremos. ¿Qué pasas si queremos agregar el conjunto de errores por los que falla una validación? Tenemos que ir <strong>acumulando</strong>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">validate_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">blacklist</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'b1'</span><span class=\"p\">,</span> <span class=\"s\">'b2'</span><span class=\"p\">]):</span>\n    <span class=\"s\">\"\"\"Devuelve la lista de errores de la contraseña, si está vacía, la contraseña es válida\"\"\"</span>\n    <span class=\"n\">validators</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">min_length</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"s\">\"mesage\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña es muy corta\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"n\">has_number</span><span class=\"p\">,</span> <span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña no tiene un número\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"n\">has_special_char</span><span class=\"p\">,</span> <span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña no tiene un carácter especial\"</span><span class=\"p\">},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"validator\"</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"n\">not_in_blacklist</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">'palabra_uno'</span><span class=\"p\">,</span> <span class=\"s\">'palabra_dos'</span><span class=\"p\">]),</span> <span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"La contraseña tiene palabras prohibidas\"</span><span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"nb\">reduce</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">validator</span><span class=\"p\">:</span> <span class=\"n\">errors</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">validator</span><span class=\"p\">[</span><span class=\"s\">\"message\"</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">validator</span><span class=\"p\">[</span><span class=\"s\">\"validator\"</span><span class=\"p\">](</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">validators</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">errors</span>\n\n</code></pre></div></div>\n\n<p>Aquí <code class=\"language-plaintext highlighter-rouge\">reduce</code> que recibe una función, una lista de elementos por las que iterar y un valor inicial, nos ayuda a acumular los errores. Si quisiéramos hacerlo aún más flexible, podríamos hacer dos cosas:</p>\n\n<ul>\n  <li>Hacer que la función <code class=\"language-plaintext highlighter-rouge\">validate_password</code> reciba una lista de validadores (junto con el mensaje), en vez de tenerlos definidos dentro de la función</li>\n  <li>Definir una clase <code class=\"language-plaintext highlighter-rouge\">Validator</code> que tenga un método <code class=\"language-plaintext highlighter-rouge\">validate</code> y un atributo <code class=\"language-plaintext highlighter-rouge\">message</code> y que reciba una función y un mensaje en su constructor, para tener una interfaz más clara.</li>\n</ul>\n\n<h3 id=\"composición-matemática\">Composición matemática</h3>\n\n<p>Este tipo de composición fue un poco más empírica, simplemente juntando funciones. A veces, cuando oigas de composición, se van a referir a la composición de funciones en sentido matemático. Veamos un ejemplo en Python:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">ascii_letters</span>\n\n<span class=\"n\">LETTERS</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">ascii_letters</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">quitar_no_ascii</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">char</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">texto</span> <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">LETTERS</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reemplazar_acentos</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">):</span>\n    <span class=\"n\">accents</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s\">'á'</span><span class=\"p\">:</span> <span class=\"s\">'a'</span><span class=\"p\">,</span>\n        <span class=\"s\">'é'</span><span class=\"p\">:</span> <span class=\"s\">'e'</span><span class=\"p\">,</span>\n        <span class=\"s\">'í'</span><span class=\"p\">:</span> <span class=\"s\">'i'</span><span class=\"p\">,</span>\n        <span class=\"s\">'ó'</span><span class=\"p\">:</span> <span class=\"s\">'o'</span><span class=\"p\">,</span>\n        <span class=\"s\">'ú'</span><span class=\"p\">:</span> <span class=\"s\">'u'</span><span class=\"p\">,</span>\n        <span class=\"s\">'ñ'</span><span class=\"p\">:</span> <span class=\"s\">'n'</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">accents</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"n\">char</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">texto</span><span class=\"p\">])</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">limpiar_cadena</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">quitar_no_ascii</span><span class=\"p\">(</span><span class=\"n\">reemplazar_acentos</span><span class=\"p\">(</span><span class=\"n\">texto</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n\n<p>El código anterior deja una cadena solamente con letras ASCII, sin acentos. Lo que ves en la función <code class=\"language-plaintext highlighter-rouge\">limpiar_cadena</code> es una composición de funciones, en el sentido matemático, aplicar una función después de otra, o la salida de una como argumento de la otra.</p>\n\n<p>Siempre que pienses en un proceso que lleve una cadena de pasos, lo puedes representar como una cadena de funciones. En lenguajes funcionales hay operadores para hacer esto.</p>\n\n<p>Puedes pensar en este tipo de composición como en hacer <strong>fluir</strong> la información por un conjunto de funciones. Ejemplos en lenguajes como Haskell, Clojure y Elixir te pueden ayudar a expandir sobre esto, puedes buscarlo como “composición funcional”.</p>\n\n<h2 id=\"composición-de-objetos\">Composición de objetos</h2>\n\n<p>Otra técnica que te puede ayudar a crear mejor software es la composición de objetos. Esta se entiende como formar objetos más complejos a partir de objetos más simples. Aunque la <strong>herencia</strong> es una forma de composición, al hacer completamente dependientes una clase de otra, no es la mejor forma de crear objetos complejos. De hecho, hay grandes dudas sobre si la herencia es una buena idea. Pero no estamos aquí para discutir sobre las ventajas y desventajas de la herencia, sino para aprender a usar otros tipos de composición.</p>\n\n<p>Una forma de crear objetos complejos, en vez de tener la relación “es un” que nos da la herencia, es tener la relación “tiene un”. No estamos diciendo que la herencia nunca se deba usar, pero en muchas ocasiones podemos pensar en la composición como una alternativa mejor.</p>\n\n<p>Observa el siguiente ejemplo, en el que representamos la información de un usuario y su relación con al entidad Empleado:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">Usuario</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nombre</span><span class=\"p\">,</span> <span class=\"n\">apellido</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">nombre</span> <span class=\"o\">=</span> <span class=\"n\">nombre</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">apellido</span> <span class=\"o\">=</span> <span class=\"n\">apellido</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">email</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Empleado</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">usuario</span><span class=\"p\">,</span> <span class=\"n\">puesto</span><span class=\"p\">,</span> <span class=\"n\">salario</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">info_usuario</span> <span class=\"o\">=</span> <span class=\"n\">usuario</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">puesto</span> <span class=\"o\">=</span> <span class=\"n\">puesto</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">salario</span> <span class=\"o\">=</span> <span class=\"n\">salario</span>\n</code></pre></div></div>\n\n<p>Esta implementación está menos acoplada o es menos dependiente que la implementación basada en herencia. Por ejemplo, si queremos evolucionar la clase <code class=\"language-plaintext highlighter-rouge\">Usuario</code>, no tenemos que hacer que nada de esto afecte directamente a la clase <code class=\"language-plaintext highlighter-rouge\">Empleado</code>.</p>\n\n<p>Otra forma de usar la composición es la <strong>delegación</strong>, a la que le dedicaremos más tiempo en un futuro. Esta te la puedes imaginar como que un objeto le deja todo el trabajo a otro a través, por ejemplo, de un método. Esto es más común en lenguajes no basados en clases, ya que se da de manera más natural, como en JavaScript, donde puedes usar <code class=\"language-plaintext highlighter-rouge\">Object.assign</code> para copiar las propiedades de un objeto a otro.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aprender a usar la composición es <strong>obligatorio para desarrollar buen software</strong>. Lo quieras o no, mientras desarrollas, siempre estás juntando componentes, es decir <em>componiendo</em>, si conoces las técnicas correctas, podrás crear software de mejor calidad de manera más rápida.</p>\n\n<p>Piensa en el desarrollo de software como el arte de deconstruir los problemas, resolverlos por cachitos y después juntar las soluciones de regreso para tener la solución completa.</p>\n",
      "date_published": "Mon, 17 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/15/usando-langchain-para-crear-software-basado-en-llm-s.html",
      "url": "https://blog.thedojo.mx/2023/04/15/usando-langchain-para-crear-software-basado-en-llm-s.html",
      "title": "Usando LangChain 🦜 para crear software basado en LLM's",
      "content_html": "<p>Los grandes modelos de lenguaje o LLM’s (Large Language Models) han sido noticia en este 2023. Es por eso que han surgido muchos proyectos y herramientas que permiten crear software basado en estas herramientas.</p>\n\n<p>En este artículo vamos a poner un pequeño tutorial de una herramienta creada para hacer aplicaciones basadas en LLM’s: <a href=\"https://python.langchain.com/en/latest/index.html\">LangChain</a>.</p>\n\n<h2 id=\"qué-es-langchain\">¿Qué es LangChain?</h2>\n\n<p>Las aplicaciones basadas en procesamiento de lenguaje natural, sea como una herramienta de comunicación o como su producto principal, normalmente requieren fuentes de información para potenciar sus capacidades.</p>\n\n<p>También es una muy buena idea que estas aplicaciones puedan actuar por sí mismas usando las instrucciones creadas por un LLM. Para hacer esto podemos usar <strong>agentes</strong>.</p>\n\n<p><strong>LangChain</strong> provee componentes que te permiten lograr estas dos tareas, para que tú los uses como quieras, pero también te provee\nde cadenas de componentes (<em><a href=\"/\">composición</a> de software, ¿te suena?</em>) con casos de uso comunes, digamos que prefabricados, para hacer software basado en LLM’s de manera más rápida.</p>\n\n<p>Hablemos de qué componentes te provee LangChain para empezar a construir tus programas basados en LLM’s.</p>\n\n<h2 id=\"componentes-principales\">Componentes principales</h2>\n\n<p>LangChain provee varios tipos de componentes, muchos de los cuales son abstracciones de los conceptos más usados en la interacción con LLM’s, veamos algunos de ellos:</p>\n\n<ul>\n  <li>\n    <p><strong>Texto</strong>. La abstracción más básica es la que representa un texto cualquiera que le mandamos a un LLM. Este texto puede provenir de diferentes fuentes, como archivos, por ejemplo.</p>\n  </li>\n  <li>\n    <p><strong>Divisores de texto</strong>. Generalmente, un modelo de lenguaje no puede consumir mucho texto al mismo tiempo, por lo que para poder procesar textos grandes hay que mandárselos por partes. Este componente se encarga de ayudarte a dividir el texto en partes que el LLM pueda procesar.</p>\n  </li>\n  <li>\n    <p><strong>Índices</strong>. Es una abstracción que presenta el texto de mejor manera para que un LLM pueda acceder a la información mejor. Los índices se tienen que guardar de alguna manera y LangChain provee una interfaz para guardarlos en una base de datos especializada.</p>\n  </li>\n  <li>\n    <p><strong>Modelo</strong>. Esto es la interfaz con un modelo de lenguaje. Te lo puedes imaginar como el equivalente a un conector a base de datos, abstraen los detalles de la conexión y te dan una interfaz común.</p>\n  </li>\n  <li>\n    <p><strong>Agente</strong>. Un agente puede recibir instrucciones en forma de alguna abstracción de texto, para ejecutar acciones en <em>sistemas externos</em> o consultando para consultar al LLM.</p>\n  </li>\n  <li>\n    <p><strong>Cadena</strong>. Las cadenas son conjuntos de componentes que sirven para resolver problemas comunes o crear aplicaciones completas.</p>\n  </li>\n</ul>\n\n<p>Ya que entendemos las cosas que LangChain nos da, veamos cómo usarlas.</p>\n\n<h2 id=\"creando-una-aplicación-de-ejemplo\">Creando una aplicación de ejemplo</h2>\n\n<p>Vamos a crear una aplicación que nos permita consultar todos los posts de este blog y contestar preguntas. Por suerte, existe una cadena que ya nos permite hacer esto.</p>\n\n<h3 id=\"instalación\">Instalación</h3>\n\n<p>Primero veamos los requisitos: además de LangChain, necesitas los siguientes paquetes:</p>\n\n<ul>\n  <li>openai</li>\n  <li>chromadb</li>\n  <li>tiktoken</li>\n</ul>\n\n<p>Por lo que tu requirements.txt debería verse así:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>langchain\nopenai\nchromadb\ntiktoken\n</code></pre></div></div>\n\n<p>Aquí, recomiendo usar un entorno virtual con <a href=\"https://www.anaconda.com/products/distribution\">Anaconda</a>, sobre todo si tienes planes de seguir trabajando con cosas relacionadas con\nprocesamiento de datos.</p>\n\n<p>Para hacer la creación e instalación puedes correr los siguientes comandos si tienes <code class=\"language-plaintext highlighter-rouge\">conda</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\nconda create <span class=\"nt\">-n</span> entorno_langchain pip\nconda activate entorno_langchain\npip <span class=\"nb\">install </span>requeriments.txt\n\n</code></pre></div></div>\n\n<p>Aquí <code class=\"language-plaintext highlighter-rouge\">entorno_langchain</code> es el nombre de nuestro entorno virtual y puede ser cualquiera que tú quieras.\nTambién, para empezar, necesito una fuente de datos para empezar a probar, por lo que voy a copiar algunos posts de este blog, que están en formato markdown y pueden ser consumidas sin ningún programa adicional. Voy a crear una carpeta llamada docs y dentro copiaré los archivos markdown de este blog, que están en _posts. Tú puedes poner ahí los diferentes archivos que quieras consultar, tal vez directamente en docs.</p>\n\n<p>Mi estructura de archivos se ve así (mi carpeta de trabajo es <code class=\"language-plaintext highlighter-rouge\">thedojo_agent</code>):</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\nthedojo_agent\n├── docs\n│   ├── _posts\n│   │   ├── 2018-10-28-bienvenidos.md\n... muchos archivos más\n├── requeriments.txt\n</code></pre></div></div>\n\n<p>Teniendo esto listo podemos seguir el ejemplo básico del tutorial de LangChain.</p>\n\n<h2 id=\"creando-un-script-mínimo-que-funciona\">Creando un script mínimo que funciona</h2>\n\n<p>Dentro de un archivo que se llame <code class=\"language-plaintext highlighter-rouge\">main.py</code> vamos a escribir el siguiente código:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.document_loaders</span> <span class=\"kn\">import</span> <span class=\"n\">TextLoader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">langchain.indexes</span> <span class=\"kn\">import</span> <span class=\"n\">VectorstoreIndexCreator</span>\n\n<span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">TextLoader</span><span class=\"p\">(</span><span class=\"s\">\"./docs/_posts/2023-04-07-cuando-separar-el-codigo.md\"</span><span class=\"p\">)</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">VectorstoreIndexCreator</span><span class=\"p\">().</span><span class=\"n\">from_loaders</span><span class=\"p\">([</span><span class=\"n\">loader</span><span class=\"p\">])</span>\n\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s\">\"¿Cuándo separar el código?\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">))</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s\">\"¿Qué es un módulo?\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">.</span><span class=\"n\">query_with_sources</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n\n<p>Primero importamos el componente <code class=\"language-plaintext highlighter-rouge\">TextLoader</code> que nos permitirá cargar texto de un archivo y el componente <code class=\"language-plaintext highlighter-rouge\">VectorstoreIndexCreator</code> que nos permitirá crear un índice y almacenarlo como un vector.</p>\n\n<p>Ya nos estamos empezando a meter en cosas que no son tan conocidas. Vamos a explicarlas. Un índice es parecido a lo que se hace en las bases de datos, se analiza la información del texto para guardarle de manera organizada, para que cuando necesitemos encontrar algo, sea fácil de encontrar. Por ejemplo, podría estar organizado por palabras clave y con las referencias a donde se puede encontrar en los textos.</p>\n\n<p>Que se guarde como un vector tiene que ver con la forma en que trabajan los modelos de lenguaje. Lo que en realidad ve un modelo es una lista de tokens, que son números que representan el texto. Cuando un modelo te da una respuesta, te da una lista de tokens junto con la probabilidad de que cada token vaya en ese orden. Esto son los “embeddings”, y a final de cuenta son colecciones de números, como listas, lo que se conoce como vectores en este mundo del procesamiento de datos.</p>\n\n<p>Así que primero generamos un índice, que consiste en un conjunto de vectores y después lo guardamos.</p>\n\n<p>Eso es justo lo que hacen las dos líneas que siguen al import.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">TextLoader</span><span class=\"p\">(</span><span class=\"s\">\"./docs/_posts/2023-04-07-cuando-separar-el-codigo.md\"</span><span class=\"p\">)</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">VectorstoreIndexCreator</span><span class=\"p\">().</span><span class=\"n\">from_loaders</span><span class=\"p\">([</span><span class=\"n\">loader</span><span class=\"p\">])</span>\n</code></pre></div></div>\n\n<p>Después de esto, ahora consultamos el texto de dos formas:</p>\n\n<ol>\n  <li>Primero que nos de la respuesta solita.</li>\n  <li>Que nos de la respuestas junto con la fuente de donde la sacó.</li>\n</ol>\n\n<p>Este ejemplo básico ya empieza a hacer por nosotros lo que queríamos en un principio: consultar un texto y obtener una respuesta.</p>\n\n<p>Vamos a ir un poco más hondo en el código.</p>\n\n<h3 id=\"qué-hace-vectorstoreindexcreator\">¿Qué hace VectorstoreIndexCreator?</h3>\n\n<p>La parte que más magia esconde es el objeto <code class=\"language-plaintext highlighter-rouge\">VectorstoreIndexCreator</code>. Este objeto es una composición de otros que cumplen estos roles:</p>\n\n<ol>\n  <li>Un “cortador” de texto, que ayuda a procesar el texto de la fuente.</li>\n  <li>Un modelo de lenguaje para generar los embeddings.</li>\n  <li>Un almacén de datos, en nuestro caso, un <code class=\"language-plaintext highlighter-rouge\">Vectorstore</code>, o una base de datos que almacene vectores.</li>\n</ol>\n\n<p>El objeto ya hace por nosotros todo el trabajo, el flujo de información, desde la fuente, que en el ejemplo es un texto cargado desde un conjunto de archivos, hasta el almacén de datos, que en el ejemplo es ChromaDB, que es una base de datos que almacena vectores.</p>\n\n<p>ChromaDB puede correr en memoria o como servidor, pero aquí corre como base de datos en memoria, usando por debajo DuckDB, una base de datos completamente en memoria, así que cuando salgas del programa, se borra todo.</p>\n\n<p>Vamos a dejar para un artículo futuro la creación de un índice, explicando sus parámetros.</p>\n\n<p>Si quieres ver un ejmplo funcionando, Alex y yo hicimos un ejemplo y platicamos más de esto en este directo:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/IamEow08Zas\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<hr />\n\n<p>¡Esperamos tus comentarios!</p>\n",
      "date_published": "Sat, 15 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/07/cuando-separar-el-codigo.html",
      "url": "https://blog.thedojo.mx/2023/04/07/cuando-separar-el-codigo.html",
      "title": "Cuando separar el código",
      "content_html": "<p>Hay quienes afirman que mientras más pequeñas sean tus clases o funciones, mejor. Hasta llegan a poner un límite de la líneas que pueden ir en un método o función. Esto crea código súper fragmentado que llega a ser complejo por el simple hecho de tener muchos elementos individuales que luego se tienen que unir mediante más código. Además, trazar la causa de algo a través de un código similar es casi imposible o, por lo menos, te puede tomar mucho tiempo.</p>\n\n<p>Es por eso que otros proponentes sobre diseño de software mencionan que mientras más cosas estén detrás de un interfaz y que oculten una implementación, mejor. Esto implica que las funciones y los métodos deben tener un tamaño razonable, sin llegar a ser demasiado grandes. Y este es el punto de este artículo, ¿cómo sabemos cuando es buena idea separar el código en otro módulo? Recuerda que a lo que nos referimos con módulo es cualquier construcción de tu lenguaje que permita encapsular una implementación: clases, funciones, paquetes, etc.</p>\n\n<p>Dominar la división de software en módulos es una pilar del buen diseño de software. Veamos algunos de los criterios que John Ousterhout propone en su libro <a href=\"https://web.stanford.edu/~ouster/cgi-bin/book.php\">A Philosophy of Software Design</a>, precisamente en el capítulo nueve que llama “¿Mejor juntos o separados?” (<em>“Better together or better apart?”</em>). Empecemos hablando de cuándo es mejor dejarlo junto.</p>\n\n<p>Lo que tienes que mantener enfrente es que la meta de hacerte es pregunta es disminuir complejidad de tu código en general, pero también de hacerlo más fácil de evolucionar haciéndolo <strong>más modular</strong>.</p>\n\n<h2 id=\"cuando-dejarlo-junto-o-combinarlo\">Cuando dejarlo junto o combinarlo</h2>\n\n<p><strong>Acceso a la información</strong>. Lo primero que hay que considerar es la información con la que el módulo trata. Si es un slo conjunto de información que en sí mismo es difícil de separar, entonces el código que trata con él <strong>debería permanecer junto</strong>. También te puedes imaginar un protocolo como HTTP, que para simplemente para verificar que el mensaje está bien formado, se requiere de un información para parsearlo. En este caso, el parseo y la verificación del mensaje deberían estar juntos.</p>\n\n<p><strong>Cercanía semántica</strong>. Si dos partes de código se pueden categorizar fácilmente bajo la misma categoría, muy probablemente ese código puede estar bajo la misma clase, módulo o paquete. El ejemplo que da Ousterhout tiene que ver con cadenas de texto y las funciones que las transforman.</p>\n\n<p><strong>Dependencia</strong>. Si siempre que quieras entender una parte, de código tienes que mirar a otra, estas dos piezas de código probablemente deben de vivir bajo el mismo módulo. Esto mismo aplica si se usan siempre (o casi siempre) juntas esas dos piezas de código.</p>\n\n<p><strong>Eliminación de código duplicado</strong>. Esta es una situación a la que hay que prestarle especial atención. Si notas que estás duplicando código en alguna parte, lo más sensato es juntarlo en un alguna clase o función y llamar desde los diferentes lugares en donde lo estás ocupando. Aquí hay que poner un poco de atención: si este código duplicado son unas pocas líneas, puede que no sea conveniente pasar por la molestia de crear un nuevo módulo y las cosas que se requieren para integrarlo en tu código actual. Algo todavía mejor que puedes hacer es refactorizar tu código para que en vez de se llame en diferentes lugares, se reduzca el número de lugares en donde se llama. Esto es posible sobre todo con las excepciones, dependiendo de  tu lenguaje de programación y su estilo de manejo de errores.</p>\n\n<p>Juntar el código a veces traerá un beneficio extra: eliminarás interfaces que no necesitas. Imagínate dos piezas de código que siempre llamas en secuencia, por ejemplo, la función <code class=\"language-plaintext highlighter-rouge\">obtenerHash</code> y <code class=\"language-plaintext highlighter-rouge\">verificarHash</code>. Si el 99% de las veces necesitas verificar un hash después de crearlo y al revés, casi siempre que verificas un Hash es porque lo acabas de crear, entonces es mejor que ambas funciones estén juntas, algo como <code class=\"language-plaintext highlighter-rouge\">crearHashVerificado</code>. Esto es una buena señal de que el código debería estar junto: <strong>si terminas con menos interfaces que al principio, o con interfaces más sencillas</strong>.</p>\n\n<h2 id=\"cuando-separar-el-código\">Cuando separar el código</h2>\n\n<p>Algunas personas cuentan la líneas de código y creen que esto es un buen indicador de cuando romper una pieza de código en varias. Esto no es conveniente porque aunque es cierto que mientras más grande sea algo, más probable es que sea difícil de entender, no tiene por qué ser así si está bien organizado.</p>\n\n<p>Un buen criterio para separar el código es por su <strong>nivel de abstracción</strong>. No es buena idea tener junto código general y específico para la misma funcionalidad en el mismo módulo, ya que cambios en las funcionalidades específicas podrían afectar a la implementación más general.</p>\n\n<p><strong>Ejemplo</strong>: imagina que tienes que crear un editor de texto. Un editor de texto tiene funciones generales como insertar texto donde está el cursor, pero también funcionalidades más específicas, como por ejemplo, seleccionar texto con una interfaz gráfica. Aquí decimos que la inserción de texto es general porque todos los editores de texto lo tienen, mientras que la selección de texto es específica porque no todos los editores de texto tienen una interfaz gráfica (piensa que puedes editar texto mediante instrucciones en un API, por ejemplo).</p>\n\n<p>En este caso, dejar en el core solamente las funciones más básicas de edición de texto es buena idea. La selección y borrado de texto pueden ser implementados en otro módulo usando las funciones que el core provee.</p>\n\n<p>Esto lo puedes ver en práctica en los sistemas diseñados en capas, sobre todo en los MVC: el modelo tiene toda la información específica del negocio, la vista todo lo relacionado con la interfaz hacia el exterior y el controlador la conexión entre estas dos partes. Hay componentes extra, como el ORM o el sistema que se encargue de persistir la información. Aunque esto es un buen comienzo, no es suficiente. Tu propio código debe ser organizado de forma que sea fácil de entender siguiendo estos principios.</p>\n\n<h2 id=\"ejemplo-funcionalidad-de-undo-deshacer-en-un-editor-de-texto\">Ejemplo: funcionalidad de UNDO (Deshacer) en un editor de texto</h2>\n\n<p>John Ousterhout da el ejemplo de la funcionalidad de “deshacer” en editor de texto. Eso que sucede cuando das <code class=\"language-plaintext highlighter-rouge\">CTRL+Z</code> en casi cualquier programa. ¿En qué consiste? En que cuando se realiza una acción, se guarda para que pueda ser contrarrestada con la acción contraria. Esta función puede ser implementada en el módulo central del editor o fuera de él. ¿Cuál es la mejor opción? Imagina que no sólo tienes que poder deshacer acciones directas en el texto, sino también cosas como selecciones o posicionamiento del cursor.</p>\n\n<p>Una forma de hacerlo sería implementarlo directamente en el módulo o clase encargado de manejar el texto, guardando la lista de acciones que se pueden deshacer y cuando se invoque la acción de deshacer o rehacer, este módulo sería el encargado de ejecutar las acciones de regreso. Este diseño crearía una interacción un poco extraña entre el módulo de interfaz, por ejemplo y el módulo de texto, ya que las acciones de interfaz que se tengan que deshacer, viajarían hacia “arriba”.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1680914313/separacion_gvalss.png\" alt=\"arquitectura conjunta de lo descrito\" class=\"align-center\" /></p>\n\n<p>Un mejor diseño sería separar completamente el módulo de encargado de mantener las acciones que se pueden deshacer, al que podemos llamar Historia. Este módulo sería encargado de guardar y administrar todas las acciones que el usuario tiene disponibles para rehacer o deshacer. Las acciones pueden estar autocontenidas: cada una tiene además información sobre cómo revertirla. ¿Quién pone las acciones en la historia? El módulo que realizó la acción. Por ejemplo, si es una inserción de texto, el encargado sería el módulo core, encargado de manejar el texto. Si es una selección visual, puede ser el módulo de interfaz de usuario. Las acciones son clases con una interfaz común que el módulo de historia puede invocar para deshacer o rehacer.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1680914316/separacion_2_nnuihs.png\" alt=\"Imagen separada\" class=\"align-center\" /></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aprender a separar tu código es algo que se logra con la práctica y que sin duda vale la pena hacer, porque un código con una complejidad controlada logra un equilibrio entre módulos demasiado pequeños (que hacen muy poco) y demasiado grandes (que juntan mucha información).</p>\n\n<p>La guía principal para saber cuándo separar o juntar tu código es esta: escoge la estructura que genere menores dependencias, oculte mejor el conocimiento y cree interfaces más simples.</p>\n",
      "date_published": "Fri, 07 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/04/01/el-principio-de-segregacion-de-interfaces.html",
      "url": "https://blog.thedojo.mx/2023/04/01/el-principio-de-segregacion-de-interfaces.html",
      "title": "El principio de segregación de Interfaces",
      "content_html": "<p>Continuemos con el estudio de los principios SOLID. En esta ocasión hablaremos del cuarto principio: El principio de segregación de interfaces.</p>\n\n<p>Recuerda que el objetivo de estos artículos <strong>no es explicártelos como si fueran una religión que estás mal si no sigues</strong>, sino analizarlos bajo una luz crítica y decidir si de verdad son útiles o podemos usar otro principio.</p>\n\n<p>Analicemos primero el enunciado, junto con algunos ejemplos y veamos si nos conviene aplicarlo directamente o no.</p>\n\n<h2 id=\"el-principio-de-segregación-de-interfaces\">El principio de segregación de interfaces</h2>\n\n<p>La frase que define el principio es:</p>\n\n<blockquote>\n  <p>Los clientes no deberían ser forzados a depender de interfaces que no usan.</p>\n</blockquote>\n\n<p>Creo que el nombre y este enunciado lo hace sonar demasiado complicado para lo que es: se trata de pensar bien tus interfaces para que no sean lo más sencillo que se pueda. <em>“Los clientes”</em> son todas las partes del código que usan <strong>una interfaz</strong>.</p>\n\n<p>Al hacer tus interfaces lo más sencillas que puedas, evitarás que los clientes tengan que implementar métodos que no usan, y que no deberían tener que implementar.</p>\n\n<p>Pongamos un ejemplo de la vida real:</p>\n\n<p>¿Te ha tocado llenar un formulario que te pregunta cosas que no te aplican? Por ejemplo un formulario que te pregunta por los datos de tus hijos independientemente si no tienes o no. Sin duda es molesto y una pérdida de tiempo. Aquí, te están forzando a cumplir con una interfaz que no usas.</p>\n\n<p>Lo mismo exactamente puede pasar con el software. Si una interfaz, por ejemplo, al usar un método con muchos parámetros obligatorios que no siempre se ocupan, o una clase con métodos que corresponden a otros usos.</p>\n\n<p>Esto se puede dar cuando tienes una clase o una función que implementa algo que puede ser ocupado en diversos lugares (estos son sus <em>clientes</em>). Imagina que los diferentes lugares tienen ligeras variaciones, por las que hay que modificar la interfaz para que se pueda usar en cada uno de ellos. Hacer esto te llevaría a crear una interfaz complicada de usar y además frágil.</p>\n\n<p>Es por esto que John Ousterhout da varios consejos relacionados:</p>\n\n<ol>\n  <li>Mientras más simple la interfaz, mejor.</li>\n  <li>Son mejores los módulos de propósito <strong>general</strong>, que después puedan ser especializados o combinados para crear interfaces específicas, para cada caso.</li>\n  <li>Crear las interfaces pensando en el caso más común.</li>\n</ol>\n\n<p>Sin embargo, este último consejo de Ousterhout puede ir en contra de este principio, pero aquí preferimos la practicidad sobre la pureza. Más adelante daremos un ejemplo.</p>\n\n<h2 id=\"ejemplos-de-aplicación\">Ejemplos de aplicación</h2>\n\n<p>Empecemos con un ejemplo que nos pude ayudar a entender el problema y la solución mediante un conjunto de clases.</p>\n\n<p>Usemos un ejemplo común este blog: una plataforma para enviar mensajes a diferentes canales, como Telegram, WhatsApp, Messenger, Instagram. Una forma de representar la interfaz de un mensaje sería la siguiente:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1680394988/clase_texto_ylaj7m.png\" alt=\"Clase única\" class=\"align-center\" /></p>\n\n<p>Aunque podríamos nombrar algunos de estos argumentos como opcionales (lo cuál evitaría que en estricto sentido los clientes estén forzados a usarlos), la interfaz sigue siendo confusa e impráctica. Por ejemplo, si quieres mandar algo por SMS, no tienes la opción de mandar tarjetas multimedia.</p>\n\n<p>Una mejor solución sería crear un interfaz base, con especializaciones para cada caso. Por ejemplo:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1680398494/Screen_Shot_2023-04-01_at_19.21.23_m7wuws.png\" alt=\"Composición de clases\" class=\"align-center\" /></p>\n\n<p>Esta forma no sigue la herencia (un mensaje con tarjetas es un mensaje de texto), sino la composición (un mensaje con tarjetas tiene un mensaje de texto). Esto nos permite tener una interfaz más sencilla y fácil de usar, que puede ser especializada por cada caso.</p>\n\n<h2 id=\"llevándolo-al-extremo\">Llevándolo al extremo</h2>\n\n<p>Si llevamos este consejo al extremo, podemos quedar con una cantidad tan grande de interfaces y tan especializadas que el código quedaría más difícil de entender y mantener. Imagínate el infierno que sería navegar por ese código. <strong>Recuerda que las interfaces son simplemente la parte accesible de una funcionalidad</strong>. Ousterhout dice que a veces, la complejidad viene de la cantidad de cosas con las que tenemos que tratar.</p>\n\n<p>Además, separar el código a veces conlleva código extra: el que se usa para seleccionar qué interfaz o código usar.</p>\n\n<p>Así que la pregunta básica es: ¿cuándo debo separar o romper código que hace algo en partes más pequeñas? Pensar que este principio es la guía más fuerte es un error, el análisis debe ir mucho más al fondo, no sólo pensar en las interfaces y si alguien está “obligado” a implementar o lidiar con cosas que no usa.</p>\n\n<p>Por ejemplo, ¿qué pasa si el 90% de las veces que vayas a usar un módulo como una función vas a usarla en la versión más complejas? ¿Valdrá la pena separarla en dos funciones? Yo creo que vale más la pena que los lugares donde no la usas completa, se trate de manera especial.</p>\n\n<p>Para un análisis más profundo, escribiré un artículo basado en el capítulo “Better Together o Better Apart?” de <a href=\"https://web.stanford.edu/~ouster/cgi-bin/book.php\">A Philosophy of Software Design</a> de John Ousterhout.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aunque es una buena idea que las interfaces sean demasiado complejas para no forzar al código que las usa a implementar cosas que no le corresponden, llevarlo al extremo podría hacer que tu base de código sea más compleja de lo que empezó.</p>\n\n<p>Este principio de diseño no debería ser la única fuente de decisión para saber si deber <em>segregar</em> o como diríamos más cotidianamente <em>separar</em> una interfaz. Recuerda que al separar la interfaz estás separando la implementación y la lógica de tu programa, por lo que debes pensarlo muy bien antes de hacerlo.</p>\n\n<p>Finalmente, es muy poco probable que te pase algo similar si piensas en hacer interfaces que sean lo más sencillo posible.</p>\n",
      "date_published": "Sat, 01 Apr 2023 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2023/03/25/descomponiendo-tu-aplicacion-en-modulos.html",
      "url": "https://blog.thedojo.mx/2023/03/25/descomponiendo-tu-aplicacion-en-modulos.html",
      "title": "Descomponiendo tu aplicación en módulos",
      "content_html": "<p>Hay un dicho que tiene que ver con la guerra que es un gran consejo para crear gran software:</p>\n\n<blockquote>\n  <p>Divide y vencerás</p>\n</blockquote>\n\n<p>Dividir un problema para resolverlo por partes tiene muchas ventajas, en este artículo vamos a hablar de ellas, así como de las técnicas y los criterios que puedes seguir para hacerlo efectivamente. Específicamente, en este artículo vamos a hablar de cómo dividir la aplicación en módulos. Pero antes definamos lo que es un módulo.</p>\n\n<h2 id=\"qué-es-un-módulo\">¿Qué es un módulo?</h2>\n\n<p>En este artículo los módulos son cualquier cosa que encapsule una implementación detrás de una API o interfaz. Los módulos tienen diferentes nombres dependiendo del lenguaje de programación, pueden ser:</p>\n\n<ul>\n  <li>Paquetes en Python</li>\n  <li>Módulos en JavaScript</li>\n  <li>Clases y paquetes en Java</li>\n  <li>Bibliotecas en C</li>\n  <li>Aplicaciones en Erlang o Elixir</li>\n  <li>Un microservicio en una arquitectura de distribuida</li>\n  <li>Otro sistema</li>\n</ul>\n\n<p>Esta lista no es para nada exhaustiva, pero comunica la idea de lo que es un módulo conceptualmente, repitiendo: cualquier artefacto que encapsule una implementación o funcionalidad detrás de una API, es decir que tenga una <em>asignación de responsabilidad</em> (según David L. Parnas).</p>\n\n<h3 id=\"ventajas-de-dividir-tu-aplicación-en-módulos\">Ventajas de dividir tu aplicación en módulos</h3>\n\n<p>¿Qué es más sencillo? ¿Subir 100 escalones de 15cm o dar un salto de 15m? Humanamente ni siquiera es posible dar un salto de 15m, por lo que tenemos que recurrir a usar las escaleras.</p>\n\n<p>Lo mismo sucede intelectualmente, la mayoría de los problemas que resolvemos en programación son más grandes de lo que puede caber en nuestra mente en un tiempo determinado. Es por esto que tenemos que descomponer los problemas en partes más pequeñas.</p>\n\n<p>La modularización te permite cambiar el sistema de forma más sencilla, mientras respetes la interfaz entre los módulos (su <em>API</em>), puedes cambiar el módulo que resuelve cierta parte del problema sin afectar el sistema entero. A esto a veces le llaman <strong>programación por contrato</strong>.</p>\n\n<p>Crear módulos lo más independientes posible te permite reutilizarlos en otros sistemas, lo que llamamos reutilización de código. Si sigues los lineamientos de tu lenguajes de programación, probablemente puedas crear el artefacto para distribuirlo y que incluso otras personas lo usen.</p>\n\n<p>Finalmente, dependiendo de lo independiente que sean los módulos, puedes asignarle la tarea de la implementación a otras personas.</p>\n\n<h3 id=\"desventajas\">Desventajas</h3>\n\n<p>Al igual que si pudiéramos mágicamente dar un salto de 15m nos evitaría construir unas escaleras, con todo lo que ello implica, el uso de módulos en tu aplicación agregar algo más de complejidad.</p>\n\n<p>En primera, se requiere una infraestructura para que los módulos puedan comunicarse entre sí. Si los módulos son construcciones naturales de tus sistema de programación, entonces sólo tienes que preocuparte por usarlos bien y crear interfaces convenientes.</p>\n\n<p>Pero si estás haciendo sistemas independientes, microservicios, etc. entonces también tienes que preocuparte por el transporte de información, la seguridad, etc. Este tipo de modularidad convierte tu aplicación en un sistema distribuido, lo que agrega gran complejidad.</p>\n\n<p>Además, dividir en módulos introduce el riesgo de crear complejidad adicional debida a las dependencias entre los módulos.</p>\n\n<p>Pero normalmente, las ventajas de modularizar te habilitan para lograr cosas que no es posible hacer de otra forma, así que ahora surge la pregunta, ¿por dónde empiezo?</p>\n\n<h2 id=\"criterios-para-dividir-tu-aplicación-en-módulos\">Criterios para dividir tu aplicación en módulos</h2>\n\n<p>Esto en realidad es una exploración de las diferentes formas en las que tu aplicación podría estar dividida y las abstracciones que creas. ¿Los divido por grupos de funcionalidades? ¿Por el tipo de información a los que tienen acceso? ¿Por el lugar en el que van a estar implementados? ¿Por el nivel de abstracción?</p>\n\n<p>David Parnas explica en <a href=\"https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf\">“On the Criteria to be Used in Decomposing Systems into Modules”</a> dos diferentes formas o criterios de dividir un sistema en módulos:</p>\n\n<ol>\n  <li>\n    <p>La que él piensa que era la más común cuando se escribió el artículo, es la de dividir el programa en sus pasos lógicos. Después de hacer un diagrama de flujo del proceso que quieres automatizar o representar, los pasos del diagrama se convierten en módulos.</p>\n  </li>\n  <li>\n    <p>La segunda forma es la de dividir o “cortar” el programa en módulos por <em>especialidad</em>, es decir, por las cosas que saben hacer y que ocultan de los demás módulos. Estos módulos encapsulan <strong>decisiones de diseño</strong>.</p>\n  </li>\n</ol>\n\n<h2 id=\"ejemplo-práctico-una-pasarela-de-pago\">Ejemplo práctico: una pasarela de pago</h2>\n\n<p>La función de una pasarela de pago es procesar las transacciones de pago de los usuarios. Debe registrar datos como quién hace el pago, a quién se lo hace, el monto, la fecha y hora, el método de pago y el estado de la transacción.</p>\n\n<p>Hagamos el ejercicio de descomponer el sistema en módulos. Primero usemos el primer criterio. Pensando en el flujo de operaciones que se tienen que hacer podemos pensar en los siguientes pasos:</p>\n\n<ol>\n  <li>Recibir los datos de la transacción a ejecutar.</li>\n  <li>Recibir los datos de pago del usuario.</li>\n  <li>Validar los datos de la transacción.</li>\n  <li>Intentar ejecutar la transacción.</li>\n  <li>Registrar el estado de la transacción.</li>\n  <li>Notificar a los involucrados del resultado de la operación.</li>\n</ol>\n\n<p>Vamos a delimitar las funciones para hacerlo más sencillo: pongamos que sólo se puede pagar con tarjeta de crédito y que se notificará al usuario por correo electrónico.</p>\n\n<p>Los módulos que podríamos crear usando este flujo son:</p>\n\n<ol>\n  <li>\n    <p><strong>Módulo de recepción de datos</strong>. Este sistema recibe los datos de la transacción a ejecutar y los pone en una base de datos. También se encarga de validarlos.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de recepción de datos del usuario</strong>. Recibe los datos de pago del usuario y actualiza el registro de la transacción.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de ejecución de la transacción</strong>. Lee los datos de la transacción de la base de datos e intenta ejecutar la transacción, actualizando el registro con el resultado de la operación.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de notificación</strong>. Es capaz de leer el registro de la base de datos para extraer los datos de la transacción y enviar un correo electrónico al usuario.</p>\n  </li>\n  <li>\n    <p><strong>Módulo central</strong>. Se encarga de coordinar el funcionamiento de los demás módulos, los llama en el orden correcto y maneja los errores.</p>\n  </li>\n</ol>\n\n<p>Este diseño sin duda funcionaría, pero tiene algunas desventajas. ¿Qué pasaría si se aumentara la información que se tiene que registrar de la transacción? A todos los módulos les afectaría, ya que todos leen de un repositorio central que es la base de datos. ¿Y si en vez de recibir los datos por separado, se quisiera leer todos los datos de un archivo para ejecutar pagos en masa? Por lo menos dos módulos saldrían afectados, el de recepción de información de la transacción y de información del usuario.</p>\n\n<p>Para dividir el trabajo en varios equipos, antes tendría que establecerse la forma en la que se van a guardar los datos en la base de datos y cualquier cambio les afectaría a todos.</p>\n\n<h3 id=\"dividiendo-por-especialidad\">Dividiendo por especialidad</h3>\n\n<p>En vez de dividirlo por el flujo de operaciones, como si fuera una cadena de producción usemos el criterio de la especialidad, o de <strong>ocultar información</strong>. ¿Cuáles son las decisiones de diseño que quisiéramos ocultar detrás de una interfaz?</p>\n\n<p>Usando este criterio podemos tener los siguientes módulos:</p>\n\n<ol>\n  <li>\n    <p><strong>Módulo de recepción de información</strong>. Recibe todos los datos, tanto de la transacción como se pago y los valida. Envía estos datos al almacenamiento indicado mediante una interfaz. ¿Qué decisiones de diseño oculta? La forma en la que se reciben y validan los datos</p>\n  </li>\n  <li>\n    <p><strong>Módulo de registro de transacciones</strong>. Recibe la información de las transacciones, las almacena y es capaz de devolver la transacción solicitada. También puede actualizar los datos de una transacción y borrarla. ¿Qué decisiones de diseño oculta? La forma en la que se <em>persiste</em> la información. Ninguno de los otros módulos necesita saber cómo se almacenan los datos.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de procesamiento de transacciones.</strong>. Este módulo recibe los datos absolutamente necesarios para procesar una transacción con la institución bancaria, la ejecuta y devuelve un estado de la transacción. Tiene funciones para ejecutar, re-intentar y revertir transacciones. ¿Qué decisiones de diseño oculta? La comunicación con la institución bancaria, la forma en la que se reciben los datos de estas y el procesamiento de errores en la transacción.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de notificaciones</strong>. Es capaz de mandar notificaciones por correo electrónico, recibiendo los datos de los destinatarios y el mensaje que se tiene que mandar. ¿Qué decisiones de diseño oculta? La forma de comunicación con los medios de transporte de notificaciones, en este caso, el correo electrónico.</p>\n  </li>\n  <li>\n    <p><strong>Módulo de coordinación o central</strong>. Es el encargado de usar los módulos anteriores para procesar el pago.</p>\n  </li>\n</ol>\n\n<p>La principal diferencia de este diseño con el anterior, es la forma en la que los módulos se comunican y la información que cada módulo debe de tener. Cualquier cambio en la implementación de sus funciones no afectará a los demás módulos, sobre todo cambios en la persistencia de la información, que era un punto crítico en el diseño anterior.</p>\n\n<p>¿Que pasa si quisiéramos cambiar la forma en la que se reciban los datos, por ejemplo, con el archivo para procesar los pagos en masa? El módulo de recepción de información se vería afectado o reemplazado, pero los demás módulos no.</p>\n\n<p>Si queremos dividir el trabajo en equipos, cada equipo puede trabajar en un módulo siempre y cuando se establezca la interfaz de su módulo, y las dependencias entre ellos se reducen.</p>\n\n<h2 id=\"resumen\">Resumen</h2>\n\n<p>No existe una forma absolutamente correcta de dividir tu sistema, casi siempre es subjetiva y todas presentan ventajas y desventajas. Pero una decisión con la que no te puedes equivocar es la de aislar los detalles de implementación y las decisiones de diseño en módulos autocontenidos.</p>\n\n<p>Piensa en un módulo como en una caja que <em>sabe hacer algo</em> y que puedes usar en varios lugares de tus sistema, no como en un paso de un proceso, que normalmente lo casa con esa posición y lo hace poco reutilizable, además de que puede hacer que no esté tan autocontenido como debería, dejando escapar información que crea dependencias entre módulos.</p>\n\n<h2 id=\"recursos-para-aprender-más\">Recursos para aprender más</h2>\n\n<p>El artículo en el que está basado este artículo es <a href=\"https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf\">“On the Criteria to be Used in Decomposing Systems into Modules”</a> de David L. Parnas.</p>\n\n<p>Otro recurso del que tal vez ya estés harto de escuchar si lees este blog es <a href=\"https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201\">A Philosophy of Software Design</a>. Aquí se explican varios principios para poder descomponer tu aplicación en módulos de forma efectiva, tomando como principal referencia este artículo de Parnas, y expandiéndolo con la experiencia de Ousterhout.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Descomponer tus aplicaciones en módulos es algo esencial en el desarrollo de software. Pensarlo un poco antes de hacerlo nos dará una gran ventaja para crear software de mejor calidad, que sea más fácil de mantener y que podamos evolucionar mejor.</p>\n\n<p>Esta descomposición no siempre te va a salir bien a la primera, por lo que hay que tener la capacidad de evaluar la efectividad de tu diseño y la humildad para reconocer o aceptar los puntos débiles y cambiarlos. Es cierto que ciertas plataformas te pueden ayudar a descomponer mejor tu aplicación que otras, por lo que también es un gran punto a considerar cuando estés eligiendo la tecnología para tu próximo proyecto.</p>\n\n<p>Sigue cultivando esta habilidad, porque es de lo más importante que un desarrollador de software puede saber, pensando también que a futuro tal vez seamos en gran parte diseñadores mientras la implementación estará a cargo de máquinas (te estoy viendo, <a href=\"https://openai.com/blog/openai-codex\">Codex</a>).</p>\n",
      "date_published": "Sat, 25 Mar 2023 00:00:00 -0600"
      }
    
  ]
}
       <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>
        </div>

        
      </section>

      <footer class="page__meta">
        
        


        


      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2023 The Dojo MX Blog. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
