<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.16.6 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>Acerca de este Blog -</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="">
<meta property="og:title" content="">
<meta property="og:url" content="/feed.json">













<link rel="canonical" href="/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "/"
    
  }
</script>






<!-- end _includes/seo.html -->


<link href="/feed.xml" type="application/atom+xml" rel="alternate" title=" Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">

<!--[if IE ]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->


<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": null,
        "url": "",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>
  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt=""></a>
        
        <a class="site-title" href="/">
          The Dojo Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest" >Últimos Posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about" >Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx" >Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  

  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          
        </header>
      

      <section class="page__content" itemprop="text">
        
        {
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "description": ,
  "home_page_url": "",
  "feed_url": "/feed.json",
  "favicon": "/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "/2019/12/14/induccion-y-deduccion-segun-polya.html",
      "url": "/2019/12/14/induccion-y-deduccion-segun-polya.html",
      "title": "Inducción y Deducción según Polya",
      "content_html": "<p>Este es el tercer artículo acerca del libro <a href=\"https://amzn.to/2P8HJA8\">“How to Solve It”</a> de George Polya. Puedes ver los dos artículos anteriores aquí:</p>\n\n<ul>\n  <li><a href=\"/2019/09/27/tecnicas-para-resolver-problemas.html\">Técnicas para resolver problemas</a></li>\n  <li><a href=\"/2019/10/03/el-arte-de-resolver-problemas-la-heuristica.html\">Heurística</a></li>\n</ul>\n\n<p>Con este artículo cerraremos con las ideas que George Polya desarrolló para resolver problemas.</p>\n\n<h2 id=\"inducción-y-deducción\">Inducción y Deducción</h2>\n\n<p>Hablemos ahora de algunas formas de resolver problemas.</p>\n\n<h3 id=\"deducción\">Deducción</h3>\n\n<p>Tratar de resolver problemas por deducción significa <strong>aplicar principios o\nconocimiento general a un caso específico</strong>. Por ejemplo para un problema\npráctico en el que tenemos encontrar la longitud de un cable tensor para una\nantena, sabemos que podemos aplicar el teorema de Pitágoras.</p>\n\n<p>Algunos ejemplos para los programadores:</p>\n\n<ul>\n  <li>Encontrar el elemento más grande o más pequeño en una lista. (Una forma de resolverlo es ordenar los elementos).</li>\n  <li>Revisar que un elemento no está repetido en una colección de elementos. (Indexado)</li>\n  <li>Asegurarse de que las operaciones son atendidas en el orden en que se solicitaron en un entorno con múltiples ejecutores. (Colas)</li>\n</ul>\n\n<p>Lo difícil de la deducción es encontrar <em>qué principios, teoremas o formas \nde resolución de problemas aplican para el problema que tenemos que resolver</em>. Para esto nos pueden ayudar las técnicas platicadas en los artículos anteriores: ¿He resuelto un problema similar? <em>¿Qué técnica fue usada?</em> ¿Qué principios sirvieron para la resolución de ese problema? Y, a mi parecer la más útil: ¿puedo usar el resultado o el proceso de resolución?</p>\n\n<!-- Polya dice que aunque se dice que Sherlock Holmes \"deduce\", en realidad aplica la inducción para llegar a conclusiones, ya que aplica conocimiento general a casos concretos. -->\n\n<h3 id=\"inducción\">Inducción</h3>\n\n<blockquote>\n  <p>La inducción es el proceso de descubrir leyes generales mediante la observación y combinación de casos particulares. - <em>George Polya</em></p>\n</blockquote>\n\n<p>La inducción es uno de los mecanismos de resolución de problemas más difíciles de llevar a la práctica. Funciona en forma inversa a la deducción.</p>\n\n<p>Consiste en partir de observaciones específicas (ejemplos y contra-ejemplos) y llevarlas a <strong>generalizaciones</strong> que puedan ser aplicadas en otros casos o que apliquen en muchas otras situaciones situaciones.</p>\n\n<h3 id=\"en-el-desarrollo-de-software\">En el desarrollo de software</h3>\n\n<p>Seguro te has encontrado con este tipo problemas (o te vas a encontrar) si ya llevas tiempo desarrollando: ya que el desarrollo de software no es un área que viva aislada de las demás áreas, los que requieren el software llevan <em>ejemplos</em> de  problemas que regularmente tienen que resolver. Nuestros clientes, en general, no se han dado a la tarea de establecer las reglas por las que algo funciona de la manera en que lo hace, ni las excepciones ni los casos únicos. Es nuestra tarea casi siempre descubrir las reglas que subyacen a las operaciones comunes. Esto es una forma de inducción.</p>\n\n<h3 id=\"inducción-matemática\">Inducción matemática</h3>\n\n<p>Polya habla de otro tipo de inducción de la que opina que no debería llamarse así, y que comparte muy poco con el proceso que acabamos de descubrir y puede llegar a confundir a la gente: la <strong>inducción matemática</strong>. Este tipo de inducción se refiere al método que los matemáticos emplean para demostrar que cierta aserción es un teorema o no.</p>\n\n",
      "date_published": "Sat, 14 Dec 2019 00:00:00 -0600"
      },
    
    {
      "id": "/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html",
      "url": "/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html",
      "title": "Criptografía básica para programadores: ¿Qué es la criptografía?",
      "content_html": "<p>Es muy común escuchar de “encriptación” (la palabra correcta en español es <em>cifrado</em>), llaves, algoritmos criptográficos y cosas parecidas, sobre todo con el surgimiento de Bitcoin y Blockchain.</p>\n\n<p>Uno de los temas menos tratados por programadores de software común (para usuarios y sistemas que no impliquen el uso de seguridad a medida), es el correcto uso de los algoritmos criptográficos y muchas veces ni siquiera conocemos lo suficiente de ellos, sino que confiamos en lo que las herramientas pre-establecen (que gran parte de las veces fue diseñado por expertos y eso está bien).</p>\n\n<p>Pero un poco de conocimiento sobre criptografía no te hará daño, sobre todo si programas sistemas que necesiten seguridad (todos), y sí puede evitarte errores fatales.</p>\n\n<p>Esta serie de artículos tratará de todo lo que un programador debe saber acerca de la aplicación correcta de algoritmos criptográficos a sus desarrollos, y un poco de su funcionamiento interno.</p>\n\n<p>Empecemos por lo más básico. ¿Qué es exactamente la criptografía?</p>\n\n<h2 id=\"definición-de-criptografía\">Definición de Criptografía</h2>\n\n<p>La criptografía moderna se puede considerar una rama de las matemáticas (<em>otra vez</em>) y la computación enfocada en encontrar y crear formas de convertir información clara y con algún significado en <em>información imposible de entender por entidades que no cuenten con la autorización para hacerlo, aunque la tengan en su poder</em>.</p>\n\n<p>La palabra quiere decir literalmente <strong>“escritura oculta”</strong>. Y también se puede definir el campo como el encargado de encontrar algoritmos o procedimientos que permitan ocultar mensajes que sólo puedan ser descifrados por aquellos que tengan la llave.</p>\n\n<p>La criptografía implica <em>esconder</em> información explícitamente (los atacantes pueden saber que esa información está oculta e incluso hasta tener los mensajes ocultos en su poder), de manera que quien tenga la información correcta (que les concede la autorización) pueda obtener la información original desde los datos ininteligibles.</p>\n\n<p>Este proceso de ocultar la información se llama <strong>cifrado</strong> (también se usa <em>encriptado</em>, como un barbarismo), mientras que el proceso de recuperar la información se llama <strong>descifrado</strong> (o <em>desencriptado</em> 🙄).</p>\n\n<p>Los procesos de cifrado modernos requieren generalmente <strong>una llave o conjunto de llaves</strong>, para realizar los procesos de cifrado y descifrado.</p>\n\n<p>La criptografía es la base de todos los mecanismos de seguridad informática modernos, y a menudo se usa una conbinación de ellos para proteger un sistema.</p>\n\n<h2 id=\"uso-en-el-software-actual\">Uso en el software actual</h2>\n\n<p>Los algoritmos criptográficos se usan en todos lados en los sistemas modernos. Son los algoritmos que permiten que la información viaje segura en internet (usando HTTPS, que se basa en TLS/SSL), por ejemplo. Algunos otros casos en los que son usados:</p>\n\n<ul>\n  <li>\n    <p>En la protección de la información que viaja en las redes inalámbricas, sean WiFi o Celulares (3G, 4G, 5G).</p>\n  </li>\n  <li>\n    <p>Almacenamiento de datos sensibles como passwords (mediante hash) e información personal (cifrados con password).</p>\n  </li>\n  <li>\n    <p>Protección de archivos.</p>\n  </li>\n  <li>\n    <p>Cifrado de datos en reposo (al estar almacenados en los discos duros) de los datos para evitar su robo en caso de robo físico o de dispositivos virtuales.</p>\n  </li>\n  <li>\n    <p>Tarjetas de crédito y seguridad bancaria en general.</p>\n  </li>\n</ul>\n\n<p>Estos son tan sólo algunos ejemplos de los lugares en los que la criptografía juega un papel <strong>muy importante</strong>.</p>\n\n<h3 id=\"esteganografía\">Esteganografía</h3>\n\n<p>La esteganografía es la técnica, relacionada con la criptografía, <strong>de hacer la información invisible</strong>, generalmente ocultándola dentro de otro tipo de información.</p>\n\n<p>Con técnicas criptográficas comunes el que un atacante tenga disponible la información cifrada no hace necesariamente que nuestra información quede expuesta, a menos que el algoritmo criptográfico sea débil y el atacante tenga suficientes recursos para romperlo. En muchos casos incluso suponemos que los atacantes tienen acceso a esta información, como en el caso de la comunicación en internet en la que en cualquier parte de la red puede haber alguien interceptando nuestra información.</p>\n\n<p>Las técnicas esteganográficas buscan “desaparecer” completamente la información, hacerla invisible a través de ocultarla dentro de otros tipos de mensajes. En la antigüedad, por ejemplo en un libro que parecía hablar de magia, se ocultó un tratado acerca de criptografía y esteganografía, que sólo fue revelado hasta que se encontró la llave correcta.</p>\n\n<p>Con la llegada de los medios digitales, en la que todo puede ser representado por medio de bits, en realidad se puede ocultar información de cualquier tipo en cualquier otro tipo de mensajes, pero también se siguen usando medios físicos para ocultar información. Un ejemplo son los micro-puntos de algunas impresiones de manuscritos o información sensible repartido a personas de confianza que permiten identificar cada una de las copias entregadas a diferentes personas.</p>\n\n<p>Aunque la esteganografía y la criptografía son técnicas relacionadas, la más importante actualmente es la criptografía por su uso en la mayoría de los sistemas informáticos de la actualidad.</p>\n\n<h2 id=\"por-qué-deberías-aprender-criptografía\">¿Por qué deberías aprender criptografía?</h2>\n\n<p>Ya mencionamos lo importante que es en los sistemas actuales. La mayoría de los lenguajes de programación, los desarrollos open source, como los frameworks web, muchas librerías, plataformas como servicio, etc. vienen con funciona de seguridad y criptográficas incluídas. Pero no es suficiente con <em>ser usuario</em> de estas cosas, ya que hasta los mecanismos y algoritmos mejor diseñados se pueden ser mal usados y minados por la mala utilización.</p>\n\n<p>Conocer temas como los siguientes, te permitirá subir la calidad de tus desarrollos:</p>\n\n<ul>\n  <li>¿Qué determina la seguridad de un algoritmo criptográfico?</li>\n  <li>¿Por qué es importante tener una llave de un tamaño correcto?</li>\n  <li>¿Qué algoritmo debo escoger para esta característica que tengo que desarrollar?</li>\n  <li>¿Cuáles son las principales características y diferencias de los algoritmos más usados?</li>\n  <li>¿Qué algoritmos nunca más debería usar en la vida?</li>\n</ul>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En este artículo sólo hemos tocado la definición de criptografía y hemos mencionado por qué es importante. En los siguientes empezaremos a hablar de las bases que nos permitirán comprender cómo funciona la criptografía y qué mecanismos son los que permiten que brinde seguridad mediante ocultar la información.</p>\n\n<p>En el próximo artículo hablaremos de la base de todos los sistemas criptográficos. Los números (pseudo) aleatorios y sus generadores.</p>\n",
      "date_published": "Tue, 12 Nov 2019 00:00:00 -0600"
      },
    
    {
      "id": "/2019/10/27/entendiendo-rest-servicios-cacheables.html",
      "url": "/2019/10/27/entendiendo-rest-servicios-cacheables.html",
      "title": "Entendiendo REST: Servicios cacheables",
      "content_html": "<p>La tercera característica que <a href=\"https://twitter.com/fielding\">Thomas R. Fielding</a> (Roy Fielding a partir de ahora) establece para los sistemas <strong>REST</strong> es la capacidad de que su información sea cacheable. Veamos lo que esto significa y por qué es una característica importante. Empecemos por definir el caché.</p>\n\n<h2 id=\"qué-es-el-caché\">¿Qué es <em>el caché</em>?</h2>\n\n<p>Originalmente el caché se refiere a un tipo especial de memoria <em>muy rápida</em> en los procesadores, que guarda <em>temporalmente</em> información que tiene gran probabilidad de volver a ser utilizada <em>dentro de poco tiempo</em> (en los procesadores hablamos de nano-segundos).</p>\n\n<p>Al evitar que el procesador vuelva a consultar la RAM (muy lenta en <a href=\"https://gist.github.com/jboner/2841832\">comparación con la memoria caché</a>), las operaciones se realizan a mucha mayor velocidad.</p>\n\n<p><img src=\"https://i.imgur.com/k0t1e.png\" alt=\"Latencia de diferentes tipos de memoria\" /></p>\n\n<p>La memoria caché de los procesadores tiene una gran desventaja: <strong>es muy muy pequeña</strong>. Esto presenta retos:</p>\n\n<ul>\n  <li>¿Qué guardo aquí para maximizar la eficacia de este espacio de almacenamiento?</li>\n  <li>¿Cómo decido cuándo borrar o sobre-escribir la información que tengo aquí?</li>\n  <li>¿Qué pasa si la información original cambia mientras estoy ocupando los datos guardados en la memoria caché?</li>\n</ul>\n\n<p>Hablaremos más adelante de estas preguntas en nuestro propio contexto, pero hay técnicas para poder contestarlas con cierta eficacia, que los <a href=\"http://user.it.uu.se/~yi/pdf-files/2014/euc14.pdf\">procesadores han logrado implementar</a>.</p>\n\n<p>Así que puedes pensar en el caché como en una memoria que es más rápida (aunque más limitada). Se utiliza con el objetivo de hacer un sistema más rápido y a veces más eficiente.</p>\n\n<h2 id=\"caché-en-los-sistemas-rest\">Caché en los sistemas REST</h2>\n\n<p>Esta característica se basa en las dos que ya hablamos: <a href=\"/2019/08/03/entendiendo-rest-servidor-sin-estado.html\">servicios sin estado</a> y <a href=\"/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor.html\">arquitectura cliente-servidor</a>.</p>\n\n<p>Lo que se define como “cacheabilidad” en los sistemas REST es la capacidad\nde estos sistemas para <em>etiquetar</em> de alguna forma las respuestas para que\notros mecanismos intermedios funcionen como un caché.</p>\n\n<p>Así el sistema puede atender más peticiones, en menos tiempo, con menos\nrecursos (comparado con un sistema sin caché).</p>\n\n<p>Estos sistemas o mecanismos intermedios (existen entre el cliente y el servidor) deben ser por lo general transparentes para los desarrolladores,\nno deben afectar la manera en que los servicios se consumen.</p>\n\n<p>En sistemas web que usan <strong>HTTP</strong> para comunicarse el sistema de “etiquetado” que permite que una respuesta sea cacheada son <strong>las cabeceras</strong>. Estas permiten a los diferentes actores en el proceso de comunicación (servidor local, proxy, proxy reverso, navegador o cliente final, entre otros), saber quién debería cachear la información y por cuánto tiempo o cómo decidir si deben renovar la información. Las cabeceras HTTP comúnmente usadas para esto son:</p>\n\n<ul>\n  <li><code class=\"highlighter-rouge\">Expires</code>: especifica hasta cuándo se puede considerar fresca o válida la información.</li>\n  <li><code class=\"highlighter-rouge\">Cache-control</code>: Es usado para especificar directivas de caché que deben ser respetadas por todos lo puntos por los que pasa la información. Puedes ver los posibles valores y su especifacación aquí: <a href=\"https://tools.ietf.org/html/rfc2616#section-14.9\">Cache-Control Header</a></li>\n  <li><code class=\"highlighter-rouge\">Vary</code>: es usada para indicar qué otras cabeceras se deben tomar en cuenta para decidir si el servidor puede reutilizar una respuesta o no.</li>\n  <li><code class=\"highlighter-rouge\">Etag</code>: identifica a una respueste de manera única, puede usarse para pedir una respuesta nueva de un mismo endpoint, y en combinación con la cabecera <code class=\"highlighter-rouge\">If-None-Match</code></li>\n</ul>\n\n<p>Existen otras cabeceras usadas para lograr un control correcto del caché como <code class=\"highlighter-rouge\">If-Modified-Since</code>.</p>\n\n<h2 id=\"ventajas-del-caché\">Ventajas del caché</h2>\n\n<p>El caché se establece como una de las características de REST porque proporciona ventajas para el uso y la escalabilidad de los sistemas. Veamos algunas de ellas.</p>\n\n<h3 id=\"aumenta-la-percepción-de-velocidad\">Aumenta la percepción de velocidad</h3>\n\n<p>Al guardar las respuestas que es más probable que vuelvan a salir, un sistema REST puede contestar una gran cantidad de sus peticiones a la velocidad que el caché lo permita, es decir, muy rápido.</p>\n\n<h3 id=\"consumo-de-recursos-reducido\">Consumo de recursos reducido</h3>\n\n<p>El uso caché se parece mucho a una técnica de programación llamada <strong>dynamic programming</strong> que consiste en guardar temporalmente los resultados de operaciones costosas en tiempo. Esto permite que\nnos ahorremos el procesamiento de muchas respuestas que no se necesitan\nde nuevo porque están almacendas. Además se reduce el ancho de banda\nconsumido porque muchas peticiones ni siquiera tienen que llegar al servidor.</p>\n\n<h3 id=\"sistemas-más-fáciles-de-escalar\">Sistemas más fáciles de escalar</h3>\n\n<p>Los sistemas que usan caché son capaces de aguantar más peticiones\nsimultáneas por la razón que vimos anteriormente: se reduce el consumo de recursos. Además, si se require crecer el sistema se deben poner menos recursos. Para algunos sistemas, el caché es lo único que tiene que crecer\ncuando se requiere atender a más usuarios simultáneos.</p>\n\n<h2 id=\"retos-de-cachear\">Retos de cachear</h2>\n\n<p>Toda solución tecnológica implica ventajas y desventajas. Entonces ¿qué desventajas o retos implica usar un sistema de caché?</p>\n\n<h3 id=\"frescura\">Frescura</h3>\n\n<blockquote>\n  <p>Sólo hay dos cosas difíciles en Ciencias de Computación: invalidación de caché y nombrar cosas. - Phil Karlton</p>\n</blockquote>\n\n<p>El reto más grande e importante de tener un sistema de caché es lograr un\nequilibrio entre mantener la información el mayor tiempo posible y tener\ninformación correcta y actualizada. Si se almacena en caché por demasiado\ntiempo algo, esta información se vuelve vieja y por lo tanto puede estar desactualizada. Por el otro lado si se guarda por muy poco tiempo puede \nllevar a que los sistemas de caché se sub-utilicen y provean pocos\nbeneficios.</p>\n\n<h3 id=\"diseño-del-sistema\">Diseño del sistema</h3>\n\n<p>Designar qué partes del sistema pueden ser cacheables y asignar los\netiquetados de las respuestas correctamente puede aumentar la complejidad del sistema en general.</p>\n\n<h3 id=\"inconsistencia\">Inconsistencia</h3>\n\n<p>El uso de caché puede llevar a inconsistencias de información entre diferentes clientes por periodos de tiempo de diferente duración. Esto es en parte consecuencia de la dificultad de mantener el caché fresco, pero además tiene que ver con la manera en que los clientes piden la información. <strong>Si tus clientes no pueden soportar la mínima variación en la información porque tendría consecuencias graves, es mejor no cachear.</strong></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>El caché es una parte olvidada de los sistemas REST, el constraint menos mencionado. Pero es importante que les permite funcionar mejor cuando tenemos bastante carga. Mantenerlo funcionando bien es un reto, pero los sistemas que quieren ser escalables y resistentes deben implementar alguna forma de cachear.</p>\n\n<p>Roy Fielding menciona que es importante porque cualquier\nsistema expuesto a clientes desconocidos tiene el peligro de recibir una\ngran cantidad de carga súbitamente, y si tu servicio no está preparado o es\nfácil de escalar, fallarás.</p>\n\n<p>Si quieres leer un artículo más completo con otras referencias sobre el caché en REST y en HTTP te recomiendo <a href=\"https://odino.org/rest-better-http-cache/\">REST better: HTTP Cache</a>, en inglés.</p>\n\n<p>En el siguiente artículo veremos la cuarta restricción de los sistemas REST: la interfaz uniforme, la más amplia de las restricciones, pero una de las más útiles.</p>\n",
      "date_published": "Sun, 27 Oct 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/10/03/el-arte-de-resolver-problemas-la-heuristica.html",
      "url": "/2019/10/03/el-arte-de-resolver-problemas-la-heuristica.html",
      "title": "El arte de resolver problemas: la heurística",
      "content_html": "<blockquote>\n  <p>La heurística habla del <strong>comportamiento humano</strong> frente a los problemas. - George Polya</p>\n</blockquote>\n\n<p>En un <a href=\"/2019/09/27/tecnicas-para-resolver-problemas.html\">artículo anterior</a> analizamos la estructura básica de un problema y la estructura de resolución que George Polya propone para intentar resolverlos.</p>\n\n<p>Polya analiza a fondo la estructura del proceso de resolución de problemas. Aquí hablaremos de <strong>la heurística</strong>, de la que escribió en <a href=\"https://math.hawaii.edu/home/pdf/putnam/PolyaHowToSolveIt.pdf\" target=\"_blank\"><strong>“How to solve it”</strong></a>, un compendio que pensó originalmente como un análisis de esta.</p>\n\n<h2 id=\"definición\">Definición</h2>\n\n<p>La palabra heurística viene de una raíz griega que transmite la idea de <strong>descubrimiento o invención</strong>. La heurística históricamente ha estado relacionada con <strong>estudiar los medios por los que se descubre o inventa algo</strong>. Su campo de estudio abarca la lógica, la psicología y la filosofía, pero no se puede acotar a ninguna de las tres áreas.</p>\n\n<p>Polya estudia y define la heurística moderna como <em>el arte de resolver problemas</em>, porque en eso consiste el proceso: descubrir una solución(en los problemas en los que hay que <em>encontrar algo</em>) o inventar algo (en los problemas en los que hay que <em>crear una demostración</em>).</p>\n\n<p>Podemos echar mano de lo que nos enseña al atacar problemas muy difíciles de los que no tenemos la mínima idea de cómo resolver o no podemos idear un plan confiable para resolverlos (recuerda que crear un plan es el punto medular de la resolución de un problema).</p>\n\n<h2 id=\"heurística-moderna\">Heurística moderna</h2>\n\n<p>La heurística actualmente busca entender el proceso de resolución de problemas, pero particularmente las operaciones mentales relacionadas con ese proceso.</p>\n\n<blockquote>\n  <p>La experiencia en la resolución de problemas u observar a otros resolver problemas debe ser la base de la heurística. - G. Polya</p>\n</blockquote>\n\n<p>Se busca encontrar patrones y propiedades comunes en una gran variedad de problemas, por lo que se puede decir que la heurística tiende a la generalidad, estudia procedimientos que son independientes del dominio del problema.\nPolya habla de múltiples métodos y procedimientos para avanzar en la resolución de un problema complicado.</p>\n\n<p>Analicemos algunos de ellos:</p>\n\n<ul>\n  <li>\n    <p><strong>Variación del problema</strong>. ¿Puedo variar por lo menos temporalmente alguna de las partes del problema? ¿Puedo cambiar los datos, las condiciones o la solución?</p>\n  </li>\n  <li>\n    <p><strong>Descomposición y recombinación</strong>. Esta operación mental implica entender y separar las partes esenciales de un problema y tratar de re-crearlo con un nuevo entendimiento o crear un problema ligeramente diferente.</p>\n  </li>\n  <li>\n    <p><strong>Regresar a las definiciones</strong>. Comprender los términos usados en cada parte del problema a veces implicará que busquemos lo que algo significa desde sus raíces. Esto nos puede ayudar a entender mejor el problema así como a introducir elementos auxiliares que ayuden en la resolución.</p>\n  </li>\n  <li>\n    <p><strong>Generalización, especialización y analogías</strong>. Estas tres operaciones son una forma de variar un problema. ¿Puedo hacer el problema más amplio, para resolver un caso más general y después aplicar los resultados o el método a mi problema original? ¿Existe un problema similar al que estoy resolviendo que pueda resolver más fácilmente?</p>\n  </li>\n  <li>\n    <p><strong>Notación adecuada</strong>. Una vez entendido el problema, sobre todo para problemas matemáticos, es muy importante introducir notación que nos pueda ayudar a trabajar sobre el problema. Para los problemas matemáticos y en ciencias en general, ya existen estas notaciones estándar. Para nuestros problemas tenemos que inventar una que la mayoría de los implicados puede entender y usar.</p>\n  </li>\n  <li>\n    <p><strong>Suponer, pero comprobar las suposiciones</strong>. Para avanzar en la resolución de un problema muchas veces hay que dar cosas por supuesto, como en el caso de las comprobaciones por reducción al absurdo. Polya afirma que no está mal suponer cosas temporalmente mientras más adelante encontremos una forma de comprobar o rechazar esas suposiciones.</p>\n  </li>\n  <li>\n    <p><strong>Trabajar en reversa</strong>. Muchas veces sabemos <em>como luce</em> la solución, o tenemos que comprobar que una solución supuesta es correcta. Trabajar en reversa significa avanzar de la solución hasta nuestro estado actual, trabajando paso por paso hasta poder encontrar la cadena de transformaciones necesarias para conectar esos estados.</p>\n  </li>\n  <li>\n    <p><strong>Aspectos psicológicos: determinación, esperanza y éxito</strong>. Al principio mencionamos que la heurística es también trataba con aspectos psicológicos. Polya afirma que sería un error considerar que los problemas son ejercicios puramente intelectuales. En el proceso de resolución influye mucho los sentimientos y emocionses. Los tres puntos mencionados aquí son muy importantes para la resolución de un problema. Primero, debemos <em>desear</em> resolver el problema, esto es la determinación. Segundo, debemos creer que somos <em>capaces</em> de resolver el problema y que este tiene solución. Y tercero, en lo relacionado con problemas intelectuales es muy difícil perseverar si no se experimenta una razonable dosis de éxito de vez en cuando. Para esto es necesario aplicar algunas de las técnicas mencionadas arriba.</p>\n  </li>\n</ul>\n\n<p>Como puedes ver, la heurística es práctica. Además la heurística aplicada a la enseñanza y a la puede tener efectos positivos, ya que ayuda a las personas a aprender a pensar mejor.</p>\n\n<h2 id=\"razonamiento-heurístico\">Razonamiento Heurístico</h2>\n\n<p>Aplicar las técnicas antes mencionadas tiene un efecto en la forma de resolver los problemas: en algunos de los pasos de la solución aceptamos soluciones supuestas, incompletas, relacionadas vagamente con el problema o parcialmente erróneas con tal de avanzar en la solución y el entendimiento del problema y de generar nuevas ideas/éxitos para mantener y aumentar la motivación.</p>\n\n<p>Esto no quiere decir que la heurística acepte soluciones erróneas, estos pasos son temporales, y las soluciones finales deben ser comprobadas con el mayor rigor posible.</p>\n\n<h2 id=\"algoritmos-heurísticos\">Algoritmos heurísticos</h2>\n\n<p>Ahora hablemos de aprovechar estas ideas para la programación, con una clase de algoritmos conocidos como algoritmos heurísticos.</p>\n\n<p>Un algoritmo heurístico en vez de garantizar siempre la mejor solución en cada paso del programa, acepta soluciones parciales o suficientemente buenas. Este tipo de algoritmos funciona muy bien en casos donde hay demasiadas soluciones posibles como para probarlas todas (fuerza bruta) o muchas de ellas (como los algoritmos de <em>backtracking</em>) y no hay ningún algoritmo establecido conocido que resuleva el problema  o se haya demostrado que esta solución es imposible.</p>\n\n<p>La principal diferencia a tener en cuenta cuando hablamos o tratamos con este tipo de algoritmos es que <strong>no garantizan la respuesta correcta o la respuesta óptima</strong>, aunque en algunos casos son la mejor forma de lograrlo. Fuera de la programación, la heurística nos ayuda a llegar a la respuesta correcta aceptando temporalmente soluciones intermedias no óptimas, semi-erróneas o incompletas, pero con soluciones finales <em>*que se pueden verificar como correctas rigurosamente</em>. No es así con los algoritmos heurísticos en la programación, y he aquí por lo que el nombre puede confundirnos.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La heurística es un campo de estudio valioso sobre todo para la vida moderna y para el desarrollo de software porque puede ayudarnos a estructurar nuestros esfuerzos en la resolución de los problemas que nos enfrentamos.</p>\n\n<p>En el siguiente y último artículo de la serie analizaremos más técnicas usadas en la resolución de problemas de las que Polya habla en el libro “How to Solve It”.</p>\n",
      "date_published": "Thu, 03 Oct 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/09/27/tecnicas-para-resolver-problemas.html",
      "url": "/2019/09/27/tecnicas-para-resolver-problemas.html",
      "title": "Técnicas para resolver problemas",
      "content_html": "<p>Todos los desarrolladores nos hemos encontrado con problemas que nos dejan perplejos y que no tenemos idea de por dónde empezar a resolver.</p>\n\n<p>George Polya fue uno de los matemáticos más prolíficos del Siglo XX, un matemático de primera clase (de esos que descubren e inventan cosas, y para algunos, <strong>el matemático más influyente del siglo</strong>) pero que, a diferencia de muchos otros, mantenía un interés por la educación y la enseñanza de las matemáticas, algo muy peculiar.</p>\n\n<p>Escribió varios libros, entre ellos está <strong>“How to solve it”</strong> un tratado de 4 partes en el que explica de manera muy detallada cómo resolver problemas matemáticos principalmente, pero también cómo aplicar este conocimiento a otras áreas de la vida.</p>\n\n<p>Las técnicas explicadas por Polya te pueden ayudar a desarrollar tus capacidades de resolución de problemas.</p>\n\n<p>Empecemos por hablar de la estructura los problemas de los que Polya habla en su libro.</p>\n\n<h2 id=\"estructura-de-un-problema\">Estructura de un problema</h2>\n\n<p>Polya enseña que un problema tiene tres partes:</p>\n\n<ol>\n  <li><strong>Los datos</strong>. Es la información que tenemos disponible para resolver el problema.</li>\n  <li><strong>Las condiciones</strong>. Describen la relación que existe entre los datos y la solución, pero también la forma, los límites y características de la solución buscada.</li>\n  <li><strong>La incógnita o lo desconocido</strong>. Es la información que buscamos y que cumple con las condiciones del problema.</li>\n</ol>\n\n<p>Es muy importante conocer la composición de un problema para poder aplicar las técnicas descritas en el libro. Cualquier problema matemático <strong>debería cumplir con estas características</strong>, pero no todos los problemas de la vida real cumplen con esta estructura tal y como la necesitamos; por esta razón deberíamos desarrollar la capacidad de entender los problemas que se nos presentan y estructurarlos lo mejor posible según esta definición para facilitarnos la vida posteriormente.</p>\n\n<p>Para resolver un problema deberías ser capaz de contestar las siguientes preguntas:</p>\n\n<ul>\n  <li>¿Qué estoy buscando? -&gt; <strong>¿Cuál es la incógnita?</strong></li>\n  <li>¿Qué datos tengo disponibles? -&gt; <strong>¿Son suficientes los datos que tengo para resolver el problema?</strong></li>\n  <li>¿Qué condiciones tiene que cumplir la incógnita? -&gt; <strong>¿Es posible cumplir con esta condición?</strong></li>\n  <li><strong>¿Qué relación hay entre los datos y la incógnita?</strong></li>\n</ul>\n\n<p>Esta estructura sienta las bases para lo que viene. Ahora hablemos de de los tipos de problemas de los que Polya hace distinción.</p>\n\n<h2 id=\"tipos-de-problemas\">Tipos de problemas</h2>\n\n<p>Polya hace la distinción entre dos tipos diferentes de problemas que hay que tratar de resolver de manera ligeramente diferente aunque la estructura sea la misma.</p>\n\n<h3 id=\"1-problemas-para-encontrar\">1. Problemas para encontrar</h3>\n\n<p>Estos son los problemas básicos que nos ponían en la escuela primaria: “<strong>Hallar</strong> el área de un terreno cuadrado de 10m por lado”, “<strong>Encuentra</strong> la diámetro de una circunferencia con un perímetro de 12cm”.</p>\n\n<p>En este tipo de problemas hay que encontrar un resultado, que puede ser numérico o no. Estos son los problemas con los que nos encontramos mayormente en áreas del conocimiento muy exploradas.</p>\n\n<p>Como programadores podríamos tener estos ejemplos de este tipo de problemas:</p>\n\n<ul>\n  <li>¿Qué complejidad tiene este algoritmo que acabo de programar?</li>\n  <li>¿A cuántos usuarios simultáneos podré atender con este servidor con 4GB de RAM?</li>\n  <li>¿Cuánto tiempo va a tardar en subir mi millón de archivos si lo vuelvo paralelo? ¿Cuánto va a tardar si no lo paralelizo?</li>\n</ul>\n\n<p>Varios de estos problemas suenan demasiado simples porque ya los tenemos bien trabajados a base de repetición. Pero otros que no tienen una respuesta numérica pueden ser un poco más complicados:</p>\n\n<ul>\n  <li>¿Qué base de datos debería usar para servir notificaciones en tiempo real?</li>\n  <li>¿Qué lenguaje de programación debo usar para un sistema que estará emebebido en un millón de dispositivos electrónicos mandando notificaciones críticas cada segundo?</li>\n  <li>¿Qué sistema de comunicación puedo usar entre dos dispositivos que no cuentan con una conexión confiable a internet?</li>\n</ul>\n\n<p>En los ejemplos anteriores encontrar una solución concreta a las preguntas planteadas permite avanzar.</p>\n\n<h3 id=\"2-problemas-para-demostrar\">2. Problemas para demostrar</h3>\n\n<blockquote>\n  <p>“Demuestre que la línea de mayor longitud que toca dos puntos de una circunferencia pasa por el centro del círculo”.</p>\n</blockquote>\n\n<p>Esto es un ejemplo de un problema para demostrar. Estos implican la comprobación o refutación de una aserción (<em>hipótesis</em>) enunciada en el problema. Estos problemas generalmente nos los ponían en la preparatoria o universidad, por su naturaleza son un poco más difíciles en general.</p>\n\n<p>Para un desarrollador podríamos poner problemas para demostrar como:</p>\n\n<ul>\n  <li>“Demuestra que es imposible un bloqueo mutuo entre procesos con el algoritmo usado actualmente”.</li>\n  <li>“¿Cómo sabemos que evitamos todas las condiciones de carrera en el sistema actual?”</li>\n  <li>“Comprueba que el máximo tiempo que puede tardar el sistema en responder es menor que X.”</li>\n</ul>\n\n<p>Estos problemas requieren soluciones más generales y abstractas en general. Espero que con estos ejemplos haya quedado clara la diferencia entre los diferentes tipos de problemas.</p>\n\n<h3 id=\"problemas-matemáticos-acertijos-y-problemas-de-la-vida-real\">Problemas matemáticos, acertijos y problemas de la vida real</h3>\n\n<p>Polya habla en sus libro sobre todo de un tipo específico de problemas: <strong>los problemas matemáticos</strong>.</p>\n\n<p>Un problema matemático bien definido cuenta con:</p>\n\n<ol>\n  <li>Datos suficientes para resolución</li>\n  <li>No tiene datos sobrantes</li>\n  <li>Condiciones no contradictorias o imposibles de cumplir</li>\n</ol>\n\n<p>Por extensión, <strong>los acertijos</strong> cumplen con las mismas características, y se dan algunos de ejemplos de ellos en el libro.\nPero los problemas de la vida real son muy diferentes, ya que estos pueden no cumplir con las características completas\nde un problema bien definido. Así que uno de los pasos previos para resolver un problema de la vida real es intentar definir lo mejor posible el problema por resolver y completarlo en caso de que falte algo.</p>\n\n<h2 id=\"cómo-empezar-a-resolver-un-problema\">Cómo empezar a resolver un problema</h2>\n<p>Polya plantea cuatro etapas de resolución de un problema:</p>\n\n<ol>\n  <li>Entendimiento</li>\n  <li>Planeación</li>\n  <li>Ejecución</li>\n  <li>Retrospectiva</li>\n</ol>\n\n<p>Hablemos de cada una, para entender claramente cómo podemos mejorar nuestras posibilidades de resolución de un problema.</p>\n\n<h3 id=\"entendimiento\">Entendimiento</h3>\n\n<blockquote>\n  <p>Es tonto contestar una pregunta que no entiendes. Es triste trabajar por un fin que no deseas. - <strong>G. Polya</strong></p>\n</blockquote>\n\n<p>El entendimiento del problema consiste primero en asegurarnos de que <strong>entendemos el planteamiento verbal del problema</strong>, si no tenemos ni siquiera un planteamiento verbal, debemos empezar por crearlo.</p>\n\n<p>Para decir que comprendemos el problema, tenemos que conocer los datos que se dan, las condiciones a satisfacer y la incógnita o lo que hay que demostrar.</p>\n\n<p>Esta parte puede llevar gran parte del tiempo total dedicado al problema, ya que es el fundamento de los próximos pasos, sin la que no se puede continuar.</p>\n\n<p>### Planeación</p>\n\n<p>El siguiente paso es trazar un plan para atacar el problema. El plan consiste en saber que transformaciones, derivaciones y combinaciones tenemos que hacer con los datos para llegar a la solución esperada.</p>\n\n<p>Esta es la parte más difícil, ya que implica conocimiento profundo del problema. Para Polya, concebir un plan es el mayor logro en la resolución de un problema. Cuando lo concebimos parece que tenemos una “idea brillante”.</p>\n\n<p>Pero es casi imposible tener una idea brillante cuando sabemos muy poco del tema. Las buenas ideas están basadas en conocimiento y experiencia previa. Por eso conviene preguntarse: <strong>¿Conozco o resuelto un problema relacionado o similar?</strong>. Hablaremos de otras preguntas que nos pueden ayudar a concebir un plan más adelante.</p>\n\n<p>### Ejecución</p>\n\n<p>Es hora de llevar a cabo los pasos establecidos en la planeación. En esta etapa hay que ejecutar cada uno de los pasos que establecimos en la planeación de ejecución del problema. Polya dice que aquí es donde <strong>hay que ser rigurosos con lo que hacemos</strong>, verificando que lo que hacemos tenga sentido y sea estrictamente correcto. ¿Puedes comprobar en cada paso que es correcto lo que estás haciendo?</p>\n\n<p>### Retrospectiva</p>\n\n<p>En este paso hay que <strong>examinar el resultado</strong>. ¿Puedes probar que el resultado final es correcto?\nAdemás podemos ver si podemos hacer algo diferente, si nuestro resultado cumple con todo lo esperado y si podemos encontrar o derivar el resultado de alguna otra forma ahora que ya sabemos cuál es.</p>\n\n<p>Este paso también sirve para verificar si el resultado o el método que usamos para resolverlo nues puede ayudar con algún otro problema que tengamos que resolver.</p>\n\n<h3 id=\"las-preguntas-de-polya\">Las preguntas de Polya</h3>\n\n<p>Polya estableció una serie de preguntas que pueden guiarte en la solución de un problema, muy relacionadas con los pasos de los que acabamos de hablar. Estas preguntas las repite vez tras vez en el libro y en verdad son iluminadoras si estás atorado en algún problema que no puedes resolver. A continuación las listamos.</p>\n\n<ul>\n  <li>¿He resuelto un problema <strong>relacionado</strong>? ¿Conozco un <strong>problema que se aproxime</strong>?</li>\n  <li>¿Estoy usando todos los datos?</li>\n  <li>¿Puedo cambiar algo del problema para hacerlo más fácil?\n    <ul>\n      <li>¿Puedo cambiar los datos?</li>\n      <li>¿Puedo cambiar las condiciones?</li>\n      <li>¿Puedo cambiar la incógnita?</li>\n    </ul>\n  </li>\n</ul>\n\n<h2 id=\"para-recordar\">Para recordar</h2>\n\n<p>Para resolver un problema:</p>\n<ul>\n  <li>Asegúrate de entender el problema completamente: qué datos tienes, qué relación hay entre los datos y la incógnita y lo que tienes que encontrar.</li>\n  <li>Planea cómo vas a atacar el problema</li>\n  <li>Si estás detenido en la resolución de un problema puedes:\n    <ul>\n      <li><strong>Variar los datos</strong>, las condiciones o el resultado esperado.</li>\n      <li>Pensar en otros problemas que se le parezcan: puedes usar el método que usaste para resolverlos o el resultado.</li>\n      <li>Aceptar soluciones parciales, parcialmente erróneas o asumidas.</li>\n      <li>Genera nuevas ideas y re-evalúa el problema y el plan a la luz de cada nuevo paso.</li>\n    </ul>\n  </li>\n  <li>Aprovecha cualquier idea aunque suene disparatada.</li>\n</ul>\n\n<p>En el siguiente post hablaremos de 5 cosas más de las que Polya habla en su libro: heurística, inducción, deducción, análisis y síntesis.</p>\n",
      "date_published": "Fri, 27 Sep 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/09/01/por-que-deberias-aprender-go.html",
      "url": "/2019/09/01/por-que-deberias-aprender-go.html",
      "title": "¿Por qué deberías aprender Go?",
      "content_html": "<blockquote>\n  <p>Go es <strong>eficiente, escalable y productivo</strong>. - <em>Rob Pike</em></p>\n</blockquote>\n\n<p>Go es un lenguaje que llama la atención por algunos rumores que hay acerca de él, como, por ejemplo, que es el lenguaje que va a matar a C, o que es muy muy rápido y poderoso. En este artículo vamos a hablar de qué cosas son ciertas y en qué casos te conviene aprender Go.</p>\n\n<p>Empecemos hablando de cómo y por qué nació.</p>\n\n<h2 id=\"historia-de-go\">Historia de Go</h2>\n\n<blockquote>\n  <p>Go fue diseñado por Google para resolver sus problemas, y Google tiene <em>grandes</em> problemas. - <em>Rob Pike</em></p>\n</blockquote>\n\n<p>Go fue creado dentro de Google por un grupo de desarrolladores de software y científicos de la computación <strong>MUY experimentados</strong>. Las tres personas que lo iniciaron a pensar y diseñar en 2007 fueron Robert Griesemer, Rob Pike y <strong>Ken Thompson</strong> (sí, el co-creador de UNIX, grep y muchas cosas más). De ese tamaño son las personas que lo diseñaron, y así se siente el lenguaje cuando lo usas.</p>\n\n<p>Después de una serie de correos y discusiones sobre el diseño, empezaron a trabajar en él y <a href=\"https://www.youtube.com/watch?v=rKnDgT73v8s\">lo presentaron como proyecto Open Source en 2009</a>, a partir de ahí muchas personas tanto de dentro como de fuera de Google han contribuido a su desarrollo.</p>\n\n<h2 id=\"características-de--go\">Características de  Go</h2>\n\n<p>Go fue concebido pensando en los problemas que los diseñadores veían en los sistemas de Google: su proceso de desarrollo estaba entorpecido por las herramientas que usaban. Según Rob Pike, todo era demasiado lento: demasiado lento de compilar, demasiado lento de construir, demasiado lento de pensar. Cuando decimos que el tiempo de compilación era demasiado largo nos referimos a que podía llegar a tomar <em>varias horas</em> para compilar un sistema.</p>\n\n<p>También había una “explosión de complejidad”. Así que Go fue pensado para ser simple, de una “simplicidad radical”. Por lo tanto, carece de características que otros lenguajes sí tienen, pero hacen que los programas sean complejos.</p>\n\n<blockquote>\n  <p>La simplicidad es la clave del buen software. - <em>The Go Programming Language</em></p>\n</blockquote>\n\n<p>Analicemos las características de Go, un lenguaje pensado para trabajar en sistemas muy grandes de manera simple.</p>\n\n<h3 id=\"procedural-con-flexibilidad-para-orientación-a-objetos\">Procedural, con flexibilidad para orientación a objetos</h3>\n\n<p>El paradigma principal de Go es el procedural se parece mucho a C en este aspecto. Sus principales medios de organización son las funciones y los paquetes, aunque permite crear un tipo débil de organización muy parecida a los objetos mediante <code class=\"highlighter-rouge\">structs</code>.</p>\n\n<p>Aquí puedes ver un ‘Hello world’:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span>\n<span class=\"k\">import</span> <span class=\"s\">\"fmt\"</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"¡Hola Go!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<h3 id=\"tipado-estático-y-fuerte\">Tipado estático y fuerte</h3>\n\n<p>Go es un lenguaje fuertemente tipado, lo cuál quiere implica varias cosas:</p>\n\n<ol>\n  <li>La declaración de variables implica el tipo de valor que estará asociado a esta instancia del nombre, por lo que no puede usarse para guardar otro tipo de valor. En Go no necesariamente se tiene que decir explícitamente el tipo de valor a usarse, puede ser inferido:</li>\n</ol>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">miNombre</span> <span class=\"o\">:=</span> <span class=\"s\">\"Héctor\"</span>  <span class=\"c\">// La variable es un string</span>\n\n</code></pre></div></div>\n<p>Esto es verificado en tiempo de compilación, por lo que podrás estar tranquilo de que Go no te dejará correr programas usando variables como lo que no son.</p>\n\n<ol>\n  <li>No existe la conversión o forzamiento de tipos automática e implícita, como en JS, que intenta realizar la operación aunque los tipos de valor usados no tengan sentido en la operación. En Go, si intentas hacer una operación con tipos no compatibles el programa puede no compilar o fallar en tiempo de ejecución.</li>\n</ol>\n\n<h3 id=\"rápida-compilación\">Rápida compilación</h3>\n\n<p>Pensado para sistemas muy grandes, justo como los desarrollados en Google, Go se toma en serio el tiempo de complicación y es muy rápido al compilar los programas, a diferencia de Java, C o C++. Esto está apoyado por tres pilares:</p>\n\n<ul>\n  <li>Las dependencias están puestas al principio de cada archivo, por lo que no hay que buscar en todo el programa por dependencias perdidas.</li>\n  <li>Las dependencias no forman ciclos, por lo que pueden organizarse para que sean compiladas independientemente, incluso de manera paralela.</li>\n  <li>El programa objeto compilado de cada paquete exporta información útil para sus dependencias que puede ser usada sin tener que leer todo el paquete.</li>\n</ul>\n\n<h3 id=\"manejo-de-dependencias-y-paquetes\">Manejo de dependencias y paquetes</h3>\n<p>Go tiene en su biblioteca estándar más de 100 paquetes y la comunidad de Go cada vez contribuye más paquetes. Go viene con la herramienta para la línea de comandos <code class=\"highlighter-rouge\">go</code> que es fácil de usar para manejar proyectos creados con Go. La herramienta <code class=\"highlighter-rouge\">go</code> nos ayuda a administrar nuestras dependencias: descargarlas, limpiarlas e instalarlas.</p>\n\n<h3 id=\"manejo-de-memoria\">Manejo de memoria</h3>\n<p>Go tiene manejo automático de memoria, lo que quiere decir que tal como en Java o Python, no tienes que preocuparte de liberar la memoria manualmente. Sin embargo, esta característica lo hace poco práctico para sistemas que requieran tratamiento de datos en tiempo real demasiado fuerte y preciso.</p>\n\n<h2 id=\"concurrencia\">Concurrencia</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1567320490/Go-routines-gopher_vgcpbt.jpg\" alt=\"La mascota de Go haciendo el trabajo\" /></p>\n\n<p>A esta característica decidimos dedicarle un poco más de espacio. Debido a que el mundo de la computación ha cambiado desde que se escribieron los primeros programas, en los que se contaba con un sólo procesador, el equipo de Go le dio gran importancia a la capacidad de <strong>crear programas con un muy buen diseño concurrente</strong>. Eventualmente estos programas podrían correr en paralelo aprovechando los sistemas de computación que existen actualmente, con múltiples procesadores.</p>\n\n<p>Go permite crear procesos concurrente de manera muy sencilla:</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">go</span> <span class=\"n\">myFunc</span><span class=\"p\">()</span>\n\n</code></pre></div></div>\n\n<p>Eso es todo. Go ejecutará la función <code class=\"highlighter-rouge\">myFunc</code> de manera concurrente (se ejecuta de manera independiente al programa principal o a otras funciones concurrentes). Esto es una <strong>gorutine</strong>.</p>\n\n<p>Go soporta dos modelos de concurrencia:</p>\n\n<ul>\n  <li><strong>Comunicación de procesos secuenciales</strong> (Communicating Sequential Processes - CSP), en la que cada proceso tiene sus propias variables, y se transfieren información entre ellos mediante mensajes. En el caso de Go es a través de <em>canales</em>.</li>\n  <li><strong>Multihilo con memoria compartida</strong>. En este tipo de concurrencia todos los procesos escriben sobre el mismo espacio de memoria, es decir, comparten variables, pero debe haber algúna forma de coordinación entre ellos para que no choquen ni se bloqueen mutuamente al tomar un recurso.</li>\n</ul>\n\n<p>La concurrencia es uno de los puntos más fuertes de Go.</p>\n\n<h2 id=\"ventajas-de-go-sobre-otros-lenguajes\">Ventajas de Go sobre otros lenguajes</h2>\n\n<p>Hablemos de en qué casos querrías usar Go.</p>\n\n<h3 id=\"eficiencia-al-correr\">Eficiencia al correr</h3>\n<p>Go no corre sobre ninguna máquina virtual. Crea ejecutables para los sistemas operativos a los que apunta, que contienen todo lo necesario para poder ejecutarse sin necesidad de tener algo instalado allí. Al ser compilado, Go es mucho más eficiente para correr que otros lenguajes interpretados, como JS, Python o Ruby. Consume menos memoria y su velocidad se acerca a la de C.</p>\n\n<h3 id=\"legibilidad\">Legibilidad</h3>\n<p>Go fue pensado para ser <em>simple</em>. Sus estructuras, su sintaxis y su filosofía lo hacen fácil de leer y de aprender. Es cierto que no es tan legible como Python o Ruby, por ejemplo, pero es mucho más legible que otros lenguajes con características similares como C++ o Java.</p>\n\n<h3 id=\"usable-para-los-programadores\">Usable para los programadores</h3>\n\n<p>Una de las promesas de Go desde el principio era poder hacer mucho con poco. Y es algo que cumple completamente. Su librería estándar está diseñada y construida por verdaderos titanes de la ingeniería del software, practicantes de esto por más tiempo que la vida de muchos de los que leerán este artículo. El siguiente ejemplo es un servidor web con una ruta, sin usar ningún framework o biblioteca extra, sino sólo la pura biblioteca estándar de Go.</p>\n\n<div class=\"language-go highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"fmt\"</span>\n    <span class=\"s\">\"net/http\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">HandleFunc</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span> <span class=\"n\">HelloServer</span><span class=\"p\">)</span>\n    <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">ListenAndServe</span><span class=\"p\">(</span><span class=\"s\">\":8080\"</span><span class=\"p\">,</span> <span class=\"no\">nil</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">HelloServer</span><span class=\"p\">(</span><span class=\"n\">w</span> <span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">ResponseWriter</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">*</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Fprintf</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"s\">\"Hello, %s!\"</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">URL</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"o\">:</span><span class=\"p\">])</span>  <span class=\"c\">// te saluda de regreso</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<h2 id=\"desventajas\">Desventajas</h2>\n\n<h3 id=\"sistema-de-tipos\">Sistema de tipos</h3>\n<p>Esta no es una desventaja como tal de Go, sino una creada por el ecosistema de desarrollo actual: al haber tantos lenguajes que hacen manejo de valores y tipos de dato automáticamente, al programar en <em>cualquier</em> lenguaje tipado, incluyendo Go, muchos sienten que están desperdiciando su tiempo.</p>\n\n<h2 id=\"relativamente-joven\">Relativamente joven</h2>\n\n<p>Go tiene a penas 10 años de haber salido a la luz, 12 desde que se empezó a diseñar. El tiempo de vida de un lenguaje influye en su usabilidad y la conveniencia de varias formas:</p>\n\n<ul>\n  <li>La comunidad que ha desarrollado</li>\n  <li>Las herramientas disponibles</li>\n  <li>Los errores encontrados</li>\n  <li>Experiencias de otros desarrolladores con diferentes tipos y tamaños de sistemas</li>\n</ul>\n\n<p>Considera esto si tienes que hacer un proyecto grande.</p>\n\n<h2 id=\"proyectos-que-lo-usan\">Proyectos que lo usan</h2>\n\n<p>Muchos proyectos importantes del mundo de la infraestructura, orquestación de servidores, contenedores, bases de datos y herramientas para programadores lo usan. Algunos ejemplos:</p>\n\n<ul>\n  <li>Docker</li>\n  <li>Kubernetes</li>\n  <li>Terraform y Vault (casi todos las herramientas de HashiCorp)</li>\n  <li><a href=\"https://www.influxdata.com/\">InfluxDB</a></li>\n  <li><a href=\"https://github.com/caddyserver/caddy\">Caddy</a></li>\n</ul>\n\n<p>Esto te debería dar una idea de la importancia de Go en el ecosistema de desarrollo. Grandes proyectos lo usan, grandes empresas lo usan.</p>\n\n<h2 id=\"go-vs-rust\">Go vs Rust</h2>\n\n<p>Una discusión reciente es cuál de los dos lenguajes va a lograr efectivamente reemplazar a C, con características más modernas y como un lenguaje más adaptado a las necesidades actuales. Esto es pura opinión: Rust es un mejor candidato para reemplazar a C por sus características de manejo de memoria. Pero Rust no es un lenguaje tan fácil de aprender o empezar com Go.\nEn Go puedes hacer muchas cosas que haces con C razonablemente bien, sin tanta complicación y sin tener que manejar la memoria manualmente o semi-manualmente. La prueba está en todos los proyectos que manejan cosas de bajo nivel.</p>\n\n<p>Más adelante tendremos un artículo de por qué deberías aprender Rust.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Go es un lenguaje relevante en 2019, 10 años después de haber nacido y lo seguirá siendo por muchos años, sobre todo por los proyectos ya desarrollados en él y las características de las que hablamos en este artículo. Aprenderlo te dará una herramienta más para desarrollar programas que valgan la pena y cumplan con lo esperado.</p>\n\n<p>Pero como <a href=\"https://fs.blog/about/\">Shane Parrish</a> dice: Go es “simple pero no fácil”. Es sencillo empezar a programar con él, pero dominar sus conceptos requiere estudio y esfuerzo. Go se siente como una herencia de gente muy sabia haciendo un lenguaje para hacer cosas grandes. No te arrepentirás de aprenderlo.</p>\n",
      "date_published": "Sun, 01 Sep 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/08/13/lecciones-sobre-el-aprendizaje-de-manos-de-un-experto.html",
      "url": "/2019/08/13/lecciones-sobre-el-aprendizaje-de-manos-de-un-experto.html",
      "title": "Ultralearning: el arte del aprendizaje profundo",
      "content_html": "<blockquote>\n  <p>¿En qué te convertirías si aprendieras todo lo que deseas?</p>\n</blockquote>\n\n<p><strong>¿Cuántas cosas están en tu lista de aprendizaje?</strong> Todos tenemos una lista larga de temas, habilidades y curiosidades por aprender. Pero tenemos una cantidad igual de grande de obstáculos para lograrlo: la falta de acceso a recursos de aprendizaje, la falta de tiempo, falta de motivación, dificultad en estructura, entre muchas otras cosas.</p>\n\n<p><a href=\"https://www.scotthyoung.com/\">Scott Young</a> el autor de <a href=\"https://www.scotthyoung.com/blog/ultralearning/\">Ultralearning</a> fue muy amable al proporcionarme una copia de revisión antes de que saliera el libro que <a href=\"https://amzn.to/361v2hu\">ya está a la venta</a>, y en este artículo quiero sintetizar las principales técnicas que enseña para que puedas lograr aprender mejor.</p>\n\n<p>Pero primero, ¿quién es Scott Young y por qué deberíamos escucharlo? Se hizo famoso por estudiar el temario completo (o casi completo) del MIT para Computer Science que normalmente se cursa en 4 años <strong>en sólo 1</strong>. Este proyecto ocupaba todo su tiempo, un montón de concentración y técnicas para aprender. Aquí es donde empezó a desarrollar el concepto que presenta en el libro (me tomaré la libertad de traducirlo): Ultra-aprendizaje. A partir de ahí ha aprendido muchas más cosas con el mismo estilo agresivo de aprendizaje y ha ayudado a otros a hacer lo mismo.</p>\n\n<p>Un proyecto de ultra-aprendizaje se define como un periodo de concentración intensa que permite aprender de manera acelerada y profunda el tema que hayas elegido. Para realizar estos proyectos, Scott propone <strong>nueve principios</strong>, tomando como base lo que aprendió de otras personas que han realizado proyectos similares a los de él pero también los estudios más recientes sobre el tema.</p>\n\n<p>Este libro te servirá tanto si eres tú el que desea aprender como si quieres enseñarle a otras personas.\nVeamos los nueve principios necesarios para realizar tu propio proyecto de ultra-aprendizaje.</p>\n\n<h2 id=\"1-meta-aprendizaje\">1: Meta-aprendizaje</h2>\n\n<p>Podemos pensar en este principio como la etapa de planeación. Tienes que investigar cómo esto que quieres aprender lo han aprendido otras personas, que ruta de aprendizaje han seguido, cuáles eran sus conocimientos previos, cuánto les tomó, etc. Para esto puedes investigar en internet o incluso conseguir una entrevista con una persona que tenga los conocimientos que tú quieres.Todo lo que puedas obtener de esta información es útil.</p>\n\n<p>También tienes que buscar y entender la estructura del tema que quieres aprender, los subtemas principales, cuáles son buenos recursos para aprender. Si encontraste un experto que te ayudara ya tienes cubierto gran parte de esto.</p>\n\n<p>Es entonces que tienes que reunir todos los recursos posibles de aprendizaje y <strong>trazar un plan, un mapa de aprendizaje</strong>. En este periodo decidirás cuánto tiempo vas a dedicarle al proyecto y hasta dónde llegarás. Muy importante porque un poco de investigación te puede ahorrar mucho tiempo de ejecución. Este principio te invita a reducir al máximo posible lo que no sabes que no sabes sobre el tema.</p>\n\n<h2 id=\"2-enfoque\">2: Enfoque</h2>\n\n<p>Este principio establece que para poder aprender efectivamente antes tenemos que agudizar nuestra capacidad de concentrarnos en un tema.</p>\n\n<p>El enfoque puede trabajarse en tres momentos diferentes:</p>\n\n<ol>\n  <li>Empezar a enfocarse en algo</li>\n  <li>Mantener el enfoque</li>\n  <li>Mejorar la calidad de nuestra concentración</li>\n</ol>\n\n<p>Muchos autores coinciden en que la calidad y capacidad par concentrarse es uno de las claves para poder progresar en cualquier cosa, no sólo en el aprendizaje.</p>\n\n<p>En el libro se dan sugerencias prácticas para poder mejorar en las tres etapas de enfoque.</p>\n\n<h2 id=\"3-aprendizaje-directo\">3: Aprendizaje directo</h2>\n\n<blockquote>\n  <p>Aquel que puede ir a la fuente no va sólo por la jarra.</p>\n</blockquote>\n\n<p>Es bueno aprender cosas leyendo, pero es mucho mejor aprenderlas aplicando lo que leemos o practicando directamente. Si quieres aprender a programar tienes que crear programas reales que funcionen. Si quieres aprender un idioma tienes que hablar o comunicarte con otras personas en ese idioma. Haciendo esto aprenderás mucho más rápido de lo que harías sólamente leyendo libros que relaten la experiencia de otros, o usando Duolingo.</p>\n\n<p>Practicar la habilidad directamente o poner en acción el conocimiento hará que este sea más profundo, útil y que lo recuerdes mejor.</p>\n\n<p>Este principio es muy importante y muchos de nosotros lo hemos vivido en nuestra experiencia escolar: nada de lo que no es enseñaron es aplicable en el mundo real porque las habilidades necesarias para realizar el trabajo de verdad son muy diferentes a lo que se ve en los libros. Aunque el conocimiento adquirido puede servir como base, <strong>la práctica hace al maestro</strong>.</p>\n\n<h2 id=\"4-ensayo\">4: Ensayo</h2>\n\n<p>Esta parte es una de las que a las personas en general menos le gusta: practicar o ensayar partes de la habilidad que sean difíciles, laboriosas o aburridas.</p>\n\n<p>Muchas veces nuestras habilidades están topadas o detenidas por cierta parte del proceso, como si fuera un embudo deteniendo el flujo de líquido. Para acabar con esto hay que practicar con la parte más incómoda de la habilidad.</p>\n\n<p>Esto incluye que descompongas la habilidad en diferentes sub-procesos que puedan ejecutarse individualmente y practicar cada uno por separado hasta que lo domines de manera razonable, uno tras otro, cada de los sub-procesos hasta terminarlos todos. Después hay que practicar de nuevo el proceso completo y medir nuestro desempeño.</p>\n\n<p>Esto es conveniente porque al trabajar sobre una parte específica del proceso completo puedes liberar recursos mentales para mejorar de manera más profunda y significativa en esa parte de la habilidad.</p>\n\n<h2 id=\"5-recuperación-de-la-información\">5: Recuperación de la información</h2>\n\n<p>El principio de “retrieval” consiste en intentar poner en práctica y ver si de verdad entendiste lo que acabas de aprender mediante pruebas reales, por ejemplo: usar las palabras de un nuevo idioma en conversación, contestar preguntas de un examen o usar una nueva técnica aprendida para programar.</p>\n\n<p>Esto ayudará a que recuerdes mejor lo aprendido y a que no te quedes con la sensación de que has aprendido algo cuando no es la realidad. Poner a prueba tu conocimiento es la mejor manera de saber que sí existe y de qué calidad es.</p>\n\n<p>Este principio pone de relieve algo: es mucho más incómodo “probarse” a uno mismo mediante imponerse algún obstáculo, es una fuente de cansancio e incomodidad mental, lo cuál nos puede dejar con la sensación de que no estamos aprendiendo o avanzando mucho. Pero estudios sobre esto demuestran que aunque sólo leer puede dejar la sensación de que entendimos y aprendimos mucho, la forma más efectiva de aprender es poner a prueba el conocimiento y la sensación de aprendizaje no está directamente ligada a cuánto aprendimos de verdad.</p>\n\n<h2 id=\"6-retroalimentación\">6: Retroalimentación</h2>\n\n<p>Una forma importante de mejorar y aprender es tener a alguien o algo que te ayude a encontrar lo que está fallando en tu desempeño del tema de lo que estés aprendiendo.</p>\n\n<p>El ejemplo que Scott usa de una persona que aprendió a hablar en público como su proyecto de ultra-aprendizaje y que recibía retroalimentación de un mentor que le decía exactamente dónde fallaba. Al atacar estos puntos que una persona con más experiencia le marcaba pudo llegar a ser un orador de clase mundial en muy poco tiempo.</p>\n\n<p>A nadie nos gusta escuchar nuestras fallas, pero es una parte  muy importante de aprender de manera efectiva.</p>\n\n<p>Pero no todo tipo de retroalimentación es útil. Cuando esta información es sobre alguna cualidad personal o sobre tu persona directamente, en general es más perjudicial que benéfico, puede llevarte hasta a abandonar la habilidad que estabas intentando aprender.</p>\n\n<p>Muy probablemente todos hemos experimentado este tipo de comentarios: “Eres muy inteligente”, “No eres bueno para esto”, “Mejor dedícate a otra cosa”. Este tipo de comentarios no aportan nada relevante y atacan o inflan el ego de la persona.</p>\n\n<p>Para que la retroalimentación sea útil debe proveer información que guíe las siguientes etapas de aprendizaje. Para lograr esto debe ser muy específico y si es posible decirte cómo mejorar en ese aspecto.</p>\n\n<h2 id=\"7-retención\">7: Retención</h2>\n\n<p>No deberíamos echar agua en una bote con fugas. De igual manera, no vale la pena que leas y aprendas muchas cosas que después no podrás recordar porque las olvidaste rápidamente.</p>\n\n<p>En este principio Scott explica que tenemos que aprender y reconocer por qué olvidamos y atacar esas causas específicas.</p>\n\n<p>¿Cómo hacer para no olvidar el valioso conocimiento que con tanto trabajo ganamos?</p>\n\n<p>Scott propone varios métodos:</p>\n\n<ol>\n  <li>\n    <p><strong>Repetición espaciada</strong>. Es un método que consiste en repasar la información un poco de tiempo después de haberla estudiado o aprendido por primera vez y repetir el proceso con cada vez más tiempo de espacio.</p>\n  </li>\n  <li>\n    <p><strong>Automatización</strong>. Cuando aprendemos algo a tal grado que podamos decir que tenemos automatizada la habilidad (como andar en bicicleta), es muy poco probable que lo olvidemos.</p>\n  </li>\n  <li>\n    <p><strong>Sobre-aprendizaje</strong>. Practicar más allá de lo que es requerido para volverse bueno en algo o competente hará que las cosas sean mucho más difíciles de olvidar. Esto se puede hacer practicando hasta el cansancio una actividad clave o aprendiendo algo más difícil que construya sobre la actividad principal, por ejemplo: aprender y practicar cálculo diferencial hará que sobre-aprendas álgebra.</p>\n  </li>\n  <li>\n    <p><strong>Mnemónicos</strong>. Estas es un técnica que consiste en crear imágenes vívidas o palabras relacionadas con lo que estemos buscando aprender para poder recordarlo. Los mejores memoristas del mundo aplican esta técnica para poder recordar grandes cantidades de información en poco tiempo.</p>\n  </li>\n</ol>\n\n<p>Poder retener información es uno de los requisitos para que tu proyecto de ultra-aprendizaje valga la pena.</p>\n\n<h2 id=\"8-intuición\">8: Intuición</h2>\n\n<p>La intuición es el producto una gran cantidad de experiencia acumulada. Para verdaderamente entender algo tenemos que desarrollar nuestra intuición en el tema. ¿Qué podemos hacer para desarrollarla?</p>\n\n<p>En esta sección del libro se habla de cómo personas como Richard Feynman parecen hacer magia al resolver problemas de física y de matemáticas. La principal característica de Feynman usada para resolver los problemas es su capacidad de identificar <em>los principios que están en juego</em>, además de la gran cantidad de información almacenada obtenida de otros problemas resueltos con anterioridad.</p>\n\n<p>¿Cómo puedes desarrollar una intuición similar?</p>\n\n<ol>\n  <li>\n    <p>Resolver problemas difíciles. Muchas veces huímos de los problemas que nos parecen demasiado difíciles para nosotros, pero resolver problemas que rebasen nuestra habilidad puede darnos un entendimiento muy profundo del tema tratado.</p>\n  </li>\n  <li>\n    <p>Comprueba la información para entenderla. No te quedes sólamente con la explicación del libro, sino trata de demostrar que lo que estás aprendiendo es cierto.</p>\n  </li>\n  <li>\n    <p>Usa ejemplos concretos. Cuando trates con conceptos o temas abstractos, desde el principio establece un ejemplo al que le puedas ir aplicando los puntos que se van explicando. Esta concreción permitirá desarrollar un mejor entendimiento del tema.</p>\n  </li>\n  <li>\n    <p>No te engañes a ti mismo. Cuando te falta conocimiento sobre un tema, generalmente también te falta conocimiento para saber qué tan hábil eres. Esto quiere decir que el que no tengas dudas sobre un tema significa que lo sabes todo, sino más bien que sabes muy poco. Hacer muchas preguntas es una manera de hacerle frente a este problema, aunque parezcan tontas.</p>\n  </li>\n</ol>\n\n<p>Una forma muy efectiva de desarrollar un entendimiento real: la técnica de Feynman. Esta consiste en intentar explicar el problema, solución o concepto de la manera más clara posible como para alguien que nunca ha visto nada relacionado con el tema.</p>\n<h2 id=\"9-experimentación\">9: Experimentación</h2>\n\n<p>El verdadero conocimiento no se queda en llegar al punto en que otros te dijeron que debías llegar sino en ir más allá.</p>\n\n<p>Además, mientras más aprendas de algo menos guía podrás recibir ya que hay menos personas y recursos en ese nivel, por lo que es algo requerido aprender a experimentar con maneras de generar conocimiento.</p>\n\n<p>Para experimentar en tu aprendizaje y resultados puedes intentar tres cosas:</p>\n\n<ol>\n  <li>Variar los <strong>recursos de aprendizaje</strong>.</li>\n  <li>Experimentar la <strong>técnica de aprendizaje</strong>.</li>\n  <li>Experimentar con tu <strong>estilo de trabajo y aprendizaje</strong>.</li>\n</ol>\n\n<p>Experimentar te permitirá convertirte en verdadero experto en el tema que estés queriendo dominar.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<blockquote>\n  <p>Completar un proyecto de este tamaño te demuestra que tienes la habilidad de mejorarte y de sacarle buen provecho a tu vida. Te da la confianza de que puedes lograr cosas ambiciosas.</p>\n</blockquote>\n\n<p>Esta es una de las frases más inspiradoras del libro y creo que te da buenos motivos para empezar a pensar en tus propio proyecto de ultra-aprendizaje, además de los beneficios asociados al tema mismo que quieras aprender:</p>\n\n<ul>\n  <li>¿Te ayudará a conseguir un mejor trabajo o puesto?</li>\n  <li>¿Podrás ser más útil a tu familia, comunidad o amigos?</li>\n  <li>¿Disfrutarás más de tu tiempo libre o tendrás más a consecuencia de esto?</li>\n</ul>\n\n<p>Sin duda todas estas razones son suficientes para intentarlo por lo menos.</p>\n\n<blockquote>\n  <p>“Hacer cosas difíciles, sobre todo cosas que tienen que ver con aprender, puede crecer el concepto que tienes de ti mismo”.</p>\n</blockquote>\n\n<p>Esto a su vez, tendrá efectos en otros campos de tu vida.</p>\n\n<blockquote>\n  <p><strong>¿Quién te podrías volver?</strong></p>\n</blockquote>\n\n<p>¡A aprender!</p>\n\n<p>Puedes comprar el libro en <a href=\"https://www.amazon.com.mx/Ultralearning-Outsmart-Competition-Accelerate-English-ebook/dp/B07K6MF8MD/\">Amazon</a>.</p>\n",
      "date_published": "Tue, 13 Aug 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/08/03/entendiendo-rest-servidor-sin-estado.html",
      "url": "/2019/08/03/entendiendo-rest-servidor-sin-estado.html",
      "title": "Entendiendo REST: conexión sin estado",
      "content_html": "<p>Hemos venido hablando de las características que componen a un sistema REST. En el último artículo <a href=\"/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor.html\">hablamos de la arquitectura cliente-servidor</a>. Esta es la primera característica fundamental de un sistema REST. Ahora pasemos a la siguiente característica-limitante que Thomas Fielding establece para los sistemas REST: <strong>conexión sin estado</strong>.</p>\n\n<h2 id=\"qué-es-el-estado-de-un-sistema\">¿Qué es el estado de un sistema?</h2>\n\n<p>El estado de una aplicación son todos los datos que usa para operar en un momento determinado.</p>\n\n<p>Como ejemplo podemos pensar en una aplicación de ventas en línea. El estado de esta aplicación, para un usuario específico son sus datos de identificación, su bolsa de compras y los productos que ha estado viendo o que tiene en su lista de deseos, así como datos que no son identificables directamente desde la interfaz de usuario como los tokens de sesión, su historial de visita de las páginas y productos (piensa en Amazon) y los productos que ha comprado anteriormente en esta página.</p>\n\n<p>Todos estos datos necesarios para operar tanto a nivel interno como para la interfaz de usuario son el estado de la aplicación para este usuario. <strong>Puedes entender el estado como el contexto de una aplicación</strong>. Todas las aplicaciones y programas usables tienen uno. Entonces, ¿a qué nos referimos con conexiones sin estado?</p>\n\n<h2 id=\"conexión-sin-estado\">Conexión sin estado</h2>\n\n<p>Dando por supuesto que estamos trabajando en un sistema con arquitectura de red <a href=\"/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor.html\">cliente-servidor</a>, las dos partes comparten la información (el estado) necesaria para realizar las operaciones. La pregunta es: ¿en qué lado mantengo esta información durante la operación? Damos por supuesto que el almacenamiento de información a largo plazo está localizado en algún lado del servidor. Pero en el momento de la operación, ¿quién mantiene estos datos memoria operativa?</p>\n\n<p>En el ejemplo del que hablamos: ¿quién mantiene en memoria la bolsa de compras del usuario, el cliente (el navegador web) o el servidor? Cualquiera de los dos podría llevarlo a cabo. Veamos los dos casos, empecemos por una conexión que “recuerda” el estado.</p>\n\n<p>Imagínate la siguiente conversación:</p>\n\n<ul>\n  <li>Cliente(C): Vamos a empezar a trabajar con el usuario <em>hectorip</em></li>\n  <li>Servidor(S): De acuerdo</li>\n  <li>C: Dame su bolsa de compras</li>\n  <li>S: Tiene estos 5 artículos guardados</li>\n  <li>C: Comprar todos los artículos de su bolsa</li>\n  <li>S: Ok, serán $500</li>\n  <li>C: el cliente quiere pagar</li>\n  <li>S: le he cobrado todo lo de su bolsa</li>\n</ul>\n\n<p>El tipo de conversación que acabamos de ver sería una <strong>conexión con estado</strong>: cada uno de los mensajes depende del mensaje anterior para poder entender de qué estábamos hablando. Intenta leerla de regreso y lo notarás.</p>\n\n<p>Ahora veamos cómo sería un conversación que no recuerda los mensajes anteriores:</p>\n\n<ul>\n  <li>C: Dame la bolsa de compra de <em>hectorip</em></li>\n  <li>S: hectorip tiene estos 5 artículos en su bolsa</li>\n  <li>C: hectorip quiere comprar todos los artículos de su bolsa</li>\n  <li>S: Ok, serán $500 por todos los artículos de la bolsa de compra</li>\n  <li>C: hectorip quiere realizar un pago por $500 por los artículos en su bolsa de compras</li>\n  <li>S: He cobrado $500 a hectorip por el pedido de los artículos en su bolsa de compras</li>\n</ul>\n\n<p>Si revisamos la conversación anterior, podemos entender cada mensaje leído individualmente, sin necesitar el contexto completo de la conversación.</p>\n\n<p>La primera conversación (conexión con estado) tiene algunas ventajas claras:</p>\n\n<ul>\n  <li>Los mensajes son más cortos</li>\n  <li>La conversación es más fluída</li>\n  <li>Se transfiere menos información de un lado a otro</li>\n</ul>\n\n<p>Pero también tiene desventajas. ¿Qué pasa si esta conversación se interrumpe y se intenta retomar? <em>Hay que empezar la conversación desde cero.</em> ¿Qué pasa si el servidor, por algún error olvida de lo que estábamos hablando? <em>Hay que reiniciar la conversación.</em> ¿Qué pasa si quiero continuar la compra en otro servidor? <em>Hay que reiniciar la conversación con el nuevo servidor.</em></p>\n\n<h1 id=\"características-de-conexión-sin-estado\">Características de conexión sin estado</h1>\n\n<p>Hablemos de las características de una conexión sin estado.</p>\n\n<p>La primera característica es que <em>no necesitamos</em> que la conexión a nivel de sesión de red sea persistente, es decir, que se mantenga un canal de comunicación abierto que pueda mantener en memoria la información de los procesos actuales.</p>\n\n<p>Segundo, no podemos (ni debemos) asumir que el servidor mantendrá los datos del cliente automáticamente por medio de reconocer al cliente. En cada una de las peticiones que se hacen al servidor, <strong>deben venir todos los datos necesarios para que el servidor mantenga realice la operación</strong>, no se puede confiar en que las peticiones anteriores transfirieron esa información y no es necesario repetirla.</p>\n\n<p>Hasta ahora parece que esto presenta más problemas que ventajas. Revisemos por qué alguien querría trabajar con un sistema así.</p>\n\n<h2 id=\"ventajas-de-mantener-el-servidor-sin-estado\">Ventajas de mantener el servidor sin estado</h2>\n\n<ol>\n  <li>\n    <p><strong>Replicación de servidores</strong>. Al no tener que mantener el estado o conexiones persistentes con una instancia del servidor, una conexión sin estado puede permitir que la petición sea atendida por cualquier instancia del código del servidor que tenga el mismo código que las peticiones anteriores, ya que toda la información necesaria para atender esas peticiones estará incluida.</p>\n  </li>\n  <li>\n    <p><strong>Escalabilidad</strong>. Esto es una consecuencia inmediata de la ventaja anterior: poder replicar los servidores permite distribuir la carga entre muchas computadoras y aplicar técnicas de balanceo para poder atender a muchos más clientes de lo que se podría en un sistema que requiera mantener estados.</p>\n  </li>\n  <li>\n    <p><strong>Servicios más sencillos</strong>. Quitarle la responsabilidad de mantener el contexto de las operaciones actuales a los servicios hace que su código sea más sencillo y por lo tanto más mantenible.</p>\n  </li>\n  <li>\n    <p><strong>Menos carga en los servidores</strong>. Al no tener que mantener conexiones persistentes, ni tener que mantener procesos o memoria relacionada con los clientes con los que está operando, se reduce la carga en memoria operativa de los servidores (teóricamente). Esto también implica que el servidor ni siquiera tiene que estar corriendo mientras no esté activamente respondiendo una petición (como las funciones lambda).</p>\n  </li>\n</ol>\n\n<p>La siguiente imagen ilustra una técnica común para atender a muchos clientes.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1564887852/PNG_image-428CDB12FF65-1_ojrpoo.png\" alt=\"Diagrama de replicación de servidores\" /></p>\n\n<h2 id=\"desventajas\">Desventajas</h2>\n\n<ol>\n  <li>\n    <p><strong>Complejidad de las peticiones</strong>. La complejidad de las peticiones aumenta al necesitar mantener en el cliente toda la información necesaria para reconstruir el estado en cada petición en un servidor desde cero. Por lo tanto, la complejidad de los clientes aumenta. y el tamaño de las peticiones se incrementa.</p>\n  </li>\n  <li>\n    <p><strong>Mayor carga en la red</strong>. Como las peticiones son más complejas y generalmente contienen más información para poder recuperar el contexto efectivamente, el viaje de información en la red es mayor en tamaño.</p>\n  </li>\n</ol>\n\n<h2 id=\"conexiones-que-mantienen-estado\">Conexiones que mantienen estado</h2>\n\n<p>En los últimos años la mayoría de las conexiones que se levantan en programas creados con la arquitectura cliente-servidor son creados con conexiones que no mantienen el estado. Sin embargo, también se puede mantener una conexión con estado en la arquitectura cliente-servidor. Hay varias formas de lograr esto, pero la principal característica es que debe haber una manera de relacionar al cliente que está solicitando los servicios con el servidor que está atendiéndolo, por lo general la manera de hacerlo es con conexiones persistentes que se mantienen abiertas mientras el proceso de uso de los servicios dura.</p>\n\n<p>Esto viene con sus propios retos, pero tecnologías actuales como <a href=\"/2019/06/02/por-que-deberias-aprender-elixir.html\">Elixir</a>, Phoenix y los WebSockets hacen el camino más fácil. En otro post hablaremos de cómo podemos aprovechar esta arquitectura y en qué casos nos conviene.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La segunda característica definida de los sistemas REST es importante porque permite que los servicios sean más confiables, disponibles y flexibles en tamaño (escalables). Como cada decisión que se toma en el desarrollo, esta viene con sus propias desventajas: al hacer más complejas las peticiones, la base de código es más difícil de mantener en general (del lado del cliente), pero permite características importantes en los sistemas que tienen que atender a una gran cantidad de clientes.</p>\n\n<p>En el siguiente artículo hablaremos de la tercera característica de los sistemas REST: la capacidad de ser cachear información.</p>\n",
      "date_published": "Sat, 03 Aug 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor.html",
      "url": "/2019/07/04/entendiendo-rest-arquitectura-cliente-servidor.html",
      "title": "Entendiendo REST: Arquitectura cliente-servidor",
      "content_html": "<blockquote>\n  <p>El propósito de construir software no es crear una topología de interacciones específicas, o usar un tipo particular de componente; es crear un sistema que cumpla y exceda las necesidades de la aplicación. - Thomas Fielding</p>\n</blockquote>\n\n<p>Ya hablamos de las <a href=\"/2019/06/15/entendiendo-rest-estilo-de-arquitectura.html\">motivaciones detrás del estilo arquitectural REST</a>. Ahora empecemos con la primera de sus características o restricciones, que la empieza a definir: la arquitectura cliente-servidor.</p>\n\n<h2 id=\"qué-es-la-arquitectura-cliente-servidor\">¿Qué es la arquitectura cliente-servidor?</h2>\n\n<p>Esta arquitectura de aplicación divide un sistema en dos componentes:</p>\n\n<ul>\n  <li>\n    <p><strong>Cliente</strong>: Es un programa o proceso que solicita un servicio y usa la información provista para sus propios objetivos.</p>\n  </li>\n  <li>\n    <p><strong>Servidor</strong>: Programa o proceso que ofrece un conjunto de servicios y espera por peticiones para ejecutar o dar estos servicios.</p>\n  </li>\n</ul>\n\n<p>La principal característica de la arquitectura cliente-servidor es que logra una <em>separación de responsabilidades clara</em>.</p>\n\n<p>En palabras de <a href=\"https://homepages.cwi.nl/~marcello/SAPapers/And91.pdf\">Gregory R. Andrews</a>, el cliente es un proceso desencadenante mientras que el servidor es un proceso reactivo. Es decir el servidor no puede envíar datos o empezar procesos que un cliente no le ha solicitado.</p>\n\n<p>La arquitectura básica de un sistema cliente-servidor es esta:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1562699566/PNG_image-ABC17A5C0944-1_wpyk2e.png\" alt=\"Esquema cliente-servidor\" /></p>\n\n<!-- Recordemos que todos los diseños o arquitecturas implican un intercambio de valor entre varias características, en este caso un poco de simplicidad por la separación de responsabilidades claras. -->\n\n<p>Veamos sus ventajas y desventajas.</p>\n\n<h2 id=\"ventajas\">Ventajas</h2>\n\n<p>Hablemos de los beneficios que trae usar la arquitectura cliente-servidor.</p>\n\n<h3 id=\"separación-clara-de-responsabilidades\">Separación clara de responsabilidades</h3>\n\n<p>La funcionalidad del sistema se divide en dos partes (por lo menos), como el nombre lo indica en parte de dar los servicios (generalmente de datos) y la parte de atender al usuario (humanos o programa) final.</p>\n\n<p>El cliente y el servidor tienen funciones completamente distintas y cada uno puede cambiar por su lado sin afectar al otro, a esto le podemos llamar “evolución independiente”.</p>\n\n<p>El ejemplo que tenemos es el del navegador y las páginas que visitamos normalmente en internet. Mientras sigan cumpliendo con el protocolo establecido de comunicación (HTTP) van a poder seguir comunicándose y transfiriendo información, sin interferir la manera en que estén implementados sus procesos internos.</p>\n\n<h3 id=\"división-de-complejidad\">División de complejidad</h3>\n\n<p>La misma división de la que hablamos en el punto anterior permite dividir la complejidad en dos partes por lo que cada una por su lado es más fácil de entender y desarrollar que el sistema completo.</p>\n\n<p>Por lo tanto, se sigue el mismo principio que se usa para desarrollar software complejo en general: <strong>divide y vencerás</strong>. Esto permite que podamos dividir el trabajo limpiamente en diferentes etapas de desarrollo o entre diferentes equipos, que lo único que requieren es una interfaz de comunicación clara.</p>\n\n<p>Esto no quiere decir que la complejidad <em>general</em> se reduzca. De esto hablaremos en las desventajas.</p>\n\n<h3 id=\"múltiples-versiones-y-reusabilidad\">Múltiples versiones y reusabilidad</h3>\n\n<p>La implementación de la interfaz de comunicación es el único requisito indispensable para que un sistema cliente-servidor pueda seguir funcionando. Esto permite que un servidor pueda tener un número indefinido de clientes diferentes que puedan consumir su interfaz y viceversa. En el caso de REST implementar el servidor con la API permite crear tantos clientes como se necesite:</p>\n\n<ul>\n  <li>página web</li>\n  <li>aplicación móvil</li>\n  <li>sistema embebido</li>\n  <li>SDK para servidores</li>\n</ul>\n\n<p>Sólo para ilustrar:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1562294072/PNG_image-5618E8EA3C0D-1_vk18wv.png\" alt=\"Ilustración de cliente-servidor multi-cliente\" /></p>\n\n<p>Tener N versiones de los clientes o poder crear una sin tener que volver a a replicar la funcionalidad del servidor ha hecho que las API’s se vuelvan sumamente populares.</p>\n\n<h3 id=\"simplificación-de-escalamiento\">Simplificación de escalamiento</h3>\n\n<p>Poder tener separado el servidor permite que podamos escalarlo de forma independiente dependiendo del número de clientes a los que va a atender. Si necesitamos dar un servicio a escala mundial podemos replicar nuestros servidores (usando las arquitecturas adecuadas para esto) sin afectar a los clientes y sin que ellos se enteren y por lo tanto tengan que hacer algún cambio.</p>\n\n<h2 id=\"desventajas\">Desventajas</h2>\n\n<p>Todo en la vida viene con desventajas asociadas y generalmente directamente proporcionales a sus ventajas. Y otra vez: intercambiamos valor entre diferentes partes de la aplicación. Analicemos algunas de estos intercambios que hacemos al aplicar la arquitectura cliente-servidor.</p>\n\n<h3 id=\"complejidad-general-aumentada\">Complejidad general aumentada</h3>\n\n<p>Cuando dividimos la aplicación y funciones completas en dos partes, aunque la complejidad de cada parte es menos que la general, la complejidad general aumenta porque hay que agregar elementos al sistema:</p>\n\n<ul>\n  <li>Interfaces de comunicación entre cliente y servidor</li>\n  <li>Mantenimiento o forma de recuperación del estado general de la aplicación</li>\n  <li>Protocolos de comunicación de red cuando es el caso</li>\n</ul>\n\n<h3 id=\"centralización-de-la-información\">Centralización de la información</h3>\n\n<p>El servidor es el responsable de almacenar la información y procesarla para darle servicio a los diferentes clientes que los soliciten, lo cual, aunque hace más fácil su administración, representa la desventaja de tener la información centralizada en el sistema que actúa como servidor. Si este sistema se corrompe de alguna forma, los clientes necesitan otras fuentes de información para eliminar este problema.</p>\n\n<p>Combinar cliente-servidor con otra arquitecturas ayuda a mitigar esta falla. Por ejemplo, se puede implementar el patrón de replicación de repositorio en el lado de los proveedores de servicio.</p>\n\n<p>Pero, un momento, ¿acaso no es cliente-servidor la única arquitectura que existe para sistemas web o sistemas distribuidos?</p>\n\n<h2 id=\"otras-arquitecturas\">Otras arquitecturas</h2>\n\n<p>La arquitectura para aplicaciones distribuidas más escuchada es la cliente-servidor, pero no es ni de lejos la única. Analicemos otras dos arquitecturas comunes y dónde se usan. Si quieres ver la lista completa que Fielding analiza puedes revisar la sección 2 de <a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf\">su tesis doctoral</a>.</p>\n\n<h3 id=\"peer-to-peer\">Peer to Peer</h3>\n\n<p>En este estilo está compuesta por nodos equivalentes, es decir, que tiene la misma función (aunque pueden tener diferente información) y que se distribuyen la carga que soporta el sistema entero según las capacidades de cada uno y a veces se proporcionan servicios entre ellos. Un mismo nodo puede cambiar entre funciones o roles en la red dependiendo de la demanda.</p>\n\n<p>En esta arquitectura no hay por definición un nodo más importante que otro y si alguno de toda la red falla, puede ser sustituido por otro si tiene la información replicada.</p>\n\n<p>Las redes de torrents, el blockchain y programas como Ares o LimeWire funcionaban de esta forma.</p>\n\n<p>Una red peer-to-peer puede lucir así:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_871/v1561266301/PNG_image-CC8B051C8851-1_r78hfc.png\" alt=\"Ejemplo de red peer to peer\" /></p>\n\n<p>Las redes peer-to-peer son una de las mejores formas de crear sistemas distribuidos resistentes y descentralizados, es decir, que no concentran la información en un sólo punto que se vuelve el más delicado e importante de todos.</p>\n\n<h3 id=\"pipe-and-filter\">Pipe and Filter</h3>\n\n<p>En este patrón, la información pasa por una series de “filtros” o nodos que la procesan y van dejando la información en un nuevo estado o con nuevas propiedades y que pasan la información al siguiente nodo. Este patrón es el que siguen los pipelines de datos normalmente, en el que la información que es producida por una fuente externa es procesada a través de una serie de pasos, que pueden incluir la recolección, limpieza, almacenamiento, etc.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1562217820/PNG_image-C00985E33227-1_mevaqa.png\" alt=\"Ilustración de pipe and filter\" /></p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<blockquote>\n  <p>Los estilos arquitectónicos el diseño de un sistema deben adecuarse a las necesidades de ese sistema, no al revés. - Thomas Fielding</p>\n</blockquote>\n\n<p>¿A qué necesidades nos adaptamos?</p>\n\n<p>A la necesidad de tener una separación clara entre las funciones de datos y procesos de negocio y las interfaces de usuario: sean usuarios finales humanos u otros programas que consumen información.</p>\n\n<p>La arquitectura cliente-servidor permite simplificar el trabajo del lado del servidor al no tener que preocuparse por todas las distintas situaciones en las que sus datos o procesos van a ser usados.</p>\n\n<p>Esto nos lleva a que sus procesos sean <strong>reutilizables</strong> por todos los clientes que sepan comunicarse con el servidor (léase: usar su interfaz). A su vez los clientes son más fáciles de crear por no tener en ellos mismos toda la lógica del negocio y poder enfocarse en las funcionalidades de la entidad al que le van servir.</p>\n\n<p>Y por último, esta separación permite que el servidor sea fácil de escalar al nivel del servicio requerido.</p>\n\n<p>Para los propósitos de REST la arquitectura Cliente-servidor es muy adecuada. Sus beneficios superan sus desventajas para este caso de uso particular.</p>\n",
      "date_published": "Thu, 04 Jul 2019 00:00:00 -0500"
      },
    
    {
      "id": "/2019/06/22/libros-gratuitos-para-aprender-analisis-de-datos.html",
      "url": "/2019/06/22/libros-gratuitos-para-aprender-analisis-de-datos.html",
      "title": "Libros gratuitos para aprender análisis de datos",
      "content_html": "<p>¿Quieres aprender análisis de datos y ya eres programador? Los siguientes libros pueden ser de gran ayuda. Este post está basado en <a href=\"http://bit.ly/2RjPiol\">un artículo inglés que encontramos</a>, pero con los recursos que recomienda actualizados y algunos otros de nuestra cosecha.</p>\n\n<p>Casi todos están en inglés pero incluímos unos cuántos en español y, en los que nos fue posible, tienes descarga directa.</p>\n\n<h2 id=\"0-r-en-español\">0. R en español</h2>\n\n<p>Empecemos por los pocos recursos en español. Encontré dos libros enfocados en aprender R (ojo: sin profundizar en el análisis de datos) en español.</p>\n\n<h3 id=\"r-para-principiantes-de-juan-bosco-mendoza\">R para principiantes de Juan Bosco Mendoza</h3>\n\n<p><img src=\"https://bookdown.org/jboscomendoza/r-principiantes4/images/r-principiantes-cover.png\" alt=\"Portada de R para principiantes\" /></p>\n\n<blockquote>\n  <p>R para principiantes pretende ser un material introductorio al lenguaje de programación R, dirigído a personas que nunca han usado R o ningún otro lenguaje de programación, ni tiene conocimiento previo de probabilidad y estadística.</p>\n</blockquote>\n\n<p>Es un libro que te lleva de la mano desde la instalación hasta la exploración visual de los datos, mediante el uso de la gráficas generadas por R, de manos de un practicante asiduo del lenguaje.</p>\n\n<p><a href=\"http://bit.ly/2Ru1cvU\" target=\"_blank\">Lée R para principiantes <strong>aquí</strong>.</a></p>\n\n<h3 id=\"r-para-principiantes-de-emmanuel-paradis-traducido-por-jorge-a-ahumada\">R para principiantes de Emmanuel Paradis, traducido por Jorge A. Ahumada.</h3>\n\n<p>Es una introducción al lenguaje R explicando un poco los detalles de funcionamiento para poder sentar las bases de uso avanzado, para principiantes en programación. Toca algunas nociones muy básicas de estadística para proporcionar ejemplos.</p>\n\n<p>Puedes <a href=\"http://bit.ly/2RuQ02j\" target=\"_blank\">descargarlo <strong>aquí</strong>.</a>.</p>\n\n<h2 id=\"1-think-stats-segunda-edición\">1. Think Stats, Segunda Edición</h2>\n\n<blockquote>\n  <p>The thesis of this book is that data combined with practical methods can answer questions and guide decisions under uncertainty.</p>\n</blockquote>\n\n<p>Este libro enseña estadística básica con Python y el proceso de análisis de exploración y análisis de datos básico, con un enfoque en los programas más que en las matemáticas.</p>\n\n<p><a href=\"http://bit.ly/2Rlq20V\" target=\"_blank\">Lee Think Stats, segunda edición.</a></p>\n\n<p>Extra: La editorial tiene todos sus libros para leer en formatos digitales gratuitos. Una oportunidad que no puedes perderte, sólo que su sitio no es fácil de navegar así que visita la <a href=\"https://greenteapress.com/wp/\" target=\"_blank\">página de inicio</a></p>\n\n<h2 id=\"2-bayesian-methods-for-hackers\">2. Bayesian Methods for Hackers</h2>\n\n<p>Este libro explica cómo aplicar métodos de inferencia bayesiana para programadores que no tienen tanto conocimiento de estadística y matemáticas, enfocados en el lado de la programación.</p>\n\n<p><a href=\"http://bit.ly/2Rs2TKt\" target=\"_blank\">Descarga el libro aquí</a></p>\n\n<h2 id=\"3-undestarding-machine-learning-from-theory-to-algorithms\">3. Undestarding Machine Learning: From Theory to Algorithms</h2>\n\n<p>Este libro Shai Shalev-Shwartz y Shai Ben-David nos  enseñan los fundamentos de machine learning y cómo transformar estos principios en algoritmos <em>usables</em>.</p>\n\n<p>Este libro incluye un análisis de la complejidad computacional implicada.</p>\n\n<p><a href=\"http://bit.ly/2Rr1Nys\" target=\"_blank\">Descarga Undestarding Machine Learning aquí</a></p>\n\n<h2 id=\"4-the-elements-of-statistical-learning\">4. The Elements of Statistical Learning</h2>\n\n<blockquote>\n  <p>“Estamos inundados de información pero secos de conocimiento” - Rutherford D. Roger</p>\n</blockquote>\n\n<p>Esta frase que abre el libro explica la necesidad de entender y aplicar correctamente métodos estadísticos de análisis de datos para entender bien el mundo, dada la explosión de información que estamos viendo gracias a la digitalización de todas las industrias y de las ciencias.</p>\n\n<p>El libro se enfoca en los métodos de análisis y sus fundamentos conceptuales en vez de en los detalles matemáticos.</p>\n\n<p><a href=\"https://stanford.io/2RtnVrX\" target=\"_blank\">Descarga The Elements of Statistical Learning</a></p>\n\n<h2 id=\"5-an-introduction-to-statistical-learning\">5. An Introduction to Statistical Learning</h2>\n\n<p><img src=\"http://www-bcf.usc.edu/~gareth/ISL/ISL%20Cover%202.jpg\" alt=\"Portada del libro An Introduction to Statistical Learning\" /></p>\n\n<p>Está dirigido a personas que no estudiaron algo relacionado con matemáticas (como la mayoría de los programadores), para introducirlos a al aprendizaje estadístico práctico, inspirado por el libro del punto 4.</p>\n\n<p>Este libro es adecuado para personas sin preparación ni en estadística ni en ciencia de la computación. Usa R para aprender los conceptos.</p>\n\n<p><a href=\"http://bit.ly/2RqyE6o\" target=\"_blank\">Descarga An Introduction to Statistical Learning</a></p>\n\n<h2 id=\"6-foundations-of-data-science\">6. Foundations of Data Science</h2>\n\n<p>Este libro intenta enseñar los fundamentos de análisis de datos desde una perspectiva computacional, para darles a los lectores un fundamento para los siguientes 40 años de la era de la computación, argumentando que la primera época, la enfocada en compiladores, algoritmos y lenguajes ha pasado y que ahora el foco debería estar en el análisis y procesamiento de datos.</p>\n\n<p>Empieza estableciendo las bases matemáticas y el entendimiento necesario de los conceptos estadísticos para luego avanzar a la aplicación de estos.</p>\n\n<p><a href=\"http://bit.ly/2RtkNMI\" target=\"_blank\">Puedes descargarlo <strong>aquí</strong>.</a></p>\n\n<h2 id=\"7-a-programmers-guide-to-data-mining\">7. A Programmer’s Guide to Data Mining</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_570/v1561237264/mozi_c01gcv.png\" alt=\"Guide to data mining\" /></p>\n\n<p>Es una guía práctica para minería de datos y sistema de recomendación, con la técnica de aprender haciendo, con ejercicions en Python. Es libro menos serio (en sentido de seriedad formal) de los que hemos visto hasta ahorita, tiene memes, bromas e imágines divertidas.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1561228640/Screenshot_2019-06-22_13.37.09_igbbp1.png\" alt=\"Blood, sweat and code\" /></p>\n\n<p><a href=\"http://bit.ly/2RtFCaY\" target=\"_blank\">Puedes descargar el libro aquí</a></p>\n\n<h2 id=\"8-mining-of-massive-datasets\">8. Mining of Massive Datasets</h2>\n\n<p><img src=\"http://i.stanford.edu/~ullman/gifs/mmds2.jpg\" alt=\"MMDS cover\" /></p>\n\n<p>Este libro está basado en el curso <a href=\"http://cs246.stanford.edu/\">CS246</a> de Stanford del mismo nombre. Está enfocado en la minería de datos en grandes cantidades, es decir que no puedan ser mantenidos en la memoria principal.</p>\n\n<blockquote>\n  <p>“Data mining is about applying algorithms\nto data, rather than using data to “train” a machine-learning engine of some\nsort.”</p>\n</blockquote>\n\n<p>En enfoque es en e los algoritmos que podemos aplicarle a los datos para obtener información relevante.</p>\n\n<p>Puedes descargar la <a href=\"http://bit.ly/2RsGkoR\">segunda edición</a> y ver el beta de la <a href=\"https://stanford.io/2RAaJ4M\">tercera edición</a>.</p>\n\n<h2 id=\"9-deep-learning\">9. Deep Learning</h2>\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1561233648/Screenshot_2019-06-22_15.00.27_fxtwob.png\" alt=\"Deep learning cover book\" />\nEs un recurso introductorio al campo de machine learning específicamente enfocado en deep learning. \nEs un buen recurso para programadores que no tienen preparación en estadística porque la primera parte del libro está enfocada en dar las bases matemáticas para comprender los algoritmos y técnicas de deep learning.</p>\n\n<p>Puedes comprar el libro o leerlo directamente desde <a href=\"http://bit.ly/2RtKtZK\">su página</a> de forma gratuita.</p>\n\n<h2 id=\"10-machine-learning-yearning\">10. Machine Learning Yearning</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1561236864/Screenshot_2019-06-22_15.54.12_r585on.png\" alt=\"ML Yearning\" /></p>\n\n<p>Está escrito por <a href=\"http://bit.ly/2RrkYYS\">Andrew Ng</a> uno de los fundadores de Coursera y un gigante de la inteligencia artificial. Su enfoque principal es enseñarte cómo organizar un proyecto de Machine Learning, cómo hacer que los algoritmos funcionen y den resultados.</p>\n\n<p>Te pide suscripción con correo electrónico para que recibir una copia del borrador gratuita. Puedes <a href=\"http://bit.ly/2RsPwtv\" target=\"_blank\"><strong>registrarte aquí</strong></a>.</p>\n\n<h2 id=\"11-los-libros-openintro\">11. Los libros OpenIntro</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1561234376/Screenshot_2019-06-22_15.11.04_m19ucx.png\" alt=\"Portadas OpenIntro\" /></p>\n\n<p>OpenIntro es una iniciativa para proveer recursos de aprendizaje de alta calidad a un precio razonable.</p>\n\n<p>Provee todos sus recursos de manera gratuita para descarga. Puedes <a href=\"http://bit.ly/2RxUIvZ\"><strong>visitarlos aquí</strong></a>.</p>\n\n<h2 id=\"12-los-libros-de-roger-d-peng-y-sus-colegas\">12. Los libros de Roger D. Peng y sus colegas</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1561235101/Screenshot_2019-06-22_15.24.56_xkx1qk.png\" alt=\"Roger D. Peng libros\" /></p>\n\n<p><a href=\"http://bit.ly/2Rvyg6Y\">Roger D. Peng</a> es un profesor de bioestadística la \nEscuela Johns Hopkins Bloomberg de Salud Pública. Tiene varios cursos en Coursera sobre análisis de datos, y también lo podemos considerar uno de los grandes contribuidores a la educación sobre análisis de datos.</p>\n\n<p>Ha escito numerosos libros sobre análisis de datos y manejo de proyectos de análisis de datos. Su especialidad es R.</p>\n\n<p>Puedes ver el <a href=\"http://bit.ly/2Rrleai\">índice de sus libros <strong>aquí</strong></a>, casi todos ellos gratuitos, aunque puedes continuir monetariamente si gustas.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Si sabes inglés, hay más material del que podríamos leer decentemente en un buen tiempo sin tener que gastar un solo peso directamente en esta información. ¿Por qué no aprovecharla?</p>\n\n<p>Cuéantanos si ya leíste uno de ellos y qué te pareció.</p>\n",
      "date_published": "Sat, 22 Jun 2019 00:00:00 -0500"
      }
    
  ]
}
        
      </section>

      <footer class="page__meta">
        
        


        
      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<!-- Begin Mailchimp Signup Form -->
<link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
<style type="text/css">
	#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
</style>
<div id="mc_embed_signup">
<form action="https://thedojo.us20.list-manage.com/subscribe/post?u=8e502c6ff53aacad881b3629d&amp;id=c9486cf5f1" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
    <div id="mc_embed_signup_scroll">
	<label for="mce-EMAIL">Suscríbete</label>
	<input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required>
    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_8e502c6ff53aacad881b3629d_c9486cf5f1" tabindex="-1" value=""></div>
    <div class="clear"><input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"></div>
    </div>
</form>
</div>
<!--End mc_embed_signup-->

<!-- <script type="text/javascript" src="/assets/jquery.scrolldepth.min.js"></script> -->

<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

    // jQuery(function() {
    //     jQuery.scrollDepth();
    // });
</script>

<script type="text/javascript" src="//downloads.mailchimp.com/js/signup-forms/popup/unique-methods/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script><script type="text/javascript">window.dojoRequire(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us20.list-manage.com","uuid":"8e502c6ff53aacad881b3629d","lid":"c9486cf5f1","uniqueMethods":true}) })</script>

        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2019 . Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>
  <script src="https://kit.fontawesome.com/4eee35f757.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>







  </body>
</html>
