<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.24.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>The Dojo MX Blog</title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="The Dojo MX Blog">
<meta property="og:title" content="The Dojo MX Blog">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="The Dojo MX Blog Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->
<!-- for mathjax support -->

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZNSYMJDY5S"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZNSYMJDY5S');
</script>

<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9860440966400421"
     crossorigin="anonymous"></script>

<script src="/assets/js/sharect.min.js"></script>
<!-- Fathom - beautiful, simple website analytics -->
   <script src="https://cdn.usefathom.com/script.js" data-site="NGGHUUZH" defer></script>
<!-- / Fathom -->
<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": "The Dojo MX Blog",
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>



  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Saltar a navegación principal</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Saltar a contenido</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Saltar a pie</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt="The Dojo MX Blog"></a>
        
        <a class="site-title" href="/">
          The Dojo MX Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Alternar búsqueda</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Alternar menú</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      





<div id="main" role="main">
  


  <article class="page h-entry" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          

        </header>
      

      <section class="page__content e-content" itemprop="text">
        
        <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>

        </div>
        {
  "version": "https://jsonfeed.org/version/1",
  "title": "The Dojo MX Blog",
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":"https://til.hectorip.com/"}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2025/04/17/el-arte-generico-una-historia-de-la-metaprogramacion-en-C++.html",
      "url": "https://blog.thedojo.mx/2025/04/17/el-arte-generico-una-historia-de-la-metaprogramacion-en-C++.html",
      "title": "El arte genérico: una historia de la metaprogramación en C++",
      "content_html": "<p>Hablar de metaprogramación en C++ suele generar cierto rechazo, y no sin razón: dominar el lenguaje ya representa un reto considerable, y sumarle la complejidad de los teamplates puede parecer excesivo. A diferencia de otros lenguajes con mecanismos más flexibles o integrados, C++ exige un conocimiento profundo no solo del lenguaje, sino también del compilador y su comportamiento. Comprender cómo interactúan las plantillas, como se resuelven los tipos, como se gestionan las sobrecargas o se aplican las optimizaciones es esencial para escribir código genérico eficaz, lo que convierte esta práctica en un desafío tanto técnico como mental.</p>\n\n<p>Pero el desafío que implica la Metaprogramación no es exclusivo de C++; otros lenguajes también han buscado formas de extender sus propias capacidades, enfrentándose a problemas similares desde enfoques muy distintos.</p>\n\n<p>A lo largo de la historia de la informática, diversos lenguajes han explorado la metaprogramación desde ángulos muy distintos. LISP fue pionero absoluto en este campo, abordando el código como si fuera datos y utilizando macros para modificar y extender el propio lenguaje desde dentro. Esa fusión entre programa y datos sentó las bases de lo que hoy conocemos como metaprogramación.</p>\n\n<p>Por otro lado, Ada introdujo desde etapas tempranas mecanismos más estructurados, como los generics, que ofrecían una forma de reutilización de código orientada a la seguridad y el tipado fuerte. Por ejemplo, al definir un paquete genérico para pilas:</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"n\">generic</span>\n   <span class=\"n\">type</span> <span class=\"n\">Elemento</span> <span class=\"n\">is</span> <span class=\"k\">private</span><span class=\"p\">;</span>\n<span class=\"n\">package</span> <span class=\"n\">Pilas</span> <span class=\"n\">is</span>\n   <span class=\"n\">procedure</span> <span class=\"n\">Push</span> <span class=\"p\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">in</span> <span class=\"n\">out</span> <span class=\"n\">Pilas</span><span class=\"p\">;</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">in</span> <span class=\"n\">Elemento</span><span class=\"p\">);</span>\n   <span class=\"n\">function</span> <span class=\"n\">Pop</span> <span class=\"p\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">in</span> <span class=\"n\">out</span> <span class=\"n\">Pilas</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">Elemento</span><span class=\"p\">;</span>\n<span class=\"k\">private</span>\n   <span class=\"n\">type</span> <span class=\"n\">Pilas</span> <span class=\"n\">is</span> <span class=\"n\">array</span> <span class=\"p\">(</span><span class=\"n\">Natural</span> <span class=\"n\">range</span> <span class=\"o\">&lt;&gt;</span><span class=\"p\">)</span> <span class=\"n\">of</span> <span class=\"n\">Elemento</span><span class=\"p\">;</span>\n<span class=\"n\">end</span> <span class=\"n\">Pilas</span><span class=\"p\">;</span>\n<span class=\"n\">package</span> <span class=\"n\">Pilas_Enteros</span> <span class=\"n\">is</span> <span class=\"k\">new</span> <span class=\"nf\">Pilas</span> <span class=\"p\">(</span><span class=\"n\">Elemento</span> <span class=\"o\">=&gt;</span> <span class=\"n\">Integer</span><span class=\"p\">);</span>\n\n</code></pre></div></div>\n\n<p>Mientras Ada se centra en la metaprogramación estática, otros lenguajes exploraron la reflexión y los meta‑objetos para ganar flexibilidad en tiempo de ejecución. Java, por ejemplo, utiliza Annotation Processors para generar código antes de compilar, C# aprovecha Roslyn para inspeccionar y modificar su árbol de sintaxis, D ofrece CTFE y mixins, y Rust incorpora procedural macros que derivan implementaciones de rasgos automáticamente.</p>\n\n<p>Uno de los primeros antecedentes directos de la metaprogramación en C++ lo encontramos en C, particularmente en el uso creativo de su preprocesador. Más allá de las clásicas macros con funciones, surgieron técnicas como los X-macros, que permitían generar múltiples fragmentos de código reutilizando una lista común de componentes. Esta técnica consistía en definir un conjunto de macros en un archivo de cabecera que podía incluirse varias veces, redefiniendo la macro principal en cada inclusión para producir diferentes versiones del código.</p>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// xmacro.h</span>\n<span class=\"cp\">#define COMPONENTS \\\n    X(int, age)     \\\n    X(char*, name)  \\\n    X(double, salary)\n</span></code></pre></div></div>\n\n<div class=\"language-c highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">\"mac.h\"</span><span class=\"cp\">\n</span>\n<span class=\"c1\">// 1. Definir la estructura usando las X-macros</span>\n<span class=\"cp\">#define X(type, name) type name;\n</span><span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">COMPONENTS</span>\n<span class=\"p\">}</span> <span class=\"n\">Employee</span><span class=\"p\">;</span>\n<span class=\"cp\">#undef X\n</span>\n<span class=\"c1\">// 2. Declarar funciones específicas para imprimir cada campo</span>\n<span class=\"kt\">void</span> <span class=\"nf\">print_age</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"age: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">print_name</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"name: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">print_salary</span><span class=\"p\">(</span><span class=\"kt\">double</span> <span class=\"n\">salary</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"salary: %.2f</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">salary</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 3. Usar X-macros para llamar automáticamente a las funciones de impresión</span>\n<span class=\"cp\">#define X(type, name) print_##name(e.name);\n</span><span class=\"kt\">void</span> <span class=\"nf\">print_employee</span><span class=\"p\">(</span><span class=\"n\">Employee</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">COMPONENTS</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">#undef X\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Employee</span> <span class=\"n\">emp</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"mi\">55000</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">};</span>\n    <span class=\"n\">print_employee</span><span class=\"p\">(</span><span class=\"n\">emp</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Aunque limitada y propensa a errores, esta estrategia fue una solución creativa a la falta de mecanismos más robustos, y se ha usado en tareas como la serialización de estructuras o la generación repetitiva de código.</p>\n\n<p>La evolución hacia C++ introdujo un enfoque más robusto y expresivo para la generación de código: en lugar de depender de las macros del preprocesador — propensas a errores y difíciles de depurar — , el lenguaje apostó por mecanismos estáticos como los templates. Esta decisión, formalizada en el estándar C++98, marcó un hito importante en la historia del lenguaje. Originalmente concebidos por Bjarne Stroustrup a principios de los años 90, los templates surgieron como una extensión natural de la idea de reutilización de código sin sacrificar eficiencia. Esta elección estaba alineada con la filosofía de C++: ofrecer un control fino sobre el rendimiento y el uso eficiente de los recursos.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n</span>\n<span class=\"c1\">// Definición de la clase Persona</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Persona</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">nombre</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">edad</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Sobrecarga del operador &gt;</span>\n    <span class=\"kt\">bool</span> <span class=\"k\">operator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Persona</span><span class=\"o\">&amp;</span> <span class=\"n\">otra</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">edad</span> <span class=\"o\">&gt;</span> <span class=\"n\">otra</span><span class=\"p\">.</span><span class=\"n\">edad</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Plantilla max para comparar dos objetos de cualquier tipo</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"n\">T</span> <span class=\"nf\">max</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    \n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// Comparar enteros</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">2.3</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// Comparar flotantes</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"sc\">'a'</span><span class=\"p\">,</span> <span class=\"sc\">'b'</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// Comparar caracteres</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"s\">\"Hola\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mundo\"</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// Comparar cadenas de caracteres</span>\n\n    <span class=\"c1\">// Crear objetos Persona</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">p1</span><span class=\"p\">{</span><span class=\"s\">\"Ana\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">};</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">p2</span><span class=\"p\">{</span><span class=\"s\">\"Luis\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">};</span>\n\n    <span class=\"c1\">// Usar la plantilla max con objetos Persona</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">mayor</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"La persona mayor es: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">mayor</span><span class=\"p\">.</span><span class=\"n\">nombre</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" con \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">mayor</span><span class=\"p\">.</span><span class=\"n\">edad</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" años.\"</span><span class=\"p\">;</span>\n\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>Un ejemplo sobresaliente del poder de la metaprogramación en C++ es la Standard Template Library (STL). Diseñada hace más de dos décadas, esta biblioteca demostró que es posible construir algoritmos y estructuras de datos altamente reutilizables, seguros y eficientes sin sacrificar rendimiento. Su arquitectura, basada completamente en templates, permite que muchas decisiones se tomen en tiempo de compilación, lo que facilita optimizaciones que en otros lenguajes se delegan al tiempo de ejecución. Gracias a este enfoque, los programadores pueden trabajar con listas, vectores, mapas y muchos otros contenedores de forma abstracta, sin comprometer el control sobre el rendimiento.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;string&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;algorithm&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;map&gt;</span><span class=\"cp\">\n</span>\n<span class=\"c1\">// Clase personalizada</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Persona</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">nombre</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">edad</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Sobrecarga del operador &gt; (requisito para usar con maximo&lt;T&gt;)</span>\n    <span class=\"kt\">bool</span> <span class=\"k\">operator</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Persona</span><span class=\"o\">&amp;</span> <span class=\"n\">otra</span><span class=\"p\">)</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">edad</span> <span class=\"o\">&gt;</span> <span class=\"n\">otra</span><span class=\"p\">.</span><span class=\"n\">edad</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Para usar en búsquedas</span>\n    <span class=\"kt\">bool</span> <span class=\"n\">esMayorDeEdad</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">edad</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">18</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Template genérico como ejemplo de metaprogramación</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"n\">T</span> <span class=\"nf\">maximo</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">T</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Función para imprimir un vector genérico (puede usarse con cualquier tipo imprimible)</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"kt\">void</span> <span class=\"nf\">imprimirVector</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"o\">&amp;</span> <span class=\"n\">titulo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">titulo</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\":</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">elem</span> <span class=\"o\">:</span> <span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"- \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">elem</span><span class=\"p\">.</span><span class=\"n\">nombre</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" (\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">elem</span><span class=\"p\">.</span><span class=\"n\">edad</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" años)</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">p1</span><span class=\"p\">{</span><span class=\"s\">\"Ana\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">};</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">p2</span><span class=\"p\">{</span><span class=\"s\">\"Luis\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">};</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">p3</span><span class=\"p\">{</span><span class=\"s\">\"Carlos\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">};</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">p4</span><span class=\"p\">{</span><span class=\"s\">\"Elena\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">};</span>\n\n    <span class=\"c1\">// Uso del template maximo</span>\n    <span class=\"n\">Persona</span> <span class=\"n\">mayor</span> <span class=\"o\">=</span> <span class=\"n\">maximo</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">);</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Entre \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p1</span><span class=\"p\">.</span><span class=\"n\">nombre</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" y \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">p2</span><span class=\"p\">.</span><span class=\"n\">nombre</span>\n              <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\", el mayor es: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">mayor</span><span class=\"p\">.</span><span class=\"n\">nombre</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" con \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">mayor</span><span class=\"p\">.</span><span class=\"n\">edad</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" años.</span><span class=\"se\">\\n\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// STL: vector y sort con lambda</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Persona</span><span class=\"o\">&gt;</span> <span class=\"n\">personas</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span><span class=\"p\">,</span> <span class=\"n\">p3</span><span class=\"p\">,</span> <span class=\"n\">p4</span><span class=\"p\">};</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">personas</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">personas</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">Persona</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Persona</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">edad</span> <span class=\"o\">&lt;</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">edad</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"n\">imprimirVector</span><span class=\"p\">(</span><span class=\"n\">personas</span><span class=\"p\">,</span> <span class=\"s\">\"Personas ordenadas por edad\"</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Uso de std::find_if para buscar al primer mayor de edad</span>\n    <span class=\"k\">auto</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">find_if</span><span class=\"p\">(</span><span class=\"n\">personas</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">personas</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">Persona</span><span class=\"o\">&amp;</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">esMayorDeEdad</span><span class=\"p\">();</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">it</span> <span class=\"o\">!=</span> <span class=\"n\">personas</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Primera persona mayor de edad: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">it</span><span class=\"o\">-&gt;</span><span class=\"n\">nombre</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// Uso de std::map con string -&gt; Persona</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">map</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">Persona</span><span class=\"o\">&gt;</span> <span class=\"n\">directorio</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">persona</span> <span class=\"o\">:</span> <span class=\"n\">personas</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">directorio</span><span class=\"p\">[</span><span class=\"n\">persona</span><span class=\"p\">.</span><span class=\"n\">nombre</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">persona</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Directorio (map de nombre -&gt; edad):</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"p\">[</span><span class=\"n\">nombre</span><span class=\"p\">,</span> <span class=\"n\">persona</span><span class=\"p\">]</span> <span class=\"o\">:</span> <span class=\"n\">directorio</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">nombre</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" tiene \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">persona</span><span class=\"p\">.</span><span class=\"n\">edad</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" años</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>La STL no solo consolidó el papel de la metaprogramación en el ecosistema de C++, sino que también mostró cómo podía usarse para diseñar software genérico, modular y de alto rendimiento.</p>\n\n<p>Durante mucho tiempo, trabajar con metaprogramación en C++ fue una tarea ardua: los mensajes de error crípticos, la dificultad de depuración y la complejidad sintáctica desalentaban incluso a programadores experimentados. A pesar de la gran utilidad de los templates, las actualizaciones significativas fueron pausadas durante un largo periodo, desde el estándar de 1998 hasta la llegada de C++11 en 2011.</p>\n\n<p>Sin embargo, el lenguaje comenzó a evolucionar de manera más progresiva, incorporando características como auto, decltype, constexpr y variadic templates, que facilitaban la escritura de código genérico más expresivo. Posteriormente, C++14 y C++17 siguieron refinando estas ideas, mientras que C++20 marcó un punto de inflexión con la inclusión de concepts, que aportaron una forma formal y clara de expresar los requisitos de los tipos en las plantillas.</p>\n\n<p>La introducción de concepts en C++20 representó un paso crucial en esta evolución. Inspirados en gran medida por las ideas de Alexander Stepanov, cocreador de la STL, los concepts permiten especificar de forma clara y expresiva qué requisitos debe cumplir un tipo para ser utilizado en una plantilla. Esta abstracción permite escribir código genérico más legible y seguro, con validaciones en tiempo de compilación que antes requerían técnicas mucho más complejas o indirectas. Gracias a herramientas como concepts, la metaprogramación en C++ ha dejado de ser un arte oscuro para convertirse en una práctica más accesible, robusta y expresiva.</p>\n\n<div class=\"language-cpp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;vector&gt;</span><span class=\"cp\">\n#include</span> <span class=\"cpf\">&lt;concepts&gt;</span><span class=\"cp\">\n</span>\n<span class=\"c1\">// Concepto que exige un método miembro `area()` que devuelva un número (real o entero)</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"p\">&gt;</span>\n<span class=\"k\">concept</span> <span class=\"n\">TieneArea</span> <span class=\"o\">=</span> <span class=\"k\">requires</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"p\">}</span> <span class=\"o\">-&gt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">convertible_to</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Función que suma el área de todas las figuras que cumplen con el concepto TieneArea</span>\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"n\">TieneArea</span> <span class=\"n\">T</span><span class=\"p\">&gt;</span>\n<span class=\"kt\">double</span> <span class=\"nf\">area_total</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">figuras</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kt\">double</span> <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"k\">auto</span><span class=\"o\">&amp;</span> <span class=\"n\">figura</span> <span class=\"o\">:</span> <span class=\"n\">figuras</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">total</span> <span class=\"o\">+=</span> <span class=\"n\">figura</span><span class=\"p\">.</span><span class=\"n\">area</span><span class=\"p\">();</span>  <span class=\"c1\">// Se garantiza que existe</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">total</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Clases que implementan el método `area()`</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Rectangulo</span> <span class=\"p\">{</span>\n    <span class=\"kt\">double</span> <span class=\"n\">ancho</span><span class=\"p\">,</span> <span class=\"n\">alto</span><span class=\"p\">;</span>\n    <span class=\"kt\">double</span> <span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">ancho</span> <span class=\"o\">*</span> <span class=\"n\">alto</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Circulo</span> <span class=\"p\">{</span>\n    <span class=\"kt\">double</span> <span class=\"n\">radio</span><span class=\"p\">;</span>\n    <span class=\"kt\">double</span> <span class=\"n\">area</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mf\">3.14159</span> <span class=\"o\">*</span> <span class=\"n\">radio</span> <span class=\"o\">*</span> <span class=\"n\">radio</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Clase que NO implementa `area()` y no cumple el concepto</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Punto</span> <span class=\"p\">{</span>\n    <span class=\"kt\">double</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Rectangulo</span><span class=\"o\">&gt;</span> <span class=\"n\">rectangulos</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"p\">{</span><span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Circulo</span><span class=\"o\">&gt;</span> <span class=\"n\">circulos</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"p\">{</span><span class=\"mf\">1.0</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mf\">2.5</span><span class=\"p\">}</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Área total de rectángulos: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">area_total</span><span class=\"p\">(</span><span class=\"n\">rectangulos</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Área total de círculos: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">area_total</span><span class=\"p\">(</span><span class=\"n\">circulos</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// std::vector&lt;Punto&gt; puntos = { {1.0, 2.0}, {3.0, 4.0} };</span>\n    <span class=\"c1\">// area_total(puntos);  // Error de compilación: Punto no tiene `area()`</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>Además, de cara a C++26, se contempla la incorporación de mecanismos de reflexión estática, una capacidad largamente esperada que permitiría inspeccionar y manipular tipos y estructuras del programa durante la compilación. Esta funcionalidad ampliaría aún más el poder de la metaprogramación en C++, facilitando tareas como la generación automática de código, la serialización de objetos o la validación estructural sin recurrir a macros o técnicas intrusivas.</p>\n\n<p>La metaprogramación en C++ ha evolucionado de forma notable: desde los ingeniosos — aunque limitados — usos del preprocesador, hasta un presente donde los templates, concepts y la futura incorporación de reflexión estática conforman un ecosistema cada vez más potente, seguro y expresivo. Lejos de ser una técnica reservada a expertos, hoy se consolida como una herramienta estratégica para escribir código genérico, reutilizable y eficiente. Comprender esta evolución no solo permite valorar mejor el diseño del lenguaje, sino también adoptar una perspectiva más madura sobre cómo abstraemos y optimizamos nuestros programas. En última instancia, Metaprogramación en C++ es ampliar los límites de lo que podemos construir con precisión, elegancia y control.</p>\n",
      "date_published": "Thu, 17 Apr 2025 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2025/02/23/resena-del-libro-deep-learning-de-mit-essential-knowledge-series.html",
      "url": "https://blog.thedojo.mx/2025/02/23/resena-del-libro-deep-learning-de-mit-essential-knowledge-series.html",
      "title": "Reseña del libro 'Deep Learning' de MIT Press Essential Knowledge Series",
      "content_html": "<p>La serie <strong>The MIT Press Essential Knowledge Series</strong> es una serie de libros de introducción\na diferentes temas interesantes y actuales, sobre todo de ciencia y tecnología.</p>\n\n<p>Me gustan mucho porque son lo suficientemente introductorios para que cualquiera\nsin conocimiento previo del tema específico pueda introducirse, pero lo suficientemente\ncompletos para salir con una buena visión general de ese tema específico.</p>\n\n<p>El libro del que quiero hablar es de un tema que se ha vuelto cada vez más importante,\nel <strong>Deep Learning</strong>.</p>\n\n<h2 id=\"reseña-del-deep-learning-de-john-d-kelleher\">Reseña del Deep Learning de John D. Kelleher</h2>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1740318616/Deep_learning_csd5gy.jpg\" alt=\"Portada del libro Deep Learning de John D. Kelleher\" class=\"align-center\" /></p>\n\n<p>En este libro empezarás desde la introducción a lo que llamamos inteligencia artificial,\nmachine learning y finalmente deep learning, junto con los efectos que ha tenido en el mundo.</p>\n\n<p>Me gusta mucho que el libro te explica en términos simples la base matemática que sustenta\ntodo lo que hacemos con los modelos y te aclara los términos que se escuchan por todos lados\nsin ser tan difícil de entender. Por ejemplo:</p>\n\n<ul>\n  <li>Te aclara que un <strong>modelo</strong> es una función en el sentido matemático y te explica cuál es el\ntrabajo del entrenamiento para llegar a ese modelo</li>\n  <li>Explica lo que es el <strong>aprendizaje</strong> y la <strong>experiencia</strong></li>\n  <li>Aclara qué es un <strong>parámetro</strong></li>\n  <li>Deja muy claros los pasos de <strong>entrenamiento</strong> e <strong>inferencia</strong></li>\n</ul>\n\n<p>Después de poner las cartas sobre la mesa respecto términos y definiciones, se pasa a hablar\nde la historia de la inteligencia artificial y cómo es que llegamos <em>casi</em> hasta donde estamos\nahora, porque este libro se escribió antes del boom de los LLMs, pero viéndolo desde nuestra\nperspectiva te puedes dar cuenta de lo mucho que sabe el autor del tema porque ya menciona\na los transformadores (la base de los LLMs modernos) como un tipo de modelo de Deep Learning importante.</p>\n\n<p>Después de esto, pasa a explicar cómo se entrena a un perceptrón, o un modelo de una neurona,\npara que puedas entender el procedimiento básico y después pasar a los modelos que son\nel centro del libro: los modelos profundos.</p>\n\n<p>En este libro aprenderás que el deep learning es simplemente una forma de entrenar modelos\nque están compuestos por varias capas de neuronas, y que es un campo en sí mismo porque\nestos modelos no son tan fáciles de entrenar e incluso requieren matemáticas específicas y\ntécnicas que han ido surgiendo con la prueba y el error.</p>\n\n<p>El libro te explica dos algoritmos esenciales en el deep learning:</p>\n\n<ul>\n  <li>El descenso de gradiente (gradient descent)</li>\n  <li>El algoritmo de retropropagación (backpropagation)</li>\n</ul>\n\n<p>Esta es la parte más pesada del libro respecto a matemáticas, incluso dice que te la puedes\nleer por encima si te cuestan mucho trabajo, pero que también puedes comprobar por ti\nmismo las matemáticas que te explica. Aquí es justo donde digo que esta serie profundiza\nlo suficiente para no sentirse como un libro sin profundidad que es la pura introducción.</p>\n\n<p>El libro finaliza con un análisis de lo que el autor considera lo que sigue para el deep learning\ny la inteligencia artificial en general, como la explicabilidad, la eficiencia, el cómputo\nespecializado en imitar el cerebro, los transformadores (BERT), etc.</p>\n\n<p>Espero que este resumen te de una idea de lo que trata el libro.</p>\n\n<h2 id=\"conclusión-y-opinión\">Conclusión y opinión</h2>\n\n<p>Si te quieres entender de manera un poco más profunda cómo funcionan las redes\nneuronales en general y los detalles de las redes neuronales profundas, este\nlibro es una excelente introducción, porque incluso te da un viaje por las matemáticas\ndetrás del entrenamiento de los modelos que usamos diariamente.</p>\n\n<p>Como se escribió en 2019, no te habla de LLMs o cosas similares, pero sí de las\nbases que les permitieron nacer: el transformador. Incluso menciona cosas no tan\nfamosas, como la computación neuromórfica, de la que no dudo que pueda\ntener relevancia en el futuro, o impactar en nuevas tecnologías y nuevas formas\nde crear inteligencia artificial.</p>\n\n<p>Por su extensión, además, es un libro que vale la pena. Es cierto que se podría\nmejorar un poco en la forma de escribirlo, pero no es algo que te vaya a impedir\nextraer la información relevante.</p>\n\n<p>Si tienes bases de matemáticas de nivel preparatoria, en la que entiendes el\nálgebra y un poco de cálculo, estás del otro lado para entender este libro.\nSi no, puedes saltarte los capítulos matemáticos y leer todo lo demás para\npara darte una idea superficial del tema de Deep Learning y cómo puedes\nempezar a aprender la parte más técnica e incluirlo en tus desarrollos.</p>\n\n<p>Eso sí, este libro no tiene ni una línea de código, es un libro completamente\nconceptual para entender la bases antes de aventarnos de cabeza a la programación.</p>\n",
      "date_published": "Sun, 23 Feb 2025 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/12/30/un-concepto-importante-los-buffers.html",
      "url": "https://blog.thedojo.mx/2024/12/30/un-concepto-importante-los-buffers.html",
      "title": "Un concepto importante: los buffers",
      "content_html": "<p>El concepto de buffer es usado por todos lados en el desarrollo de software, pero siento\nque es un concepto poco entendido. En este artículo vamos a hablar de qué son los buffers,\npara qué se usan y cómo pueden ayudarte a resolver problemas y diseñar mejor software.</p>\n\n<h2 id=\"qué-es-un-buffer\">¿Qué es un buffer?</h2>\n\n<p>Primero hablemos de dónde viene la idea de los buffers. Un buffer es un concepto importante en\nteoría de sistemas. Los buffers se utilizan para almacenar temporalmente datos, asegurando que\neventualmente lleguen a su destino final. Esto ocurre a una velocidad o ritmo diferente al\nque fueron generados originalmente.</p>\n\n<p>Traducir la palabra <em>“buffer”</em> es difícil, porque no hay un concepto en español que abarque\ntodos los usos que se le dan en el desarrollo de software.Algunos ejemplos de uso de buffers en el desarrollo de software son:</p>\n\n<ul>\n  <li>Amortiguador</li>\n  <li>Almacén temporal</li>\n  <li>Memoria intermedia</li>\n  <li>Regulador</li>\n</ul>\n\n<p>Esta última palabra te puede empezar a sonar, ya que en el desarrollo de software usamos\nlos buffers para <em>regular</em> el flujo de datos entre diferentes sistemas o componentes.\nLos buffers causan retrasos intencionales en el flujo de datos.</p>\n\n<p>Empecemos a hablar de cómo se usan en el desarrollo de software.</p>\n\n<h2 id=\"buffers-en-acción\">Buffers en acción</h2>\n\n<p>Estos son algunos ejemplos de este concepto que seguro conoces o has visto aplicados en\nsoftware. Recuerda que lo que estamos buscando entender es el concepto, por lo que vamos a\nexplicar cómo el ejemplo es un buffer, pero no vamos a entrar en detalles de la implementación.</p>\n\n<h3 id=\"escritura-en-archivos\">Escritura en archivos</h3>\n\n<p>Cuando escribimos en un archivo, los sistemas operativos usan buffers para guardar los datos\nen memoria antes de escribirlos en su destino final, ya que si escribiera directamente en el disco\nbyte por byte, sería muy lento. Además, escribir directamente en el disco por cada byte que un\nprograma mande a escribir causaría problemas de estabilidad y rendimiento. Aquí no tenemos que\nexplicar mucho por qué un buffer, ya que es el ejemplo más común. Incluso en varios lenguajes\nde programación los objetos que se usan para escribir en los archivos tienen “Buffer” o “Buffered”\nen su nombre.</p>\n\n<h3 id=\"uso-de-servicios-remotos\">Uso de servicios remotos</h3>\n\n<p>Usar un servicio o una función a través de la red (un servicio remoto) es costoso en tiempo\ny recursos en comparación con cualquier cálculo local que se haga. Por eso es buena idea\nusar buffers para guardar información antes de hacer una llamada a un servicio remoto.\nPor ejemplo, en desarrollo web, cuando se hace un auto-completado o búsqueda mientras se sigue\nescribiendo, el programa espera a que el campo tenga un número de caracteres para hacer\nuna llamada al servicio de búsqueda que pueda tener sentido.</p>\n\n<h3 id=\"caching\">Caching</h3>\n\n<p>Este ejemplo no podía faltar. El caché es un tipo de buffer que guarda información <em>temporalmente</em>\ncon varios objetivos:</p>\n\n<ol>\n  <li>Ahorrar cómputo</li>\n  <li>Acelerar el acceso a la información</li>\n  <li>Evitar la sobrecarga de los recursos</li>\n</ol>\n\n<p>Como sabemos, lo más difícil del cachee es decidir primero qué guardar y luego cómo\nrefrescarlo para que se no sea obsoleto.</p>\n\n<h3 id=\"buffering-de-contenido-multimedia\">Buffering de contenido multimedia</h3>\n\n<p>Debido a que el contenido multimedia es muy pesado, un buen reproductor o sistema de streaming\ncasi siempre incluye un buffer que va descargando el contenido a mayo velocidad y un poco\nadelantado para tener un reproducción fluida. Si no lo incluimos, estamos a merced de la velocidad\ny las intermitencias de la red.</p>\n\n<h2 id=\"cómo-pueden-ayudarte-a-diseñar-mejor-software\">¿Cómo pueden ayudarte a diseñar mejor software?</h2>\n\n<p>Escribir software usando buffers es más complejo que hacerlo sin ellos, ya que son una pieza más\nque puede causar problemas y que en algún momento vas a tener que depurar. Pero los buffers complican\nel código y las pruebas de software, son indispensables para el buen rendimiento y la estabilidad de los\nsistemas. Incluso algunos lenguajes de programación como Java, tienen buffers incorporados en su\nlibrería estándar.</p>\n\n<p>Recuerda, usar buffers te va a ayudar a escribir software:</p>\n\n<ul>\n  <li>Más estable</li>\n  <li>Con mejor rendimiento</li>\n  <li>Más resiliente</li>\n  <li>Más eficiente</li>\n</ul>\n\n<p>Así que te conviene buscar oportunidades para usarlos lo mejor posible.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Los buffers son interesantes. Son una herramienta poderosa que puedes usar para resolver\nproblemas con mejor calidad y que te permiten crear características arquitectónicas\ndeseables, a costa de hacer el código un poco más complejo. Sin embargo, si los ocultas\ncorrectamente detrás de interfaces efectivas, los documentas bien y los pruebas,\nte ayudarán mucho.</p>\n",
      "date_published": "Mon, 30 Dec 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/11/23/que-son-los-requerimientos-funcionales.html",
      "url": "https://blog.thedojo.mx/2024/11/23/que-son-los-requerimientos-funcionales.html",
      "title": "¿Qué son los requerimientos funcionales?",
      "content_html": "<p><strong>“Requerimientos funcionales”</strong> es una expresión muy rebuscada para un concepto\nmuy sencillo relacionado con el diseño de los sistemas de software: <strong>las\ncosas que tu sistema HACE</strong>.</p>\n\n<p>En este artículo hablaremos de formas de encontrarlos, definirlos, documentarlos\ny tenerlos listos para la siguiente etapa del desarrollo de software.</p>\n\n<h2 id=\"cómo-definir-las-funciones-de-un-sistemas\">Cómo definir las funciones de un sistemas</h2>\n\n<p>La primera tarea como arquitecto de software tiene que ver con la de\n<strong>entender completamente</strong> lo que el software tiene que HACER. El software\nnormalmente tiene unas pocas funciones principales, pero muchas tareas\nsecundarias o terciarias que las soportan, y es por eso que descubrirlas\ny describirlas todas no es una tarea sencilla.</p>\n\n<h2 id=\"cómo-encontrarlos\">Cómo encontrarlos</h2>\n\n<p>La forma más eficiente de encontrar los requerimientos funcionales o funciones\nque debe tener tu sistema es viviendo el proceso o problema que tu sistema va a\nresolver. Es por esto que algunos de los mejores sistemas son creados por gente\nque “se rasca su propia comezón” (<em>“scratch their own itch”</em>). Es decir, que\nresuelven un problema que ellos mismos viven o han vivido, y que por eso\nmismo <strong>entienden a fondo</strong>.</p>\n\n<p>Una de las ventajas de atender un problema que tú vives, es que tienes\nretroalimentación inmediata sobre si el sistema resuelve el problema o no.</p>\n\n<p>Pero esto no siempre es posible, sobre todo cuando construyes software como\nprofesión, porque no siempre puedes dedicar tiempo y recursos suficientes para\ntú realizar la operación de lo que quieres resolver, o simplemente no es práctico.\nAsí que la segunda mejor opción que tenemos es <strong>platicar con los usuarios</strong>.</p>\n\n<p>Aquí es donde entran un montón de habilidades “blandas”. Un mejor nombre para estas\nhabilidades es <em>“habilidades personales e interpersonales”</em>. O habilidades básicas\nhumanas. Así que, a menos que tengas a alguien en tu equipo que lo haga por ti,\n(y que siempre vaya a estar contigo), te conviene desarrollarlas.</p>\n\n<h2 id=\"cómo-documentarlos\">Cómo documentarlos</h2>\n\n<p>No existe una forma aceptada por todos para documentar nada en el software,\ndependiendo de la cultura del equipo y de la empresa en general. Veamos algunas\nde las formas más comunes. Cabe mencionar que estas formas no son excluyentes,\nse pueden combinar para ver diferentes aspectos de una misma función.</p>\n\n<h3 id=\"historias-de-usuario\">Historias de Usuario</h3>\n\n<p>En este estilo de documentación, describes las funciones del sistema desde la\nperspectiva del usuario. Se lleva muy bien con procesos modernos de desarrollo de\nproductos digitales, relacionados con el desarrollo ágil de software.</p>\n\n<p>Tienen el siguiente formato:</p>\n\n<ul>\n  <li>Como [rol de usuario]</li>\n  <li>Quiero [acción/función]</li>\n  <li>Para [beneficio/valor]</li>\n</ul>\n\n<p>Como puedes ver, antes de empezar a crear historias de usuario, debes por lo menos\ntener un idea de las personas que van a usar el sistema y lo roles que desempeñan.\nDespués, describes la función que va a realizar, desde su punto de vista, pero\ntambién intentando mostrar cómo funcionará internamente el sistema para cumplir\ncon esa función.</p>\n\n<p>Y finalmente, la razón de existencia de esta función: cómo es que beneficia al usuario\no la empresa que crea el software. Esta última parte es muy importante, ya que nos\nhace pensar en si realmente es necesario tener esta función o no.</p>\n\n<h3 id=\"casos-de-uso\">Casos de Uso</h3>\n\n<p>Este tipo de documentación viene de la época en la que se prefería el desarrollo en cascada,\npero a mi me sigue pareciendo muy útil. Es más formal y detallada, incluye:</p>\n\n<ul>\n  <li>Actores (usuarios o sistemas externos) involucrados</li>\n  <li>Flujo principal: el caso en el que todo sale bien</li>\n  <li>Flujos alternativos: los casos en los que algo sale mal o se manejan de otra manera</li>\n  <li>Precondiciones y postcondiciones: cómo está el sistema antes y después de la ejecución</li>\n</ul>\n\n<p>En muchos sistemas de documentación, los casos de uso requieren un identificador para\nreferirse a ellos en etapas posteriores, como cuando se hacen pruebas o se crean\ntareas específicas para el equipo de desarrollo.</p>\n\n<p>Los recomiendo mucho en el caso de sistemas o funciones críticas, en donde es\nnecesario pensar más a profundidad antes de empezar a desarrollar.\nPuedes encontrar un ejemplo y una plantilla aquí:\n<a href=\"https://lsi2.ugr.es/~mvega/docis/casos%20de%20uso.pdf\">Casos de uso</a>.</p>\n\n<h2 id=\"cómo-mantenerlos-actualizados\">Cómo mantenerlos actualizados</h2>\n\n<p>El software es dinámico, y no basta con definir o documentar cómo funciona una\nsola vez, tenemos que mantener actualizadas las funciones documentadas del\nsistema o agregar nuevas conforme vayan apareciendo.</p>\n\n<p>Aquí tienes algunas sugerencias para mantener actualizados los requerimientos:</p>\n\n<h3 id=\"revisar-y-actualizar\">Revisar y actualizar</h3>\n\n<p>Si tienes suficiente personal, siempre debería haber un owner de la documentación\ny esta persona debería revisar y asegurarse que los diferentes miembros del equipo\nmantengan actualizadas las funciones documentadas y documenten las nuevas.</p>\n\n<h3 id=\"control-de-versiones\">Control de versiones</h3>\n\n<p>Es buena idea mantener los documentos de requerimientos bajo control de versiones,\nigual que el código. De hecho, una de las mejores formas de hacer documentación es\ntratarla exactamente como código, como se sugiere en <a href=\"https://www.writethedocs.org/guide/docs-as-code/\">Docs as Code</a>.</p>\n\n<p>Cada cambio debería ir acompañado de:</p>\n\n<ul>\n  <li>Fecha del cambio</li>\n  <li>Razón del cambio</li>\n  <li>Persona responsable</li>\n  <li>Impacto en el sistema</li>\n</ul>\n\n<h3 id=\"trazabilidad\">Trazabilidad</h3>\n\n<p>Puedes mantener una matriz de trazabilidad que conecte los requerimientos con:</p>\n\n<ul>\n  <li>El código que los implementa</li>\n  <li>Las pruebas que los verifican</li>\n  <li>Otra documentación relacionada</li>\n</ul>\n\n<p>Para que esta matriz sea útil, se debe de incluir su actualización en el proceso\nde desarrollo y considerarse dentro de la definición de “terminado” de una tarea (<em>definition of done</em>).\nEsto es buena idea sólo si tienes un equipo grande y un proyecto complejo, ya que requiere\nbastante trabajo en sí mismo.</p>\n\n<h3 id=\"comunicación-efectiva\">Comunicación efectiva</h3>\n\n<p>Esto es esencial para todos los procesos de desarrollo de software, pero debes asegurarte\nque mientras más avance tu proyecto y más gente se involucre, más se haga:</p>\n\n<ul>\n  <li>Que todos los cambios en los requerimientos sean comunicados a equipo de desarrollo y puestos en un documento que los describa</li>\n  <li>Que las personas involucradas en el proyecto sepan de los cambios y sientan que su voz es escuchada, también registrando sus comentarios y sugerencias</li>\n</ul>\n\n<p>Es importante dejar la registro de la comunicación y las decisiones tomadas para que el\nconocimiento del software sea accesible para todos.</p>\n\n<h3 id=\"una-alternativa-design-documents\">Una alternativa: Design Documents</h3>\n\n<p>Los Design Documents son documentos que se usan en algunas big techs para documentar cómo se\nva implementar una función. Como es natural, estos documentos son bastante técnicos y\nalgo tardados, pero incluyen por lo menos una descripción de la función que se quiere\nimplementar y <em>cómo se va a implementar</em>.</p>\n\n<p>Están pensados para obtener consenso sobre la forma en la que se va a hacer algo y\nson una buena idea si tienes un equipo de desarrollo maduro que puede llegar rápido\na compromisos para lograr implementar algo.</p>\n\n<p>Un conjunto histórico de estos documentos, puede ser una buena alternativa para\ndocumentar los requerimientos funcionales de un sistema.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Entender lo que necesitamos que haga nuestro software es el primer paso para crear\nsoftware útil. Los requisitos funcionales o funciones y su documentación son una herramienta\npara mantener un registro histórico y asegurarnos de que entendemos lo que se requiere.\nEsto también puede servir para obtener aprobación de las personas interesadas en que\nel software se realice y evitar malentendidos en el futuro.</p>\n\n<p>También facilitan la estimación de recursos y tiempos, y permiten un desarrollo más eficiente\ny enfocado. Finalmente, mejoran la comunicación entre todas las partes involucradas.</p>\n\n<p>Es importante dedicar el tiempo y esfuerzo necesarios para documentarlos adecuadamente\n(en mi opinión más como una herramienta de entendimiento que como una obligación) y mantenerlos\nactualizados durante la vida del proyecto. Un sistema bien diseñado comienza con funciones\nbien definidas, entendidas y gestionadas.</p>\n",
      "date_published": "Sat, 23 Nov 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/10/31/que-es-la-programacion-asincrona.html",
      "url": "https://blog.thedojo.mx/2024/10/31/que-es-la-programacion-asincrona.html",
      "title": "¿Qué es la programación asíncrona?",
      "content_html": "<p>La programación asíncrona es uno de los primeros temas avanzados que encontrarás\nal programar, especialmente si desarrollas aplicaciones web. Esto es aún más\ncomún si haces <strong>JavaScript</strong>, que es un lenguaje que se usa en entornos de\nejecución asíncronos.</p>\n\n<p>En este artículo la explicaremos para que puedas programar de manera asíncrona\ncon seguridad.</p>\n\n<h2 id=\"por-qué-existe---el-caso-de-la-programación-asíncrona\">¿Por qué existe? - El caso de la programación asíncrona</h2>\n\n<p>Imagínate un proceso de la vida real en el que tengas una conjunto de recursos\nlimitados, que sean completamente necesarios para terminar el trabajo. Por ejemplo,\nimagina que quieres hacer una comida especial, en la que necesitas usar un horno.\nEn el horno puedes poner un platillo a la vez, ya que requiere un tiempo y temperatura\nespecífica. Pero este platillo especial tal vez va acompañado de una sopa que puedes\nhacer mientras el platillo principal está en el horno.</p>\n\n<p>En términos computacionales, estas dos tareas están sucediendo de manera concurrente,\naunque tú literalmente no estés haciendo ambas cosas al mismo tiempo. No vale la pena que\nte sientes a esperar a que el lomo del horno esté listo para empezar a hacer la sopa.\nPuedes hacer la sopa mientras esperas, ya que no ocupan los mismos recursos.</p>\n\n<p>Exactamente pasa lo mismo en los programas de computadora, se tienen que ejecutar tareas\nque usan recursos compartidos o lentos, como por ejemplo el sistema de archivos o la red.\nEn la programación web también se da que el programa está esperando la respuesta de el\nusuario y mientras tanto puede seguir haciendo otras cosas. Aquí es donde entra la programación\nasíncrona.</p>\n\n<h2 id=\"qué-es-la-programación-asíncrona\">¿Qué es la programación asíncrona?</h2>\n\n<p>Para entenderla primero tenemos que entender la programación tradicional o\nsíncrona (creo que la palabra correcta en español es <em>sincrónica</em>).</p>\n\n<p>En la programación tradicional, las cosas siempre suceden en un orden estricto:\nuna instrucción empieza y hasta que no se termina, no se ejecuta la siguiente.\nObserva el siguiente código, en Python, para a abrir un arhivo:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">with</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">archivo.txt</span><span class=\"sh\">\"</span><span class=\"p\">,</span> <span class=\"sh\">\"</span><span class=\"s\">r</span><span class=\"sh\">\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nb\">file</span><span class=\"p\">:</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">file</span><span class=\"p\">.</span><span class=\"nf\">read</span><span class=\"p\">()</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Archivo leído</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sh\">\"</span><span class=\"s\">Log final</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>El resultado de este código es:</p>\n\n<pre><code class=\"language-log\">Archivo leído\nLog final\n</code></pre>\n\n<p>En este código todo sucede de manera perfectamente secuencial.</p>\n\n<p>Pero en lenguajes con programación asíncrona, esta operación que es tardada\nen términos computacionales se puede hacer de manera asíncrona, es decir\nfuera de orden.</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">fs</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nf\">readFile</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">archivo.txt</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">utf8</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Archivo leído</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Esperando a que se lea el archivo</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>El resultado de este código es:</p>\n\n<pre><code class=\"language-log\">Esperando a que se lea el archivo\nArchivo leído\n</code></pre>\n\n<p>Observa cómo en esta versión, el código que está ANTES: <code class=\"language-plaintext highlighter-rouge\">console.log(\"Archivo leído\")</code>,\nse ejecuta DESPUÉS. Esto es una demostración de código asíncrono.</p>\n\n<p>La explicación a esto está en que con la programación asíncrona podemos modificar\n<strong>cuándo se ejecutan las cosas</strong>. Pero otra visión es que se pueden ejecutar cosas\nen diferentes “lados” o “momentos” y tú elegir <strong>cuándo</strong> usas los resultados de\nla ejecución.</p>\n\n<p>Usamos este ejemplo de abrir un archivo porque por su naturaleza es lento (comparado)\ncon cálculos u operaciones comunes.</p>\n\n<p>La <strong>programación asíncrona</strong> es un forma de ejecutar las acciones de tu programa en\nla que no se espera siempre que una acción o instrucción termine para continuar\ncon el programa.</p>\n\n<p>Como vimos en el primer ejemplo, en la programación síncrona (también llamada\n<em>bloqueante</em> [blocking]), ninguna acción comienza hasta que le previa haya terminado.\nEn la programación asíncrona, con técnicas o palabras reservadas específicas le\nindicamos al motor de ejecución que no es necesario a que una acción termine para\ncontinuar con la siguiente, pero también le podemos decir qué hacer cuando la\nacción termine. Por esto mismo, la programación asíncrona también se conoce como\n<em>no bloqueante</em> (non-blocking).</p>\n\n<h2 id=\"para-qué-sirve-la-programación-asíncrona\">Para qué sirve la programación asíncrona</h2>\n\n<p>Veamos las restricciones que tenemos, para entender por qué es útil. Cuando\ncreas un sistema, la velocidad de ejecución puede verse limitada por dos\ncategorías de cosas:</p>\n\n<ul>\n  <li>De los cálculos que estás haciendo</li>\n  <li>De la información que estás obteniendo o guardando en algún lugar</li>\n</ul>\n\n<p>En el primer caso, llamamos a la ejecución <strong>CPU bound</strong> y en el segundo <strong>I/O bound</strong>.\nEn español me gusta llamarle <strong>limitado por el procesador</strong> y <strong>limitado por la entrada\ny salida de datos</strong>.</p>\n\n<h3 id=\"cpu-bound---limitado-por-la-cantidad-de-cálculos-que-puedes-hacer\">CPU bound - limitado por la cantidad de cálculos que puedes hacer</h3>\n\n<p>Cuando tu programa es pesado en los cálculos que tiene que hacer, como cuando\ntienes que procesar multimedia, hacer multiplicación de matrices o cosas\nsimilares, puedes decir que tu programa es <strong>CPU bound</strong>, o que está limitado por\nel poder de procesamiento. Es decir, mientras más poderoso sea el procesador,\nmás rápido será tu programa. Esto también es cierto si tienes múltiples\nprocesadores <em>y puedes distribuir el cómputo entre ellos</em>, por ejemplo:</p>\n\n<ul>\n  <li>Si tienes un procesador con múltiples cores o múltiples hilos de ejecución físicos</li>\n  <li>Si tienes múltiples computadoras en una red</li>\n</ul>\n\n<p>En el primer caso, necesitas una plataforma que te ayude a utilizar el poder\nde procesamiento de los múltiples cores, sea implícitamente o explícitamente. Por\nejemplo plataformas como la <strong>máquina virtual de Erlang</strong> (llamada BEAM), automáticamente distribuyen\nla carga en los múltiples cores disponibles. En otros lenguajes como en Python,\ntienes que hacerlo explícitamente, pero incluso eso tiene limitaciones. Pero\nesto que te estoy diciendo es <strong>programación concurrente</strong>.</p>\n\n<p>La programación asíncrona se puede ver como una herramienta para manejar la\nprogramación concurrente y hacerla más sencilla. Piénsala como en una capa de\nabstracción sobre la programación concurrente, que te permite <strong>expresar de forma\nexplícita</strong> que otras partes del programa <em>pueden</em> estarse ejecutando en otro\ntiempo o en otro <em>espacio</em> (proceso o hilo).</p>\n\n<h3 id=\"io-bound---limitado-por-la-velocidad-de-entrada-y-salida-de-datos\">I/O bound - limitado por la velocidad de entrada y salida de datos</h3>\n\n<p>Cuando un programa consume o produce mucha información tiene que\nponerla en algún lugar. Este lugar puede ser:</p>\n\n<ul>\n  <li>La memoria RAM</li>\n  <li>El disco duro (o sistema de archivos)</li>\n  <li>La red (mandarla o pedirla a otra computadora)</li>\n</ul>\n\n<p>Cuando tu programa hace mucho esto, se dice que el programa está limitado por la\nvelocidad de entrada y salida de datos, o <strong>I/O bound</strong>.</p>\n\n<p>La programación asíncrona te puede ayudar de manera más sencilla, sobre todo en\nel caso de las peticiones de red. ¿Cómo? Justo en el ejemplo que vimos antes de abrir\nun archivo: mientras esperas a que el disco duro lea el archivo y lo mande por el bus\nde datos y se cargue en la memoria RAM (que son AÑOS computacionalmente hablando),\npodemos seguir haciendo otras cosas. Igual que en el caso anterior, estos procesos\nson concurrentes, y una de las maneras más sencillas de expresarlo es con la programación\nasíncrona, en el que simplemente decimos que en algún momento <em>podemos</em> usar el resultado\nde la lectura del archivo.</p>\n\n<p>Exactamente pasa lo mismo en el caso de las peticiones de red (que son EONES comparadas con\nla lectura de archivos o cálculos comunes). De hecho, el manejo de esas peticiones y de\ntodo lo relacionado con entrada y salida de datos es uno de los secretos de por qué\nNode.js es tan bueno para manejar peticiones HTTP.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Entender la programación asíncrona es esencial en la programación moderna, muchos\nlenguajes y sobre todo <em>entornos de ejecución</em> lo implementan. Entenderla y usarla\nte ayudará a crear programas más eficientes y que cumplan con el rendimiento que\ntus usuario esperan. En un artículo futuro veremos una comparación entre programación\nasíncrona y programación concurrente manejada de otras maneras.</p>\n",
      "date_published": "Thu, 31 Oct 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/10/26/que-es-la-busqueda-binaria.html",
      "url": "https://blog.thedojo.mx/2024/10/26/que-es-la-busqueda-binaria.html",
      "title": "¿Qué es la búsqueda binaria?",
      "content_html": "<p>Uno de los algoritmos más fáciles de entender, que incluso sin preparación\naplicamos en la vida real y que se enseña en las primeras clases de programación\nes la <strong>búsqueda binaria</strong>. Vamos a hablar de este algoritmo y su relación\nprofunda con las ciencias de la computación y la información en general.</p>\n\n<h2 id=\"búsqueda-binaria-en-la-vida-real\">Búsqueda binaria en la vida real</h2>\n\n<p>¿Alguna ves has jugado “Adivina Quién”? Es un juego de mesa en el\nque cada jugador tiene un tablero con un conjunto de personajes con\ncaracterísticas físicas distintas, como el color de pelo, diferentes\naccesorios, y otros rasgos distintivos. Cada jugador escoge secretamente\nun personaje y el otro lo tiene que adivinar, haciendo preguntas que\nle permitan ir eliminando a los personajes que el otro jugador no ha elegido.\n¿Cuál es la mejor estrategia para adivinar con la menor cantidad de\npreguntas? Podrías pensar que es por cosas muy distintivas, por ejemplo,\nsi hay dos personajes con sombrero, y preguntas si tiene sombrero, puede\nparecer una buena estrategia, pero no lo es.</p>\n\n<p>En este caso, suponiendo que tenemos 40 personajes y solo dos tienen sombrero y\nsuponiendo que tienes 40 personajes, sólo 5% de las veces te ayudará reducir\nsignificativamente el número de personajes, por lo que la mayoría de las veces\nserá una pregunta extra si la haces inicialmente. Lo mejor es empezar por las\ncaracterísticas que dividan el conjunto de personajes en dos grupos más o menos\niguales. Por ejemplo, si hay 40 personajes y 20 tienen el pelo largo y 20 el corto,\nla pregunta si el personaje tiene el pelo largo, te dejará con 20 personajes.\nLa siguiente pregunta debería ser algo similar.</p>\n\n<p>Esto es exactamente lo que hace la búsqueda binaria, ir partiendo el conjunto\nde elementos en dos grupos más o menos iguales e ir eliminando la mitad en cada\npaso.</p>\n\n<h2 id=\"búsqueda-binaria-en-la-computación\">Búsqueda binaria en la computación</h2>\n\n<p>El algoritmo de búsqueda binaria se aplica para encontrar un valor en una\ncolección <em>ordenada</em> de elementos. Esto es para tener una forma sencilla de\neliminar la mitad del espacio de búsqueda en cada paso. Y puedes pensar justamente\nque la necesidad de tener que ordenar los elementos es precisamente una de sus\ndes</p>\n\n<h2 id=\"implementación-en-pseudocódigo\">Implementación en pseudocódigo</h2>\n\n<p>Aquí puedes ver una implementación de la búsqueda binaria en pseudocódigo:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>búsqueda_binaria(arreglo, elemento_buscado):\n    inicio = 0\n    fin = longitud(arreglo) - 1\n    mientras inicio &lt;= fin:\n        medio = (inicio + fin) // 2  # división entera\n\n        si arreglo[medio] == elemento_buscado:\n            retornar medio\n        sino si arreglo[medio] &lt; elemento_buscado:\n            inicio = medio + 1\n        sino:\n            fin = medio - 1\n    retornar -1  # Elemento no encontrado\n</code></pre></div></div>\n\n<p>En pocas palabras, nombramos dos índices, <code class=\"language-plaintext highlighter-rouge\">inicio</code> y <code class=\"language-plaintext highlighter-rouge\">fin</code>, que van a ser\nlos que nos dicen en qué parte vamos a buscar. Después, calculamos el centro\nde la lista, sumando el inicio y el fin y dividiendo entre dos. Otra forma de\ncalcularlo sería restando el inicio y el fin, dividiendo entre dos y sumándole\nel inicio. Estas dos formas son equivalentes.</p>\n\n<p>Ahora, comparamos el elemento buscado con el elemento en el centro. Si es igual,\nhemos encontrado el elemento y terminamos. Si es menor, tenemos que agarrar \nla parte de la lista que está a la derecha, es decir, los elementos mayores.\nPara esto, el inicio es un elemento a la derecha del medio (<code class=\"language-plaintext highlighter-rouge\">inicio = medio + 1</code>)\ny el fin se queda igual. Si el elemento buscado es mayor, tenemos que agarrar\nla parte de lista que está a la izquierda, y ahora el que cambia es el fin.</p>\n\n<p>De esta manera, en cada paso nuestro espacio de búsqueda se reduce a la mitad.</p>\n\n<p>Si llegamos a un punto en el que el inicio es mayor que el fin, entonces no\nencontramos el elemento y retornamos -1 (el -1 es una forma de que el\nprograma nos diga que no encontramos el elemento, muy usada en programación).</p>\n\n<h2 id=\"complejidad\">Complejidad</h2>\n\n<p>Con un arreglo pequeño pensarás que la búsqueda binaria es más lenta una búsqueda\naleatoria o secuencial y así es, pero recuerda que los algoritmos eficientes\nse notan cuando el tamaño de los datos crece.</p>\n\n<p>Al ir cortando sucesivamente a la mitad el espacio de búsqueda, la complejidad\nde la búsqueda binaria crece en forma logarítmica.</p>\n\n<p>Expliquemos un poco eso. Un logaritmo es la función que nos ayuda a encontrar\nel exponente al que hay que elevar un número para obtener otro. En la búsqueda\nbinaria, el número que queremos “obtener” (en verdad, es recorrer) es el número\nde elementos en el arreglo que vamos a buscar.</p>\n\n<p>Suponiendo que en cada paso hacemos más o menos 5 operaciones, por ejemplo,\npara buscar en un arreglo de 1000 elementos y tomando en cuenta lo que hemos\nvisto de cómo se va reduciendo el espacio de búsqueda, tendríamos la siguiente\nsucesión:</p>\n\n<p>Elementos por buscar: 1000</p>\n\n<p>Operaciones totales: 5</p>\n\n<hr />\n\n<p>Elementos por buscar: 500</p>\n\n<p>Operaciones totales: 10</p>\n\n<hr />\n\n<p>Elementos por buscar: 250</p>\n\n<p>Operaciones totales: 15</p>\n\n<hr />\n\n<p>Elementos por buscar: 125</p>\n\n<p>Operaciones totales: 20</p>\n\n<hr />\n\n<p>Elementos por buscar: 62</p>\n\n<p>Operaciones totales: 25</p>\n\n<hr />\n\n<p>Elementos por buscar: 31</p>\n\n<p>Operaciones totales: 30</p>\n\n<hr />\n\n<p>Elementos por buscar: 15</p>\n\n<p>Operaciones totales: 35</p>\n\n<hr />\n\n<p>Elementos por buscar: 7</p>\n\n<p>Operaciones totales: 40</p>\n\n<hr />\n\n<p>Elementos por buscar: 3</p>\n\n<p>Operaciones totales: 45</p>\n\n<hr />\n\n<p>Elementos por buscar: 1</p>\n\n<p>Operaciones totales: 50</p>\n\n<hr />\n\n<p>Observa cómo es que el número de operaciones no creció al mismo ritmo que el número de\nelementos. El número de operaciones creció sumó sólo 5 operaciones cada que duplicamos\nel número de elementos. Aquí es donde está el logaritmo, como estamos duplicando o\nmultiplicando por dos, la base de nuestro logaritmo es el 2. ¿Cuánto “pasos” vamos a\ntener que hacer? Cuantas veces tengamos que duplicar el número de elementos para llegar\nal número total de elementos del arreglo en el peor de los casos. Esto es el logaritmo\nbase 2.</p>\n\n<p>Así que la complejidad de la búsqueda binaria es \\(O(\\log n)\\). Donde \\(n\\) es el\nnúmero de elementos en el arreglo.</p>\n\n<h2 id=\"implementaciones\">Implementaciones</h2>\n\n<p>Vamos a ver dos implementaciones en Python, una iterativa y otra recursiva.</p>\n\n<p>Empezamos con la iterativa:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">binary_search</span><span class=\"p\">(</span><span class=\"n\">arreglo</span><span class=\"p\">,</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">):</span>\n    <span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">arreglo</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">inicio</span> <span class=\"o\">&lt;=</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n        <span class=\"n\">medio</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">inicio</span> <span class=\"o\">+</span> <span class=\"n\">fin</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n        <span class=\"k\">if</span> <span class=\"n\">arreglo</span><span class=\"p\">[</span><span class=\"n\">medio</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">medio</span>\n        <span class=\"k\">elif</span> <span class=\"n\">arreglo</span><span class=\"p\">[</span><span class=\"n\">medio</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">:</span>\n            <span class=\"n\">inicio</span> <span class=\"o\">=</span> <span class=\"n\">medio</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"n\">medio</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n</code></pre></div></div>\n\n<p>Y la versión recursiva:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">binary_search</span><span class=\"p\">(</span><span class=\"n\">arreglo</span><span class=\"p\">,</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">,</span> <span class=\"n\">inicio</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">fin</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">fin</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">fin</span> <span class=\"o\">=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">arreglo</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">inicio</span> <span class=\"o\">&gt;</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">medio</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">inicio</span> <span class=\"o\">+</span> <span class=\"n\">fin</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n    <span class=\"k\">if</span> <span class=\"n\">arreglo</span><span class=\"p\">[</span><span class=\"n\">medio</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">medio</span>\n    <span class=\"k\">elif</span> <span class=\"n\">arreglo</span><span class=\"p\">[</span><span class=\"n\">medio</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nf\">binary_search</span><span class=\"p\">(</span><span class=\"n\">arreglo</span><span class=\"p\">,</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">,</span> <span class=\"n\">medio</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">fin</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nf\">binary_search</span><span class=\"p\">(</span><span class=\"n\">arreglo</span><span class=\"p\">,</span> <span class=\"n\">elemento_buscado</span><span class=\"p\">,</span> <span class=\"n\">inicio</span><span class=\"p\">,</span> <span class=\"n\">medio</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Debido a la sintaxis de Python, la versión recursiva es un poco más verbosa,\npor el manejo que tienes que hacer de los parámetros por defecto, pero si no\nfuera por eso, en general me gusta más la versión recursiva.</p>\n\n<p>Finalmente, si quieres hacer un programa que funcione con esta forma de búsqueda,\ntienes que asegurarte de que las inserciones en el arreglo sean ordenadas, una forma\nsencilla es usar un algoritmo parecido para encontrar el lugar adecuado para insertarlo.</p>\n\n<h2 id=\"uso-en-el-mundo-real\">Uso en el mundo real</h2>\n\n<p>Lo que vimos en la sección anterior es para que entiendas cómo funciona, pero\nlenguajes como Python, Ruby y otros, probablemente ya tengan implementaciones de\neste algoritmo muy común. Por ejemplo, en Python tenemos el módulo <code class=\"language-plaintext highlighter-rouge\">bisect</code> que \npermite hacer lo mismo con muchas menos líneas. Ejemplo:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"n\">bisect</span>\n\n<span class=\"n\">lista</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">elemento</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">indice</span> <span class=\"o\">=</span> <span class=\"n\">bisect</span><span class=\"p\">.</span><span class=\"nf\">bisect_left</span><span class=\"p\">(</span><span class=\"n\">lista</span><span class=\"p\">,</span> <span class=\"n\">elemento</span><span class=\"p\">)</span> <span class=\"c1\"># en realidad nos dice el valor más pequeño que es mayor o igual al elemento buscado\n</span>\n<span class=\"c1\"># si el índice es más grande que el número de elementos, no está en la lista\n</span><span class=\"k\">if</span> <span class=\"n\">indice</span> <span class=\"o\">!=</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"n\">lista</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">lista</span><span class=\"p\">[</span><span class=\"n\">indice</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">elemento</span><span class=\"p\">:</span> \n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">El elemento </span><span class=\"si\">{</span><span class=\"n\">elemento</span><span class=\"si\">}</span><span class=\"s\"> está en el índice </span><span class=\"si\">{</span><span class=\"n\">indice</span><span class=\"si\">}</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"sh\">\"</span><span class=\"s\">El elemento </span><span class=\"si\">{</span><span class=\"n\">elemento</span><span class=\"si\">}</span><span class=\"s\"> no está en la lista</span><span class=\"sh\">\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Puedes ver más detalles del módulo <code class=\"language-plaintext highlighter-rouge\">bisect</code> en la <a href=\"https://docs.python.org/3/library/bisect.html\">documentación oficial</a>.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La búsqueda binaria es uno de los algoritmos que todos los desarrolladores deberíamos conocer.\nEspero que este artículo te haya ayudado a entender cómo funciona y su importancia.</p>\n",
      "date_published": "Sat, 26 Oct 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/10/20/desarrolladores-que-deberias-admirar-martin-kleppmann.html",
      "url": "https://blog.thedojo.mx/2024/10/20/desarrolladores-que-deberias-admirar-martin-kleppmann.html",
      "title": "Desarrolladores que deberías admirar: Martin Kleppmann",
      "content_html": "<p><strong>Martin Kleppmann</strong> es un desarrollador de software, investigador y profesor muy prolífico.\nHablemos de su trabajo, ideas y de por qué es alguien que podrías admirar.</p>\n\n<h2 id=\"su-carrera\">Su carrera</h2>\n\n<p>Martin ha desarrollado su carrera e investigación alrededor del software deTambién trabaja en seguridad de sistemas distribuidos, un tema relacionado al anterior,\npero digamos que para temas de mayor escala.</p>\n\n<p>Es profesor en la <strong>Universidad de Cambridge</strong>, pero parece que nunca se ha separado de la industria,\npor ejemplo, como emprendedor, fundó Rapportive: una empresa que creó un plug-in que te permitía\nver los detalles de tus contactos directamente en tu bandeja de entrada de email. Rapportive fue\nadquirida por LinkedIn por nada más y nada menos que por 15 millones de dólares.</p>\n\n<p>También ha participado en proyectos de código abierto, con los siguientes proyectos:</p>\n\n<ol>\n  <li><a href=\"https://automerge.org/\"><strong>Automerge</strong></a>: una biblioteca para crear software local-first, que es principalmente \nun CRDT (Conflict-free Replicated Data Type), es decir, una estructura de datos que sirve para sincronizar\ninformación entre varios procesos que compartan esta misma estructura, de manera automática. Está disponible\npara JavaScript, Swift y Rust.</li>\n  <li><a href=\"https://avro.apache.org/docs/\"><strong>Apache Avro</strong></a>: un formato de serialización de datos que compite con\nprotocol buffers y JSON, usado principalmente en el campo de ciencia e ingeniería de datos.</li>\n  <li><a href=\"https://samza.apache.org/\"><strong>Apache Samza</strong></a>: es un framework para procesar flujos de datos\nde manera distribuida en tiempo real, que puede cooperar con Kafka y otros sistemas de procesamiento de datos.</li>\n</ol>\n\n<p>Kleppmann también es un gran contribuidor a la comunidad tanto con pláticas y artículos como con un libro que\nes por lo que más se le conoce: <a href=\"https://dataintensive.net/\">Designing Data-Intensive Applications</a>.</p>\n\n<h2 id=\"ideas-sobre-el-desarrollo-de-software\">Ideas sobre el desarrollo de software</h2>\n\n<p>Martin es un gran proponente de los sistemas distribuidos en todas sus formas y de todos los aspectos realacionados\ncon estos, desde los temas conceptuales hasta la implementación y la seguridad. Actualmente está trabajando\ncon <em>local-first</em> software, que es aquel funciona principalmente en un entorno local, pero que puede\naprovechar las ventajas de tener una conexión a una red para hacer diferentes operaciones,\ncomo sincronizar datos o colaborar en tiempo real.</p>\n\n<p>En su libro <a href=\"https://dataintensive.net/\">Designing Data-Intensive Applications</a> analiza las características\nde software que manejan grandes cantidades de datos, y que cumple con tres características arquitectónicas: disponibilidad, escalabilidad y mantenibilidad. Este libro ha sido muy influyente en la industria, sobre todo\npara aquellos que quieren mejorar sus habilidades de diseño de software relacionadas con sistemas de backend\ndistribuidos y bases de datos.</p>\n\n<p>Si quieres aprender más acerca de todos los temas que hemos mencionado, que giran alrededor de sistemas\ndistribuidos, manejo de grandes cantidades de datos, diseño de software y software local-first, te recomiendo\nver la <a href=\"https://www.youtube.com/playlist?list=PLeKd45zvjcDHJxge6VtYUAbYnvd_VNQCx\">lista de reproducción de videos</a>.</p>\n\n<h2 id=\"curiosidades\">Curiosidades</h2>\n\n<p>Muchas personas buenas en el campo de la computación son buenas en otras cosas o tienen múltiples intereses.\nMartin es un gran músico, compuso una ópera llamada “Die Türme des Februar”, que se estrenó en 2007.</p>\n\n<h2 id=\"referencias\">Referencias</h2>\n\n<ul>\n  <li><a href=\"https://martin.kleppmann.com/\">Página personal de Martin Kleppmann</a></li>\n  <li><a href=\"https://dataintensive.net/\">Designing Data-Intensive Applications</a></li>\n  <li><a href=\"https://twitter.com/martinkl\">Twitter de Martin Kleppmann</a></li>\n  <li><a href=\"https://github.com/mrkleppmann\">GitHub de Martin Kleppmann</a></li>\n</ul>\n",
      "date_published": "Sun, 20 Oct 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/10/19/los-diferentes-grados-de-diseno-de-software.html",
      "url": "https://blog.thedojo.mx/2024/10/19/los-diferentes-grados-de-diseno-de-software.html",
      "title": "Los diferentes grados de diseño de software",
      "content_html": "<p>Hay una confusión enorme sobre el diseño de software. Cuando se habla de arquitectura, se empieza\na hablar de patrones de diseño, infraestructura, y otras cosas con las que no nos conviene\nmeternos en ese nivel.</p>\n\n<p>Es por eso que en este artículo vamos a proponer una taxonomía para los diferentes grados de diseño\nde software. Pero antes hablemos de por qué te conviene hacer una distinción clara.</p>\n\n<p>También presentaremos una serie de recursos que puedes usar más para aprender de cada uno de\nestos niveles de abstracción en el diseño de software.</p>\n\n<h2 id=\"por-qué-te-conviene-distinguir-los-grados-de-diseño-de-software\">Por qué te conviene distinguir los grados de diseño de software</h2>\n\n<p>Lo primero que debemos entender es que hacer software <strong>implica</strong> diseñar software. Las raíces\nde la palabra diseñar son las mismas que las de la palabra designar: las dos cosas tienen que ver\ncon <strong>decisiones</strong>. Cuando <em>diseñamos</em> entendemos que estamos tomando decisiones y documentándolas\npor adelantado. Pero aunque ni las tomemos por adelantado, ni las documentemos, esas decisiones\nestán ahí y por lo tanto el diseño existe.</p>\n\n<p>Teniendo esto presente, nos conviene ponerle atención al diseño desde el principio, para crear\nsoftware que <strong>cumpla tanto con las funciones como con las características que se esperan de él</strong>.</p>\n\n<p>¿Ahora bien, por dónde empezamos a diseñar? Es aquí en donde entran los grados de abstracción\nen diseño: conocer el nivel que necesitamos nos ayudará a empezar en el lugar adecuado.</p>\n\n<h2 id=\"los-grados-de-abstracción-en-diseño-de-software\">Los grados de abstracción en diseño de software</h2>\n\n<p>Hablemos de cada uno de los grados de abstracción en diseño de software, qué es lo que se espera\ny cómo contribuya a la solución final.</p>\n\n<h3 id=\"arquitectura-de-soluciones\">Arquitectura de soluciones</h3>\n\n<p>El propósito del software o de cualquier sistema es resolver problemas para un usuario. Estos\nsistemas están dentro de un contexto completo que le da sentido a su existencia. Es en este nivel\nen donde se define la arquitectura de la solución.</p>\n\n<p>Tomando en cuenta el contexto completo de dónde va a funcionar el software, la organización\no los individuos que lo van a usar, el contexto social, económico e incluso político, se define\nla arquitectura de la solución, es decir, se toman en cuenta los componentes principales que van\ninfluir en que el software pueda cumplir con su propósito.</p>\n\n<p>Este nivel de diseño es el más alto relacionado con el software y requiere capacidad técnica, pero\ntambién amplias capacidades a nivel de negocio, administración y otros campos relacionados con\nel funcionamiento de las organizaciones.</p>\n\n<p>Lo anterior implica que este nivel es poco específico en cuanto los detalles de la solución,\npero tiene gran impacto tanto en el que software cumpla con lo que se espera de él, como con\nconseguir los recursos necesarios para su desarrollo. Además las decisiones que se toman aquí\ntienen un gran impacto en los negocios que solicitan el software.</p>\n\n<p>¿Qué tanto debe saber sobre <em>construcción de software</em> un arquitecto de soluciones? Como dijimos,\neste nivel requiere poca especificidad técnica, pero gran capacidad para combinar conocimientos\nde lo que es posible construir con el software, el contexto del negocio y proyección de los cambios\nque el entorno va a sufrir. Este es un rol más amplio que profundo.</p>\n\n<p>Un arquitecto de soluciones debe ser el traductor entre lo que el negocio necesita, tomando en cuenta\nel contexto amplio de este, y el tipo de software que se puede construir o adquirir.</p>\n\n<h4 id=\"recursos-para-aprender-arquitectura-de-soluciones\">Recursos para aprender arquitectura de soluciones</h4>\n\n<p>En esta sección te presento algunos recursos que te pueden ayudar a aprender sobre este nivel de\nabstracción en el diseño de software, pero recuerda que nada sustituye la experiencia práctica:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/solution-architecture-foundations/9781780175676/\">Solution Architecture Foundations</a>. Este libro es una excelente introducción a la arquitectura de soluciones y tiene\nun enfoque práctico.</p>\n  </li>\n  <li>\n    <p><a href=\"https://press.stripe.com/an-elegant-puzzle\">An Elegant Puzzle: Systems of Engineering Management</a>. Está escrito\npor un ingeniero de software y líder de ingeniería en grandes empresas de software. Este libre es un conjunto de\nensayos sobre la administración de equipos de ingeniería, pero también incluye valiosas lecciones sobre\ncómo guiar a una organización en la que su principal activo es el software.</p>\n  </li>\n</ul>\n\n<h3 id=\"arquitectura-de-software\">Arquitectura de software</h3>\n\n<p>El siguiente nivel de abstracción es la arquitectura de software. Esta actividad es una de las\nmás mal entendidas y por lo tanto mal ejecutadas a mi parecer. La arquitectura tiene que ver\ncon las características que una pieza de software demuestra a nivel estructural, es decir,\ncualidades que surgen de la interacción de sus componentes.</p>\n\n<p>Un error muy común al intentar practicar la arquitectura de software es irse demasiado rápido\na los detalles de implementación (si vamos a usar tal o cuál patrón de diseño, etc). Mi propuesta\nes que la arquitectura de software se practique en un nivel de abstracción más alto, es decir,\nmás cerca de las necesidades del negocio.</p>\n\n<p>Por lo tanto, la principal actividad en este nivel es transformar las necesidades del negocio en\ncaracterísticas de software. A estas características las llamamos <strong>atributos de estructurales o\nde calidad</strong>. Pero la arquitectura de software también se encarga de lograr que el software haga\nlas cosas que el negocio necesita.</p>\n\n<p>También toma en cuenta la estructura de la organización y su composición para definir <em>la forma</em>\nen que el software se va a desarrollar.</p>\n\n<p>¿Qué tanto debe saber sobre <em>construcción de software</em> un arquitecto de software? Un arquitecto de\nsoftware, según la tradición medieval, es <em>el constructor principal</em>. Por lo tanto, debe tener \nuna muy amplia experiencia técnica, conocer cómo funcionan la mayoría de los componentes principales\ncomunes del software, pero también debe tener experiencia tratando con las necesidades del negocio.</p>\n\n<p>Un arquitecto es el principal traductor entre lo que el negocio necesita y <em>cómo</em> se puede\n<strong>construir</strong> o <strong>armar</strong> un sistema que cumpla con esas necesidades.</p>\n\n<h4 id=\"recursos-para-aprender-arquitectura-de-software\">Recursos para aprender arquitectura de software</h4>\n\n<p>En este apartado hay muchos recursos, los que yo te recomiendo son:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/software-architecture-in/9780136885979/\">Software Architecture in Practice, 4th Edition</a>. Si\ntuviera la necesidad de elegir un solo libro para aprender arquitectura de software,\neste sería el que recomendaría. Analiza todos los aspectos fundamentales para construir\nuna arquitectura de software sin centrarse en el conocimiento trivial del que muchos creen que se trata\nla arquitectura.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/fundamentals-of-software/9781098175504/\">Fundamentals of Software Architecture</a>.\nEn este libro encontrarás todas las ideas fundamentales clásicas sobre arquitectura de software, y los\ntérminos que se usan para habla sobre estos temas.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.georgefairbanks.com/book/\">Just Enough Software Architecture: A Risk-Driven Approach</a>. Aquí\nencontrarás un enfoque diferente para la arquitectura de software: el enfocado en los riesgos. Este libro te\nayudará a encontrar el equilibrio al tomar decisiones en tu arquitectura.</p>\n  </li>\n</ul>\n\n<h3 id=\"diseño-de-sistemas\">Diseño de sistemas</h3>\n\n<p>Una vez que sabemos qué características y funciones debe tener el software y cómo las vamos a lograr\ndebemos de ponerle nombre y detalles a cada pieza de software. De esto se encarga el diseño de sistemas.</p>\n\n<p>Este, para mi, es el nivel más clásico y conocido en el diseño de software y el que más le emociona\na la mayoría de los desarrolladores. Es aquí donde dices que vas usar tal o cuál base de datos específica,\nsi vas a usar réplicas de lectura, cómo vas a manejar a un millón de usuarios concurrentes, e incluso\ndetalles de bajo nivel como el almacenamiento de datos y el tipo de infraestructura que vas a usar.</p>\n\n<p>También es aquí donde muchas de las entrevistas de trabajo se centran cuando se quiere poner a prueba\nla capacidad técnica de un desarrollador puro, ya que es un paso intermedio entre la arquitectura, que\ntiene que ver mucho con el negocio, y la programación, que es todo lo que haría un desarrollador que a\npenas está empezando.</p>\n\n<p>Demostrar habilidad en este nivel es un proxy para entender qué tanto has desarrollado software, pero\ntristemente, al igual que todas las medidas que se convierten en el objetivo, ha perdido gran parte\nde su capacidad evaluadora ya que se puede simular fácilmente (estudiando los problemas clásicos de\nentrevistas).</p>\n\n<p>¿Vale la pena estudiarlo aisladamente? Sí, pero es no es suficiente. Este nivel no se trata de seguir\nrecetas de diseño de sistemas, aunque se pueda entender así, sino de conocer cómo se implementan las\nsoluciones arquitectónicas ahora con los detalles de implementación. Así que su verdadero valor viene\nde la <strong>experiencia</strong> desarrollando software.</p>\n\n<p>Creo que esta pregunta ya es obvia, pero demos una respuesta explícita al igual que en las otras\nsecciones: ¿Qué tanto debe saber sobre <em>construcción de software</em> un diseñador de sistemas? Mucho,\ny mientras más experiencia real tenga, mejor.</p>\n\n<p>Un diseñador de software lleva la visión arquitectónica dibujada en papel a su forma final, lista\npara ser implementada.</p>\n\n<h4 id=\"recursos-para-aprender-diseño-de-sistemas\">Recursos para aprender diseño de sistemas</h4>\n\n<p>El área de diseño de sistemas es muy amplia y recomiendo mucho estudiarla por partes. Primero,\npuedes empezar por los problemas clásicos, usando uno de los libros que te prepara para entrevistas\ncomo referencia, pero después tienes que profundizar:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/acing-the-system/9781633439108/\">Acing the System Design Interview</a>.\nEste libro te prepara para las entrevistas de trabajo, tocando todos los temas fundamentales de diseño de\nsistemas.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/acing-the-system/9781633439108/\">System Design Interview – An Insider’s Guide</a>. Otro \nlibro que te prepara para la entrevista de diseño, pero es un poco más informal que\nel anterior. Tiene una segunda parte que puedes encotrar aquí: <a href=\"https://amzn.to/3Ysb0ux\">System Design Interview - An Insider’s Guide: Volume 2</a>.</p>\n  </li>\n</ul>\n\n<p>Ahora sí, podemos empezar a profundizar:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://dataintensive.net/\">Designing Data-Intensive Applications</a>. Este trata sobre el diseño de sistemas\nde alta disponibilidad, escalabilidad y mantenibilidad y que tratan con muchos datos. Analiza cómo se usan\nlos sistemas que manejan datos para lograrlos y se va a un poco más abajo para que veas cómo están construidos,\nasí que también te prepara para el nivel de abajo.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/building-microservices-2nd/9781492034018/\">Building Microservices</a>. Una\nde las formas más comunes de diseñar sistemas a grana escala es usando microservicios. Aunque no siempre los\nvayas a usar, entender los patrones fundamentales y los problemas que resuelven te ayudará a implementar esos\nprincipios en otros contextos.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.oreilly.com/library/view/foundations-of-scalable/9781098106058/\">Foundations of Scalable Systems</a>.\nLa escalabilidad es un tema clave en el diseño de sistemas, entender los medios para lograrla te ayudará\na ser un mejor diseñador.</p>\n  </li>\n</ul>\n\n<h3 id=\"diseño-de-código\">Diseño de código</h3>\n\n<p>Para mi, el siguiente nivel tiene que ver con la <strong>implementación de los diseños</strong>. La pregunta en este\nnivel es: ¿Cómo cumplo con las características y funcione que se esperan de esta pieza de software?</p>\n\n<p>Ya dijimos que el software siempre tiene que ver con decisiones, de hecho podríamos decir que una\nbase de código es un conjunto de decisiones registradas en un lenguaje de programación. Un programador\nque quiere cumplir con las funciones y características que se esperan de sus programas hace bien\nen tomar decisiones por adelantado y en adoptar un conjunto de prácticas que le ayuden a cumplir\ncon lo que casi siempre se espera de esos sistemas de software.</p>\n\n<p>En esta parte es donde se aplican los patrones de diseño, los principios de división modular y de\nseparación modular, donde se eligen nombres y donde se escoge el mejor algoritmo para resolver un problema\nespecífico. El comportamiento alto nivel de los sistemas depende completamente de las decisiones que\nse tomen a esta nivel y que se cumpla con lo que se espera de cada uno de los componentes.</p>\n\n<p>Aquí es donde se elige si se usa un bubble sort, un merge sort o un quicksort para ordenar una lista,\nsi se usa la cierto módulo de terceros para una funcionalidad o si mejor lo implementamos.</p>\n\n<p>La pregunta de las otras secciones no aplica aquí, este nivel es el más técnico y en el que se\nestá poniendo en práctica todo lo que sabemos de construcción de software.</p>\n\n<p>Un programador, usa el diseño para lograr que cada pieza de software cumpla con lo que se espera de ella.</p>\n\n<h4 id=\"recursos-para-aprender-diseño-de-código\">Recursos para aprender diseño de código</h4>\n\n<p>En este nivel vamos a encontrar muchos recursos, pero muchos de ellos se contradicen entre sí, por lo que\ncreo que es fundamental escoger una escuela de pensamiento y seguirla, pero también echarle un vistazo \na las otras y contrastar los puntos de vista, para que generes tu propio estilo.</p>\n\n<p>A continuación recomiendo mis libros favoritos en este nivel:</p>\n\n<ul>\n  <li>\n    <p><a href=\"https://milkov.tech/assets/psd.pdf\">A Philosophy of Software Design</a>. Este es mi libro favorito respecto\na diseño de código porque creo que viene de alguien con experiencia y errores reales. Contradice muchos consejos\nencontrados en “Clean Code”, que es el libro más admirado en este aspecto, pero que creo que ha envejecido muy\nmal.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.patkua.com/blog/book-review-modern-software-engineering/\">Modern Software Engineering</a>. Te presenta\nlas prácticas más modernas para desarrollar software, igual, escrito por un ingeniero de software con mucha experiencia.</p>\n  </li>\n</ul>\n\n<p>En <a href=\"https://blog.thedojo.mx/2023/05/25/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo.html\">este artículo</a> te\nrecomiendo otros libros que te pueden ayudar a mejorar tu diseño de código.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En cada nivel de diseño requerimos diferentes tipos de conocimiento y habilidades. Estas cuatro niveles\nno son necesariamente niveles secuenciales de desarrollo de carrera. Es decir, un muy buen programador\nno tiene por qué aprender a diseñar a nivel de sistemas, por ejemplo, podría dedicarse a cada vez\ndiseñar mejor componentes individuales o incluso algoritmos específicos. Por ejemplo, los desarrolladores\nde drivers o contribuidores individuales en equipos gigantes que se dedican una parte del sistema.</p>\n\n<p>También, si estás implementando software con un objetivo ya definido, es poco probable que necesites aprender\nsobre arquitectura de soluciones o arquitectura de software a muy alto nivel, ese aprendizaje sólo\nte distraerá del conocimiento que realmente necesitas para resolver el problema.</p>\n\n<p>Y también funciona en la otra dirección. Conocer los detalles de implementación de cierto algoritmo\nno te hará un mejor arquitecto de software o de soluciones.</p>\n\n<p>Así que ya sabes, ningún conocimiento es mejor que otro aunque puede que algunos piensen que así sea,\ncada uno tiene su lugar y su propósito.</p>\n",
      "date_published": "Sat, 19 Oct 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/09/28/como-funciona-un-interprete.html",
      "url": "https://blog.thedojo.mx/2024/09/28/como-funciona-un-interprete.html",
      "title": "¿Cómo funciona un intérprete?",
      "content_html": "<p>Un intérprete es un programa que lee código fuente y se encarga de\nejecutarlo. En este artículo vamos a hablar de sus etapas y las principales\ntareas que realiza, para darte la idea de cómo funciona y si lo deseas, puedas\ntener idea de cómo hacerlo tu mismo.</p>\n\n<p>Empecemos por hablar de la diferencia con un compilador.</p>\n\n<h2 id=\"intérprete-vs-compilador\">Intérprete vs compilador</h2>\n\n<p>Ambos tipos de programas tienen la característica de recibir\ncódigo fuente, pero la diferencia está en lo que devuelven, y por lo tanto\nen las etapas que les permiten lograrlo.</p>\n\n<p><strong>Un compilador traduce</strong> el código fuente a otro lenguaje, normalmente a un\nlenguaje máquina que puede ser ejecutado por un procesador de una arquitectura\nespecífica. Pero esto no es necesariamente así, ya que la principal tarea del<br />\ncompilador es <strong>traducir</strong>. Un ejemplo es el compilador de Java:\nno compila al lenguaje de una arquitectura de procesador específica, sino a\nbytecode que puede ser ejecutado por la JVM. Si no sabes que es el bytecode,\nhablamos de él <a href=\"/2023/01/22/entendiendo-el-bytecode.html\">en este artículo</a>.</p>\n\n<p>Los compiladores tradicionales compilan el código fuente a código máquina,\nes decir, a las instrucciones que un procesador puede ejecutar directamente. Así,\nsi quieres ejecutar un programa de C o de C++ en un procesador con arquitectura\nx86, necesitas un compilador traduzca para las instrucciones de esta arquitectura.\nSi después requieres ese mismo programa para ARM, necesitas compilar de nuevo.</p>\n\n<p>Un intérprete también recibe el código fuente, pero en lugar de devolver la\ntraducción en otro lenguaje, <strong>ejecuta</strong> el código fuente directamente. A veces\neste proceso tiene como producto secundario la traducción del código fuente\nen un lenguaje intermedio, pero su objetivo principal es <strong>la ejecución</strong>.</p>\n\n<p>Ahora sí hablemos de las etapas de un intérprete.</p>\n\n<h2 id=\"las-etapas-de-un-intérprete\">Las etapas de un intérprete</h2>\n\n<p>Para ejecutar el código de un programa, podemos dividir el trabajo en varios\npasos. Para entenderlo pongamos un ejemplo. Supongamos que alguien te pide\nque hagas una tarea, por ejemplo, un trabajo escolar. Si tú fueras el intérprete,\ntendrías que hacer más o menos los siguientes pasos:</p>\n\n<ol>\n  <li>Leer las instrucciones de la tarea.</li>\n  <li>Entender claramente y sin ambigüedades lo que se te pide.</li>\n  <li>Crear un plan para ejecutar la tarea.</li>\n  <li>Ejecutar uno a uno los pasos del plan.</li>\n</ol>\n\n<p>Esos son los pasos que un intérprete hace para ejecutar un programa.</p>\n\n<ol>\n  <li><strong>Tokenización</strong>: Leer el código en fuente y transformarlo en una forma\nque pueda entender.</li>\n  <li><strong>Parsing</strong>: Convertir el código fuente en una estructura de datos que pueda\nser ejecutada. En nuestro plan esto serían los pasos 2 y 3.</li>\n  <li><strong>Ejecución</strong>: Ejecutar uno a uno los pasos del plan para lograr el resultado.</li>\n</ol>\n\n<h3 id=\"parsing-o-parseo---análisis-léxico-y-sintáctico\">Parsing o Parseo - Análisis léxico y sintáctico</h3>\n\n<p>A veces a la etapa completa de leer el código fuente y convertirlo en una\nestructura de datos que pueda ser ejecutada se le llama <strong>Parsing</strong>.</p>\n\n<p>¿Cómo puede un programa informático leer un programa y entenderlo? Lo hace de forma\nlimitada, claro, pero lo suficiente para poder ejecutar el código. Un lenguaje\nde programación es un lenguaje creado a partir de un alfabeto (un conjunto de símbolos),\nque a su vez forman palabras y estas palabras forman sentencias. Un <strong>programa</strong>, por\nlo tanto, es una secuencia de sentencias.</p>\n\n<p>Para que un intérprete “entienda” un programa, la primera etapa consiste en\nconvertir el código fuente (un conjunto de símbolos), en una secuencia de\npalabras conocidas por el intérprete. Esto es un tipo de clasificación de\nlas palabras. A la representación interna de estas palabras en el intérprete\nse le llama <strong>tokens</strong>. Debido a que en un lenguaje es muy importante el orden\nde las palabras, esta clasificación debe mantener el orden de las palabras. Como te\nimaginarás, este proceso es al que se le llama <strong>tokenización</strong>.</p>\n\n<p>Después de tener la lista de palabras conocidas, necesitamos “entenderlas”. Como un\nlenguaje tiene una estructura, esta estructura.</p>\n\n<p>Después, este conjunto de <em>tokens</em> es convertido en una estructura de datos\nllamada el <strong>Árbol de Sintaxis Abstracta</strong> o <strong>AST</strong> (Abstract Syntax Tree). Este\nproceso se llama <strong>parsing</strong>, que en inglés significa “analizar”.</p>\n\n<h3 id=\"construcción-del-ast\">Construcción del AST</h3>\n\n<p>Ya con la lista ordenada de tokens que representan el programa, tenemos que construir la\nestructura de datos que representa las operaciones que vamos a ejecutar, <strong>el\nAST</strong>.</p>\n\n<p>Esta estructura se parece a un árbol, con cada nodo representando una operación\nque a su vez puede estar compuesta de más operaciones, es una\nestructura recursiva. Por ejemplo, si tenemos un programa muy sencillo como\n<code class=\"language-plaintext highlighter-rouge\">a = 1 + 2</code>, el AST podría verse así:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,q_69,w_600/v1727416535/Screenshot_2024-09-26_at_23.54.41_spehcz.png\" alt=\"AST de a = 1 + 2\" class=\"align-center\" /></p>\n\n<p>En el esquema anterior puedes ver lo que más o menos es un árbol de sintaxis abstracta:\nuna estructura que nos va ayudar a ejecutar el programa. Para mi, este es el centro\ntanto de un compilador como de un intérprete, si tienes bien definido este árbol (y por\nlo tanto todas las operaciones que son posibles de representar en él), tienes hecho\nla mitad del trabajo, tanto para compilar a otro lenguaje como para ejecutar\ndirectamente el trabajo.</p>\n\n<p>Pasemos a la siguiente etapa.</p>\n\n<h3 id=\"ejecución\">Ejecución</h3>\n\n<p>Lo que sigue es lo más sencillo de entender (pero tal vez no de <em>implementar</em>): la ejecución\ndel programa. El intérprete debe tener la capacidad de actuar sobre el sistema operativo para\nejecutar las operaciones representadas en el AST. Si el intérprete corre\nen alguna otra cosa que no sea directamente el sistema operativo, por ejemplo\nen una máquina virtual, u otro programa, las acciones son diferentes, pero la\nidea es la misma: debe tener la capacidad de actuar sobre el programa en el que corra.</p>\n\n<h3 id=\"opcional-optimización\">Opcional: optimización</h3>\n\n<p>Varios de los intérpretes modernos tienen que se usan en entornos de producción, tienen\nuna etapa que no es absolutamente necesaria, pero que da una ventaja significativa en el\nrendimiento y uso común: la <strong>optimización del la ejecución</strong>.</p>\n\n<p>Estas optimizaciones pueden darse desde mejoras en el AST hasta la generación de código\nespecífico para la arquitectura del procesador en el que se ejecute el programa y ejecutarlo\ninmediatamente. Hablamos de esta última técnica.</p>\n\n<h4 id=\"compilación-just-in-time-jit\">Compilación Just In Time (JIT)</h4>\n\n<p>Una forma de optimización usada por los intérpretes y máquinas virtuales es lo\nque se conoce como <strong>Just In Time Compilation</strong>. La idea es sencilla:</p>\n\n<ol>\n  <li>Se ejecuta el código fuente original mientras se observa el comportamiento de \neste programa con un perfilador (o profiler).</li>\n  <li>Una vez que el perfilador detecta cosas que se pueden optimizar, un compilador\nespecializado en la arquitectura del procesador en el que el intérprete está\ncorriendo genera código máquina específico para es arquitectura de las partes\nque se pueden optimizar.</li>\n  <li>El código máquina optimizado se ejecuta mientras se sigue observando el\ncomportamiento del programa.</li>\n  <li>Si el programa no se comporta de la forma esperada, esta parte de la ejecución\nse cancela y se vuelve a ejecutar el código fuente original.</li>\n</ol>\n\n<p>Tenemos un artículo completo sobre JIT <a href=\"2023/01/18/compilacion-just-in-time-que-es.html\">en este enlace</a>.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Ahora entiendes mejor cómo funcionan los intérpretes de manera general. Este\nconocimiento te puede ayudar cuando trabajes con ellos y probablemente tengas\nalgún problema directamente relacionado con su funcionamiento interno.</p>\n\n<p>También tienes el conocimiento básico para avanzar a aprender cómo hacer el tuyo\nen caso de que lo necesites. En un artículo futuro hablaré sobre cómo hacer un intérprete\nde un lenguaje de programación sencillo, para entender todavía mejor el funcionamiento.</p>\n",
      "date_published": "Sat, 28 Sep 2024 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2024/09/16/como-funciona-tensorflow.html",
      "url": "https://blog.thedojo.mx/2024/09/16/como-funciona-tensorflow.html",
      "title": "¿Cómo funciona TensorFlow?",
      "content_html": "<p><strong>TensorFlow</strong> es una de las herramientas más populares e influyentes\nen el campo de la del aprendizaje automático. En este artículo vamos a ver\nqué es exactamente y cómo funciona.</p>\n\n<h2 id=\"qué-es-tensorflow\">¿Qué es TensorFlow?</h2>\n\n<p>Siempre que hablamos de TensorFlow se dice que es una “biblioteca (o librería)\npara hacer aprendizaje automático, pero este definición no es muy\nexplícita y por eso vamos a ver <em>cómo nos permite</em> crear modelos de\naprendizaje.</p>\n\n<p>Para crear modelos de aprendizaje automático, tenemos que hacer muchos cálculos\nmatemáticos, la gran mayoría son operaciones de multiplicación de matrices.\nEstos cálculos no son eficientes en un procesador tradicional y por eso se\nrequiere de toda la ayuda que se pueda conseguir para hacerlos lo más rápido\nposible y gastando menos energía.</p>\n\n<p>Es aquí donde entra <strong>TensorFlow</strong>, una biblioteca que permite <em>representar</em> estos\ncálculos mediante grafos de cómputo y después ejecutarlos en procesadores\nespecializados como tarjetas gráficas y otros procesadores eficientes en\noperaciones matemáticas pesadas. Además, TensorFlow abstrae al usuario final (tú),\nde los detalles de implementación de muchas funciones y operaciones matemáticas\nque se usan mucho en el aprendizaje automático. Y finalmente, con su <em>API</em> de alto\nnivel, <strong>Keras</strong>, te permite crear diferentes tipos de redes neuronales sin\nque tengas que pelearte con los detalles de implementación.</p>\n\n<p>Y es aquí donde empieza lo interesante. ¿Qué es un grafo de cómputo? ¿Cómo\nllegamos a él y para qué nos sirve? Veamos.</p>\n\n<h2 id=\"grafos-de-cómputo-de-tensorflow\">Grafos de cómputo de TensorFlow</h2>\n\n<p>Para entenderlo, vamos a ver un ejemplo sencillo de un cálculo y su\nrepresentación, por ejemplo, sumemos dos números, que llamaremos X y Y.</p>\n\n<p>¿Cómo representa TensorFlow esto? Este es el grafo de cómputo que podemos ver con\nuna herramienta de análisis de TensorFlow llamada TensorBoard:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_250/v1726379906/Screenshot_2024-09-14_at_23.53.34_1_izykn5.png\" alt=\"Imagen de un grafo de cómputo de TensorFlow\" class=\"align-center\" /></p>\n\n<p>Puedes pensar en este grafo como una serie de nodos que representan cada uno\nuna operación sobre conjuntos de datos numéricos llamados tensores. Cuando\nejecutamos este grafo, los tensores <em>fluyen</em> por estos nodos, transformándose\nen cada uno, hasta que obtenemos el resultado final de la operación. (Los nodos\nque dicen <code class=\"language-plaintext highlighter-rouge\">Identity</code> son operaciones de copia o lectura de valores, útiles para\nel funcionamiento interno de  TensorFlow).</p>\n\n<p>La otra cosa que podemos notar hasta abajo de la gráfica son los dos nodos que\nrepresentan nuestros números simples: X scalar y Y scalar, ya que los definimos\ncomo números simples, que también pueden pensarse como tensores de una dimensión.</p>\n\n<p>Formalmente, TensorFlow te da una serie de estructuras de datos, que puedes\nir construyendo poco a poco para definir todas las operaciones que necesites hacer.</p>\n\n<p>En una red neuronal, estos grafos son mucho más complicados, pero justo ese es\nel trabajo de TensorFlow: ayudarte a definirlos y a ejecutarlos en el hardware\nmás conveniente para tu proyecto.</p>\n\n<p>Usar los grafos de cómputo de TF te permite varias cosas más:</p>\n\n<ul>\n  <li><strong>Optimización de las operaciones</strong>: TensorFlow tiene todo un sistema de optimización\nllamado <code class=\"language-plaintext highlighter-rouge\">Grappler</code>, que se encarga varias optimizaciones.</li>\n  <li><strong>Paralelización</strong>. Con las operaciones divididas, TensorFlow puede verificar\nqué operaciones son independientes y puede ejecutarlas en otros procesadores\nsi están disponibles.</li>\n  <li><strong>Exportación</strong>. Una vez teniendo las operaciones definidas en un grafo, no necesitamos\nde Python para ejecutarlas, así que TensorFlow puede ejecutarlas en otros dispositivos\ny usando otros lenguajes.</li>\n</ul>\n\n<p>Esta definición de grafos de cómputo no es la única forma de trabajar con TensorFlow,\nya que desde su versión 2.0, también permite trabajar con un modo más imperativo,\nque se siente más integrado con Python y más dinámico: la ejecución adelantada (en\ninglés: <em>eager execution</em>). Con esta forma de ejecución, las operaciones se van\nejecutando inmediatamente después de definirlas. Esto es más fácil de programar y\nde leer, pero deja poco espacio para la optimización. Es justamente como la comparación\nentre un lenguaje compilado y uno interpretado.</p>\n\n<h2 id=\"tensorflow-y-keras\">TensorFlow y Keras</h2>\n\n<p>Keras era otra biblioteca que se creó por separado, para hacer más fácil de usar\nla versión 1.0 de TensorFlow, que era bastante más verbosa de programar (por sólo\nsoportar grafos de cómputo estáticos).Sin embargo, en la versión 2.0 de TensorFlow,\nKeras se volvió parte del paquete.</p>\n\n<p>Keras te permite crear modelos de aprendizaje profundo de manera sencilla. Es la\nmanera fácil de usar TensorFlow, pero también te permite complicarte tanto como quieras\no necesites (esperamos que sea esto último). Keras usa el principio de “revelación\nprogresiva de la complejidad”, lo que significa que puedes empezar de manera muy\nsencilla e ir aprendiendo cosas conforme vayas avanzando en hacer cosas más complejas.</p>\n\n<p>Así que la forma más común de usar TensorFlow para crear tus modelos de machine\nlearning es mediante la interfaz de Keras, que además de todo te provee de\nutilidades que son de uso muy común en las redes neuronales. Por ejemplo, provee\nregularizadores, inicializadores, funciones de activación, optimizadores, y muchas\nutilidades más. Es por eso que ya casi no se concibe el uso de TensorFlow para\ncasos comunes sin usar Keras.</p>\n\n<h2 id=\"tensorflow-y-mlir\">TensorFlow y MLIR</h2>\n\n<p>MLIR es una herramienta para crear compiladores hecha por parte del mismo\nequipo que hizo LLVM, la infraestructura para compiladores que está detrás\nde la mayoría de los compiladores modernos.</p>\n\n<p>La especialidad de MLIR es hacer traducciones para arquitecturas de hardware no\ntradicionales,usando un lenguaje intermedio multi-capa al que le puedes agregar\nmás plugins para diferentes arquitecturas de ejecutores. MLIR es muy usado\npara computación de alto rendimiento, justamente la que necesitamos para\ncrear modelo de aprendizaje automático complejos en tiempos y con costos\nrazonables.</p>\n\n<p>Así que TensorFlow, aprovechando este sistema, usa MLIR para compilar los\ngrafos de cómputo y los modelos para hardware específico, para que se pueda\nobtener el mejor rendimiento posible.</p>\n\n<h2 id=\"tensorflow-y-su-relación-con-el-hardware\">TensorFlow y su relación con el hardware</h2>\n\n<p>Después de la sección anterior, es muy probable que la relación de TF con\nel hardware quede muy clara: TensorFlow ayuda a que se pueda compilar\nde mejor manera el código con los cálculos para poder ejecutarlo\nen el hardware especializado.</p>\n\n<p><strong>IF</strong> soporta gran variedad de tipos de hardware y es por eso que hasta el\nmomento es la biblioteca de machine learning con mejor soporte para\ndistribuir tus modelos en diferentes dispositivos, desde procesadores\nespecializados hasta que corran directamente en tu teléfono o navegador.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Si quieres hacer machine learning, lo más probable es que tengas que\naprender TensorFlow, una herramienta muy útil para hacer los modelos usados\nhoy.</p>\n\n<p>Espero que lo que hablamos sobre TensorFlow en este artículo te haya ayudado\na entenderlo un poco más. En otro artículo hablaremos de su competidor\nmás directo: <strong>PyTorch</strong>.</p>\n",
      "date_published": "Mon, 16 Sep 2024 00:00:00 -0600"
      }
    
  ]
}
       <div style="border: 1px solid gray; border-radius: 4px; margin: 20px; padding: 5px;">
          Visita nuestro canal de YouTube para encontrar temas similares en video:<a href="https://youtube.com/thedojomx"> The Dojo MX en YouTube </a>
        </div>

        
      </section>

      <footer class="page__meta">
        
        


        


      </footer>

      

      
    </div>

    
      <div class="page__comments">
  
  
      <h4 class="page__comments-title">Comentar</h4>
      <section id="disqus_thread"></section>
    
</div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Términos de búsqueda...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Términos de búsqueda..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#4b0082',
      iconColor: '#fff'
    }).init();
</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2025 The Dojo MX Blog. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>







  </body>
</html>
