<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.22.0 by Michael Rose
  Copyright 2013-2020 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="es" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title></title>
<meta name="description" content="">


  <meta name="author" content="Héctor Patricio">
  


<meta property="og:type" content="website">
<meta property="og:locale" content="es">
<meta property="og:site_name" content="">
<meta property="og:title" content="">
<meta property="og:url" content="https://blog.thedojo.mx/feed.json">













<link rel="canonical" href="https://blog.thedojo.mx/feed.json">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": null,
      "url": "https://blog.thedojo.mx/"
    
  }
</script>






<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title=" Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->


    
<!-- favicon -->
<link rel="apple-touch-icon" sizes="180x180" href="/assets/images/favicons/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/favicons/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/favicons/favicon-16x16.png">
<link rel="manifest" href="/assets/images/favicons/site.webmanifest">
<link rel="mask-icon" href="/assets/images/favicons/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/assets/images/favicons/favicon.ico">
<meta name="msapplication-TileColor" content="#da532c">
<meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml">
<meta name="theme-color" content="#ffffff">
<!-- end favicon -->


<!-- Hotjar Tracking Code for blog.thedojo.mx -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:1217463,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>

<script src="/assets/js/sharect.min.js"></script>

<script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "url": "https://blog.thedojo.mx/feed.json",
      "name": null,
      "headline": null,
      "keywords": "",
      "description": "",
      "articleBody": "{\n  \"version\": \"https://jsonfeed.org/version/1\",\n  \"title\": {{ site.title | jsonify }},\n  \"description\": {% if site.description %}{{ site.description | jsonify }}{% endif %},\n  \"home_page_url\": \"{{ site.url }}\",\n  \"feed_url\": \"{{ site.url }}/feed.json\",\n  \"favicon\": \"{{ site.url}}/favicon.png\",\n  {% if site.author %}\n  \"author\": {\n    \"name\": {{ site.author | jsonify }}\n  },\n  {% endif %}\n  \"items\": [\n    \n    {% for post in site.posts limit:10 %}\n    {\n      \"id\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"url\": \"{{ post.url | prepend: site.baseurl | prepend: site.url }}\",\n      \"title\": {{ post.title | jsonify }},\n      \"content_html\": {{ post.content | jsonify  }},\n      \"date_published\": \"{{ post.date | date_to_rfc822 }}\"\n      }{% unless forloop.last %},{% endunless %}\n    {% endfor %}\n  ]\n}",
      "datePublished": null,
      "dateModified": null,
      "author": {
        "@type": "Person",
        "name": null,
        "givenName": null,
        "email": null
      },
      "publisher": {
        "@type": "Organization",
        "name": null,
        "url": "https://blog.thedojo.mx",
        "logo": {
          "@type": "ImageObject",
          "width": 32,
          "height": 32,
          "url": "https://blog.thedojo.mx/icon/favicon.ico"
        }
      },
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.thedojo.mx/feed.json"
      },
      "image": {
        "@type": "ImageObject",
        "width": 1200,
        "height": 400,
        "url": ""
      }
    }
</script>
  </head>

  <body class="layout--single">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="https://res.cloudinary.com/hectorip/image/upload/v1554098427/TheDojo/the-dojo-transparent.png" alt=""></a>
        
        <a class="site-title" href="/">
          The Dojo Blog
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/latest">Todos los posts</a>
            </li><li class="masthead__menu-item">
              <a href="/about">Acerca de</a>
            </li><li class="masthead__menu-item">
              <a href="https://thedojo.mx">Cursos</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  


  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    
    
    
    

    <div class="page__inner-wrap">
      
        <header>
          
          


        </header>
      

      <section class="page__content" itemprop="text">
        
        {
  "version": "https://jsonfeed.org/version/1",
  "title": null,
  "description": ,
  "home_page_url": "https://blog.thedojo.mx",
  "feed_url": "https://blog.thedojo.mx/feed.json",
  "favicon": "https://blog.thedojo.mx/favicon.png",
  
  "author": {
    "name": {"name":"Héctor Patricio","avatar":"/assets/images/me.jpg","bio":"Desarrollador de software, tech lead @ HAL y The Dojo MX","uri":"https://github.com/hectorip","home":null}
  },
  
  "items": [
    
    
    {
      "id": "https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito.html",
      "url": "https://blog.thedojo.mx/2021/12/10/la-regla-del-cero-uno-o-infinito.html",
      "title": "La regla del 'Cero, Uno o Infinito'",
      "content_html": "<p>La regla del ‘Cero, Uno o Infinito’ es una guía para diseñar software que sea más fácil de usar, tanto para otros desarrolladores como para los usuarios finales. La regla en inglés es:</p>\n\n<blockquote>\n  <p>“Allow none of foo, one of foo, or any number of foo.” - Willem van der Poel</p>\n</blockquote>\n\n<p>Esta regla establece que respecto a la existencia de elementos, deberías permitir que no exista ninguno, solamente uno o un número arbitrario (potencialmente infinito, mientras las limitantes ) de estos elementos. La idea <strong>principal es que no existan límites arbitrarios impuestos por alguna idea sin explicación</strong>.</p>\n\n<p>Algunos ejemplos de esta regla, puesta en práctica:</p>\n\n<ul>\n  <li>Una estructura de datos no limita arbitrariamente el grado de anidado que puede tener</li>\n  <li>No existe un normalmente un límite impuesto de recursividad (más allá del dado por el tamaño del <em>stack</em> de ejecución)</li>\n  <li>En las bases de datos relacionales existen tres cardinalidades: 1-1 (permitir una), 1-N (un padre puede tener muchos hijos), N-N (varios artículos pueden pertenecer a la misma categoría y un artículo puede tener varias categorías)</li>\n  <li>Los caracteres especiales básicos de las expresiones regulares son: <code class=\"language-plaintext highlighter-rouge\">.</code> (un carácter cualquiera), <code class=\"language-plaintext highlighter-rouge\">+</code> (uno o más caracteres), <code class=\"language-plaintext highlighter-rouge\">*</code> (cualquier número de caracteres).</li>\n</ul>\n\n<p>Y esta regla parece que también existe en la naturaleza:</p>\n\n<ul>\n  <li>La procreación es ilimitada mientras los recursos sean suficientes (puedes tener N hijos)</li>\n  <li>Tus ancestros directos son uno de cada género (tienes un padre y una madre)</li>\n  <li>Tus ancestros indirectos pueden ser infinitos (tu linea genealógica y los hijos de tus hijos pueden ser infinitos)</li>\n  <li>Cuando tienes un límite de uno y lo abres para dos, ¿entonces por qué no abrirlo para tres? Si aplicamos esta regla recursivamente llegamos infinito</li>\n  <li>En un consejo de administración hay una (1) persona encargada con acceso a la información de un sistema o un equipo (N - infinito)</li>\n  <li>Como conjunto, un vehículo puede transportar N pasajeros, luego limitado por el caso de negocio o modelo específico. Cuando esta lleno puede transportar cero personas más</li>\n</ul>\n\n<p>Ahora veamos algunos ejemplos en los que puedes poner límites arbitrarios sin darte cuenta.</p>\n\n<h2 id=\"modelando-bases-da-datos\">Modelando bases da datos</h2>\n\n<p>En modelados de bases de datos. Imagínate que tienes que modelar una tipo de usuario en el que te dicen que tienes que guardar diez propiedades arbitrarias. Podrías cometer el error de crear específicamente diez campos para guardar estas propiedades, lo cuál crearía un límite arbitrario en la capacidad de guardar estas propiedades. La mejor forma de modelarlo sería con una relación 1-N, ya que te da la flexibilidad de aumentar o reducir este límite mediante lógica específica para el caso de uso.</p>\n\n<p>Lo mismo podrías pensar en cuanto a asignación de categorías, tags, comentarios, etc.</p>\n\n<h2 id=\"modelando-software\">Modelando software</h2>\n\n<p>Veamos algunos ejemplos que te puedes encontrar creando software.</p>\n\n<h3 id=\"ctrl-z\">CTRL-Z</h3>\n\n<p>Imagina que tienes que diseñar un editor de texto y estás pensando en agregar la funcionalidad de “deshacer”. Primeramente piensas que es buena idea solamente permitir que se deshaga la acción inmediata anterior, así que lo implementas como una variable que se está sustituyendo constantemente.</p>\n\n<p>Pero ahora quieres permitir que se deshagan más acciones. ¿Cuál sería tu siguiente límite? El límite natural tendría que ser “infinito” o “hasta el principio del tiempo”, ya que cualquier otro límite sería arbitrario y difícil de comprender o justificar. Así que tu implementación cambia de una variable a una pila de acciones que va manteniendo tantas acciones como sea posible.</p>\n\n<h3 id=\"modelando-una-conversaciǿn\">Modelando una conversaciǿn</h3>\n\n<p>Ahora estamos creando un modelo para almacenar y correr una conversación de un chatbot con un usuario. Cada mensaje puede comportarse de tres maneras: darle la oportunidad al usuario de contestar con una respuesta fija, llevar a otro mensaje sin darle oportunidad al usuario de contestar, o terminar la conversación.</p>\n\n<p>Como puedes observar, esto es un caso perfecto de la regla del ‘Cero, Uno o Infinito’. Un mensaje puede tener cero mensajes siguientes, por lo que termina la conversación. Puede tener un solo mensaje siguiente, que es cuando continuamos sin esperar respuesta. O puede tener N mensajes siguientes, uno correspondiente a cada respuesta posible de parte del usuario. Imponer un número limitado de respuestas posibles dentro de tu sistema no una buen idea, ya que limita sin razón alguna la flexibilidad de nuestro sistema.</p>\n\n<h2 id=\"críticas-a-la-regla-del-cero-uno-o-infinito\">Críticas a la regla del ‘Cero, Uno o Infinito’</h2>\n\n<p>Una de las principales críticas a esta regla es que <strong>está dejando fuera el dos</strong>, que también es un número muy especial para ciertos casos: muchas cosas en la naturaleza vienen en pares. Los booleanos, prendido/apagado, arriba/abajo, izquierda/derecha.</p>\n\n<p>En mi opinión es un número que también se debe considerar, pero solo en caso de que los dos elementos carguen un significado como en los ejemplos anteriores, normalmente son cosas opuestas que se relacionan con un centro, pero incluso, si no se considera un número especial, podemos modelar estos casos siguiendo la regla del ‘Cero, Uno o Infinito’: si tomamos como punto de referencia uno de estos valores, el otro es nuestro <em>“uno”</em> que estamos permitiendo.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aprender principios de diseño de software te ayudará a crear mejores sistemas que puedan ser usados más fácilmente tanto por otros desarrolladores como por usuario. Espero que este pequeño ejemplo te lleve a aprender otros principios que puedas aplicar en tu trabajo diario. Déjanos un comentario si quieres que lo platiquemos más profundamente o con otros ejemplos.</p>\n",
      "date_published": "Fri, 10 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/09/como-convertirte-en-un-mago-programando.html",
      "url": "https://blog.thedojo.mx/2021/12/09/como-convertirte-en-un-mago-programando.html",
      "title": "Cómo convertirte en un mago programando",
      "content_html": "<p>Todos queremos crecer en nuestra carrera de programación y para lograrlo necesitamos adquirir hábitos y técnicas que nos ayudarán a no quedarnos estancados. En este artículo hablaremos de las tres técnicas que me parecen más importantes del <a href=\"https://www.youtube.com/watch?v=drPMyDyQG8M\">wizardzine</a> gratuito <a href=\"https://wizardzines.com/zines/wizard/\">“So you want to be a wizard”</a> de <a href=\"https://twitter.com/b0rk\">Julia Evans</a>.</p>\n\n<p>Espero que estas recomendaciones te dejen reflexionando y que termines con ganas de leer el <em>wizardzine</em> completo. Los pongo en el orden que personalmente me parecen más impactantes, pero para ti puede ser diferente, por lo que te recomiendo que lo leas y medites por tu cuenta.</p>\n\n<h2 id=\"escribe-un-documento-de-diseño\">Escribe un documento de diseño</h2>\n\n<p>Una de las cosas más importantes que podemos aprender los desarrolladores es a <strong>diseñar software.</strong></p>\n\n<p>Un documento de diseño es una expresión del diseño de software. Es un escrito que haces <strong>ANTES de empezar</strong> un desarrollo, en el que detallas varias cosas sobre lo que te estás proponiendo hacer:</p>\n\n<ol>\n  <li>El objetivo principal</li>\n  <li>Detalles sobre el problema a resolver</li>\n  <li>El diseño a alto nivel de la solución</li>\n  <li>Las partes del sistema que estás afectando</li>\n  <li>Otras consideraciones que hay que tener sobre esa pieza de software</li>\n</ol>\n\n<p>Normalmente este diseño y consideraciones iniciales no se mantienen a lo largo del proyecto, pero sirven para empezar con una idea más clara y sin malentendidos. Una de las cosas más importantes que tienes que hacer con un documento de diseño es <strong>la retroalimentación que otros miembros del equipo puedan darte</strong>. En un artículo futuro de este blog hablaremos más a detalle de esto.</p>\n\n<p>Pero recuerda que si no tienes práctica y, aunque sea un proyecto o cambio muy pequeño, vale la pena dedicarle un tiempo a <em>pensar</em> y <em>escribir</em> sobre lo que planeas hacer.</p>\n\n<h2 id=\"como-adquirir-experiencia-significativa\">Como adquirir experiencia significativa</h2>\n\n<p>Es cierto que mediante trabajar en algo por un tiempo en algo lograrás adquirir experiencia, pero esta experiencia está limitada a las actividades que más repitas en ese trabajo y a ese entorno. <strong>Por eso no basta con sólo aprender en el trabajo</strong>.</p>\n\n<p>Si quieres tener una experiencia más amplia, algunas prácticas que te pueden servir son:</p>\n\n<ul>\n  <li>Escoge un área que te interese especialmente y estudiala durante un tiempo razonable. Desarrolla tus habilidades en esa área y luego cambia a otra. Lo importante es que <strong>tu aprendizaje sea activo</strong>, no solamente teórico o lo que te vaya llegando del trabajo.</li>\n  <li><strong>No pienses que es tarde para aprender</strong>. Aunque lleves bastante tiempo usando algo, no significa que lo debas saber todo sobre esa tecnología. No pienses: “¿Cómo es que no sabes X cosa sobre Y?”, sino: “Hoy es el día en que aprenderé sobre X y Y”.</li>\n  <li>Aprende los conceptos fundamentales, lo que te servirá para construir sobre eso más conocimiento y habilidades.</li>\n  <li>Haz experimentos. En muchas de las áreas del desarrollo, puedes hacer experimentos que no te cuestan nada y pueden ayudarte a entender más profundamente un tema.</li>\n  <li><strong>Lee Libros</strong>. Los libros en la mayoría de los casos son un conjunto de conocimientos destilados sobre cierto tema. Leer los capítulos específicos de los temas de tu interés te ayudará a avanzar más rápido.</li>\n  <li><strong>Haz proyectos difíciles</strong>. Nada como poner a prueba tus habilidades para ver los hoyos en tu conocimiento como hacer tareas difíciles.</li>\n  <li><strong>Profundiza</strong>. Cuando no entiendas algo, busca información más profunda sobre el tema, aprende la historia, las bases y los conceptos más fundamentales. Además puedes acercarte a expertos en el tema a pedirles ayuda para comprender este tema, o recursos que te ayuden a comprenderlo.</li>\n</ul>\n\n<p>Finalmente, recuerda que todo esto toma tiempo, no puedes convertirte en un experto en algo de la noche a la mañana, por lo que debes tener paciencia contigo.</p>\n\n<h2 id=\"lee-código-fuente\">Lee código fuente</h2>\n\n<p>A veces, los sistemas o herramientas que tenemos que usar no tienen documentación, nadie sabe lo suficiente para ayudarnos o no están disponibles. Es por esto que una de las habilidades más importantes que podemos tener es la de <strong>leer y entender el código fuente</strong>.</p>\n\n<p>Algunas de las cosas que te pueden ayudar son:</p>\n\n<ul>\n  <li>Busca exactamente por la parte que necesitas. Puede ser un error, un mensaje o un módulo específico, usa las herramientas de indexación de texto para llegar ahí, no creas que tienes que leer toda la base.</li>\n  <li>Si el código que tienes que leer es pequeño, intenta darle un recorrida rápida para tener una idea general de lo que sucede y dónde sucede.</li>\n  <li>Haz experimentos con el código, cambiando cosas y viendo lo que sucede, usa un debuggers, agrega tests, introduce bugs intencionalmente.</li>\n</ul>\n\n<p>Finalmente, documenta lo que aprendas y encuentres, le puede servir a otros miembros del equipo, de la comunidad o a ti en el futuro. Entender estos sistemas te ayudará aprender de las decisiones de diseño buenas o malas y además te enseñará nuevas técnicas que hubieras tardado más en aprender por otros lados.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Lo que te acercará más a sentirte un mago o maga programando es la <strong>práctica enfocada</strong>, que puede presentarse de las tres maneras que hablamos aquí, pero hay muchas otras. Recuerda que la constancia es importante, más que la velocidad, pero buscar formas más eficientes de aprender no es malo.</p>\n\n<p>Si te quedaste con ganas de más consejos de este estilo, descarga <a href=\"https://wizardzines.com/zines/wizard/\">“So you want to be a Wiazard”</a> de la página oficial y continúa leyendo, esta vez de manera visual.</p>\n\n<p>Shameless plug: <a href=\"https://www.youtube.com/watch?v=drPMyDyQG8M\">aquí puedes ver nuestra presentación de los wizardzines</a>.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/drPMyDyQG8M\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n",
      "date_published": "Thu, 09 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptografia-en-2021.html",
      "url": "https://blog.thedojo.mx/2021/12/08/recursos-para-aprender-criptografia-en-2021.html",
      "title": "Recursos para aprender Criptografía en 2022",
      "content_html": "<p>La criptografía es un campo con mucha demanda laboral actualmente porque es importante para diferentes áreas de la informática. En este artículo vamos hablar su importancia y cómo puedes aprenderlo si está dentro de tus intereses.</p>\n\n<h2 id=\"la-importancia-de-la-criptografía\">La importancia de la criptografía</h2>\n\n<p>En el artículo <a href=\"https://blog.thedojo.mx/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html\">¿Qué es la Criptografía?</a> explicamos que es un conjunto de técnicas y conocimiento que busca <strong><em>ocultar la información</em></strong>, derivada de las matemáticas y las ciencias de la computación.</p>\n\n<p>El mundo de la computación necesita mantener secretos en muchas áreas, principalmente en cosas relacionadas como la identificación y autenticación de personas y elementos. Además, la criptografía tiene usos laterales, como la verificación de la autenticidad de la información. Cada día hay más valor en nuestras redes informáticas, por lo que cada vez hay más incentivos para robar la información que protegemos mediante la criptografía.</p>\n\n<p>En tiempos modernos, debido a lo pesado de procesos de cifrado y hasheado, también se ha estado usando para probar que un elemento de un sistema distribuido hizo muchos cálculos, un concepto llamado <a href=\"https://cointelegraph.com/explained/proof-of-work-explained\">prueba de trabajo</a>, usado en Bitcoin.</p>\n\n<p>Como resumen: <strong>está aumentando  el número de personas que se requiere</strong> para trabajar en criptografía. Se requieren personas que diseñen sistemas que usen los esquemas y algoritmos correctamente, criptográfos que diseñen nuevos algoritmos adecuados para nuestra época y las décadas que siguen, resistentes a el avance del hardware y la computación cuántica, y finalmente, personas que implementen correctamente los algoritmos diseñados por los matemáticos y criptográfos tanto en hardware como en software.</p>\n\n<p>¿Quieres ser tú una de estas personas? ¿O tal vez quieres aprender un poco más solamente para crear software más seguro? Veamos algunos recursos que te pueden ayudar.</p>\n\n<h2 id=\"libros\">Libros</h2>\n\n<p>Los siguientes libros te enseñarán lo suficiente de criptografía de manera general para que no te confundas con los términos y para tener una idea clara de los puedes y no puedes hacer al usar diferentes esquemas y tipos de algoritmos.</p>\n\n<h3 id=\"the-code-book\">The Code Book</h3>\n\n<p>Este libro está escrito por un físico que ha escrito varios libros de divulgación. Te cuenta los usos e historia de la criptografía y es una excelente introducción para motivarte a empezar tu camino en criptografía con el mayor interés posible. Puedes ver la presentación del libro aquí: <a href=\"https://simonsingh.net/books/the-code-book/\">The Code Book</a></p>\n\n<h3 id=\"serious-cryptography\">Serious Cryptography</h3>\n\n<p>Escrito por Jean Philippe Aumasson, un criptógrafo renombrado a nivel mundial e inventor de varios algoritmos de cifrado y hasheado modernos, es libro es una guía para los principiantes de criptografía, te enseña conceptos básicos y avanza hasta contarte de criptografía cuántica. Si no vas a leer o estudiar nada más de criptografía este libro es suficiente para no estar en blanco.</p>\n\n<p>Tiene un estilo divertido, desenfadado, con una gran cantidad de ejemplos y la profundidad adecuada para que no pierdas el interés. Página oficial: <a href=\"https://nostarch.com/seriouscrypto\">Serious Cryptography</a>.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1639196918/crypto_cover-front-final_REV_HM_ceeqzb.png\" alt=\"Portada de Serious\" class=\"align-center\" /></p>\n\n<h3 id=\"introduction-to-cryptography\">Introduction to Cryptography</h3>\n\n<p>Es una introducción un poco más formal y académica a la criptografía, con el que reforzarás algunos conceptos si ya sabes de criptografía, pero especialmente bueno en el caso de que no tengas ningún conocimiento. Página oficial: <a href=\"https://link.springer.com/book/10.1007/3-540-49244-5\">Introduction to Cryptography en Springer</a>.</p>\n\n<h3 id=\"cryptography-engineering\">Cryptography Engineering</h3>\n\n<p>Este libro está escrito por un equipo de criptográfos de nivel mundial, con varios algoritmos publicados y todavía en uso. Este libro te explica las bases de la criptografía desde un enfoque un poco más rígido que Serious Cryptography. Está enfocado en las decisiones de diseño detrás de los esquemas criptográficos actuales. Propone un plan de 12 semanas que te puede ayudar a tener estructura al estudiar el libro.\nPuedes ver la presentación de uno de los autores en <a href=\"https://www.schneier.com/books/cryptography-engineering/\">Cryptography Engineering</a>.</p>\n\n<h2 id=\"a-graduate-course-in-applied-cryptography\">A Graduate Course in Applied Cryptography</h2>\n\n<p>Este curso es la recopilación del curso de criptografía completo de la universidad de Stanford. En mi opinión es el libro más profundo de todos los mencionados aquí en tres temas: cifrado simétrico, asimétrico y esquemas criptográficos. Tiene explicaciones a alto nivel y las demostraciones matemáticas de por qué es seguro. Puedes leerlo de dos formas: lo lees completo con todo y las demostraciones si ya conoces los conceptos básicos o te saltas las demostraciones y los ejercicios para adquirir los conceptos básicos.</p>\n\n<p>Es completamente gratuito, lo puedes descargar aquí: <a href=\"http://toc.cryptobook.us/\">A Graduate Course in Applied Cryptography</a>.</p>\n\n<h2 id=\"recursos-interactivos\">Recursos interactivos</h2>\n\n<p>En esta sección abarcaremos algunos recursos con más involucramiento que te permitirán poner manos a la obra.</p>\n<h3 id=\"cryptopals-crypto-challenges\">Cryptopals Crypto Challenges</h3>\n\n<p>Esta es una colección de ejercicios en los que programarás y atacarás algunos esquemas criptográficos para entenderlos profundamente. Los ejercicios varían bastante en dificultad y debes tener fuertes bases de criptografía (como la provista por los libros sugeridos anteriormente) y de programación para poder realizarlos.</p>\n\n<p>Puedes verlos aquí: <a href=\"https://cryptopals.com/\">the cryptopals crypto challenges</a>.</p>\n<h3 id=\"cryptohack\">Cryptohack</h3>\n\n<p>Es una herramienta que te enseñará las bases de la criptografía con ejercicios y retos interactivos. Tiene una comunidad y los incentivos de un juego, que te ayudarán a mantenerte motivado y a aprender más. Pueder visitarla aquí: <a href=\"https://cryptohack.org/\">Cryptohack</a>.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1639199460/Screen_Shot_2021-12-10_at_23.10.36_xzer7u.png\" alt=\"Logo de Cryptohack\" class=\"align-center\" /></p>\n\n<h1 id=\"cursos-en-video\">Cursos en video</h1>\n\n<p>En esta sección te recomendaremos buscar en las principales plataformas de cursos masivos online, como EDX y Coursera, ya que existen múltiples cursos impartidos por universidades importantes, con un estilo académico. Puedes probar varios estilos de instructor y elegir el que más te guste. Un curso un poco menos académico y con explicaciones bastante buenas es el <a href=\"https://www.udacity.com/course/applied-cryptography--cs387\">Curso de Criptografía Aplicada Gratuito de Udacity</a>.</p>\n\n<h2 id=\"recursos-en-español\">Recursos en español</h2>\n\n<p>Finalmente, veamos algunos recursos en español por si sientes que el inglés no lo dominas lo suficiente para meterte a temas complejos como este.</p>\n\n<h2 id=\"curso-de-criptografía-informática-básica-para-principiantes\">Curso de Criptografía Informática Básica para principiantes</h2>\n\n<p>En este curso introductorio el instructor te enseñará con ejemplos sencillos los conceptos más básicos de la criptografía y algunos ejemplos con Python. Lo puedes ver en YouTube aquí: <a href=\"https://www.youtube.com/playlist?list=PLG1hKOHdoXkt1V51gyPMZqgQ8LjK3LfmJ\">Curso de Criptografía Informática Básica para principiantes</a>.</p>\n\n<h2 id=\"curso-introductorio-a-la-teoría-de-números-y-criptografía\">Curso introductorio a la teoría de números y criptografía</h2>\n\n<p>Este es un curso mucho más profundo en las matemáticas que soportan los esquemas criptográficos, con ejemplos explicados paso a paso, para comprender las bases matemáticas, la puedes ver aquí: <a href=\"https://www.youtube.com/playlist?list=PLterBef0AD5ZyXFaDfueQYXkLMs_OVkoV\">Curso introductorio a la teoría de números y criptografía</a>.</p>\n\n<h3 id=\"crypt4you\">Crypt4You</h3>\n\n<p>Es un proyecto gratuito creado en 2012 en españa en el que se recorren los principales temas de la criptografía moderna. Debido a la edad del curso, debes ser precavido porque puede que algunas cosas hayan cambiado desde que se creó, por ejemplo, que SHA-1 ya no se considera seguro.</p>\n\n<p>Presentación oficial: <a href=\"https://www.dragonjar.org/crypt4you-aprende-criptografia-y-seguridad-informatica-de-otra-forma-y-gratis.xhtml\">Crypt4You</a>.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>En esta pequeña guía incluimos algunos recursos que te pueden ayudar para empezar a <strong>rascar la superficie</strong> de la criptografía. Estamos trabajando en un temario completo que no sólo te de la introducción, sino que te ayude a llegar a la parte avanzada si así lo deseas. Esperamos tus comentarios si se nos pasó algún recurso.</p>\n",
      "date_published": "Wed, 08 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/07/generadores-de-numeros-aleatorios-y-su-importancia-para-el-desarrollo.html",
      "url": "https://blog.thedojo.mx/2021/12/07/generadores-de-numeros-aleatorios-y-su-importancia-para-el-desarrollo.html",
      "title": "Generadores de números aleatorios y su importancia",
      "content_html": "<p>Muy comúnmente los sistemas informáticos requieren de valores aleatorios para diferentes procesos, por ejemplo, para ordenar las cosas, para seleccionar elementos de un conjunto, para simulaciones, para tomar diferentes caminos en un proceso (como los videojuegos).</p>\n\n<p>Un lugar en el que los valores aleatorios tienen una importancia especial es <strong>en criptografía</strong> y en la seguridad informática. De hecho, los números aleatorios están muy relacionados con la generación de valores usables en criptografía como llaves, por ejemplo.</p>\n\n<p>Veamos cómo se generan y cómo puedes usar correctamente los generadores de números aleatorios, pero antes empecemos a hablar de qué es la aleatoriedad y cómo podemos entenderla intuitivamente.</p>\n\n<h2 id=\"aleatoriedad\">Aleatoriedad</h2>\n\n<p>La aleatoriedad tiene que ver con la <em>probabilidad</em> de obtener cierto valor de un conjunto (universo) de valores posibles. Los valores aleatorios son impredecibles, no puedes asegurar que uno tiene más probabilidades de salir que otro. Ahora conecta los dos conceptos anteriores: para que un valor sea aleatorio debe de ser extraído de un conjunto de valores con la misma probabilidad de aparecer, lo que se conoce como una <strong>distribución uniforme</strong>.</p>\n\n<p><strong>Ejemplo:</strong> una moneda lanzada puede entregar dos valores, cara o cruz (águila o sol en México). Es imposible asegurar que va a salir uno u otro valor, debido a que ambos valores tienen la misma probabilidad de salir. Y muchos procesos físicos se comportan de esta misma manera.</p>\n\n<p>Si en el universo de valores posibles es más probable que salga cierto valor, entonces empezamos a perder aleatoriedad, imagínate por ejemplo el caso de una moneda o dado cargado.</p>\n\n<p>Los humanos percibimos un valor como aleatorio si <em>parece</em> poco probable que hayamos obtenido ese valor específicamente, pero no siempre es así.</p>\n\n<p>La aleatoriedad se puede medir a través de <em>entropía</em>, que es la cantidad de información disponible en todo el espacio de valores. La entropía es la sumatoria de la probabilidad de aparecer de cada valor multiplicado por su logaritmo base 2, y <strong>se mide en bits</strong>. Una generador con aleatoriedad perfecta entrega <strong>tantos bits de entropía como valores posibles</strong>.</p>\n\n<h2 id=\"generadores-de-números-aleatorios\">Generadores de números aleatorios</h2>\n\n<p>Los programadores podemos usar la aleatoriedad si tenemos un <strong>generador de números aleatorios</strong>.</p>\n\n<p>Un generador de números aleatorios es un programa que te entrega una <strong>serie de bits</strong> aleatorios, es decir, impredecibles desde el punto de vista externo. Estos bits se pueden usar entonces para crear un número aleatorio.</p>\n\n<p>Haya generadores de diferentes tipos dependiendo de su fuente de entropía (información impredecible) y de cómo la usen. Hablemos de los diferentes tipos, sus características, y cómo usarlos.</p>\n\n<h2 id=\"true-random-number-generators\">True Random Number Generators</h2>\n\n<p>A esta clase de generadores también se le conoce simplemente como <strong>generadores de números aleatorios</strong> (Random Number Generators o <strong>RNG’s</strong>). Los RNGs toman su fuente de entropía de <strong>lugares físicos</strong>, dado que el mundo real es impredecible. Miden las variaciones en los semiconductores, la manera en la que mueves el ratón, el teclado, información de los sensores de la computadora, el micrófono, la red y muchas otras cosas. Hay algunos que toman su entropía de procesos cuánticos incluso, conocidos como <strong>generadores de números aleatorios cuánticos</strong> o <em>QRNGs</em>.</p>\n\n<p>Estos elementos físicos son fuentes confiables de entropía, pero no podemos confiar en nuestra manera de medirla o “capturarla”, además de que pueden ser sesgados por un usuario malintencionado o atacante. Además son lentos para generar los bits aleatorios que las aplicaciones pueden requerir.</p>\n\n<p>Es normal que un RNG se quede sin suficiente entropía para servir a las aplicaciones que lo usan, por lo que terminaría bloqueándola o haciéndola insegura.</p>\n\n<p>Es por esto que los generadores de números aleatorios a menudo se complementan de los generadores de números pseudo-aleatorios, de los que hablaremos a continuación.</p>\n\n<h2 id=\"pseudo-random-number-generators\">Pseudo-Random Number Generators</h2>\n\n<p>Los generadores de números pseudo-aleatorios (<strong>PRNGs</strong>) son aquellos que no toman su fuente de entropía de lugares físicos, sino que la generan a partir de una semilla o <em>seed</em>. Siempre que reciban la misma semilla generarán la misma secuencia de bits que <em>parece</em> aleatoria, pero en realidad es determinista.</p>\n\n<p>Si conocemos la semilla y el algoritmo, podríamos predecir la secuencia de bits que resultará en cada llamada. Si la distribución de probabilidad de los bits es uniforme o cerca de uniforme, entonces la secuencia de bits parecerá aleatoria, lo cuál es útil para la mayoría de las aplicaciones.</p>\n\n<p>Los PRNGs no se quedan sin entropía para seguir sirviendo bits, ya que la generan artificialmente, normalmente con algoritmos matemáticos y <em>piscinas</em> o <em>pools</em> de bits.</p>\n\n<p>Una forma de crear un PRNG es usando como semilla un RNG, que tome su fuente de lugares físicos y <em>expendiendo</em> esta entropía a un número más grande de bits. Esto lo hace mediante la actualización de un estado interno mediante la recepción de bits verdaderamente aleatorios de un RNG.</p>\n\n<h2 id=\"cryptographically-secure-pseudo-random-number-generators\">Cryptographically Secure Pseudo-Random Number Generators</h2>\n\n<p>Los PRNGs critpográficamente seguros requieren dos características extras para ser usados en criptografía:</p>\n\n<ol>\n  <li>\n    <p><strong>Discreción hacia adelante</strong>. En inglés conocida como <strong>forward secrecy</strong>, se refiere a que es imposible predecir los bits que generará a continuación.</p>\n  </li>\n  <li>\n    <p><strong>Discreción hacia atás</strong>. Se refiere a que, dados los bits de un número aleatorio generado, es imposible conocer los bits que le precedieron, que se entregaron en llamadas anteriores.</p>\n  </li>\n</ol>\n\n<p>Cuando hablamos de <strong>“imposible</strong>” en términos de criptografía, normalmente nos referimos a que es <em>computacionalmente infactible</em> resolver el problema propuesto. Para que esto sea cierto basta con que no exista un <strong>algoritmo de tiempo polinomial</strong> que funcione para resolver el problema.</p>\n\n<p>En pocas palabras, los PRNGs criptográficos son <em>impredecibles completamente</em>.</p>\n\n<h2 id=\"ejemplos\">Ejemplos</h2>\n\n<p>Algunos PRNGs que puedes usar son:</p>\n\n<ul>\n  <li>\n    <p><strong>/dev/urandom</strong> de los sistemas UNIX: genera bits aleatorios combinando lecturas del uso del sistema (RNG de hardware) y un generador por software, de manera que haya siempre suficientes bits. Si quieres conocer más a detalle cómo funciona, este artículo te lo explicará: <a href=\"https://www.redhat.com/en/blog/understanding-random-number-generators-and-their-limitations-linux\">Understanding random number generators and their limitations on Linux</a>.</p>\n  </li>\n  <li>\n    <p><strong><a href=\"https://github.com/ESultanik/mtwister\">Meresenne Twister</a></strong>: genera bits aleatorios con una distribución uniforme, pero no sirve para criptografía porque es predecible. Dada cierta cantidad de bits es posible predecir la secuencia de bits que generará a continuación. Aún así, el MT se comporta mejor que algunos otros PRNGs incluidos en los lenguajes de programación.</p>\n  </li>\n  <li>\n    <p><strong>PRNG’s en procesadores</strong>: Tanto AMD (desde 2015), como Intel (Desde 2013) tienen PRNGs embebidos dentro de los procesadores que pueden ser usados mediante instrucciones específicas (RDRAND y RDSEED).</p>\n  </li>\n  <li>\n    <p><strong>Fortuna</strong>. Es un algoritmo criptográficamente seguro diseñado en 2003, en el que están basadas la generación de números aleatorios de MacOS y iOS.</p>\n  </li>\n</ul>\n\n<h2 id=\"cómo-usar-un-prng\">Cómo usar un PRNG</h2>\n\n<p>Si quieres generar números aleatorios para uso general, sin garantía de que sea impredecible, puedes usar un PRNG común implementado en tu lenguage de programación favorito. Generalmente las funciones <code class=\"language-plaintext highlighter-rouge\">rand()</code> de Python o <code class=\"language-plaintext highlighter-rouge\">mt_rand()</code> de PHP son bastante buenas para esto.</p>\n\n<p>Sin embargo, para generar números aleatorios para criptografía, debes usar un PRNG especializado, generalmente basado en los provistos por el sistema operativo.</p>\n\n<p>Aunque podrías escribir una función que se comunique con el sistema operativo para obtener un flujo de bits aleatorios, tendrías que hacer lo suficiente para asegurarte de que esos bits sean de calidad (con una alta entropía). Es por esto que como desarrollador es mejor usar las implementaciones de la biblioteca estándar de criptografía de tu lenguaje, a menos que tengas requerimientos muy específicos, y sobre todo, sepas cómo verificar que tienes la entropía suficiente.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Conocer cómo funciona un PRNG, a parte de algo interesante, es útil para no usarlos mal. Siempre que requieras números aleatorios para usarlos con relación a la seguridad de la información, <strong>deberías usar un PRNG criptográfico</strong>. En cualquier otro caso, un PRNG como el <em>Meresenne Twister</em> es suficiente. Además, ahora sabes que los RNGs basados en procesos físicos, a pesar de las garantías de entropía que prometen, no son muy confiables en el sentido de que no siempre están disponibles, pero hay soluciones de hardware especializadas que te pueden ayudar si tienes un problema muy específico.</p>\n\n<p>Finalmente, la mejor opción para usar un PRNG es confiar en la implementación de la plataforma y lenguaje en el que estés trabajando.</p>\n",
      "date_published": "Tue, 07 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/06/por-que-deberias-aprender-typescript.html",
      "url": "https://blog.thedojo.mx/2021/12/06/por-que-deberias-aprender-typescript.html",
      "title": "¿Por qué deberías aprender TypeScript?",
      "content_html": "<p>TypeScript es uno de los lenguajes que más ha sonado en los últimos años. En este artículo vamos a hablar de por qué es una buena idea que lo aprendas y las ventajas que te puede dar.</p>\n\n<h2 id=\"acerca-de-typescript\">Acerca de TypeScript</h2>\n\n<p>El propósito de TypeScript es tener un lenguaje adecuado para crear grandes sistemas que compile a JS. En realidad, todo programa válido en JS también es Válido en TypeScript. La principal diferencia que verás en TypeScript con respecto a JS es que este soporta anotaciones e inferencia de tipos de datos y los verifica en tiempo de compilación. Así que si tu programa no pasa la verificación de tipos, ni siquiera podrá llegar a correr. Algunas de las características de TypeScript son:</p>\n\n<ol>\n  <li><strong>Anotaciones de tipos.</strong> Puedes especificar el tipo de dato de una variable o función.</li>\n  <li><strong>Inferencia de tipos.</strong> No requiere que se especifique el tipo de dato de una variable explicitamente, ya que lo puede inferir por los valores que le asignas.</li>\n  <li><strong>Verificación de tipos.</strong> Verifica que tu programa cumpla con los contratos de los tipos de datos.</li>\n  <li><strong>Borrado de tipos.</strong> Se refiere a la eliminación de tipos de datos de un programa antes de dejarlo listo para correr pero después de verificarlo.</li>\n  <li><strong>Compilación a una versión específica de JS</strong>. Puedes especificar a qué versión de JS se compilará tu programa.</li>\n  <li><strong>Genéricos</strong>. Puedes crear funciones que reciban tipos de datos variables.</li>\n</ol>\n\n<p>Es por esto que muchos lo ven como un <strong>JavaScript tipado</strong>. Es cierto que cumplir con los contratos de los tipos es un trabajo extra, pero es una buena idea y un trabajo que vale la pena cuando tienes que hacer un sistema grande. El tipado estático puede protegerte de errores al mismo tiempo que es una capa extra de documentación.</p>\n\n<p>TypeScript (de aquí en adelante le diremos <strong>TS</strong>) fue creado por Microsoft y lanzado al público ne 2012 todavía sin una versión estable. Detrás de él está (Anders Hejlsberg)[https://twitter.com/ahejlsberg], también diseñador de C#, y creador de Delphi y Turbo Pascal. En 2021 vamos en la versión <strong>4.5</strong>, con muchísimos avances desde su primera versión pública.</p>\n\n<h2 id=\"por-qué-deberías-aprender-typescript\">¿Por qué deberías aprender TypeScript?</h2>\n\n<p>Ya empezamos a hablar de algunas ventajas en la descripción de lo que es TS. Veamos otras con más detenimiento.</p>\n\n<h3 id=\"reduces-los-errores-en-producción\">Reduces los errores en producción</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">undefined is not a function</code> es uno de los errores que más estamos acostumbrados a ver cuando programaos en JS. Este es un error causado por que algo que esperábamos que tuviera una función no la tiene en tiempo de ejecución. Con TypeScript, esto no sucede, ya que te obliga a cumplir con un contrato de tipo de objeto y si no cuenta con cierto atributo, ni siquiera compila. Por ejemplo:</p>\n\n<div class=\"language-ts highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">type</span> <span class=\"nx\">Person</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">age</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">sayHello</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">hector</span><span class=\"p\">:</span> <span class=\"nx\">Person</span>  <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Héctor</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">age</span><span class=\"p\">:</span> <span class=\"mi\">30</span>\n<span class=\"p\">};</span>\n</code></pre></div></div>\n\n<p>Este código te dará un error <strong>cuando lo intentes compilar</strong> diciendo que el objeto asignado a Héctor no tiene la propiedad <code class=\"language-plaintext highlighter-rouge\">sayHello</code>, protegiéndote así de que se te pase algo que creías que estaba bien a producción. Lo mismo sucedería si la propiedad existiera, pero la función tuviera diferentes tipos de entrada y de salida.</p>\n\n<p>Como todo en la programación, esto es un arma de doble filo, ya que puede reducir el tiempo “crudo” de desarrollo, es decir, el tiempo que te lleva programar por primera vez algo listo pra probar, pero reducirá el tiempo total de desarrollo sobre todo si tu programa es grande.</p>\n\n<p>Como punto final, es que probablemente <strong>ni siquiera tengas que correr el código para darte cuenta de que está mal</strong>, ya que tu editor de código, aprovechándose de la características de TS, te avisará que algo está mal ahí.</p>\n\n<h3 id=\"tu-editor-o-ide-puede-ser-más-útil\">Tu editor o IDE puede ser más útil</h3>\n\n<p>La información extra que el sistema de inferencia de TS da, o las anotaciones de tipos que tú pones, le dan información al editor que le permite ayudarte de mejor manera, con autocompletados más eficientes, aviso de incumplimiento de contratos en los tipos, etc. Esto contrarresta el tiempo que te llevará extra trabajar con esos tipos.</p>\n\n<h3 id=\"la-refactorización-será-más-fácil\">La refactorización será más fácil</h3>\n\n<p>Tener una capa de protección en forma de un sistema de tipos es una capa extra de información que evitará que rompas tu código si lo cambias para mejorarlo manteniendo la funcionalidad. Pero además de eso, muchas herramientas ofrecen funciones de refactorización automática que se aprovecharán de esta misma información para hacerla de manera más segura y efectiva.</p>\n\n<h2 id=\"desventajas-de-typescript\">Desventajas de TypeScript</h2>\n\n<p>Personalmente, y lo digo como alguien que ha trabajado tanto en lenguajes con tipado estático y dinámico, creo que para un programador que ha estado acostumbrado a trabajar con tipado dinámico toda su vida sufrirá un poco cuando lo pongas a trabajar en lenguajes como TypeScript y hay situaciones en las que te metes en un verdadero embrollo tratando de cumplir con el sistema de tipos. Esto puede causar algunos retrasos, pero como lo hemos mencionado a lo largo del artículo, los beneficios de usar TS en un sistema grande superan con creces estas restricciones añadidas.</p>\n\n<p>Otra desventaja del código de TypeScript es que puede pasar que el código se vea menos legible si se llena de tipos, pero con el tiempo los programadores pueden aprender en dónde vale la pena poner anotaciones de tipos explícitas contra aprovecharse de la inferencia automática de TS.</p>\n\n<h2 id=\"quieres-aprender-typescript\">¿Quieres aprender TypeScript?</h2>\n\n<p>Algunos recursos gratuitos que puedes usar para aprender TS:</p>\n\n<ol>\n  <li><a href=\"https://exploringjs.com/tackling-ts/toc.html\">Tackling TypeScript</a> del Dr. Alex Rauschmayer</li>\n  <li><a href=\"https://www.typescriptlang.org/docs/handbook/intro.html\">The TypeScript Handbook</a> de Microsoft</li>\n</ol>\n\n<p>Estos dos recursos están en inglés. Algunos recursos en español:</p>\n\n<ol>\n  <li><a href=\"https://www.youtube.com/watch?v=8fnhN1HRPB4\">Curso práctico desde cero</a></li>\n  <li><a href=\"https://www.youtube.com/watch?v=Xxqh0RoWxNc\">Curso Práctico Rápido desde cero para Iniciantes</a></li>\n</ol>\n\n<p>Una herramienta de pago que recomiendo muchísimo, tanto por su contenido como por su técnica didáctica es <a href=\"https://www.executeprogram.com/\">Execute Program</a> creada por <a href=\"https://destroyallsoftware.com\">Gary Bernhardt</a>.</p>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Si quieres continuar con sistemas serios para entornos que solamente ejecuten JS, una de tus mejore opciones es TypeScript. Las restricciones y la información extra que proporciona el sistema de tipos sobre tu código común supercargará tu proceso de desarrollo desde las herramientas de programación como el editor hasta la protección contra errores en tiempo de compilación.</p>\n",
      "date_published": "Mon, 06 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/05/entendiendo-la-cohesion-y-el-acoplamiento-en-el-software.html",
      "url": "https://blog.thedojo.mx/2021/12/05/entendiendo-la-cohesion-y-el-acoplamiento-en-el-software.html",
      "title": "Entendiendo la cohesión y el acoplamiento en el software",
      "content_html": "<p>Siempre se dice que una buena base de código tiene alta <strong>cohesión</strong>, pero bajo <strong>acoplamiento</strong>. ¿Cómo se puede entender esto? ¿Cómo podemos llevar este principio a la práctica?</p>\n\n<p>En este artículo vamos a definir cada uno de esos términos de manera sencilla, y con ejemplos de cómo llegar a la aplicación real de estos términos.</p>\n\n<h2 id=\"un-poco-de-historia\">Un poco de historia</h2>\n\n<p>Estos dos conceptos y otros relacionados fueron desarrollados por <a href=\"https://history.computer.org/pioneers/constantine.html\">Larry Constantine</a> en la década de los 60’s y publicados en los años siguientes, junto con el nacimiento del <a href=\"https://www.win.tue.nl/~wstomv/quotes/structured-design.html\">diseño estructurado de sistemas</a>. Estos conceptos han sido aceptados y han sido objeto de muchos estudios sobre cómo afectan a la calidad del software realmente. Lo que se ha descubierto es que efectivamente, las dependencias infinitas (alto acoplamiento y baja cohesión) crean problemas que son casi imposobles de resolver en las bases de código y es cuando terminamos diciendo: <em>“Es más fácil hacerlo de nuevo.”</em></p>\n\n<p>Ahora sí, hablemos de lo que quisiéramos lograr con nuestro software, para no terminar queriéndolo rehacer de nuevo en poco tiempo.</p>\n\n<h2 id=\"cohesión\">Cohesión</h2>\n\n<p>La <strong>cohesión</strong> de los módulos se refiere al grado en que los componentes de cierto módulo <strong>se relacionan entre sí</strong>. Es decir, un módulo tiene <strong>alta cohesión</strong> si todos, o la mayoría de sus componentes trabajan para un mismo objetivo y no para cosas dispares o no relacionadas.</p>\n\n<p>Una buena cohesión permitirá que el componente <em>utilice menos otros módulos externos</em>, ya que la mayoría de lo que requiere para realizar su trabajo está en el mismo módulo.</p>\n\n<p>Para lograr esto, normalmente tienes que reducir las tareas de las que el módulo es responsable al menor grado posible, tratando de seguir el principio de responsabilidad única.</p>\n\n<p>Pongamos un ejemplo: imagina que estás creando un chatbot, un programa que, usando las API’s de los aplicaciones de comunicación te permite interactuar con tus usuarios en forma de chat, en lugares como WhatsApp, Messenger o Slack. El sistema tiene como requerimiento que la lógica de conversación sea fácil de reemplazar y mantener y que funcione independientemente del canal.</p>\n\n<p>Para implementar este sistema los rompemos por lo menos en tres módulos: el manejo de usuarios, la lógica de conversación y la conexión son los canales de comunicación.</p>\n\n<p>Una buena cohesión se refiere a que, por ejemplo, la lógica de conversación y todo lo necesario para decidir cómo conversar con un usuario exista dentro de este mismo módulo. Así, cuando tengas que actualizarla no tienes que tocar todo el sistema o muchas partes del código. Esto mismo aplicaría para los otros módulos, imagínate que tienes que agregar un canal nuevo, por ejemplo, Telegram. Tu módulo de conexión a canales debería tener todo lo necesario para que no tengas que modificar ni el módulo de usuarios, ni el de la lógica de conversación.</p>\n\n<p>Una forma efectiva de crear módulos cohesivos es mediante <strong>agrupar</strong> todas las partes que tienen que ver con el mismo tema abstracción o decisión en el mismo módulo<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> o clase. Esto casi nunca se puede lograr perfectamente, pero es una buena meta que te ahorrará dolores de cabeza.</p>\n\n<h2 id=\"acoplamiento\">Acoplamiento</h2>\n\n<p>El <strong>acoplamiento</strong> consiste en el grado de dependencia de las diferentes partes de un sistema entre ellas. La pregunta clave para entender el acoplamiento es: <strong>¿Cuánto se necesita saber de un módulo para entender otro módulo?</strong></p>\n\n<p>Mientras más necesites saber de <strong>A</strong> para entender <strong>B</strong>, más <strong>A</strong> relacionados, o acoplados están.</p>\n\n<p>Por ejemplo, imagina una aplicación de e-commerce, que consiste de un catálogo, un carrito de compras y la parte del pago. Estos tres elementos pueden estar muy acoplados entre sí, en el sentido de que cualquier cambio en el catálogo afecta al carrito de compras y al pago, o al revés. Si puedes cambiar cualquiera de los tres módulos sin tener que tocar los otros, hay un bajo acoplamiento.</p>\n\n<p>El acoplamiento <strong>ideal sería cero</strong>, pero como te imaginarás esto es imposible.</p>\n\n<p>Los módulos pueden depender entre ellos de diferentes formas, tanto conceptualmente como en implementación. Constantine menciona que los siguientes cuatro factores pueden afectar el grado de acoplamiento de los módulos:</p>\n\n<ol>\n  <li>Tipo de conexión entre los módulos. ¿Escriben a las mismas variables globales? ¿Uno usa al otro? ¿Uno es la especialización de otro?</li>\n  <li>Complejidad de la interfaz: ¿Qué tan intrincada es la conexión entre los módulos?</li>\n  <li>Tipo de información que pasa entre la conexión: ¿se pasan grandes estructuras de datos que procesan de manera secuencial? O, ¿un módulo modifica la forma de trabajar de otro?</li>\n  <li>Tiempo en el que sucede la conexión: ¿depende uno de que el otro corra para poder ejecutarse?</li>\n</ol>\n\n<p>Tener en cuenta estos factores puede ayudar a reducir el acoplamiento de los módulos.</p>\n\n<h2 id=\"relación-entre-cohesión-y-acoplamiento\">Relación entre cohesión y acoplamiento</h2>\n\n<p>Constantine menciona que mientras más cohesión tengan los módulos, menos acoplamiento tendrán entre ellos. Esto suena lógico porque mientras más “autocontenido” sea un módulo (más cohesión) menos va a necesitar de otros para poder funcionar.</p>\n\n<blockquote>\n  <p>“A mayor cohesión de los módulos individuales en el sistema, menor será el acoplamiento” - <a href=\"https://www.win.tue.nl/~wstomv/quotes/structured-design.htm\">Structured Design by Yourdon and Constantine</a></p>\n</blockquote>\n\n<p>Como podrás ver, no son medidas independientes, sino correlacionadas en la práctica.</p>\n\n<h2 id=\"cómo-lograr-alta-cohesión-y-bajo-acoplamiento\">Cómo lograr alta cohesión y bajo acoplamiento</h2>\n\n<p>La principal forma de lograr esta buena estructura es dedicando tiempo al diseño del software,prestando especial atención a la forma en la que se modulariza el sistema, es decir, la forma en la que se divide el problemas en otros más pequeños.</p>\n\n<p><em>Constantine y Yourdon</em> afirman que la única forma de lograr esto es con práctica, práctica y más práctica.</p>\n\n<h2 id=\"conclusiones\">Conclusiones</h2>\n\n<p>El principio de “Alta cohesión y bajo acoplamiento” sin duda es útil para que nuestro software sea más claro, más fácil de mantener y de cambiar. No hay manera de aprender cómo dividir el sistema en módulos si no es mediante la práctica de diseño e implementación de sistemas reales. Así que, ya sabes, <strong>manos a la obra</strong>.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Cuando decimos “módulo” estamos hablando de la forma de tu lenguaje de agrupar funcionalidades, puede ser literalmente un módulo, un paquete, una aplicación etc. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Sun, 05 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/04/versiona-mejor-tu-codigo-versionamiento-semantico-y-commits-convencionales.html",
      "url": "https://blog.thedojo.mx/2021/12/04/versiona-mejor-tu-codigo-versionamiento-semantico-y-commits-convencionales.html",
      "title": "Versiona mejor tu código: versionamiento semántico y commits convencionales",
      "content_html": "<p>Una de las mejores cosas que podemos hacer por nosotros mismos y por nuestro equipo es versionar nuestro código y qué mejor que hacerlo de las mejores formas conocidas hasta el momento.</p>\n\n<p>En este artículo hablaremos de dos cosas conectadas: el <strong>versionamiento semántico</strong> y los <strong>“commits convencionales”</strong>.</p>\n\n<h2 id=\"por-qué-es-importante\">¿Por qué es importante?</h2>\n\n<p>Organizar y manejar tu código de tal manera que puedas crear diferentes versiones del sistema que estás programando, cambiar entre ellas o regresar una anterior, es un requerimiento de todos los procesos de desarrollo actuales.</p>\n\n<p>Además, presentar tu software a los usuarios finales en versiones iterativamente mejores es una buena práctica que te permitirá liberar más rápido, más seguido y frecuentemente con mejor calidad. Para lograr esto es importante <strong>comunicar correctamente lo que está cambiando en cada versión</strong>.</p>\n\n<p>La herramienta más usada para versionar nuestro código es <strong>git</strong>, pero no establece ningún lineamiento en la forma en la que liberamos el software para los usuarios finales. Así que veamos primeramente una forma de comunicar nuestros cambios de manera correcta y efectiva y después una forma de hacerlo conectarlo con nuestro proceso de trabajo con git.</p>\n\n<h2 id=\"versionamiento-semántico\">Versionamiento semántico</h2>\n\n<p>El versionamiento semántico (Semantic Versioning o SemVer) es una forma de <strong>comunicar a nuestros usuarios finales los tipos de cambios introducidos en las nuevas versiones.</strong></p>\n\n<p>Esto es muy importante porque, como seguramente habrás experimentado, un proyecto de software requiere de muchas dependencias y cuando alguna de ellas no funciona bien, tiene algunos bugs, o no es compatible con lo que ya existía, nos podemos meter en serios problemas. Y mientras más grande es el proyecto, más dependencias necesitarás, lo que agranda el problema.</p>\n\n<p>Lo que <strong>SemVer</strong> propone es una sintaxis formal que nos permite entender el tipo de cambios introducidos en cada versión. Esta sintaxis constituye un lenguaje formal que puede ser usado para resolver automáticamente problemas de dependencias si se usa correctamente.</p>\n\n<p>Antes de ver un ejemplo de una versión semántica es importante que aclaremos que esta se usa para software que tiene una interfaz establecida. Esta interfaz formal está completamente documentada para que otros programadores o usuarios finales pueden usar tu software. A esta interfaz le llamaremos <strong>API</strong> (Application Programming Interface)<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> a partir de ahora. Ahora sí, una versión en SemVer se ve así:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>1.0.2\n</code></pre></div></div>\n\n<p>El primer número es la versión mayor, en este caso 1. El segundo número es la versión menor, en este caso 0. El tercer número es la versión del parche, en este caso 2.</p>\n\n<p>Ahora bien, ¿que significa cuando cambian estos números?</p>\n\n<ol>\n  <li>\n    <p>Cuando cambia la versión mayor, se introducen cambios que hacen que la API sea incompatible con la versión anterior. Imagínate por ejemplo que se remueve alguna función o módulo que ya no se necesita. También puede ser que aunque no cambie explícitamente el contrato externo, cambie el significado de una operación.</p>\n  </li>\n  <li>\n    <p>Cuando cambia la versión menor, se han introducido cambios o mejoras que no hacen incompatible a la API con versiones anteriores. Imagínate algo como agregarle nuevos parámetros a una función, pero que soporta valores default para que pueda seguir siendo llamada de la forma anterior. O también puede ser que agregas nuevas partes que no afectan a la forma en la que se usan las antiguas.</p>\n  </li>\n  <li>\n    <p>Cuando cambia la versión de parche, no se ha introducido cambios externos a la interfaz por diseño, sino que se han arreglado errores que causaban mal funcionamiento.</p>\n  </li>\n</ol>\n\n<p>Después de estos tres elementos pueden venir otros detalles, como por ejemplo la versón de prelanzamiento y metadatos de la compilación.</p>\n\n<p>En el documento oficial <a href=\"https://semver.org/lang/es/\">Versionamiento Semántico 2.0</a> puedes ver más detalles sobre cómo trabajar con él, pero sobre todo notarás lo importante y serio que es que comuniquemos correctamente lo que está pasando con el software que hacemos, sobre todo si otros dependen de él. También podrás ver como las cadenas resultantes de semantic versioning son un lenguaje formal en el que se puede confiar para programar resolución de dependencias, hasta tienen un regex para reconocerlas.</p>\n\n<p>Ahora veamos una herramienta que te ayudará a llevar cuenta del tipo de cambios que se van introduciendo en tu software y base de código.</p>\n\n<h2 id=\"commits-convencionales\">Commits convencionales</h2>\n\n<p>Los <a href=\"https://conventionalcommits.org/\">commits convencionales (Conventional Commits)</a> son una forma de estructurar tus mensajes de cada commit para comunicar explícitamente lo que estás cambiando. El objetivo es que 1) puedas saber exactamente lo que el equipo ha cambiado en cada nueva versión o rama y 2) poder automatizar la creación de versiones semánticas y registros de cambios (changelog).</p>\n\n<p>Un commit convencional tiene la siguiente estructura:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;tipo de commit&gt; [ámbito (opcional)]: &lt;descripción&gt;\n\n[cuerpo (opcional)]\n\n[notas finales (opcional)]\n</code></pre></div></div>\n\n<p>Los tipos de commit directamente establecidos por la especificación son:</p>\n\n<ol>\n  <li>fix: Se trata de una corrección de un bug. Este tipo de commit se relaciona con una nueva versión de parche.</li>\n  <li>feat: Se trata de una nueva función o módulo. Este tipo de commits se relaciona con una nueva versión menor.</li>\n  <li>BREAKING CHANGE: No es un tipo de commit sino una nota final. Siempre que se incluyan debe generarse una nueva versión mayor en la siguiente liberación.</li>\n</ol>\n\n<p>Si se incluye un símbolo de admiración después del tipo de commit como de esta forma <code class=\"language-plaintext highlighter-rouge\">feat!</code> significa que este commit introduce un cambio que rompe la compatibilidad con la versión anterior.</p>\n\n<p>El <strong>ámbito</strong> puede referirse a la base de código o módulo al que se aplicó el cambio.</p>\n\n<p>Veamos algunos ejemplos:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>feat(core): Ahora podemos usar ARGON2i para cifrar las contraseñas\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>fix!: Removemos la compatibilidad con SHA-1 debido a que no es seguro\n\nSe encontró que SHA-1 no es seguro debido a que se pueden fabricar colisiones y por lo tanto hemos removido el soporte en la plataforma\n</code></pre></div></div>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>feat: Añadimos el soporte de Sal para todas las funciones de hasheo\n\nBREAKING CHANGE: Todas las firmas de función ahora requieren el parámetro `salt`\n</code></pre></div></div>\n\n<p>Básicamente en esto consisten los commits convencionales y si tu base de código los sigue, podrás usar herramientas para automatizar la creación de versiones semánticas y registros de cambios (changelog), ademas de mejorar drásticamente la información que se encuentra en los repositorios y cuándo sucedieron los cambios.</p>\n\n<p>Puedes ver la especificación completa, más tipos de commits, ejemplos y las herramientas que te facilitarán la vida en <a href=\"https://conventionalcommits.org/es/\">la página oficial en español</a>.</p>\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Comunicar correctamente el estado de nuestros sistemas y módulos hacia nuestros usuarios finales es una tarea muy importante para los desarrolladores de software profesionales. Como podrás haber notado, para que esto tenga utilidad, el requisito previo es que exista documentación formal de tu software.</p>\n\n<p>Espero que estas herramientas te ayuden a crear software que sea más fácil usar, mantener y más disfrutable tanto para ti como para tus usuarios finales.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Aquí puedes ver por qué se llama una API a la interfaz que presenta una pieza de software a otra: <a href=\"https://youtu.be/n8MxyHG0j3Q\">API’s con Hug</a> <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
      "date_published": "Sat, 04 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/03/algoritmos-criptograficos-hashes-seguros-para-alamcenar-passwords.html",
      "url": "https://blog.thedojo.mx/2021/12/03/algoritmos-criptograficos-hashes-seguros-para-alamcenar-passwords.html",
      "title": "Algoritmos criptográficos: hashes seguros para alamcenar passwords",
      "content_html": "<p>Una práctica común para solucionar la identificación de usuarios es registrarlos con su nombre de usuario y contraseña. Para no almacenar su contraseña directamente, es una costumbre <em>hashearla</em>. Como aprendiste <a href=\"/2021/12/02/algoritmos-criptograficos-que-es-un-hash.html\">en el artículo anterior</a>, un hash es una función que impide recuperar el valor original ya que simplemente la información se pierde.</p>\n\n<p>Los hashes seguros hacen casi imposible encontrar una colisión (que dos passwords te devuelvan un mismo hash), por lo que parecerían una buena solución para crear un valor único para cada usuario. Debido a que son deterministas, cuando el usuario te da su password, calculamos el hash de nuevo, lo comparamos con el hash almacenado y verificamos si coinciden. En este caso, el usuario está autenticado.</p>\n\n<p>¿Pero qué hash puedes usar para hashear un password? Todos hemos escuchado <em>que no se debe usar MD5 para hashear passwords</em>, pero la razón por la que se menciona que esto es un error normalmente no es la correcta. Se argumento que MD5 es un hash que está “roto”, ya que es posible romper su seguridad con menos esfuerzo computacional del que su tamaño requeriría. Esto es cierto, pero no es la razón principal por la que no deberías usar MD5 para passwords.</p>\n\n<p>La verdadera razón por la que nunca debes usar MD5 para esto es que <strong>no está diseñado para esa función</strong>, y puede ser atacado de manera sencilla y efectiva.</p>\n\n<p>Hablemos de algunos tipos de ataques que pueden sufrir los sistemas de almacenamiento de información que usan un hash seguro normal para hashear sus passwords.</p>\n\n<h2 id=\"ataques-de-fuerza-bruta\">Ataques de fuerza bruta</h2>\n\n<p>Un hash seguro que no presenta vulnerabilidades tiene la característica de que no hay una forma más inteligente de atacarlo que mediante probar todos los valores posibles de entrada. Por ejemplo, si sabemos que un sistema acepta letras y números y la mínima contraseña es de 6 carácteres, tendríamos que probar todas las combinaciones posibles de letras y números a partir de 6 carácteres.</p>\n\n<p>Eso suena a que es mucho, sin embargo, con los hashes seguros no es un problema para los atacantes ya que estos hashes son muy eficientes y están pensados para correr lo más rápido posible.</p>\n\n<p>Alguien con la suficiente motivación y paciencia podría lanzar un ataque de fuerza bruta con <em>hardware especializado</em> y encontrar un password que coincida con el hash. Esto se puede hacer con hardware común como CPU’s  y GPU’s domésticos, que llegan a procesar cientos de miles de passwords <strong>por segundo</strong>, o con hardware especializado en hashear (FPGA’s y ASIC’s).</p>\n\n<p>Herramientas como <a href=\"https://hashcat.net/hashcat/\">hashcat</a> te permiten hacer este tipo de ataques, pero lo más interesante es que debido a que conocemos la naturaleza de la información, podemos dirigir el ataque de manera un poco más inteligente, usando diccionarios de palabras y contraseñas comunes, haciendo todavía más probable romper la seguridad de estos sistemas.</p>\n\n<p>Repitamos: lo que permite este tipo de ataques son los objetivos de diseño de las funciones hash seguras: que sean rápidas, y eficientes en memoria. Esta es la primera razón por la que <strong>nunca debiste usar MD5</strong> es esta. Pero, como podrás deducir, lo mismo aplica para cualquiera de familia SHA (SHA-1, SHA-2, SHA-3 y los que vengan), BLAKE, BLAKE2 y los que vengan. No importa que estas funciones sigan siendo seguras para otros usos.</p>\n\n<h2 id=\"ataques-con-tablas-arcoiris-rainbow-tables\">Ataques con tablas arcoiris (Rainbow Tables)</h2>\n\n<p>Imagínate que eres un atacante que quiere descubrir los passwords de los usuarios de diferentes sitios y sabes que todos usan SHA-256. En vez de hacer una ataque de fuerza bruta cada vez, preparas una tabla con dos columnas: el hash y el password. En la columna de passwords pondrás valores que sabes que pueden servir de passwords a los usuarios.</p>\n\n<p>Esto que acabamos de describir es una versión sencilla de una <strong>Rainbow table</strong>, una colección de valores precalculados organizados para que, una vez teniendo el hash, puedas buscar el password correspondiente en la tabla. Se hace un intercambio de procesamiento por memoria. Las Rainbow Tables completas son un poco más complejas que lo que acabamos de describir, puedes leer más sobres ellas en este artículo: <a href=\"https://www.ionos.com/digitalguide/server/security/rainbow-tables/\">Rainbow Tables</a></p>\n\n<p>Debido al mal uso de los passwords y de los algoritmos para hasheo seguro, existen rainbow tables para millones de valores de todos los algoritmos. Aunque siguen siendo una amenaza, las Rainbow tables están cayendo en desuso, en favor de otros métodos más modernos y aprovechándose del poder de cómputo actual.</p>\n\n<h2 id=\"protección-contra-ataques-a-hasheo-de-passwords\">Protección contra ataques a hasheo de passwords</h2>\n\n<p>La forma de protegerse contra valores precalculados y ataques de diccionario es más o menos sencilla: antes de hashear el password, agrega un valor aleatorio extra que puedas recuperar fácilmente y añadir cada vez que verificas el password. Esto se conoce como <strong>salting</strong>, siendo el valor aleatoria el <strong>salt</strong>.</p>\n\n<p>Aunque es cierto que esto lo podrías hacer con cualquier algoritmo de hasheo seguro, se queda sin resolver el segundo problema: ¿Cómo nos protegemos contra ataques de fuerza bruta con hardware muy poderoso? Esto sólo se puede resolver de una forma: usando algoritmos que te obliguen a usar mucho procesamiento o mucha memoria, o ambos. Estas deben ser precisamente las metas de diseño de los algoritmos especializados en hasheo de passwords.</p>\n\n<p>Hablemos de algunos de ellos y finalizarmos con el que deberías usar actualmente en 2021.</p>\n\n<h2 id=\"hashes-seguros-para-passwords\">Hashes seguros para passwords</h2>\n\n<p>Como ya lo dijimos, estos hashes deben ayudarte con una cosa principal además de ser seguros criptográficamente: ser costos en proceamiento y/o memoria, lo que se traduce en lentitud.</p>\n\n<p>Pero además, algunos de estos algoritmos te ayudana a “salar” el password de manera automática, lo que es una ventaja para reducir errores en la implementación de esta práctica.</p>\n\n<p>En esta sección hablaremos de los algoritmos, cómo cumplen con estas características y si los puedes seguir usando.</p>\n\n<h3 id=\"pbkdf2\">PBKDF2</h3>\n\n<p><a href=\"https://www.ietf.org/rfc/rfc2898.txt\">PBKDF2</a> - Es un acrónimo que significa “Password Based Key Derivation Function”, versión 2.0 y que básicamente aplica un algoritmo de hasheo seguro a una contraseña repetidas veces. Puedes configurar el número de iteraciones, el algoritmo de hasheo, el tamaño del resultado y te pide el <em>salt</em> para funcionar. Fue usada por varios frameworks de desarrollo web como Django, pero actualmente no se considera segura porque aunque es exigente en cómputo para una computadora normal, es débil contra hardware especializado.</p>\n\n<h3 id=\"bcrypt\">bcrypt</h3>\n\n<p><a href=\"https://www.usenix.org/legacy/event/usenix99/provos/provos.pdf\">bcrypt</a> - Es un algoritmo diseñado específicamente con el objetivo de estar preparado para el mejoramiento que el hardware va teniendo, ya que tiene una “dificultad” configurable. Te provee <strong>automáticamente de un salt seguro</strong>, por lo que no recaerá en ti la responsabilidad de conseguirlo como en PBKDF2. Está basado en blowfish, otro algoritmo de cifrado que ha permanecido seguro. Bcrypt fue presentado en 1999 y sigue siendo considerado más o menos seguro, su recomendación está en duda ya que es posible atacarlo con hardware especializado y de bajo costo. <a href=\"https://www.usenix.org/system/files/conference/woot14/woot14-malvoni.pdf\">Este estudio de 2011</a> explica como se puede atacar con hardware especializado en cómputo paralelo y predijo muy bien que bcrypt no permanecería super seguro por mucho tiempo.</p>\n\n<h3 id=\"scrypt\">scrypt</h3>\n\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc7914\">scrypt</a> - Es una función diseñada para cubrir las carencias de PBKDF2 y bcrypt. Es tanto computacionalmente intensiva como pesada en memoria, por lo que no es tan fácil atacarla con hardware especializado. Es un función de muy reciente presentación, <a href=\"https://www.tarsnap.com/scrypt/scrypt.pdf\">Colin Percival la presentó en 2009</a>. Es una secuencia de funciones pesadas en memoria que impide que sea atacada fácilmente con GPU’s. FPGA’s y ASIC’s. Es una función que puedes usar conseguridad todavía ya que no se han encontrado ataques efectivos contra ella. Al igual que bcrypt, <em>sala</em> (usa un salt) automáticamente, lo que le facilita la vida al desarrollador.</p>\n\n<h3 id=\"argon2\">Argon2</h3>\n\n<p><a href=\"https://github.com/P-H-C/phc-winner-argon2/blob/master/argon2-specs.pdf\">Argon2</a> - Es la función más avanzada y con mejores garantías para generación de hashes resistentes a ataques con fuerza bruta. Es la ganadora del <a href=\"https://www.password-hashing.net/\">Password Hashing Competition</a> en 2015. Se dice que Argon2 es el estado del arte en lo que se refiere a hashing de passwords. Tiene tres variaciones principales: Argond2d, Argon2i y Argon2id.</p>\n\n<p>¿Cuándo usar cada una?</p>\n\n<ul>\n  <li>\n    <p><strong>Argon2d</strong>  es más rápida pero al mismo tiempo está mejor protegida contra ataques de fuerza bruta de hardware especializado, por la forma en la que usa la memoria, sin embargo, es más vulnerable a ataques <a href=\"https://www.rambus.com/blogs/side-channel-attacks/\">side-channel</a>. Es recoemndada cuando tus atacantes no tengan posibilidad de realizar estos ataques, como en servidores de backend y para generación criptomonedas.</p>\n  </li>\n  <li>\n    <p><strong>Argon2i</strong> es más lenta, más computacionalmente intensiva y resistente contra side-channel attacks, es la recomendada para hashear passwords. Da varias “pasadas” a los argumentos de entradda, por lo que es más dificil de atacar.</p>\n  </li>\n  <li>\n    <p><strong>Argon2id</strong> es un híbrido entre estas las dos variaciones anteriores, protegida parcialmente contra ataques side-channel al mismo tiempo que más computacionalmente intensiva que Argon2d. La recomendación es que si estás en incertidumbre uses Argon2d.</p>\n  </li>\n</ul>\n\n<p>Argon2 permite configurar:</p>\n\n<ol>\n  <li>\n    <p>Memoria usada: mientras más memoria se use, más resistente será el hash y menos vulnerable será a ataques de fuerza bruta.</p>\n  </li>\n  <li>\n    <p>Número de iteraciones sobre la memororia. Esto lo hace más computacionalmente intensivo, de igual forma haciéndolo más dificil de atacar, haciendo la generación de hashes más lenta.</p>\n  </li>\n  <li>\n    <p>Grado de paralelismo. Es el número de hilos que se usan para generar el hash, el tiempo de ejecución variará dependiendo de la configuración.</p>\n  </li>\n  <li>\n    <p>Tamaño del hash, el salt y el tag. Esto también varía el grado de resistencia de tus hashes.</p>\n  </li>\n</ol>\n\n<p>En el artículo <a href=\"https://www.twelve21.io/how-to-choose-the-right-parameters-for-argon2/\">“Cómo escoger los parámetros de Argon2”</a> se describe una forma de escoger los parámetros de Argon2.</p>\n\n<p>Finalmente, aunque no incluye la generación del salt en el algoritmo mismo, las implementaciones de Argon2 incluyen una función de generación de salt automática para que no tengas que hacerlo tú.</p>\n\n<h3 id=\"nota-sobre-funciones-de-derivación-de-llaves-key-derivation-functions\">Nota sobre Funciones de Derivación de Llaves (Key Derivation Functions)</h3>\n\n<p>Si lees algunas de las especificaciones de los algoritmos de arriba, probablemente te encuentres mucho con el término <strong>KDF</strong> o Key Derivation Function. ¿Qué es eso? ¿No estábamos hablando de funciones hash?</p>\n\n<p>Las KDF’s son funciones hash usadas para generar un cadena pseudo-aleatoria de bytes, que puede ser usada como una llave para cifrado, basadas en uno o varios valores de entrada. Las KDF’s son un caso especializados de las funciones hash y que pueden entregar resultados de tamaño variable y ya que los algoritmos usados aquí admiten varios valores y pueden entregar resultados variables, se consideran funciones de derivación de llaves o KDF’s.</p>\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>Aunque ninguna de las funciones mencionadas aquí es lo que se diría <em>fácil</em> de romper, es recomendable que no uses PBKDF2 o bcrypt si quieres tener un buen margen de seguridad y estar preparado para el futuro y para el mejoramiento de constante del hardaware. Si estas haciendo una aplicación lo más recomendable es que uses por lo menos scrypt, pero idealmente Argon2i, que es más fuerte que scrypt usando los mismos parámetros de esfuerzo. Esto es de esencial importancia sobre todo si estás haciendo un sistema en el que los atacantes puedan tener incentivos y recursos para robar información.</p>\n",
      "date_published": "Fri, 03 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/02/algoritmos-criptograficos-que-es-un-hash.html",
      "url": "https://blog.thedojo.mx/2021/12/02/algoritmos-criptograficos-que-es-un-hash.html",
      "title": "Algoritmos criptográficos: ¿Qué es un Hash?",
      "content_html": "<p>Dentro del mundo del desarrollo se escucha bastante sobre <strong>funciones hash</strong> y, en realidad, se usan para múltiples cosas. En este artículo vamos a hablar de lo que es una función hash, los diferentes tipos que hay y cómo pueden servirte para desarrollar software.</p>\n\n<h2 id=\"qué-es-un-función-hash\">¿Qué es un función hash?</h2>\n\n<p>La idea y el nombre de un función hash viene de la cocina: <em>hash</em> se traduce literalmente como “picadillo”, y se usa precisamente porque eso hace una función hash con los datos que le pasemos.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/c_scale,w_500/v1638503321/melissa-walker-horn-ufs4w3Jn73I-unsplash_q4m1qy.jpg\" alt=\"Un platillo que parece picadillo\" class=\"align-center\" /></p>\n\n<p>Las funciones hash reciben una entrada y normalmente te devuelven un valor de tamaño fijo. Estos datos parecen “picadillo”, es imposible para los humanos distinguir los argumentos que recibió <em>a partir de la salida</em>. Las funciones hash más simples <em>mapean</em> los valores de entrada a un número pequeño, <a href=\"https://www.cs.hmc.edu/~geoff/classes/hmc.cs070.200101/homework10/hashfuncs.html\">aquí puedes ver algunos ejemplos</a>. Estas funciones las puedes considerar como un mapeo de valores (con posibilidades infinitas) a un conjunto de valores finitos. Por eso, una función hash de esta naturaleza se considera como una relación del valor de entrada con su “contenedor” o “bucket” como le dirían en inglés.</p>\n\n<p>Las funciones hash son como navajas suizas, ya que pueden ser utilizadas para ocultar datos, para crear estructuras de datos llamadas <strong>hash tables</strong>, para comparar datos, para crear firmas digitales (verificación de integridad) y muchas otras cosas. Tienen muchos usos dentro y fuera de la criptografía.</p>\n\n<p>Existen diferentes tipos de funciones hash para los diferentes usos, las características que normalmente verás en hashes son:</p>\n\n<ol>\n  <li>Entregan un resultado de tamaño fijo sin importar el tamaño de la entrada</li>\n  <li>Son rápidas relativamente</li>\n  <li>Son deterministas, es decir, siempre que le demos el mismo valor, dará el mismo resultado</li>\n  <li>Es imposible recuperar la entrada original, porque se pierden datos</li>\n</ol>\n\n<p>Algo que contaría como una función hash podría ser tan sencilla como obtener el sobrante de una división entera para los números enteros:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">hash_simple</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">10</span>\n</code></pre></div></div>\n\n<p>Esta función cumple con todas las características de las que hablamos arriba, y es una función hash <strong>no criptográfica</strong> o <strong>no segura</strong>, es decir, no se puede confiar en ella para proteger información.</p>\n\n<p>Algunos ejemplos de funciones hash no criptográficas son:</p>\n<ul>\n  <li><a href=\"https://docs.rs/seahash/2.0.0/seahash/\">SeaHash</a></li>\n  <li><a href=\"https://github.com/sindresorhus/fnv1a\">fnv1a</a></li>\n  <li>La función <code class=\"language-plaintext highlighter-rouge\">hash</code> de Python o de tu lenguaje preferido</li>\n</ul>\n\n<p>Ahora hablemos de qué características tiene una función hash criptográfica segura.</p>\n\n<h2 id=\"funciones-hash-criptográficas\">Funciones hash criptográficas</h2>\n\n<p>La característica principal de una función hash segura es que su resultado es completamente impredecible, no revela ningún tipo de información sobre la entrada original, tanto para los humanos como para <em>una computadora</em>, es resistente a análisis estadísticos.</p>\n\n<p>Para asegurarnos de esto, una función hash segura cumple con tres características formales:</p>\n\n<ol>\n  <li>Es resistente a encontrar una <strong>preimagen</strong></li>\n  <li>Es resistente a encontrar una <strong>segunda preimagen</strong></li>\n  <li>Es resistente a <strong>colisiones</strong></li>\n</ol>\n\n<p>¿Qué es eso de las <strong><em>preimágenes</em></strong>? En criptografía se llama <strong>preimagen</strong> a todos los valores que le podemos dar a una función hash. La <strong>imagen</strong> es el resultado de aplicar la función hash a una <em>preimagen</em>.</p>\n\n<p>Esta ilustración lo puede dejar un poco más claro:</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1638509732/Ilustracio%CC%81n_sin_ti%CC%81tulo_9_qrerag.png\" alt=\"Diagrama sobre imágenes y preimágnes\" class=\"align-center\" /></p>\n\n<p>Ahora hablemos sobre lo que significa cada punto de la seguridad.  El primer punto se refiere a que dada una <strong>imagen</strong> o un <em>hash</em>, como normalmente le llamamos al resultado de una función hash, es imposible encontrar la entrada original, o algún otro valor que resulte en ese hash. Si este punto no se cumple, los siguientes dos tampoco.</p>\n\n<p>El segundo punto, la resistencia a la segunda preimagen, es que dado un valor de entrada (praimagen) y su hash correspondiente (imagen), es imposible encontrar otro valor de entrada que se resulte en el mismo hash, o la misma imagen.</p>\n\n<p>El tercer punto, <strong>la resistencia a colisiones</strong> se refiere a que es cerca de imposible encontrar (o fabricar) dos valores de entrada que den el mismo hash (dos preimágenes que resulten en la misma imagen).</p>\n\n<p>En resumen: para un hash seguro <strong>es casi imposible encontrar dos valores que den el mismo hash, teniendo ejemplos de hasheado o no</strong>, así como encontrar el valor que generó cierto hash.</p>\n\n<h2 id=\"algunas-funciones-hash-criptográficamente-seguras\">Algunas funciones hash criptográficamente seguras</h2>\n\n<p>Las dos funciones hash criptográficas más populares son <a href=\"https://es.wikipedia.org/wiki/MD5\">MD5</a> y <a href=\"https://es.wikipedia.org/wiki/SHA-1\">SHA-1</a>. Actualmente (2021) a ambas se les han encontrado vulnerabilidades, sobre todo en el campo de las colisiones, para ambas es posible generar colisiones de manera arbitraria.</p>\n\n<p><em>“SHA”</em> es un acrónimo que significa Algoritmo de Hasheo Seguro (“Secure Hash Algorithm”) y es un “título” dado a los algoritmos de hasheo que son seleccionados por la <strong>NIST</strong> (National Institute of Standards and Technology de Estados Unidos).</p>\n\n<p>Ahora sí hablemos de algunas funciones hash criptográficas todavía consideradas seguras:</p>\n\n<ol>\n  <li>\n    <p><a href=\"https://es.wikipedia.org/wiki/SHA-2\">SHA-2</a>. SHA-2 es la familia sucesora de SHA-1, y consiste de 4 funciones hash que difieren en el tamaño de bits de su salida: SHA-224, SHA-256, SHA-384 y SHA-512. Las dos más usadas son SHA-256 y SHA-512. Hasta 2021 no se le han encontrado vulnerabilidades que hagan que sean no recomendadas. La desventaja es que la familia SHA-2 es más lenta que SHA-1.</p>\n  </li>\n  <li>\n    <p><a href=\"https://es.wikipedia.org/wiki/SHA-3\">SHA-3</a>. SHA-3 es la cuarta versión de SHA y el algoritmo se escogió de un concurso organizado por la NIST en 2007. En 2012 se anunció que el algoritmo seleccionado era <a href=\"https://en.wikipedia.org/wiki/Keccak\">Keccak</a>, un algoritmo muy diferente de SHA-1 y SHA-2. Esta familia de algoritmos también define cuatro funciones hash, SHA3-224, SHA3-256, SHA3-384 y SHA3-512. Pero además define 2 algoritmos extra que pueden dar resultados variables. Puedes ver la página del equipo de Keccak en <a href=\"https://keccak.team/keccak.html\">Keccak Team</a>.</p>\n  </li>\n  <li>\n    <p><a href=\"https://www.blake2.net/\">BLAKE2</a>. Es un algoritmo sucesor de BLAKE, uno de los participantes en el concurso por SHA-3. BLAKE2 es mucho más rápido que Keccak, casi igual de seguro, pero más parecido a SHA-2, que es la razón por la que no se eligió a BLAKE como el SHA-3. Es una muy buena opción para usarse en caso de que requieras un función hash segura y que la velocidad sea muy importante, ya que es más rápida incluso que SHA-1.</p>\n  </li>\n</ol>\n\n<p>Como puedes ver, tenemos para escoger entre las funciones hash todavía consideradas seguras.</p>\n\n<h2 id=\"qué-función-hash-usar\">¿Qué función hash usar?</h2>\n\n<p>Ahora que tenemos un sucesor de SHA-2, la que deberías usar en la mayoría de tus proyectos es <strong>SHA3-256</strong>, ya que provee de la suficiente seguridad, está estandarizada y es probable que sea implementada como instrucciones del procesador en el futuro. Si te importa muchísimo la velocidad en tu proyecto ahora mismo, deberías usar BLAKE2, que también es muy popular y está implementada en muchos lenguajes de programación.</p>\n\n<h2 id=\"sirven-para-guardar-passwords\">¿Sirven para guardar passwords?</h2>\n\n<p>Un error común es pensar que estas funciones pueden servir para guardar passwords de forma segura en nuestras aplicaciones. En el siguiente artículo hablaremos de por qué no sirven para eso y qué otras funciones podrías usar.</p>\n",
      "date_published": "Thu, 02 Dec 2021 00:00:00 -0600"
      },
    
    {
      "id": "https://blog.thedojo.mx/2021/12/01/20-bibliotecas-de-python-que-deberias-estar-usando.html",
      "url": "https://blog.thedojo.mx/2021/12/01/20-bibliotecas-de-python-que-deberias-estar-usando.html",
      "title": "20 bibliotecas de Python que deberías estar usando",
      "content_html": "<p>El libro <a href=\"https://freecomputerbooks.com/20-Python-Libraries%20You-Are-Not-Using-But-Should.html#downloadLinks\">“20 Python Libraries You Aren’t Using (But Should)”</a> de <a href=\"https://github.com/cjrh\">Caleb Hattingh</a> es un lectura corta que recomienda bibliotecas de Python muy útiles que pueden ayudarte a desarrollar software de manera más efectiva y rápida.</p>\n\n<p><img src=\"https://res.cloudinary.com/hectorip/image/upload/v1638418876/20_python_rlf1b2.png\" alt=\"Portada de 20 python libraries\" class=\"align-center\" /></p>\n\n<p>Veamos las 5 que me parece más importante conocer y tú puedes leer el libro para ver el detalle y entender las otras 15.</p>\n\n<h2 id=\"en-la-biblioteca-estándar-de-python\">En la biblioteca estándar de Python</h2>\n\n<p>Estas bibliotecas no las tendrás que instalar porque vienen con todas las instalaciones normales de Python, pero son poco usadas.</p>\n\n<ol>\n  <li>\n    <p><a href=\"https://docs.python.org/3/library/collections.html\">collections</a> - Contiene un conjunto de clases y funciones para trabajar con estructuras de datos especializadas en alguna función. Por ejemplo provee de diccionarios que mantienen el orden, listas de doble acceso, tuplas nombradas y hasta un diccionario especializado en contadores. En el canal de YouTube hemos hecho algunos videos sobre estos contenedores, puedes verlas aquí: <a href=\"https://www.youtube.com/watch?v=DrhHkPI7spU&amp;list=PLfeFnTZNTVDMDCoBzZ6XynugZTFDzEjiB\">Python Collections</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://docs.python.org/3/library/sched.html\">sched</a> - Trabaja con tareas programadas de manera sencilla, este módulo nos da la clase <code class=\"language-plaintext highlighter-rouge\">scheduler</code> que nos permite programar, encolar y ejecutar tareas entre otras cosas.</p>\n  </li>\n</ol>\n\n<h2 id=\"bibliotecas-desarrolladas-por-la-comunidad\">Bibliotecas desarrolladas por la comunidad</h2>\n\n<ol>\n  <li>\n    <p><a href=\"https://www.hug.rest/\">hug</a> - Es una biblioteca de Python que nos permite crear <strong>API</strong>’s en el sentido general de la palabra. Nos permite crear interfaces de tres tipos: de consola, de módulo y REST. Contiene una serie de utilidades para que puedas exponer tu API de la manera más sencilla posible, documentación automática, aprovechamiento de las sugerencias de tipos de Python, entre muchas otras cosas. Esta es una Biblioteca que realmente recomiendo si quieres crear una API verdaderamente rápido.</p>\n  </li>\n  <li>\n    <p><a href=\"https://arrow.readthedocs.io/en/latest/\">arrow</a> - te permite manejar las fechas y tiempos de mejor manera que sólamente con los tipos de datos nativos de Python. Centraliza todas las funciones de fechas y tiempos en vez de estar repartidas en varios módulos, trabaja por default con fechas y horas que incluyen la zona horaria (UTC), soporta el estándar <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>, tiene funciones de “humanización” de fechas y tiempos, etc.</p>\n  </li>\n  <li>\n    <p><a href=\"https://boltons.readthedocs.io/en/latest/\">boltons</a> - contiene una gran colección de tipos de datos y funciones que los creadores y contribuidores piensan que le hacen falta a la biblioteca estándar de Python. Para Octubre de 2021 tenía <em>83 tipos de datos y 171 funciones</em>, hablemos de tamaño. Las utilidades que provee son muy variadas, y te pueden ayudar para una gran cantidad de casos. Por ejemplo, tiene utilidades para colecciones, para manejo de caché, trabajo con tipos de datos, utilidades para debuggear, ente muchas otras ayudas.</p>\n  </li>\n</ol>\n\n<h2 id=\"conclusión\">Conclusión</h2>\n\n<p>La verdad es que cada una de las bibliotecas arriba mencionadas debería tener su propio artículo o video, esperamos que podamos extender sobre algunas de ellas en el futuro. Por lo mientras, puedes leer el libro y aprender más sobre las bibliotecas que recomienda, sólo ten en cuenta que algunas pueden estar sin mantenimiento por la edad que tiene el libro. Aquí te dejamos el resumen que hicimos en el canal y con suerte <a href=\"https://pepa.holla.cz/wp-content/uploads/2016/10/20-python-libraries-you-arent-using-but-should.pdf\">en este link puedes descargar</a> el libro en PDF, aunque es un libro que puedes seguir leyendo en Safari, la biblioteca online de O’Reilly o leer gratuito en línea: <a href=\"https://www.oreilly.com/content/20-python-libraries-you-arent-using-but-should/\">aquí</a>. Déjanos un comentario si quieres que hagamos el análisis de alguna biblioteca en el futuro.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/T5xHzP1Ex5s\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n",
      "date_published": "Wed, 01 Dec 2021 00:00:00 -0600"
      }
    
  ]
}
        
      </section>

      <footer class="page__meta">
        
        


        

      </footer>

      

      
    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        
<script>
    var sharect = new Sharect();
    sharect.config({
    //   facebook: true,
      twitter: true,
      twitterUsername: '@thedojomx',
      backgroundColor: '#ff4081',
      iconColor: '#fff'
    }).init();

</script>
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Seguir:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2021 . Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-127437335-2']);
  
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>









  </body>
</html>
