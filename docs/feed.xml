<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.thedojo.mx/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.thedojo.mx/" rel="alternate" type="text/html" /><updated>2021-03-10T00:01:21-06:00</updated><id>https://blog.thedojo.mx/feed.xml</id><author><name>Héctor Patricio</name><uri>https://github.com/hectorip</uri></author><entry><title type="html">Ruta de aprendizaje: Deep Learning</title><link href="https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning.html" rel="alternate" type="text/html" title="Ruta de aprendizaje: Deep Learning" /><published>2021-03-06T00:00:00-06:00</published><updated>2021-03-06T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning</id><content type="html" xml:base="https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning.html">&lt;p&gt;Inspirado en el libro “Ultralearning” de Scott Young, voy hacer un proyecto de aprendizaje de algo que llama mi atención desde hace mucho: Deep Learning y Machine Learning en general. Si no conces el concepto, te invito leer el post aquí: &lt;a href=&quot;/2019/08/13/lecciones-sobre-el-aprendizaje-de-manos-de-un-experto.html&quot;&gt;Ultralearning: el arte del aprendizaje profundo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En esta serie documentaremos las diferentes fases. Este primer post trata sobre los recursos que usaré para aprender. Si tienes alguna sugerencia, ¡todas son bienvenidas!&lt;/p&gt;

&lt;h2 id=&quot;fase-1-investigación&quot;&gt;Fase 1: Investigación&lt;/h2&gt;

&lt;p&gt;La primera fase de un proyecto de Ultra-aprendizaje consiste en hacer una investigación sobre las posibles opciones, recursos, metas y caminos que otros han seguido para aprender lo que quieres, así como definir claramente los límites del proyecto.&lt;/p&gt;

&lt;p&gt;En este proyecto el objetivo será:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Entender y aplicar las técnicas básicas  Machine Learning, en específico Deep Learning, para poder resolver problemas y aplicarlos en proyectos que lo requieran.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Algunos de los programas que podemos usar para aprenderlo son los siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nanodegree de Deep Learning en &lt;a href=&quot;https://www.udacity.com/course/deep-learning-nanodegree--nd101&quot;&gt;Udacity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Especialización en Deep Learning de &lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Redes neuronales y Deep Learning de &lt;a href=&quot;https://www.coursera.org/learn/neural-networks-deep-learning&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Programming Machine Learning de &lt;a href=&quot;https://pragprog.com/titles/pplearn/programming-machine-learning/&quot;&gt;Pragmatic Programmers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Machine Learning with Python: from Linear Models to Deep Learning de &lt;a href=&quot;https://www.edx.org/course/machine-learning-with-python-from-linear-models-to?index=product&amp;amp;queryID=66ef0e341d390841649ca12aaef6fd6b&amp;amp;position=1&quot;&gt;EDX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CS230 de &lt;a href=&quot;https://cs230.stanford.edu/syllabus/&quot;&gt;Stanford&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;STAT 212B de &lt;a href=&quot;https://bcourses.berkeley.edu/courses/1413088/assignments/syllabus&quot;&gt;Berkeley&lt;/a&gt; (Lecciones: &lt;a href=&quot;https://github.com/joanbruna/stat212b&quot;&gt;Github&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Deep Learning Crash Course en &lt;a href=&quot;https://youtu.be/VyWAvY2CF9c&quot;&gt;Free Code Camp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;decisión&quot;&gt;Decisión&lt;/h2&gt;

&lt;p&gt;Uno de los consjos de Ultralearning es no gastar mucho tiempo investigando. No sabemos lo que no sabemos y esta incetidumbre nos puede dar parálisis por análisis y no dejar que pasemos a la siguiente etapa.&lt;/p&gt;

&lt;p&gt;Este proyecto estará basado en el &lt;a href=&quot;https://www.udacity.com/course/deep-learning-nanodegree--nd101&quot;&gt;Nanodegree de Deep Learning de Udacity&lt;/a&gt; por dos razones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Probé algunos de sus cursos y la calidad se me hace muy buena y el contenido muy bien desarrollado&lt;/li&gt;
  &lt;li&gt;Puedes allí mismo optar por un certificado, lo que incluye acompañamiento de un mentor y resolución de dudas con la comunidad. esto puede servir muy bien para desatorarme si encuentro algo muy difícil.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Paralelamente leeré el libro &lt;a href=&quot;https://pragprog.com/titles/pplearn/programming-machine-learning/&quot;&gt;Programming Machine Learning de Pragmatic Programmers&lt;/a&gt;, ya que parece tener justamente el enfoque que necesito: Machine Learning para programadores.&lt;/p&gt;

&lt;h2 id=&quot;objetivo-final&quot;&gt;Objetivo final&lt;/h2&gt;

&lt;p&gt;Es hora de ponerle un tiempo y un obejetivo más concreto al proyecto: &lt;em&gt;durante los próximos 10 meses (lo que resta de 2021) aprenderé las bases teóricas y prácitcas de machine learning, con el obejetivo de aplicarlo mejor en los proyectos de trabajo y combinarlo con mis habilidades de ingeniería del software y progeamación.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sobra decir que este plan no está escrito en piedra y se irá modifcando conforme vaya experimentando y aprendiendo más del campo. Por lo mientras, espero que el proyecto y lo que vaya aprendiendo y meta-aprendiendo te sirva, como la compilación de recursos para empezar que pusimos en este post.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><summary type="html">En este artículo te proponemos una forma de aprender machine learning y deep learning y te presentamos algunos recursos que te pueden servir</summary></entry><entry><title type="html">Resumen: Qué hacer para conseguir un buen trabajo como programador</title><link href="https://blog.thedojo.mx/2021/02/10/resumen-que-hacer-para-conseguir-un-buen-trabajo-como-programador.html" rel="alternate" type="text/html" title="Resumen: Qué hacer para conseguir un buen trabajo como programador" /><published>2021-02-10T00:00:00-06:00</published><updated>2021-02-10T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/02/10/resumen-que-hacer-para-conseguir-un-buen-trabajo-como-programador</id><content type="html" xml:base="https://blog.thedojo.mx/2021/02/10/resumen-que-hacer-para-conseguir-un-buen-trabajo-como-programador.html">&lt;p&gt;Aquí te damos un resumen de la plática que tuvimos con Diego De Granda y Pablo Trinidad sobre algunas cosas que hicieron para conseguir buenos trabajos. Esbozaremos algunos de los consejos independientes sin una secuencia definida.&lt;/p&gt;

&lt;h2 id=&quot;aprende-inglés&quot;&gt;Aprende Inglés&lt;/h2&gt;

&lt;p&gt;Aunque la razón de existencia de este blog y de The Dojo MX en general es generar contenido en español para ayudar a los hispanohablantes, nunca nos cansaremos (y tampoco nuestros invitados) de darte el mismo consejo: &lt;strong&gt;APRENDE INGLÉS&lt;/strong&gt;. Creemos sinceramente que el idioma no debería ser una limitante para que &lt;em&gt;empieces&lt;/em&gt; a aprender lo que sea que te guste, pero especialmente en el área de tecnología, la mayor parte de las personas, trabaja y habla en inglés, por lo que es importantísimo aprenderlo lo mejor que puedas.&lt;/p&gt;

&lt;h2 id=&quot;aprende-a-dar-y-recibir-retroalimentación&quot;&gt;Aprende a dar y recibir retroalimentación&lt;/h2&gt;

&lt;p&gt;En este apartado hablaron de cuatro cosas que la retroalimentación debe tener para poder ser útil:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Directa, sin darle tantas vueltas al asunto&lt;/li&gt;
  &lt;li&gt;Accionable, debes dejar a la persona con algo sobre lo que pueda actuar&lt;/li&gt;
  &lt;li&gt;Oportuno, mientras más cercano estés al momento en cuestión, mejor&lt;/li&gt;
  &lt;li&gt;Transparente, tus intenciones son claras&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y si eres la persona que toma la retroalimentación, no te ofendas y toma lo bueno.&lt;/p&gt;

&lt;h2 id=&quot;the-pragmatic-programmer&quot;&gt;The Pragmatic Programmer&lt;/h2&gt;

&lt;p&gt;No pudimos platicar tanto de libros, pero uno que no puede faltar casi en ninguna recomendación de libros para programadores es &lt;a href=&quot;https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/&quot;&gt;The Pragmatic Programmer&lt;/a&gt; un libro sobre las bases que necesitas para ser un programador productivo.&lt;/p&gt;

&lt;h2 id=&quot;aprende-los-fundamentos&quot;&gt;Aprende los fundamentos&lt;/h2&gt;

&lt;p&gt;Es muy importante que aprendas los fundamentos de lo que haces si quieres atacar problemas difíciles. Para esto, tienes que aplicar consejos de otras partes de este mismo artículo.&lt;/p&gt;
&lt;h2 id=&quot;consejos-de-pablo-trinidad-para-mantenerte-empleable&quot;&gt;Consejos de Pablo Trinidad para mantenerte empleable&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Permanecer presente en el aprendizaje y ser crítico&lt;/em&gt;: Tienes que estarte preguntando constantemente: ¿Por qué funciona lo que estoy haciendo? Y puedes aplicar la técnica de preguntar continuamente “¿Por qué?” hasta llegar al fondo de las cosas.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Leer&lt;/em&gt;. Estudiar y aprender lo más que puedas, incluso sobre cosas que no sean ténicas.
    &lt;h2 id=&quot;consejos-de-diego-de-granda&quot;&gt;Consejos de Diego de Granda&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Resiliencia&lt;/em&gt;: Los problemas nunca van a parar, así que tienes que aprender a solucionar problemas sin frustrarte y persistir hasta que llegues a la solución&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Resolver problemas&lt;/em&gt;: mejorar tus capacidades de resolver problemas te ayudará a ser alguien más útil para tu equipo y tu empresa&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ser agnóstico&lt;/em&gt;: No te cases con una tecnología, diversifica y usa la correcta para el problema en cuestión.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;características-que-necesitarás-para-trabajar-en-google&quot;&gt;Características que necesitarás para trabajar en Google&lt;/h2&gt;

&lt;p&gt;¿Qué se necesita para trabajar en Google? Aquí algunas de las ideas que Pablo nos compartió:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Capacidad&lt;/strong&gt; de tomar problemas difíciles&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Liderazgo&lt;/strong&gt; para ayudar a tu equipo&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Impacto&lt;/strong&gt; extendido en diferentes personas y equipos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Independencia&lt;/strong&gt;, no necesitas de un manager que te esté cuidando los pasos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ownership&lt;/strong&gt;, te adueñas de los problemas y pones todo tu empeño en resolverlos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Estar presente&lt;/strong&gt;, es decir, no pasar por las experiencias sin aprender de ellas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sigue-alimentando-tu-curiosidad&quot;&gt;Sigue alimentando tu curiosidad&lt;/h2&gt;

&lt;p&gt;Pablo nos recomendó algunos canales de YouTube para seguir alimentando la curiosidad y aprender cosas de diferentes campos, como matemáticas, ciencia, computación y electrónica.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/TheChernoProject&quot;&gt;The Cherno&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/Computerphile&quot;&gt;Computerphile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/Numberphile&quot;&gt;Numberphile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/1Veritasium&quot;&gt;Veritasium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/destinws2&quot;&gt;Smarter Everyday&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/nobani88&quot;&gt;Eric Weinstein&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/PowerfulJRE&quot;&gt;Joe rogan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/eaterbc&quot;&gt;Ben Eater&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw&quot;&gt;3Blue1Brown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto no te hará un mejor programador directamente pero te ayudará a crecer como persona y te ayudará a conseguir mejores oportunidades. Y sí, necesitas inglés para entenderlos.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Hablamos de muchas cosas más, productividad, Google, cómo avanzar en tu carrera, etc. No te pierdas la plática entera aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mUfmVBaOmxM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="lives" /><category term="recomendaciones" /><category term="video" /><category term="libros" /><category term="consejos" /><summary type="html">Hablamos con Diego De Granda y Pablo Trinidad sobre qué tienes que hacer para conseguir un buen trabajo en tecnología. Aquí tienes un resumen.</summary></entry><entry><title type="html">Libros que te ayudarán a aprender Data Science</title><link href="https://blog.thedojo.mx/2021/02/01/libros-que-te-ayurdaran-a-aprender-data-science.html" rel="alternate" type="text/html" title="Libros que te ayudarán a aprender Data Science" /><published>2021-02-01T00:00:00-06:00</published><updated>2021-02-01T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/02/01/libros-que-te-ayurdaran-a-aprender-data-science</id><content type="html" xml:base="https://blog.thedojo.mx/2021/02/01/libros-que-te-ayurdaran-a-aprender-data-science.html">&lt;p&gt;Creemos firmemente que una de las mejores maneras de educarte como desarrollador es conseguir guía clara.&lt;/p&gt;

&lt;p&gt;Una de las mejores fuentes de conocimiento son los libros escritos por personas expertas en el tema del que quieres aprender, es por eso siempre buscamos personas que nos den consejos sobre los mejores recursos que encuentren.&lt;/p&gt;

&lt;p&gt;En esta ocasión invitamos a &lt;a href=&quot;https://twitter.com/silvercorp&quot;&gt;Yesi Days&lt;/a&gt; a platicar sobre qué libros nos recomendaría para desarrollarte en &lt;strong&gt;data science&lt;/strong&gt;. Nos recomendó los siguientes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/3q5lDj0&quot;&gt;Hands-on Machine Learning with Scikit-Learn and Tensorflow&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://themlbook.com/&quot;&gt;The Hundred Page Machine Learning&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/35qysMQ&quot;&gt;Introduction to Machine Learning with Python: A Guide for Data Scientists&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/2L8AiuZ&quot;&gt;Data Science from Scratch: First Principles with Python&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/2MGG6Mq&quot;&gt;Cracking the PM Interview: How to Land a Product Manager Job in Technology (Cracking the Interview &amp;amp; Career)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/27783740-building-real-time-data-pipelines&quot;&gt;Building Real-time data pipelines&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-science-path&quot;&gt;Data science Path&lt;/h2&gt;

&lt;p&gt;Yesi también nos contó sobre un guía que creó para ayuddarte a empezar en el camino, la puedes encontrar en:&lt;a href=&quot;https://ds-path.netlify.app/&quot;&gt;Data Science Path&lt;/a&gt; y próximamente estará en español.&lt;/p&gt;

&lt;p&gt;La charla que tuvimos con ella se extendió sobre muchos temas más, si no te la quieres perder la puedes ver aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vCzMLeq_eBk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="video" /><category term="data-science" /><category term="books" /><category term="libros" /><summary type="html">En este post te contamos sobre algunos libros que te pueden servir para avanzar en tu carrera.</summary></entry><entry><title type="html">¿Deberías comentar tu código?</title><link href="https://blog.thedojo.mx/2020/12/30/deberias-comentar-tu-codigo.html" rel="alternate" type="text/html" title="¿Deberías comentar tu código?" /><published>2020-12-30T00:00:00-06:00</published><updated>2020-12-30T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/12/30/deberias-comentar-tu-codigo</id><content type="html" xml:base="https://blog.thedojo.mx/2020/12/30/deberias-comentar-tu-codigo.html">&lt;p&gt;Cuando hablamos de los comentarios en el código, hay dos escuelas. La primera dice que debes usar los comentarios para &lt;strong&gt;clarificar lo que quisiste expresar con tu código&lt;/strong&gt;, mientras que la segunda dice que deberías &lt;strong&gt;evitarlos al máximo&lt;/strong&gt; y que comentar tu código es un mal necesario que sólo denota tu falta de habilidad para no hacer código lo suficientemente claro.&lt;/p&gt;

&lt;p&gt;¿A cuál de los dos consejos deberías hacerle caso? En este artículo explicaremos por qué creemos que deberías ver los comentarios como una &lt;strong&gt;herramienta necesaria&lt;/strong&gt;, valiosa y muy útil, y cómo usarlos para no caer en el extremo que ha llevado a algunas personas a tener una mala actitud hacia ellos.&lt;/p&gt;

&lt;h2 id=&quot;un-sistema-sin-documentación-esta-incompleto&quot;&gt;Un sistema sin documentación esta incompleto&lt;/h2&gt;

&lt;p&gt;Como desarrollador estarás de acuerdo en que un sistema &lt;strong&gt;no&lt;/strong&gt; tiene la &lt;em&gt;calidad suficiente&lt;/em&gt; si no cuenta con documentación, es decir, información acerca del sistema que comunique cosas como la razón de existir de ciertos módulos, valores y funciones y cómo usarlos.&lt;/p&gt;

&lt;p&gt;Si, además, tienes que modificar este sistema, será una pesadilla entender todo lo que los programadores anteriores hicieron o &lt;em&gt;intentaron&lt;/em&gt; hacer. Si tienes que &lt;em&gt;usar&lt;/em&gt; algo sin documentación, es el mismo caso: &lt;strong&gt;tienes estudiar el código para saber como funciona.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Así que hemos establecido que la documentación es completamente necesaria para crear programas útiles. Ahora bien, ¿dónde ponemos esa documentación? Muchos desarrolladores y equipos no tienen idea de dónde ponerla y crean documentos que dejan después olvidados en una carpeta en la nube y que nadie encuentra después. Pero, ¿no sería más lógico mantener la documentación lo &lt;strong&gt;más cerca posible del código&lt;/strong&gt;? Eso es precisamente lo que los comentarios te permiten hacer.&lt;/p&gt;

&lt;p&gt;Puedes usar los comentarios documentar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decisiones de diseño&lt;/li&gt;
  &lt;li&gt;Explicaciones sobre la existencia, funcionamiento o razón de ser de cierta parte del código&lt;/li&gt;
  &lt;li&gt;Las interfaces y su ejemplo de uso&lt;/li&gt;
  &lt;li&gt;Efectos de usar cierto código&lt;/li&gt;
  &lt;li&gt;Partes inconclusas o que se pueden mejorar (TODO’s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tener esta información muy cerca del código sobre el que está proporcionando información ayudará a que sea fácil de encontrar y además, si se establecen reglas como tratar los comentarios como ciudadanos de primer rango, se mantendrá actualizado y útil.&lt;/p&gt;

&lt;p&gt;También es buena idea tener un documento o sitio web especializado en documentación que te ayude a encontrar rápido lo que buscas como Docusaurus o un sitio generado por Sophinx. Puedes utilizar esta misma documentación que escribiste junto al código si usaste el estilo definido por el lenguaje de programación o por las herramientas de generación de documentos.&lt;/p&gt;

&lt;h3 id=&quot;los-comentarios-te-pueden-ayudar-en-el-futuro&quot;&gt;Los comentarios te pueden ayudar en el futuro&lt;/h3&gt;

&lt;p&gt;Incluso aunque no los uses formalmente como documentación, los comentarios estarán ahí para darte información y recordarte lo que hiciste, pero sobre todo &lt;strong&gt;por qué&lt;/strong&gt; lo hiciste.&lt;/p&gt;

&lt;p&gt;Recuerda que la mente humana busca la eficiencia máxima de recursos, por lo que es probable que elimine información que no ocupe inmediatamente y que no recuerdas a menudo, como por qué esa variable tenía el valor 730 y no otro.&lt;/p&gt;

&lt;p&gt;Tu yo futuro y tu equipo te agradecerán haber escrito esos comentarios que te informan sobre lo que estabas pensando en el momento que escribiste ese código.&lt;/p&gt;

&lt;h3 id=&quot;los-comentarios-son-una-buena-herramienta-de-diseño&quot;&gt;Los comentarios son una buena herramienta de diseño&lt;/h3&gt;

&lt;p&gt;John Ousterhout, en “A Philosophy of Software Design” recomienda &lt;strong&gt;empezar&lt;/strong&gt; con los comentarios antes de programar (de esto hablaremos más adelante). Pero, ¿por qué lo recomienda?&lt;/p&gt;

&lt;p&gt;Escribir en un lenguaje humano cómo funciona algo antes de implementarlo realmente, te da la capacidad de ver si es lógico y suficiente, además te permite ponerte en los zapatos del usuario para notar deficiencias sobre todo en &lt;strong&gt;la interfaz&lt;/strong&gt;. Los comentarios de interfaz es lo primero que deberías crear porque te servirán de guía para avanzar con tu diseño y, sobre todo, que sea lógico y fácil de usar.&lt;/p&gt;

&lt;p&gt;Una buena guía: si no eres capaz de crear un comentario concreto y corto sobre cómo funciona o por qué existe algo, &lt;strong&gt;lo más probable es que tengas que re-pensar tu diseño&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;el-lenguaje-de-programación-no-es-suficiente-para-expresar-todo-lo-necesario&quot;&gt;El lenguaje de programación no es suficiente para expresar todo lo necesario&lt;/h3&gt;

&lt;p&gt;Todos los lenguajes de programación están pensados para ser un &lt;strong&gt;subconjunto del lenguaje humano&lt;/strong&gt; que elimine las ambigüedades, manteniendo el mayor poder expresivo posible. Esto nos lleva a sus limitantes: es imposible, o por lo menos impráctico, intentar expresar todas las ideas con el código.&lt;/p&gt;

&lt;p&gt;En la práctica, el tiempo y los recursos para lograr algo son limitados, por lo que a veces es más conveniente y fácil para todos explicar lenguaje humano algo que intentar expresarlo con código, como los puristas afirman.&lt;/p&gt;

&lt;p&gt;No te sientas mal si tienes que recurrir de vez en cuando a explicar la forma en que funciona algo, siempre y cuando no sea la práctica común.&lt;/p&gt;

&lt;h2 id=&quot;cómo-usar-los-comentarios-para-que-sean-valiosos&quot;&gt;¿Cómo usar los comentarios para que sean valiosos?&lt;/h2&gt;

&lt;p&gt;No todos los comentarios son valiosos, hay algunos que pueden estorbar más de lo que ayudan, por ejemplo, los que no aportan información a lo que es obvio en el código.&lt;/p&gt;

&lt;p&gt;Hablemos de algunas formas de aprovecharlos lo mejor posible para que contribuyan positivamente a aumentar la calidad del proyecto.&lt;/p&gt;

&lt;h3 id=&quot;escribe-los-comentarios-primero&quot;&gt;Escribe los comentarios primero&lt;/h3&gt;

&lt;p&gt;Una de las partes más importantes de los comentarios como documentación es que deben ser concretos, cercanos a la realidad y que proporcionen la mayor cantidad de información útil posible.&lt;/p&gt;

&lt;p&gt;Para lograr esto, se tienen que crear lo más cerca que puedas a la &lt;em&gt;creación del código&lt;/em&gt;. Pero como todos sabemos que después de escribir y probar (básicamente) el código vamos a sentir que ya está terminado, es buena práctica obligarte a escribirlos antes, justo como propone TDD con las pruebas.&lt;/p&gt;

&lt;p&gt;De esta manera te asegurarás que tu código esté documentado incluso antes de escribirlo y te servirán como una &lt;strong&gt;herramienta de diseño&lt;/strong&gt; que te ayudará a pensar mejor en la usabilidad de tus módulos y piezas de software.&lt;/p&gt;

&lt;h3 id=&quot;crea-comentarios-acerca-de-la-interfaz&quot;&gt;Crea comentarios acerca de la interfaz&lt;/h3&gt;

&lt;p&gt;La interfaz es el &lt;strong&gt;medio de uso&lt;/strong&gt; que tus módulos o funciones presentan para que las demás partes de tu sistema lo usen. Lo primero que deberías documentar y explicar es &lt;strong&gt;esta interfaz&lt;/strong&gt;, para que más personas a parte de ti puedan usar este pedazo de código.&lt;/p&gt;

&lt;p&gt;Debes escribir comentarios claros sobre:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cómo usar esa pieza de código&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Por qué existe esa parte del sistema&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Qué efectos tiene usarla&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este tipo de comentarios son los que aportan mayor valor al sistema y si están lo suficientemente completos, con ejemplos y explicaciones claras, son una documentación válida que está en un muy buen lugar: es fácil de encontrar y no se va a perder enterrada entre otros documentes que después nadie va a consultar.&lt;/p&gt;

&lt;h3 id=&quot;evita-los-comentarios-sobre-la-implementación&quot;&gt;Evita los comentarios sobre la implementación&lt;/h3&gt;

&lt;p&gt;Los comentarios sobre la implementación son aquello que describen &lt;em&gt;qué&lt;/em&gt; estas haciendo, como por ejemplo, sumar número, abrir un archivo, etc. Estos comentarios normalmente son innecesarios, ya que lo que se está haciendo es obvio si el código es lo suficientemente expresivo y &lt;em&gt;siempre deberíamos buscar que sea así&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De hecho, estos son los comentarios que hacen que la gente odie a los comentarios en general, pues en vez de proporcionar información extra son una carga que hay que mantener y pueden confundir si no son actualizados.&lt;/p&gt;

&lt;p&gt;Si realmente sientes que tienes que explicar &lt;em&gt;qué&lt;/em&gt; estás haciendo con cierta pieza de código, primero pregúntate si no hay una manera de reescribirlo para que &lt;strong&gt;sea obvio&lt;/strong&gt;. Si no existe o no es práctica esta solución, entonces escribe el comentario de la manera más concisa posible, incluyendo la razón de la existencia de ese código.&lt;/p&gt;

&lt;p&gt;Para hacer esto debes tomar muy en cuenta los recursos del proyecto: no te puedes tardar el triple del tiempo implementando la pieza de código perfecta porque no quieres escribir un comentario que explique cómo funciona.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Escribir comentarios es una de las grandes tareas que los programadores debemos dominar. Los lenguajes de programación y los entornos de programación cada vez le dan más poder a esta parte de los programas y permiten incluso escribir pruebas en ellos, generar documentación automática y listar tareas a partir de ellos.&lt;/p&gt;

&lt;p&gt;Si pones el suficiente esmero en aprender a escribir buenos comentarios y mantenerlos, serán una gran herramienta de diseño y documentación de tu software.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Este artículo está basado en las ideas del “A Philosophy of Software Design de John Ousterhout”, en el que se le dedican &lt;strong&gt;4 capítulos&lt;/strong&gt; al buen uso de los comentarios&lt;/em&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="comments" /><category term="comentarios" /><category term="mantenibilidad" /><category term="código-mantenible" /><category term="ousterhout" /><category term="aposd" /><summary type="html">Hay programadores que dice que los comentarios son un mal que se debería evitar al máximo. Aquí proponemos lo contrario: usa los comentarios correctamente para crear código mantenible, basados en las ideas de 'A Philosophy of Software Design'</summary></entry><entry><title type="html">¿Qué son los modelos generativos?</title><link href="https://blog.thedojo.mx/2020/12/30/que-son-los-modelos-generativos.html" rel="alternate" type="text/html" title="¿Qué son los modelos generativos?" /><published>2020-12-30T00:00:00-06:00</published><updated>2020-12-30T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/12/30/que%20son-los-modelos-generativos</id><content type="html" xml:base="https://blog.thedojo.mx/2020/12/30/que-son-los-modelos-generativos.html">&lt;p&gt;Los modelos generativos permiten a una máquina “aprender” los patrones que existen en los datos con los que son entrenadas y a partir de dicho aprendizaje, son capaces de &lt;strong&gt;generar datos similares&lt;/strong&gt; que en algunos casos pueden ser casi tan “reales” como los que se utilizaron inicialmente para su entrenamiento.&lt;/p&gt;

&lt;p&gt;Mediante este tipo de modelos pueden generarse nuevos datos que tienen distintas aplicaciones, entre ellas, generar datos que otros sistemas de aprendizaje podrán utilizar para su entrenamiento, sin necesidad de que dichos datos existan previamente.&lt;/p&gt;

&lt;p&gt;En particular, las &lt;strong&gt;Redes Neuronales Generativas Adversariales (GAN’s)&lt;/strong&gt; pueden generar nuevas imágenes que se parecen o son similares a las imágenes con las que fueron entrenadas, pero que individualmente son distintas a todas ellas.&lt;/p&gt;

&lt;p&gt;El funcionamiento de una Red Neuronal Adversarial consiste en la operación simultánea de dos redes neuronales que son “adversarias”, una de dichas redes es la encargada de generar imágenes y la segunda es la encargada de discriminar aquellas imágenes que no se parecen a lo que constituye una imágen real.&lt;/p&gt;

&lt;p&gt;Algunos modelos avanzados pueden verse en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://thispersondoesnotexist.com/&quot;&gt;This Person Does Not Exist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thiswaifudoesnotexist.net/&quot;&gt;This Waifu Does Not Exist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thisfursonadoesnotexist.com/&quot;&gt;This Furson Does Not Exist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como parte de un proyecto de investigación, utilizamos una red adversarial para generar imágenes de zapatos, dichas redes utilizan, modelos convolucionales para ir entendiendo las imágenes en segmentos cada vez más pequeños hasta tener una definición y similitud suficiente para reemplazar la imagen original.&lt;/p&gt;

&lt;p&gt;La calidad de los modelos generados se incrementa conforme el número de iteraciones va aumentando, en general, se van almacenando nuevas muestras de las imágenes generadas cada cierto número de iteraciones de tal forma se puede observar si el modelo sigue mejorando, si ya se estancó o si se está degradando, aunque existen algunas métricas que pueden ayudar a identificar el punto óptimo donde puede detenerse el entrenamiento.&lt;/p&gt;

&lt;p&gt;Algunas de las peculiaridades de estos modelos es que son relativamente sensibles a la uniformidad y el número de imágenes utilizadas, sin embargo, también es cierto que los modelos han ido mejorando y en algunos casos pueden generar imágenes de gran calidad con menos datos de entrenamiento. Por ejemplo, estas imágenes fueron generadas con sólo 500 datos de entrenamiento mediante un Modelo Generador Adversarial Eficiente:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mit-han-lab/data-efficient-gans&quot;&gt;Data Efficient GANs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;usos-de-los-generadores-adversariales&quot;&gt;Usos de los generadores adversariales&lt;/h2&gt;

&lt;p&gt;Hablemos de algunos de los usos que pueden tener en la práctica este tipo de redes.&lt;/p&gt;

&lt;h3 id=&quot;mejorar-la-seguridad&quot;&gt;Mejorar la seguridad&lt;/h3&gt;

&lt;p&gt;Un discriminador optimiza su capacidad para detectar imágenes que no son reales (las que emite el generador), de tal forma que dicho discriminador adquiere la capacidad de identificar imágenes que no son reales y que pueden estar siendo utilizadas para generar identidades falsas en sistemas que por ejemplo requieren fotografías.&lt;/p&gt;

&lt;h3 id=&quot;en-el-sector-salud&quot;&gt;En el sector salud&lt;/h3&gt;

&lt;p&gt;La capacidad de detectar anomalías (trabajo del discriminador) puede utilizarse para identificar células o formaciones anómalas (como el cáncer) al ser entrenado mediante imágenes de tejidos u órganos saludables.&lt;/p&gt;

&lt;h3 id=&quot;en-el-sector-de-medios-digitales&quot;&gt;En el sector de medios digitales&lt;/h3&gt;

&lt;p&gt;Ya que generadores adversariales pueden utilizarse para generar imágenes que no existían o generar imágenes a partir de un conjunto de imágenes preexistentes, dicha generación puede de igual forma generar modelos en tercera dimensión a partir de imágenes en dos dimensiones o hacer combinaciones de modelos preexistentes.&lt;/p&gt;

&lt;p&gt;Esto puede usarse como material para la producción de contenido visual e incluso animaciones de video o bien como inspiración para que un diseñador genere nuevos personajes.&lt;/p&gt;

&lt;p&gt;Algunos generadores pueden ayudar a corregir defectos en imágenes, removiendo o completando partes de la imágen que sobraban o que estaban faltantes, o si es el caso, a dar color a imágenes en blanco y negro.&lt;/p&gt;

&lt;p&gt;De igual forma permiten crear una “interpolación” de imágenes para “regenerarlas” en una mayor resolución. Desde luego la eficacia dependerá de las imágenes utilizadas para su entrenamiento.&lt;/p&gt;

&lt;p&gt;Algunas de estas aplicaciones pueden “traducir” las imágenes de un dominio a otro, por ejemplo, convirtiendo una imágen satelital en un mapa de niveles o generando fotografías a partir de bosquejos.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Los modelos generativos pueden ser una gran herramienta para diferentes industrias, aprender a usarlos y generarlos te puede ayudar a entrar en un campo que tiene cada vez más alta demanda: el uso de datos para la creación automática de programas (Machine Learning).&lt;/p&gt;</content><author><name>Alejandro Santamaría</name><email>alexsmx@gmail.com</email><uri>https://github.com/alexsmx</uri></author><category term="ai" /><category term="ml" /><category term="gans" /><summary type="html">En este artículo exploramos qué es un modelo generativo, cómo te pueden servir y el estado del arte en este campo.</summary></entry><entry><title type="html">Tipos de algoritmos criptográficos: cifrados de bloque</title><link href="https://blog.thedojo.mx/2020/12/03/tipos-de-algoritmos-criptograficos.html" rel="alternate" type="text/html" title="Tipos de algoritmos criptográficos: cifrados de bloque" /><published>2020-12-03T00:00:00-06:00</published><updated>2020-12-03T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/12/03/tipos-de-algoritmos-criptograficos</id><content type="html" xml:base="https://blog.thedojo.mx/2020/12/03/tipos-de-algoritmos-criptograficos.html">&lt;p&gt;Ya hablamos de lo que es &lt;a href=&quot;/2019/11/12/criptografia-basica-para-programadores-que-es-la-criptografia.html&quot;&gt;la criptografía&lt;/a&gt;, ahora empecemos a hablar de los tipos de
algoritmos criptográficos que existen, sus características y sus principales diferencias. En este artículo hablaremos de los cifrados de bloque.&lt;/p&gt;

&lt;h3 id=&quot;qué-es-un-cifrado-de-bloque&quot;&gt;¿Qué es un cifrado de bloque?&lt;/h3&gt;

&lt;p&gt;Los cifrados de bloque trabajan sobre un conjunto de bits de tamaño fijo, produciendo un texto cifrado del mismo tamaño. Para cifrar datos de tamaño arbitrario como sucede en la vida real, se utiliza el algoritmo de cifrado de bloque combinado con diferentes técnicas llamadas &lt;strong&gt;Modos de Operación&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Algunos ejemplos de estos algoritmos de cifrado son el DES (Estadounidense), GOST 28147-89 (Ruso) y el actual &lt;strong&gt;AES&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un bloque cifrado debe ser &lt;em&gt;permutación pseudo-aleatoria&lt;/em&gt; de bits, es decir, un conjunto de bits que sean &lt;em&gt;indistinguibles de bits generados completamente de manera aleatoria&lt;/em&gt;. Es como si aventaras un montón de bits y dijeras que esa es la salida de tu algoritmo.&lt;/p&gt;

&lt;p&gt;Esta propiedad evita que un atacante obtenga información sobre el contenido del mensaje que fue cifrado.&lt;/p&gt;

&lt;h2 id=&quot;ejemplos-de-cifrado-de-bloque&quot;&gt;Ejemplos de Cifrado de Bloque&lt;/h2&gt;

&lt;p&gt;Veamos algunos ejemplos de cifrados de bloque y sus características principales. Algunos se usan mientras que otros ya cayeron en el olvido.&lt;/p&gt;

&lt;h3 id=&quot;des-y-triple-des&quot;&gt;DES y Triple DES&lt;/h3&gt;

&lt;p&gt;El &lt;strong&gt;Data Encryption Standard&lt;/strong&gt; era el algoritmo que más se usaba en la década de los 90, lo suficientemente seguro para el poder de cómputo de aquel entonces. Usa una llave de 56 bits y bloques de 64 bits. Debido a estas características, el poder de cómputo actual hace que sea demasiado fácil de romper con el suficiente poder computacional (2^56, el tamaño de la llave, no se considera seguro ya), así que su uso está completamente desrecomendado.&lt;/p&gt;

&lt;p&gt;Su sucesor, el Triple DES realiza tres veces el mismo proceso usando tres llaves diferentes, con un tamaño de llave de 168 bits. Esto evita que sea posible romperlo a base de fuerza bruta, pero este proceso provee sólamente una seguridad de 112 bits, por lo que se considera ineficiente (usas el cómputo de tres DES para obtener seguridad de una llave del doble de tamaño) y por lo tanto su uso no es recomendado también.&lt;/p&gt;

&lt;h3 id=&quot;aes&quot;&gt;AES&lt;/h3&gt;

&lt;p&gt;Debido a las visibles fallas de DES y triple DES, la NIST (National Institute of Standards and Technology de Estados Unidos) quería un algoritmo de cifrado que fuera dado a conocer públicamente y “capaz de proteger la información sensible del gobierno por los próximos cien años”.&lt;/p&gt;

&lt;p&gt;El &lt;strong&gt;Advanced Encryption Standard&lt;/strong&gt; (Estándar de cifrado avanzado), es en realidad un subconjunto de los cifrados posibles de otro algoritmo llamado &lt;a href=&quot;https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf&quot;&gt;Rijndael&lt;/a&gt; y que fue el ganador del concurso que la NIST hizo para seleccionar el nuevo algoritmo de cifrado estándar que sustituiría a DES.&lt;/p&gt;

&lt;p&gt;Rijndael fue creado por analistas criptográficos Belgas con objetivos claros: que fuera rápido y simple. Es una familia de cifrados que permiten cifrar bloques en múltiplos de 32 bits, desde 128 hasta 256 bits (128, 160, 192, 224, 256 bits). Las longitudes de llaves posibles son los mismos desde 128 hasta 256 bits.&lt;/p&gt;

&lt;p&gt;AES es Rijndael con bloques de &lt;strong&gt;128 bits&lt;/strong&gt; y llaves que pueden ser de 128, 192 o 256 bits.&lt;/p&gt;

&lt;p&gt;AES aplica internamente una misma operación múltiples veces dependiendo del tamaño de la llave, y esto le permite se más seguro aumentando el tamaño de la llave. Esto es lo que se conoce como los “rounds” de AES, usando 10 para llaves de 128 bits, 12 para 192 bits y 14 para 256 bits.&lt;/p&gt;

&lt;p&gt;AES tiene un diseño de operaciones concurrentes, que es fácilmente paralelizable y puede implementarse muy eficientemente en hardware, de hecho los procesadores modernos normalmente lo traen implementado en sus circuitos, es parte del conjunto de instrucciones del procesador.&lt;/p&gt;

&lt;p&gt;La seguridad de AES según ciertos criptanalistas (por ejemplo, los creadores de Twofish) está completamente rota &lt;em&gt;teóricamente&lt;/em&gt;, ya que hay ataques que pueden romper el cifrado de 14 ciclos (los ciclos completos que hace la versión de la llave de 256 bits) con ciertas condiciones, con 2^176 operaciones (lo cuál es un ataque que no se puede llevar a la práctica fácilmente).&lt;/p&gt;

&lt;p&gt;Los ataques mencionados anteriormente no tienen nada de prácticos, es decir, no se pueden llevar a la realidad en entornos normales, por lo que no se piensa por ningún lado que la seguridad de AES está comprometida. Si necesitas un algoritmo de cifrado confiable y rápido, con AES no te puedes equivocar.&lt;/p&gt;

&lt;h2 id=&quot;otros-algoritmos&quot;&gt;Otros algoritmos&lt;/h2&gt;

&lt;p&gt;Como finalistas del concurso de la NIST hay otros algoritmos que vale la pena mencionar:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Serpent.&lt;/strong&gt; Es un algoritmo de cifrado de bloque que está pensado completamente para ser resistente. Aplicaca una operación repetidamente (rounds) pero a diferencia de AES la aplica 32 veces. Los criptanalistas han logrado romper 12 de esos 32 rounds, por lo que se piensa que tiene bastante espacio de reserva para continuar siendo seguro. La desventaja contra AES es que es 3 veces más lento.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;TwoFish.&lt;/strong&gt; Este algoritmo tiene una construcción parecida a DES, y aplica su operación básica 16 veces. Los autores del algoritmo mencionan que es casi tan rápido como AES pero ofreciendo más margen de seguridad.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;modos-de-operación&quot;&gt;Modos de operación&lt;/h3&gt;

&lt;p&gt;Un modo de operación es la forma en que se aplica un cifrado de bloque a un texto no cifrado que no es del tamaño exacto del bloque. Existen diferentes técnicas para hacer hacer que un algoritmo que acepta bloques de tamaño fijo acepte bloques arbitrarios. Los más conocidos son:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Electronic Codebook (ECB)&lt;/strong&gt;. Este modo de operación parte el contenido en bloques del tamaño aceptado (rellenando los bits faltantes para hacer un múltiplo exacto) y manda cada bloque a cifrar de manera independiente. Este modo de operación está completamente prohibido si quieres hacer que tu programa sea seguro, ya que bloques en tu mensaje con el mismo contenido siempre dará el mismo resultado, dando pistas sobre la información subyacente a observadores meticulosos. &lt;strong&gt;NO USES POR NINGÚN MOTIVO AES EN ECB&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cypher Block Chaining (CBC)&lt;/strong&gt;. Este modo de igual manera parte el contenido en bloques del tamaño aceptado, pero en vez de cifrar cada bloque independientemente cifra el resultado de aplicar la operación XOR con el resultado del bloque anterior. De esta manera “encadena” los bloques haciendo que cada bloque dependa de los anteriores. Para cifrar el primer bloque utiliza un valor inicial generado de manera aleatoria. Para descifrar el valor se tiene que pasar el valor inicial aleatorio junto con el texto cifrado.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Counter mode (CTR)&lt;/strong&gt;. En este modo de operación no se cifran los bloques de texto sino la combinación de un número de uso único (&lt;em&gt;nonce&lt;/em&gt;) y un contador (de ahí su nombre). Después, ese cifrado se combina con un bloque del mensaje. El contador se aumenta en cada bloque del mensaje, mientras que el número de uso único sólo cambia entre cifrados de diferentes mensajes. El modo contador no requiere relleno, ya que la operación XOR se puede realizar con contenido de cualquier tamaño. Este es el modo de operación más rápido y elegante, pero es muy fácil de usar mal ya que la repetición de &lt;em&gt;nonces&lt;/em&gt; lo hace vulnerable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;completado-de-bloques&quot;&gt;Completado de bloques&lt;/h3&gt;

&lt;p&gt;Los modos de operación ECB y CBC siguen requiriendo bloques del tamaño aceptado por el algoritmo, por lo que deben existir técnicas para completar mensajes que no sean del tamaño de un múltiplo del bloque. Hablaremos de dos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Relleno (&lt;em&gt;padding&lt;/em&gt;). Esta técnica completa el último bloque del contenido que no alcanza el tamaño requerido con bytes que comunican el número de bytes que se están rellenando. Ejemplo: Si faltan 15 bytes para rellenar el mensaje agrega 15 bytes con el valor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0f&lt;/code&gt;, si falta un sólo byte agrega un byte con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01&lt;/code&gt;. Esta técnica sólo funciona para mensajes que construído de bytes completos. Puedes ver una especificación aquí: &lt;a href=&quot;https://tools.ietf.org/html/rfc5652&quot;&gt;RFC 5652&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Robo de texto cifrado (cyphertext stealing). Esta técnica es un poco más compleja pero más flexible. Consiste básicamente en tomar los bits que falten para el último bloque del texto cifrado anterior y dejar los bits no usados de ese mismo mensaje como el último bloque cifrado. Es un poco más complicado que esto, pero la idea básica aquí está. La NIST menciona tres formas de implementarlo &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a-add.pdf&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;qué-algoritmo-debería-usar&quot;&gt;¿Qué algoritmo debería usar?&lt;/h2&gt;

&lt;p&gt;La respuesta corta: AES con el mayor de tamaño de llave que tus recursos te permitan. Si tienes restricciones más fuertes de seguridad puedes pensar en TwoFish o Serpent, pero debes tener en cuenta que al no ser tan populares como AES puede que sus implementaciones en el lenguaje de programación de tu elección no estén disponibles o tengan vulnerabilidades no conocidas.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="cryptografía" /><category term="cryptography" /><category term="aes" /><category term="des" /><category term="3-des" /><category term="serpent" /><summary type="html">¿Sabes que es un cifrado de bloque? En este artículo hablamos de eso y te damos algunos ejemplos.</summary></entry><entry><title type="html">Orígenes de la deuda técnica</title><link href="https://blog.thedojo.mx/2020/10/19/origenes-de-la-deuda-tecnica.html" rel="alternate" type="text/html" title="Orígenes de la deuda técnica" /><published>2020-10-19T00:00:00-05:00</published><updated>2020-10-19T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2020/10/19/origenes-de-la-deuda-tecnica</id><content type="html" xml:base="https://blog.thedojo.mx/2020/10/19/origenes-de-la-deuda-tecnica.html">&lt;p&gt;Tuvimos una plática con &lt;a href=&quot;https://twitter.com/sagmmd&quot;&gt;Sagrario Meneses&lt;/a&gt; sobre la &lt;strong&gt;deuda técnica&lt;/strong&gt; y cómo podemos atacarla. En este artículo te presentamos un pequeño resumen de lo que es y algunas sugerencias sobre su manejo.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-la-deuda-técnica&quot;&gt;¿Qué es la deuda técnica?&lt;/h2&gt;

&lt;p&gt;La definición corta de deuda técnica es: &lt;strong&gt;todo aquello que hace que el software sea más difícil de producir y desarrollar&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La deuda técnica es &lt;strong&gt;invisible&lt;/strong&gt; para los miembros no directamente relacionados con el desarrollo del proyecto; para los que participan en ellos no siempre es fácil de ver.&lt;/p&gt;

&lt;p&gt;Esto incluye algunas cosas concretas como:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Los valores fijos que pueden cambiar en el futuro y en realidad deberían ser fáciles de cambiar sin tener que modificar el código (&lt;em&gt;hardcoding&lt;/em&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Falta de información: cuando nadie sabe sobre cómo trabaja cierta parte del sistema o qué hace cierta pieza de código&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Falta de distribución de información y conocimiento: cuando muy pocas personas saben sobre una parte del sistema y se convierten en cuello de botella&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Falta de diseño explícito&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Malas elecciones sobre diseño o tecnologías&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mezcla de diseños y estilos de programación diferente sin guía&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bugs que nadie conoce&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sagrario comparó la deuda técnica con &lt;strong&gt;deberle dinero a la mafia&lt;/strong&gt;: no la puedes negociar, y cuando te supera estás en grandes problemas. Así que más vale que la aprendamos a controlar porque la deuda técnica puede hacer colapsar tu sistema.&lt;/p&gt;

&lt;h2 id=&quot;formas-de-hacer-visible-la-deuda-técnica&quot;&gt;Formas de hacer visible la deuda técnica&lt;/h2&gt;

&lt;p&gt;Una forma que nos parece súper efectiva para hacer visible (literalmente) la deuda técnica: ponerlo en tablero de control en un espacio, idealmente, &lt;strong&gt;físico&lt;/strong&gt;, que esté a la vista tanto del equipo técnico como del equipo administrativo. Este tablero fosforescente recordará a todos que hay temas importantes para atender antes de que la mafia venga a cobrarte.&lt;/p&gt;

&lt;p&gt;En el caso de equipos remotos, el sustituto es un tablero de la herramienta de control que uses (Jira, Trello, Asana, Monday) que contenga temas importantes con respecto a las cosas que se pueden mejorar del sistema.&lt;/p&gt;

&lt;p&gt;Finalmente, tus herramientas de desarrollo te pueden dar ideas valiosas de las cosas que tienes que mejorar de tu código:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Te ayudan a listar las tareas pendientes (TODO’s)&lt;/li&gt;
  &lt;li&gt;Te advierten sobre posibles problemas de código&lt;/li&gt;
  &lt;li&gt;Si tienes una guía de estilo configurada, te dan advertencias sobre este punto también.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prácticas-para-evitarla-y-dominarla&quot;&gt;Prácticas para evitarla y dominarla&lt;/h2&gt;

&lt;p&gt;Para poder reducir la deuda técnica hacen falta dos
cosas:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pruebas, &lt;strong&gt;principalmente unitarias&lt;/strong&gt;. Esto permitirá encontrar los errores más rápidamente, pero además refactorizar sin miedo.&lt;/li&gt;
  &lt;li&gt;Lineamientos estrictos respecto a las acciones en el proyecto. Sagrario lo llamó &lt;em&gt;disciplina&lt;/em&gt;, es decir, tener reglas y los procesos necesarios para hacer que estas reglas sean seguidas.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;otros-temas&quot;&gt;Otros temas&lt;/h2&gt;

&lt;p&gt;También, hablamos de otros temas como el rol de arquitecta de software que tiene en Linio. De esto podemos sacar dos cosas relevantes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Aunque no se se sentía completamente lista para el puesto, aplicó para obtenerlo, y por eso está en una posición en la que está aprendiendo mucho. Sin miedo al éxito.&lt;/li&gt;
  &lt;li&gt;A veces la ataca el síndrome del impostor, con el que siente que no pertenece allí, &lt;strong&gt;pero continua trabajando y estudiando&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Mantiene la humildad sabiendo que no por tener el “&lt;em&gt;título&lt;/em&gt;” es todopoderosa y ahora tiene autoridad sobre todos.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Disfrutamos mucho la plática con una experimentada desarrolladora de software que ha ido tomando nuevos roles y responsabilidades en la misma empresa, que también se ha ido transformando. Puedes aprender mucho de ella y de las preguntas que se hicieron en vivo:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7E_xzjMwZMU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="deuda-técnica" /><category term="arquitectura" /><category term="diseño-de-software" /><summary type="html">¿Qué es la deuda técnica y cómo podemos hacer para dominarla al máximo?</summary></entry><entry><title type="html">Algunas ideas sobre la resolución de problemas</title><link href="https://blog.thedojo.mx/2020/10/04/algunas-ideas-sobre-la-resolucion-de-problemas.html" rel="alternate" type="text/html" title="Algunas ideas sobre la resolución de problemas" /><published>2020-10-04T00:00:00-05:00</published><updated>2020-10-04T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2020/10/04/algunas-ideas-sobre-la-resolucion-de-problemas</id><content type="html" xml:base="https://blog.thedojo.mx/2020/10/04/algunas-ideas-sobre-la-resolucion-de-problemas.html">&lt;p&gt;En este artículo veremos algunas de las ideas que George Polya presenta en su libro &lt;a href=&quot;https://amzn.to/33qfw07&quot;&gt;How to Solve It&lt;/a&gt; sobre la resolución de problemas.&lt;/p&gt;

&lt;p&gt;Estas ideas son sacadas del apartado “Aforismos y citas”, esperemos que pueda ayudar mejorar tus habilidades de resolución de problemas o que te saque del bache si te encuentras en uno.&lt;/p&gt;

&lt;p&gt;Cada subtítulo es una frase que consideramos que vale la pena analizar más detalladamente.&lt;/p&gt;

&lt;h2 id=&quot;piensa-en-el-fin-antes-de-que-empieces&quot;&gt;Piensa en el fin antes de que empieces&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;El tonto mira el principio, pero el sabio mira el final.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Estas dos frases nos recuerdan que es muy importante:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Entender completamente el problema a resolver antes de empezar a intentar resolverlo.&lt;/li&gt;
  &lt;li&gt;Tener verdadero interés en el resolver el problema (Polya dice que debemos desear resolver el problema).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;En el caso de los &lt;em&gt;problemas prácticos&lt;/em&gt;, es decir, a los que nos enfrentamos cada día en el desarrollo de software (no matemáticos, ni acertijos), se recalca que incluso hay que definir y aclarar algunas cosas que no se tienen desde el principio. Es necesario &lt;strong&gt;aclarar conceptos&lt;/strong&gt;, investigar, a veces, el verdadero objetivo y muchas veces descomponer el problema en problemas más pequeños y fáciles de resolver.&lt;/p&gt;

&lt;h2 id=&quot;la-diligencia-es-la-madre-de-la-buena-suerte&quot;&gt;La diligencia es la madre de la buena suerte&lt;/h2&gt;

&lt;p&gt;Muchas veces, parece que las ideas de resolución de un problema nos llegan como por arte de magia a la cabeza, por buena suerte o gratis. Polya dice que una precondición para tengamos estas buenas ideas es que &lt;strong&gt;las debemos merecer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;¿Cómo nos hacemos “merecedores” de tener buenas ideas?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Un roble no cae con la primera estocada&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Debemos persistir en buscar &lt;em&gt;diferentes&lt;/em&gt; maneras de resolver el problema, entenderlo completamente como hemos mencionado y aplicar diferentes formas y técnicas de resolución, que hemos visto en otros artículos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Debemos hacer lo que podamos si no podemos hacer lo que debemos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Intentar por diferentes medios incluso después de fallar es una forma de merecer que nos lleguen nuevas ideas.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Un sabio convierte oportunidades en buena fortuna&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta última frase se menciona por lo importante que es &lt;strong&gt;NO despreciar ninguna de las ideas que nos vengan a la cabeza&lt;/strong&gt;, por simple o tonta que parezca. Alguien experimentado en resolver problemas puede que no tenga más ideas en total que alguien no experimentado, pero &lt;em&gt;sabe reconocer mejor ideas prometedoras&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;un-retraso-sabio-hace-la-carretera-segura&quot;&gt;Un retraso sabio hace la carretera segura&lt;/h2&gt;

&lt;p&gt;Esta frase nos recuerda la importancia de no apresurarnos a ejecutar un plan que parece perfecto para llegar a una solución. Según la propuesta de Polya para resolver problemas (entendimiento, planeación, ejecución, revisión), la parte más difícil de lograr es &lt;em&gt;el plan&lt;/em&gt;, pero la parte en la que más trabajo se lleva es la &lt;strong&gt;ejecución de ese plan&lt;/strong&gt;. Por tu experiencia en desarrollo de software tal vez ya lo sepas.&lt;/p&gt;

&lt;p&gt;Pero al encontrar lo que parece un buen plan no conviene ejecutarlo lo más rápido posible sin darle al menos una segunda revisión. Tenemos que recordar que:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Creemos muy pronto lo que anhelamos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nuestro juicio puede nublarse si deseamos salir muy rápido de algo y podemos caer en la trampa de creer muy fácilmente en un plan de resolución no tan sólido.&lt;/p&gt;

&lt;p&gt;¿A qué te recuerda esto de pensarlo muy bien antes de comprometerse completamente con una solución? En el desarrollo de software hacer &lt;strong&gt;pruebas de concepto, prototipos y simulaciones&lt;/strong&gt; es una muy buena forma de evaluar un plan de solución antes de comprometer todos los recursos para la creación de esa solución.&lt;/p&gt;

&lt;h2 id=&quot;mira-alrededor-cuando-obtengas-tu-primer-hongo-o-tu-primer-descubrimiento-crecen-en-grupos&quot;&gt;Mira alrededor cuando obtengas tu primer hongo o tu primer descubrimiento: crecen en grupos&lt;/h2&gt;

&lt;p&gt;¿Te suena? Muchas veces las soluciones a diferentes problemas, o a diferentes partes del problema se encuentran muy cerca entre ellas, o son una variación de la solución, aplicación del resultado o aplicación del método de resolución.&lt;/p&gt;

&lt;h2 id=&quot;pregunta-qué-por-qué-dónde-cuándo-y-cómo&quot;&gt;Pregunta Qué, Por qué, Dónde, Cuándo y cómo&lt;/h2&gt;

&lt;p&gt;Finalmente, esta frase habla de la importancia de hacer el mayor número de preguntas posibles sobre el problema en cuestión, pregunta, pregunta, pregunta hasta que tengas toda la información.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Repasa estas ideas cuando te sientas atorado para resolver algún problema y puede que te ayuden a salir del hoyo. Y sobre todo, lee &lt;a href=&quot;https://amzn.to/33qfw07&quot;&gt;“How to Solve It”&lt;/a&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="polya" /><category term="how-to-solve-it" /><category term="problemas" /><category term="resolución" /><category term="heurística" /><summary type="html">Hablemos de algunas ideas interesantes y prácticas sobre la resolución de problemas, que te pueden ayudar a salir de un bache contra un problema difícil.</summary></entry><entry><title type="html">Formas de hacer una API con Go</title><link href="https://blog.thedojo.mx/2020/09/20/maneras-de-hacer-una-api-con-go-lang.html" rel="alternate" type="text/html" title="Formas de hacer una API con Go" /><published>2020-09-20T00:00:00-05:00</published><updated>2020-09-20T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2020/09/20/maneras-de-hacer-una-api-con-go-lang</id><content type="html" xml:base="https://blog.thedojo.mx/2020/09/20/maneras-de-hacer-una-api-con-go-lang.html">&lt;p&gt;Go es uno de los lenguajes modernos más usados. Ya hablamos de &lt;a href=&quot;/2019/09/01/por-que-deberias-aprender-go.html&quot;&gt;por qué deberías aprenderlo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ahora hablemos de un caso de uso práctico: &lt;strong&gt;úsalo para crear una API HTTP&lt;/strong&gt;. En este artículo nos enfocaremos en la parte de comunicación HTTP y la generación de respuestas adecuadas.&lt;/p&gt;

&lt;p&gt;La funcionalidad básica de tu API puede o no adaptarse completamente a Go (no es es tan fácil de escribir como un lenguaje dinámico como Python), pero definitivamente es un &lt;strong&gt;lenguaje excelente&lt;/strong&gt; para crear interfaces de comunicación web, debido a su alto rendimiento y eficiencia.&lt;/p&gt;

&lt;p&gt;Puedes ver algunas de las comparativas en los siguientes artículos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stressgrid.com/blog/benchmarking_go_vs_node_vs_elixir/&quot;&gt;Comparando el rendimiento de Go, NodeJS y Elixir&lt;/a&gt;. TL;DR: Go y Elixir llegan a manejar más de 100k conexiones sin ningún problema, Node empieza con problemas desde 30k y el más eficiente en cómputo y memoria utilizada &lt;em&gt;por mucho&lt;/em&gt; es &lt;strong&gt;Go&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/mroth/phoenix-showdown&quot;&gt;Comparación de frameworks web ligeros&lt;/a&gt;. Este artículo es un poco viejo, pero el resumen es que Gin (un framework web ligero de Go) es el que más peticiones soporta por segundo y con una consistencia excelente.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1574629781/Screenshot_2019-11-24_15.09.25_ozqwcu.png&quot; alt=&quot;Comparativa de micro-frameworks Web&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hablemos de tres formas de crear una API sobre HTTP para tu próximo proyecto. Pero antes hablemos de una opción simple que no cubre muchos casos pero que se oye recomendada por todo internet.&lt;/p&gt;

&lt;h2 id=&quot;la-biblioteca-estándar&quot;&gt;La biblioteca estándar&lt;/h2&gt;

&lt;p&gt;Cuando hice mi primer proyecto en Go, gran parte de la investigación sobre qué usar para crear un proyecto de una API web apuntaba a los &lt;strong&gt;paquetes nativos&lt;/strong&gt; de Go.&lt;/p&gt;

&lt;p&gt;Go tiene una biblioteca estándar que cubre &lt;strong&gt;muchas&lt;/strong&gt; de las necesidades de un desarrollador moderno. Si has programado en él podrás estar de acuerdo en que se siente como subirte en hombros de gigantes, debido a que las personas que lo diseñaron y construyeron son &lt;em&gt;las mismas personas que sentaron las bases para los sistemas operativos modernos&lt;/em&gt;. Imagínate cuánta experiencia tienen.&lt;/p&gt;

&lt;p&gt;En la biblioteca estándar podemos encontrar un paquete que se llama &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net/http&lt;/code&gt; con el que puedes hacer, un servidor web con direccionamiento de rutas sencillo (la base de tu API) &lt;strong&gt;con muy pocas líneas de código&lt;/strong&gt;. Puedes recibir peticiones HTTP, procesarlas y devolver una respuesta HTTP. El ciclo básico request -&amp;gt; response.&lt;/p&gt;

&lt;p&gt;Aquí hay un ejemplo:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Implementando rutas HTTP&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// iniciando el servidor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// handler recibe la petición http y la procesa para devolver una respuesta http&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hola Go API's&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Falta responder JSON&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si tu API es sencilla, expone pocas URLs y sabes que no requerirás mucho en campo de las peticiones HTTP (procesamiento de parámetros, manejo de rutas, etc.) la biblioteca estándar es una solución buena, pero para otros casos se queda un poco corta, ya que tendrías que implementar varias cosas a mano.&lt;/p&gt;

&lt;p&gt;Su uso es sencillo como acabas de ver. Usar un framework web tiene el costo de agregar complejidad a &lt;strong&gt;cambio de funcionalidades que no tienes que desarrollar tú&lt;/strong&gt;. Pero aquí te compartimos un artículo en el que un experto hablá de por qué &lt;em&gt;él&lt;/em&gt; prefiere no usar frameworks: &lt;a href=&quot;https://medium.com/code-zen/why-i-don-t-use-go-web-frameworks-1087e1facfa4&quot;&gt;Why I Don’t Use Go Web Frameworks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Por eso te presentamos las opciones más comunes y algunos ejemplos.&lt;/p&gt;

&lt;h2 id=&quot;gorilla-web-toolkit&quot;&gt;Gorilla Web Toolkit&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/489566?s=200&amp;amp;v=4&quot; alt=&quot;Gorilla Web Toolkit logo&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gorillatoolkit.org/&quot;&gt;Gorilla Toolkit&lt;/a&gt; es un conjunto de herramientas para web que, entre otras cosas tiene:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un router más completo que el de la biblioteca estándar: &lt;em&gt;Gorilla Mux&lt;/em&gt;. Es compatible con el tipo de dato nativo de Go para las peticiones. Además incluye:
    &lt;ul&gt;
      &lt;li&gt;Ruteadores secundarios, para que organices mejor tu código.&lt;/li&gt;
      &lt;li&gt;Inversión de URL’s: te permite generar la URL a partir de un identificador.&lt;/li&gt;
      &lt;li&gt;Matches complejos&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Middlewares: logging, compresión, recuperación&lt;/li&gt;
  &lt;li&gt;Manejo de sesiones con cookies seguras&lt;/li&gt;
  &lt;li&gt;Implementación de WebSockets y RPC&lt;/li&gt;
  &lt;li&gt;Conversión de valores de entrada en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; de Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gorilla Toolkit &lt;strong&gt;no es un framework&lt;/strong&gt;, puedes usar cada de sus herramientas por separado, como las vayas necesitando. Así que puede empezar con la librería estándar y agregar lo que necesitas de Gorilla poco a poco.&lt;/p&gt;

&lt;h2 id=&quot;gin&quot;&gt;Gin&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_250/v1600730661/color_whycuu.png&quot; alt=&quot;Gin go logo&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gin-gonic/gin&quot;&gt;Gin&lt;/a&gt; es un framework web para Go bastante completo que clama ser el más rápido de todos los frameworks web para Go. Ya está en su versión 1, por lo que puedes usarlo con confianza en proyectos serios.&lt;/p&gt;

&lt;p&gt;Gin usa &lt;a href=&quot;https://github.com/julienschmidt/httprouter&quot;&gt;httpRouter&lt;/a&gt; que tiene funciones parecidas a Gorilla Mux, pero que dice escalar mejor que el de la librería estándar incluso.&lt;/p&gt;

&lt;p&gt;Tiene utilidades incluídas para hacer render de XML, JSON, YAML y ProtoBuf, o sea que es perfecto para crear diferentes tipos de API’s.&lt;/p&gt;

&lt;p&gt;Además, tiene un montón de cosas más que puedes explorar en su documentación, que es muy completa y con muchos ejemplos, por si fuera poco.&lt;/p&gt;

&lt;h2 id=&quot;beego&quot;&gt;Beego&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://beego.me/static/img/beego_purple.png&quot; alt=&quot;Beego logo&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://beego.me/&quot;&gt;Beego&lt;/a&gt; es un framweork que se especializa en API’s RESTful e intenta usar lo mejor posibles las características de Go como las interfaces y las estructuras embebidas. Parece que está hecho en China.&lt;/p&gt;

&lt;p&gt;Las cuatro características que resalta son:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fácil de usar: es MVC  y tiene herramientas incluídas para poder desarrollar más fácilmente.&lt;/li&gt;
  &lt;li&gt;Inteligente: tiene características de ruteo avanzadas junto con monitoreo integrado que te permiten observar el estado de tu API.&lt;/li&gt;
  &lt;li&gt;Modular: su estructura interna está compuesta por varios módulos que te permiten avanzar rápidamente.&lt;/li&gt;
  &lt;li&gt;Alto desempeño&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Es un framework bastante completo, que cumple con todo lo mínimo necesario para que puedas empezar a desarrollar tu API eficientemente, pero parece que tiene un defecto: al ser hecho en china, la documentación no está pulida completamente y puede que haya poca información en tutoriales y otras páginas.&lt;/p&gt;

&lt;h2 id=&quot;echo&quot;&gt;Echo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.labstack.com/images/echo-logo.svg&quot; alt=&quot;Logo de Echo&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://echo.labstack.com/&quot;&gt;Echo&lt;/a&gt; se promociona como el framework web minimalista. Tiene soporte para HTTP/2, ruteo sin uso de memoria dinámica (para mejor desempeño), TLS automático, middlewares flexibles y funciones utilitarias para responder fácilmente las peticiones web en cualquier formato.&lt;/p&gt;

&lt;p&gt;En algunos benchmarks &lt;strong&gt;echo&lt;/strong&gt; parece ser más rápido que Gin.&lt;/p&gt;

&lt;p&gt;Tiene desarrollo bastante activo y la documentación contiene ejemplos suficientes, junto con algunas recetas y para que logres avanzar rápido.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Existen múltiples opciones para crear tu API en Go. Hay para escoger dependiendo de tus gustos y de lo más importante para tu proyecto.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="go" /><category term="apis" /><category term="beego" /><category term="gorilla-mux" /><category term="gin-go" /><category term="go-lang" /><summary type="html">Exploramos diferentes formas en las que puedes crear una API con Go, el lenguaje enfocado en la eficiencia de los programas permitiendo productividad para los programadores.</summary></entry><entry><title type="html">No hagas hagas DevOps por convivir</title><link href="https://blog.thedojo.mx/2020/09/10/no-hagas-hagas-devops-por-convivir.html" rel="alternate" type="text/html" title="No hagas hagas DevOps por convivir" /><published>2020-09-10T00:00:00-05:00</published><updated>2020-09-10T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2020/09/10/no-hagas-hagas-devops-por-convivir</id><content type="html" xml:base="https://blog.thedojo.mx/2020/09/10/no-hagas-hagas-devops-por-convivir.html">&lt;p&gt;Tuvimos una plática con Domingo Suárez(&lt;a href=&quot;https://twitter.com/domix&quot;&gt;@domix&lt;/a&gt;) acerca de diferentes temas que le interesan a los desarrolladores.&lt;/p&gt;

&lt;p&gt;En este artículo te vamos a dar un resumen.&lt;/p&gt;

&lt;h2 id=&quot;cómo-nos-dejamos-influir-para-adoptar-una-tecnología&quot;&gt;Cómo nos dejamos influir para adoptar una tecnología&lt;/h2&gt;

&lt;p&gt;Lo primero de lo que hablamos es de la forma en que muchas veces adoptamos la tecnología: &lt;strong&gt;por moda&lt;/strong&gt;. A veces es porque alguien con autoridad la mencionó o muchos miembros de la comunidad la están usando. A los desarrolladores nos gustan las cosas &lt;em&gt;brillantes&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Generalmente esa decisión tiene un costo bastante alto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Te metes en cosas de las que no hay la suficiente información disponible&lt;/li&gt;
  &lt;li&gt;Te enfrentas con problemas totalmente desconocidos&lt;/li&gt;
  &lt;li&gt;Gastas recursos que podrías gastar mejor en otro lado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;La lección:&lt;/strong&gt; no tienes que aprender y usar todo lo nuevo que sale. Usa tecnología &lt;em&gt;aburrida&lt;/em&gt;: probada por el tiempo, de la que exista mucha información y usada por muchos desarrolladores de los que podrás aprender rápidamente y enfocarte en los verdaderos problemas que &lt;strong&gt;diferencian&lt;/strong&gt; a tu solución.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-devops&quot;&gt;¿Qué es DevOps?&lt;/h2&gt;

&lt;p&gt;Uno de los temas principales que tratamos es la aclaración de lo que de verdad significa el término &lt;strong&gt;DevOps&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Domingo explicó que DevOps es una &lt;strong&gt;cultura&lt;/strong&gt; que intenta mejorar el flujo de trabajo que existe entre el área de desarrollo y la de operación del software (la encargada de ponerlo en manos de los usuarios y monitorearlo). Intenta &lt;strong&gt;mejorar los hilos organizacionales&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Nos explicó que el término “DevOps” originalmente era un hashtag de Twitter para hablar de esta cultura en una conferencia organizada por &lt;a href=&quot;https://blog.newrelic.com/engineering/devops-name/&quot;&gt;Patrick Debois&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Domingo dejó muy claro que &lt;strong&gt;DevOps no es un puesto, ni un rol.&lt;/strong&gt; No lo puedes comprar con una herramienta, sino que es una serie de prácticas y &lt;strong&gt;una forma de pensar&lt;/strong&gt; que &lt;em&gt;tu empresa&lt;/em&gt; debe desarrollar.&lt;/p&gt;

&lt;p&gt;Platicamos a además de que DevOps establece &lt;em&gt;“Las 3 vías”&lt;/em&gt; que son tres procesos o tres formas en las que la información viaja.&lt;/p&gt;

&lt;p&gt;La primera vía consiste en poner el código en producción lo más rápido posible, con opciones como quitarlo rápidamente si no funciona bien (rollback).&lt;/p&gt;

&lt;p&gt;La segunda vía es &lt;strong&gt;el monitoreo del software en producción&lt;/strong&gt;, para poder actuar rápidamente. Puede ser para mejorarlo, para corregir fallas y para aprender del verdadero uso que los usuarios finales le dan.&lt;/p&gt;

&lt;p&gt;La tercer vía es la repetición de estos dos procesos y la ejecución de ejercicios con el objetivo de pulir los procesos y aprender más cosas. Esta vía incluye simulaciones de falla, sesiones de estudio, sesiones de preparación y análisis de fallos, etc.&lt;/p&gt;

&lt;h2 id=&quot;mentores-y-aprendizaje&quot;&gt;Mentores y aprendizaje&lt;/h2&gt;

&lt;p&gt;Un tema repetido desde el principio es que Domingo tuvo un mentor que se llama &lt;strong&gt;Humberto&lt;/strong&gt;.  Una persona que sin darse cuenta le ayudó mucho a adoptar hábitos sanos de aprendizaje y le enseñó muchas cosas directamente.&lt;/p&gt;

&lt;p&gt;De esto salió que en la industria de desarrollo de productos digitales &lt;strong&gt;falta en práctica poner más en práctica la mentoría&lt;/strong&gt;, ya que nos puede ayudar avanzar y puede a crear personas más hábiles.&lt;/p&gt;

&lt;p&gt;Llegamos a una conclusión: &lt;strong&gt;la mentoría es una responsabilidad compartida&lt;/strong&gt;. El mentor tiene la responsabilidad de guíar al aprendiz de la mejor forma, porque puede influir de formas muy poderosas en su vida, pero la responsabilidad de aprovechar bien esa guía y aplicar los consejos es de la persona que está siendo mentoreada.&lt;/p&gt;

&lt;p&gt;En este punto Alex levantó un punto interesante: en lugares como Silicon Valley, los directivos tienen la idea de que preparar gente dentro de su empresa es beneficioso en general para el ecosistema. Si todos adoptan esa mentalidad, la próxima persona que llegue a tu empresa habrá sido entrenada de la mejor manera, &lt;strong&gt;elvando el nivel de la comunidad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Le lección: Aceptar o pedir una mentoría &lt;strong&gt;te hará crecer&lt;/strong&gt; y adoptar la idea de que preparar a las personas es beneficioso ayudará a todo el ecosistema.&lt;/p&gt;

&lt;h2 id=&quot;cómo-avanzar-en-tu-carrera-como-desarrollador&quot;&gt;Cómo avanzar en tu carrera como desarrollador&lt;/h2&gt;

&lt;p&gt;Conectado con el tema anterior, hablamos un poco de &lt;strong&gt;cómo puedes volverte mejor desarrollador&lt;/strong&gt;, alcanzar un nuevo puesto y obtener un mejor sueldo. La conclusión es:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tienes que mantenerte &lt;strong&gt;siempre aprendiendo&lt;/strong&gt; nuevas cosas, no sabes lo que puede servirte más adelante.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No estudies sólo lo relacionado con tu trabajo actual&lt;/strong&gt;, estudiar cosas que no tienen nada que ver con lo que haces hoy puede abrirte las puertas a nuevas oportunidades.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Haz proyectos de las cosas que estás aprendiendo, no sólo leas o veas videos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Has cosas que de verdad disfrutes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;microservicios&quot;&gt;Microservicios&lt;/h2&gt;

&lt;p&gt;La mayoría de las empresas no los necesita, porque aunque quieran imitar a Netflix o Google o Amazon o Facebook, no tienes sus mismos problemas.&lt;/p&gt;

&lt;p&gt;Además la arquitectura de microservicios tiene retos a los que tal vez no te quieres enfrentar, como las transacciones distribuidas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¿Cuándo es buena idea usar microservicios?&lt;/strong&gt; Domingo dio dos criterios:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tu base de usuarios es muy grande, los microservicios te ayudarán a escalar mejor.&lt;/li&gt;
  &lt;li&gt;Tu base de código es muy grande. Así la podrás dividir mejor entre tus &lt;em&gt;decenas&lt;/em&gt; de programadores.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;aprender-java-vale-la-pena&quot;&gt;Aprender Java vale la pena&lt;/h2&gt;

&lt;p&gt;Después, hablamos de qué tanto vale la pena aprender Java en 2020, ya que Domingo es un &lt;strong&gt;Java Champion&lt;/strong&gt;, uno de los pocos de México y de LATAM.&lt;/p&gt;

&lt;p&gt;La conclusión: &lt;strong&gt;Java es un lenguaje que vale la pena aprender, por ser una tecnología probada (aburrida) y con muchas cosas desarrolladas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Algunas de las características que resaltamos de Java:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La JVM es una pieza de software magnífica que tiene optimizaciones para ser muy eficiente, para ayudarte aunque tu código no sea tan bueno.&lt;/li&gt;
  &lt;li&gt;Un montón de lenguajes corren sobre la JVM. Si te gusta más otro que Java puedes combinarlos y compartir lo que ya existe en el ecosistema de Java&lt;/li&gt;
  &lt;li&gt;Java como lenguaje ha avanzado mucho, adoptando formas de programar más modernas.&lt;/li&gt;
  &lt;li&gt;Sus características intrínsecas, como su compilador y el tipado estático lo hacen ideal para cierto tipo de problemas en los que tienes que reducir al mínimo los errores en tiempo de ejecución.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El consejo de domingo es: Si quieres empezar con Java empieza con algún framework modernos como &lt;a href=&quot;https://micronaut.io/&quot;&gt;Micronaut&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;recomendaciones-de-libros&quot;&gt;Recomendaciones de libros&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/3jVxLQu&quot;&gt;The Phoenix Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://landing.google.com/sre/books/&quot;&gt;Site Reliability Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://amzn.to/3k2ZTRD&quot;&gt;Joel on Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disfrutamos mucho de esta plática y esperamos tenerlo con nosotros de nuevo pronto. La puedes ver aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/3zQ3qSFDdW0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="live" /><category term="youtube" /><category term="microservicios" /><category term="java" /><category term="domix" /><category term="hype" /><category term="devops" /><summary type="html">En este artículo resumiremos una plática muy interesante que tuvimos con Domingo Suárez sobre DevOps y otras cosas.</summary></entry></feed>