<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://blog.thedojo.mx/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.thedojo.mx/" rel="alternate" type="text/html" /><updated>2021-07-08T00:27:04-05:00</updated><id>https://blog.thedojo.mx/feed.xml</id><author><name>Héctor Patricio</name><uri>https://github.com/hectorip</uri></author><entry><title type="html">Desarrolladores de los que puedes aprender: Kevlin Henney</title><link href="https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney.html" rel="alternate" type="text/html" title="Desarrolladores de los que puedes aprender: Kevlin Henney" /><published>2021-07-07T00:00:00-05:00</published><updated>2021-07-07T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney</id><content type="html" xml:base="https://blog.thedojo.mx/2021/07/07/desarrolladores-de-los-que-puedes-aprender-kevlin-henney.html">&lt;p&gt;Hay varios desarrolladores de talla internacional de los que puedes &lt;strong&gt;aprender mucho&lt;/strong&gt;, que creemos que no tienen la suficiente exposición, sobre todo en America Latina. Es por eso que estamos creando una serie de artículos y videos en la que resaltaremos la trayectoria, forma de pensar, pláticas y cosas que puedes aprender.&lt;/p&gt;

&lt;p&gt;Las condiciones para que aparezcan aquí son las siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Amplia experiencia real desarrollando sistemas&lt;/li&gt;
  &lt;li&gt;Que tengan algún logro notable en el desarrollo de sistemas&lt;/li&gt;
  &lt;li&gt;Comparten sus ideas con la comunidad de forma continua&lt;/li&gt;
  &lt;li&gt;No son unos &lt;em&gt;“brilliant jerks”&lt;/em&gt;, es decir, no usan su experiencia o inteligencia para humillar o desacreditar a otros, y mucho menos su exposición para promover ideas nocivas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El objetivo de esta serie es que aprendamos de las personas que han dedicado su vida a esto y construyamos sobre lo que ellos han hecho en vez de reinventar la rueda cada vez.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; El que los mencionemos aquí no implica que todas sus ideas son correctas o que estemos de acuerdo con todo lo que dicen. Conocer diferentes puntos de vista, sumado a tu experiencia en diferentes contextos te ayudará a tener un criterio adaptado a tu realidad.&lt;/p&gt;

&lt;p&gt;Ahora sí, vamos a hablar de &lt;a href=&quot;https://blog.eisele.net/2013/07/the-heroes-of-java-kevlin-henney.html&quot;&gt;Kevlin Henney&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;acerca-de-kevlin-henney&quot;&gt;Acerca de Kevlin Henney&lt;/h2&gt;

&lt;p&gt;Kevlin Henney es un consultor, escritor, entrenador y presentador de temas relacionados con sistemas, procesos, las personas y el software. Sus escritos, talleres y consultorías siempre tienen que ver con &lt;strong&gt;la forma&lt;/strong&gt; en que &lt;em&gt;desarrollamos&lt;/em&gt; y &lt;em&gt;diseñamos&lt;/em&gt; software, además de con los procesos y prácticas que llevan al éxito los proyectos de software complejos.&lt;/p&gt;

&lt;p&gt;Ha escrito columnas para múltiples revistas dedicadas al desarrollo de software. Es autor o editor de varios libros que son &lt;em&gt;muy recomendados&lt;/em&gt; para arquitectos de software y desarrolladores. Algunos ejemplos son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com.mx/Pattern-Oriented-Software-Architecture-Distributed-Computing/dp/0470059028&quot;&gt;A Pattern Oriented Software Architecture for Distributed Computing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/97-things-every/9780596809515/&quot;&gt;97 Things Every Developer should know&lt;/a&gt; - Es una colección de ensayos que Kevlin se encargó de compilar y editar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kevlin se ha presentado en casi todas las conferencias importante de desarrollo de software europeas y de hable inglesa. Vive en Bristol, Reino Unido y también disfruta de escribir ficción, puedes encontrar en &lt;a href=&quot;https://www.amazon.com/Kevlin-Henney/e/B0716N93KR%3Fref=dbs_a_mng_rwt_scns_share&quot;&gt;Amazon&lt;/a&gt; sus libros de ficción. Además es muy accesible, si lo buscas en Twitter es muy probable que te conteste: &lt;a href=&quot;https://twitter.com/KevlinHenney&quot;&gt;Kevlin Henney en Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Una de las cosas que menciona que más nos gusta es: &lt;strong&gt;“Si estás de acuerdo con todo lo qu estoy diciendo, no me estás escuchando.”&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;algunas-ideas-de-kevlin&quot;&gt;Algunas ideas de Kevlin&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Less code == less bugs”. - Kevlin Henney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;De las pláticas y el contenido que hemos consumido de Kevlin, hemos podido derivar algunas de las principales ideas que promueve. Te listamos las tres más importantes y te dejamos descubrir las demás viendo sus charlas o leyendo su contenido.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;La arquitectura de software requiere entendimiento completo del dominio.&lt;/strong&gt; Una de las ideas que Kevlin repite vez tras vez es la importancia de entender y definir el problema que estamos tratando de resolver. Se basa en las ideas de otros autores para reforzar esto. Una de las cosas que Kevlin resalta es que debemos conocer los &lt;strong&gt;detalles&lt;/strong&gt;, para poder implementar software correcto con la arquitectura adecuada.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;El diseño y la arquitectura de software son procesos iterativos e incrementales.&lt;/strong&gt; Es imposible hacer un diseño completamente correcto y sin errores desde la primera vez. Es por eso que esta es una idea que se repite en sus conferencias vez tras vez. La lección para nosotros: &lt;em&gt;debemos diseñar el software con el conocimiento de que siempre habrá algo que mejorar&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;El software simple, pequeño y “aburrido” es más fácil de manejar&lt;/strong&gt;. Haciendo eco de la frase que pusimos al inicio de esta sección, una de las ideas que Kevlin promueve más es la de minimizar la cantidad de código para lograr algo, así como buscar la simplicidad tanto en funciones como de construcción. Esto último es lo que llamamos aburrido: evitar tanto como podamos tecnologías a las que no estamos acostumbrados o demasiado nuevas y que agreguen dependencias inecesarias.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pláticas&quot;&gt;Pláticas&lt;/h2&gt;

&lt;p&gt;Kevlin tiene decenas de pláticas en YouTube y Vimeo, hablando temas variados, todos relacionados de una forma u otra con el &lt;em&gt;proceso&lt;/em&gt; de desarrollo y la calidad del software. V&lt;/p&gt;

&lt;p&gt;Vamos a mencionar tres de las que nos han parecido las mejores.&lt;/p&gt;

&lt;h3 id=&quot;software-is-details&quot;&gt;Software is Details&lt;/h3&gt;

&lt;p&gt;Aquí presenta una idea que repite a lo largo de sus presentaciones: &lt;strong&gt;la implementación del software requiere un conocimiento lo más profundo y completo que se pueda sobre el problema que se está resolviendo&lt;/strong&gt;. Da algunos ejemplos en los que se diseñó un sistema sin pensar en los “detalles de implementación” con resultados catastróficos. Mantener la vista en el sistema entero mientras se toman en cuenta los detalles es una señal de un arquitecto de software efectivo.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kX0prJklhUE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;old-is-the-new-new&quot;&gt;Old is the new new&lt;/h3&gt;

&lt;p&gt;En esta plática resalta la importancia de conocer y dominar los principios que habilitan a las nuevas tecnologías y herramientas. Las implementaciones tienen una vida corta mientras que los principios se mantienen inalterados.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/AbgsfeGvg3E&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;it-depends&quot;&gt;It Depends…&lt;/h3&gt;

&lt;p&gt;Crear software &lt;strong&gt;depende&lt;/strong&gt; del conocimiento que tengamos acerca del dominio que estamos tratando. Nuestro conocimiento tiene límites que no podemos sobrepasar (incertidumbre) y es contra eso con lo que debemos tener cuidado, cosas que no están inmediatamente en nuestra visión.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/rNSVZs66o48&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Tiene muchas más pláticas en conferencias que puedes buscar directamente en YouTube. Cada una de sus pláticas es un conjunto de ideas y referencias que es más de lo que se puede absorber en el tiempo en el que lo presenta, por lo que tal vez tengas que verlas varias veces, pero todo ese bagaje vale la pena. Aquí te dejamos una búsqueda que las agrupa: &lt;a href=&quot;https://dev.tube/@kevlinhenney&quot;&gt;DevTube&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;recursos&quot;&gt;Recursos&lt;/h2&gt;

&lt;p&gt;Para aprender más de las ideas qeu Kevlin enseña, puedes investigar más de él y su trabajo aquí:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://about.me/kevlin&quot;&gt;Página de Kevlin Henney&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.itkonekt.com/2021/01/21/kevlin-henney-on-the-topic-of-what-to-read-if-youre-a-programmer/&quot;&gt;What to read if you are a programmer&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.eisele.net/2013/07/the-heroes-of-java-kevlin-henney.html&quot;&gt;Entrevista de la serie “Heroes of Java”&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://kevlinhenney.medium.com/&quot;&gt;Blog&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/Kevlin/presentations&quot;&gt;Sus presentaciones&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Todos los desarrolladores de diferentes niveles podemos aprender mucho de las ideas que Kevlin se ha dedicado a enseñar, mientras lo hace de una manera entretenida, profunda y que va puliendo con el tiempo. Es importante escuchar a personas con experiencia para pode desarrollar el criterio propio y las habilidades y formas de pensar para ser efectivos.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="developers" /><category term="arquitectura" /><summary type="html">Hay muchas personas de las cuáles aprender, con muchos años de experiencia más allá de Robert Martín. En esta serie de artículos vamos a resaltar el trabajo y las ideas de varios desarrolladores y consultores con gran experiencia. Empecemos con Kevlin Henney.</summary></entry><entry><title type="html">Lo que debes saber sobre propiedad intelectual como desarrollador de software</title><link href="https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software.html" rel="alternate" type="text/html" title="Lo que debes saber sobre propiedad intelectual como desarrollador de software" /><published>2021-06-22T00:00:00-05:00</published><updated>2021-06-22T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software</id><content type="html" xml:base="https://blog.thedojo.mx/2021/06/22/lo-que-debes-saber-sobre-propiedad-intelectual-como-desarrollador-de-software.html">&lt;p&gt;Programar es una cosa, desarrollar software algo completamente diferente, sobre todo en un ambiente comercial en el que tienes que tratar con clientes y patrones. En este entorno tienes que entender otras cosas como la forma de colaborar con ellos, los precios y algo muy importante: las leyes.&lt;/p&gt;

&lt;p&gt;En este artículo vamos a hacer un resumen de las cosas que platicamos con &lt;a href=&quot;https://twitter.com/LaCD_Rom&quot;&gt;Cynthia Romero&lt;/a&gt; y con &lt;a href=&quot;https://twitter.com/LawyerCount&quot;&gt;Conde&lt;/a&gt; en la plática &lt;a href=&quot;https://youtu.be/CpISQxihazU&quot;&gt;“Todo lo que debes saber acerca de propiedad intelectual como creador de Software”&lt;/a&gt;. También Novus hizo un resumen por si lo quieres checar: &lt;a href=&quot;https://www.novusconcilium.com/post/software&quot;&gt;Tips legales para crear software&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: Es muy importante controlar y conocer los componentes de tu software y mantener un registro para no meterte en problemas.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-la-propiedad&quot;&gt;¿Qué es la propiedad?&lt;/h2&gt;

&lt;p&gt;La propiedad es la facultad que se define en el derecho como la capacidad de usar algo, aprovecharse de los frutos o productos de ese algo y la facultad de usar como quieras, incluso deshacerte de ese algo.&lt;/p&gt;

&lt;p&gt;La propiedad es muy fácil de entender cuando se trata de cosas físicas, pero no tanto cuando se trata de cosas intangibles. La propiedad &lt;strong&gt;intelectual&lt;/strong&gt; se refiere a la aplicación de las facultades antes mencionadas a obras o trabajos que hiciste con tu mente y no con tus manos. Algo que se resaltó en la plática, es que el software y todas las obras intelectuales están protegidas por las leyes desde escribes la primera línea.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-una-licencia&quot;&gt;¿Qué es una licencia?&lt;/h2&gt;

&lt;p&gt;Debido a que somos los dueños de las cosas que creamos, podemos extender facultades como el uso o la distribución sobre nuestras obras. Estas facultades se formalizan mediante &lt;strong&gt;una licencia&lt;/strong&gt;, que es un contrato que establece las condiciones de uso de la obra intelectual.&lt;/p&gt;

&lt;p&gt;Los desarrolladores de software debemos tener bien claro cómo es que queremos sacarle provecho a nuestras obras para establecer el contrato, &lt;em&gt;la licencia&lt;/em&gt; adecuada. Para establecer esto, lo normal es consultar con expertos que nos ayuden a tangibilizar la licencia, ya que los términos y procedimientos legales no son fáciles de manejar, y más vale contar con la ayuda de alguien con experiencia.&lt;/p&gt;

&lt;h2 id=&quot;uso-de-software-de-terceros&quot;&gt;Uso de software de terceros&lt;/h2&gt;

&lt;p&gt;Cuando desarrollamos software medianamente usable para casos cotidianos, es muy difícil que seamos nosotros quienes escribamos cada línea que compone el programa. Es por eso que confiamos en bibliotecas y piezas de software. ¿Cómo puedes asegurarte de respetar la propiedad intelectual de otros desarrolladores?&lt;/p&gt;

&lt;p&gt;El primer punto es que si alguna pieza de software no tiene una licencia explícita, entonces debes asumir que no tienes permiso para usarlo, mucho menos para incluirlo en software comercial o por encargo.&lt;/p&gt;

&lt;p&gt;Si el software que vas a usar tiene una licencia, debes asegurarte que cumples con lo que se establece en ella. Entender esto y asegurarte de que se estás cumpliendo requiere tiempo y esfuerzo, que debes considerar en la estimación del proyecto.&lt;/p&gt;

&lt;h2 id=&quot;el-inventario-de-activos&quot;&gt;El inventario de activos&lt;/h2&gt;

&lt;p&gt;Muy conectado con el punto anterior existe una cosa que los creadores de software deberíamos tener muy presente: el inventario de activos (bill of materials). Este es un documento que contiene todas las piezas de software que estas usando, junto con las licencias y algún otro detalle sobre la pieza en específico. Esta lista ayudará al momento de asegurarnos que el software no está rompiendo ninguna licencia.&lt;/p&gt;

&lt;p&gt;Dependiendo del lenguaje que programes, hay herramientas que te pueden ayudar a verificar esto automáticamente, incluso a listar las licencias que usan, por ejemplo, Node tiene el paquete &lt;a href=&quot;https://www.npmjs.com/package/license-checker&quot;&gt;License Checker&lt;/a&gt; y Python tiene &lt;a href=&quot;https://pypi.org/project/pip-licenses/&quot;&gt;PIP Licenses&lt;/a&gt;. El que existan estas herramientas de este estilo tal vez te de una idea de &lt;strong&gt;lo importante&lt;/strong&gt; que es tener tu inventario de activos controlado.&lt;/p&gt;

&lt;h2 id=&quot;documentos-legales&quot;&gt;Documentos legales&lt;/h2&gt;

&lt;p&gt;Cuando queremos obtener beneficios por el software que comercializamos o exponemos a un público, es muy importante contar con documentos legales que establecen los acuerdos que se asumen con el uso del software. Estos documentos son normalmente:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;La licencia de uso (para software comercial)&lt;/li&gt;
  &lt;li&gt;Los términos y condiciones de uso (para software de uso público)&lt;/li&gt;
  &lt;li&gt;El aviso de privacidad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Crear estos documentos es un asunto serio en el que normalmente se necesita la ayuda de expertos, a menos que sea una aplicación muy sencilla y poco seria.&lt;/p&gt;

&lt;p&gt;Si estás exponiendo el software como OpenSource, entonces puedes usar una licencia prefabricada: &lt;a href=&quot;https://opensource.org/licenses&quot;&gt;OpenSource Licenses&lt;/a&gt;, pero también tienes que entenderlas para ver qué es lo que permites con cada una.&lt;/p&gt;

&lt;p&gt;Estos costos los deberías de considerar en el costo final del software.&lt;/p&gt;
&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Como desarrollador de software es importante que conozcas los temas básicos de propiedad intelectual si quieres desarrollar y comercializar software. Puedes ver la charla entera, para que obtengas más detalles aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/CpISQxihazU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="propiedad-intelectual" /><category term="leyes" /><summary type="html">Como creadores de software es importante que conozcamos lo básico sobre las leyes que rigen la propiedad intelectual respecto a los programas y sus diferentes formas.</summary></entry><entry><title type="html">Fuentes no convencionales de aprendizaje</title><link href="https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje.html" rel="alternate" type="text/html" title="Fuentes no convencionales de aprendizaje" /><published>2021-06-14T00:00:00-05:00</published><updated>2021-06-14T00:00:00-05:00</updated><id>https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje</id><content type="html" xml:base="https://blog.thedojo.mx/2021/06/14/fuentes-no-convencionales-de-aprendizaje.html">&lt;p&gt;Cada quien tiene su forma de aprender. A algunas personas les funcionan mejor formas visuales y no convencionales. En este artículo te vamos a presentar algunos de los recursos que hemos encontrado que explican ideas y temas relacionados con la programación con un formato no convencional.&lt;/p&gt;

&lt;h2 id=&quot;te-lo-explico-con-gatitos&quot;&gt;Te lo explico con gatitos&lt;/h2&gt;

&lt;p&gt;Bel Rey, una programadora de Argentina (con la que tenemos una &lt;a href=&quot;https://youtu.be/7Ea4BGxwhEA&quot;&gt;entrevista&lt;/a&gt;) crea explicaciones estilo comics usando gatitos para embellecer y hacer divertidas las explicaciones.&lt;/p&gt;

&lt;p&gt;En este cómic explica una de las motivaciones para hacer este estilo de ilustraciones-explicaciones:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://teloexplicocongatitos.com/_next/image?url=https%3A%2F%2Fdoomvault.nyc3.digitaloceanspaces.com%2Ftlecg%2Fbig%2Faprender00.jpg&amp;amp;w=1200&amp;amp;q=75&quot; alt=&quot;Estilos de aprendizaje - te lo explico con gatitos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Entre sus explicaciones puedes encontrar temas como Docker, programación orientada objetos y comandos SQL todo con el estilo simpático y la estética de los gatitos, algunos de ellos enojados.&lt;/p&gt;

&lt;p&gt;Puedes ver su contenido en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://teloexplicocongatitos.com/&quot;&gt;Su página&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.instagram.com/teloexplicocongatitos/&quot;&gt;Instagram&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/explicocongatos&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;los-apuntes-de-majo&quot;&gt;Los apuntes de Majo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1623713646/losapuntes_ijwxfh.png&quot; alt=&quot;Ejemplo de los apuntes de Majo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Majo Ledesma, mientras estaba estudiando programación empezó a crear notas bastante bonitas y visuales reportando y resumiendo temas diversos como Python, JavaScript, CSS y ahora amasa una gran cantidad de temas y apuntes.&lt;/p&gt;

&lt;p&gt;Se hizo tan famosa que el CEO de &lt;a href=&quot;https://losapuntesdemajo.vercel.app/&quot;&gt;Vercel&lt;/a&gt; le ofreció poner todo su contenido en línea gratis usando su plataforma.&lt;/p&gt;

&lt;p&gt;El estilo de los apuntes es como si estuvieras leyendo la libreta de la alumna más aplicada y dedicada del salón para cualquier materia, con ilustraciones que embellecen la nota pero no siempre relacionadas con el tema. Son apuntes completamente hechos a mano en medios físicos y digitalizados.&lt;/p&gt;

&lt;p&gt;Pudes obtener los apuntes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://losapuntesdemajo.vercel.app/&quot;&gt;Los apuntes de Majo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/MajoLedes&quot;&gt;Twitter de Majo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wizardzines-de-julia-evans-en-inglés&quot;&gt;Wizardzines de Julia Evans (en inglés)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1623630863/wz_3_vvj9pp.png&quot; alt=&quot;Algunos wizard zines&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Los wizardzines son explicaciones sobre un tema en formato de cómic con dibujos sencillos e ilustrativos. Lo que resalta de estos cómics es que tratan a veces temas no tan sencillos de manera fácil de entender y para eso se lleva una buena cantidad de espacio, por lo que el artículo se convierte en una “revistita”.&lt;/p&gt;

&lt;p&gt;Julia vende las revistas que ha hecho en aproximadamente &lt;em&gt;10 USD&lt;/em&gt;, en formato digital con instrucciones para que tú las imprimas. Sin embargo, si no las puedes pagar, Julia ofrece el modelo que yo llamaría &lt;strong&gt;“paga sólo si puedes”&lt;/strong&gt;: abrió todo su contenido para que lo descargues sin costo, con la confianza de que pagarás si no es un impedimento para ti.&lt;/p&gt;

&lt;p&gt;En las Wiardzines puedes encontrar los siguientes temas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“How containers work”&lt;/li&gt;
  &lt;li&gt;“Hell yes! CSS!”&lt;/li&gt;
  &lt;li&gt;“Help! I have a manager!”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Además, tiene un montón de zines gratuitos que tratan temas más pequeños y no están a color.&lt;/p&gt;

&lt;p&gt;Su página tiene una sección llamada “questions” que te permite estudiar temas en formato de tarjetas con preguntas y respuestas que se revelan. Es una forma bastante buena de entender básicamente los temas de los que trata y al mismo tiempo de estudiar para memorizar algo que creas necesitar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1623713772/wizard_zines_bt7dzw.png&quot; alt=&quot;Ejemplo de Questions de wizardzines&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Puedes encontrar los wizardzines en:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://wizardzines.com/&quot;&gt;Página de Wizard Zines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Twitter de Julia Evans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;visual-partner&quot;&gt;Visual Partner&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/b196b29325f46dda5728d8d27884075949eaa7315beebf32a0537f259d54ee58/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f6361726c6f67696c6d61722f696d6167652f75706c6f61642f76313539353937323133392f696c6c757374726174696f6e732f426568696e64253230746865253230636f64652f494d475f353837335f656d7173686b2e706e67&quot; alt=&quot;Ejemplo de registro grǻfico&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Carlo Gilmar, siguiendo la tendencia de &lt;a href=&quot;https://extremservicejam.wordpress.com/2013/02/18/que-es-visual-thinking-y-como-puede-ayudarte/&quot;&gt;visual thinking&lt;/a&gt; ha creado &lt;strong&gt;Visual Partner&lt;/strong&gt;, la empresa/proyecto alterno en la que comparte sus &lt;em&gt;apuntes visuales&lt;/em&gt; de charlas que se dan en meetups y conferencias.&lt;/p&gt;

&lt;p&gt;Carlo ha creado un buen cuerpo de conocimiento de temas muy variados y probablemente puedas encontrar algo que estés aprendiendo en alguno de los lugares en lo que los comparte:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://visualpartnership.herokuapp.com/&quot;&gt;Visual Partnership&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.facebook.com/visualpartnership/&quot;&gt;Facebook&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/carlogilmar?lang=en&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Su contenido puede servir como resumen y guía para aprender más acerca de cierto tema, ya que no está ordenado por tópicos, ni toca los temas profundamente. Aquí podrás encontrar contenido variado.&lt;/p&gt;

&lt;h2 id=&quot;execute-program-inglés&quot;&gt;Execute Program (inglés)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/v1623647102/execute_program_ofbgcz.png&quot; alt=&quot;Execute program home&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El creador de &lt;strong&gt;Destroy All Software&lt;/strong&gt;,  Gary Bernhardt creó una plataforma para que aprendieras las siguientes tecnologías de forma no convencional:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript Arrays&lt;/li&gt;
  &lt;li&gt;Concurrencia con JavaScript&lt;/li&gt;
  &lt;li&gt;JavaScript moderno (ES2015-2019)&lt;/li&gt;
  &lt;li&gt;Expresiones Regulares&lt;/li&gt;
  &lt;li&gt;SQL&lt;/li&gt;
  &lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La dinámica de la plataforma es la siguiente: tú eres el compilador o el intérprete, es decir, la plataforma te da sentencias cada vez más complejas de la tecnología en cuestión y tú predices los resultados.&lt;/p&gt;

&lt;p&gt;Puedes entrar a la plataforma aquí: &lt;a href=&quot;https://www.executeprogram.com/&quot;&gt;Execute Program&lt;/a&gt;. Te recomiendo su otra plataforma, con videos tradicionales explicando cosas difíciles de desarrollar como compiladores: &lt;a href=&quot;https://www.destroyallsoftware.com/screencasts&quot;&gt;Destroy all Software&lt;/a&gt;. Tienes acceso a ambas plataformas con la suscripción de Execute Program.&lt;/p&gt;

&lt;h2 id=&quot;otras-utilidades&quot;&gt;Otras utilidades&lt;/h2&gt;

&lt;p&gt;Hay otras experiencias no convencionales que puedes para aprender cosas específicas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learngitbranching.js.org/?locale=es_ES&quot;&gt;Aprende Git branching&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://flukeout.github.io/&quot;&gt;CSS Diner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://flexboxfroggy.com/#es&quot;&gt;Flexbox Froggy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://http.cat/&quot;&gt;HTTP Cats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://andreasbm.github.io/web-skills/&quot;&gt;Web Skills&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si no te acomodas con las formas tradicionales como los libros y los videos, siempre habrá opciones diferentes e interactivas. ¿Tienes alguna otra recomendación? La esperamos en los comentarios.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="recursos" /><category term="aprendizaje" /><category term="programación" /><summary type="html">En este artículo te recomendamos algunos recursos que te servirán para aprender conceptos de progrmación que no son libros o cursos comunes.</summary></entry><entry><title type="html">Recursos para aprender diseño de sistemas</title><link href="https://blog.thedojo.mx/2021/03/29/recursos-para-aprender-diseno-de-sistemas.html" rel="alternate" type="text/html" title="Recursos para aprender diseño de sistemas" /><published>2021-03-29T00:00:00-06:00</published><updated>2021-03-29T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/03/29/recursos-para-aprender-diseno-de-sistemas</id><content type="html" xml:base="https://blog.thedojo.mx/2021/03/29/recursos-para-aprender-diseno-de-sistemas.html">&lt;p&gt;El diseño de sistemas es un tema recurrente en entrevistas para desarrolladores de software, sobre todo para los niveles que requieren más experiencia, pero más allá de eso, es una habilidad fundamental a dominar si quieres avanzar en tu carrera.&lt;/p&gt;

&lt;p&gt;Es por eso que vamos a empezar a hablar más de ese tema, contando nuestra experiencia, pero al mismo tiempo aprendiendo a diseñar mejor.&lt;/p&gt;

&lt;p&gt;En este post hablaremos de algunos recursos con los que puedes empezar a aprender.&lt;/p&gt;

&lt;h2 id=&quot;libros&quot;&gt;Libros&lt;/h2&gt;

&lt;p&gt;Un libro que se ha recomendado mucho sobre todo en esta época en la que los datos son cada vez más importantes es &lt;a href=&quot;https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications&quot; target=&quot;_blank&quot;&gt;Designing Data-intensive Applications&lt;/a&gt; que, como su nombre lo dice, te enseña a construir aplicaciones en donde los datos son muy importantes.&lt;/p&gt;

&lt;p&gt;Hay un libro que se enfoca justamente en la parte de entrevistas llamado &lt;a href=&quot;https://www.goodreads.com/book/show/54109255-system-design-interview-an-insider-s-guide?from_search=true&amp;amp;from_srp=true&amp;amp;qid=Bm7AnA9Fzo&amp;amp;rank=9&quot; target=&quot;_blank&quot;&gt;System Design Interview&lt;/a&gt;, con la mayoría de las opiniones como positivas, pero algunas resaltan un punto muy importante: gran parte del contenido se encuentra en las referencias, así que si quieres profundizar tienes que buscarlas. A mi esto me parece positivo porque en vez de intentar abarcar todo y diluirse, este libro puede servir como un índice o una referencia para aprender más.&lt;/p&gt;

&lt;p&gt;Finalmente, te vamos a recordar un libro del que hemos hablado continuamente tanto en nuestros videos como en los posts de este blog: &lt;a href=&quot;https://www.goodreads.com/en/book/show/39996759&quot; target=&quot;_blank&quot;&gt;A Philosophy of Software Design&lt;/a&gt; de John Ousterhout. Este es uno de los mejores libros que puedes leer acerca del diseño de software en general, y de las prácticas que llevan a crear software bien diseñado. No habla de diseño de sistemas a gran escala, sino de organización y división modular y cómo deberías aplicarla.&lt;/p&gt;

&lt;h2 id=&quot;cursos-y-videos&quot;&gt;Cursos y videos&lt;/h2&gt;

&lt;p&gt;Codely, una plataforma de cursos para desarrolladores, tiene un curso de introducción a la arquitectura hexagonal, que es una muy buena base para deseñar sistemas, aquí puedes ver una pequeña prueba: &lt;a href=&quot;https://codely.tv/blog/screencasts/arquitectura-hexagonal-ddd/&quot; target=&quot;_blank&quot;&gt;Intro a arquitectura hexagonal&lt;/a&gt; y aquí puedes ver el curso completo: &lt;a href=&quot;https://pro.codely.tv/library/arquitectura-hexagonal/about/&quot; target=&quot;_blank&quot;&gt;Arquitectura Hexagonal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pro.codely.tv/library/principios-solid-aplicados/77070/about/&quot; target=&quot;_blank&quot;&gt;Principios SOLID Aplicados&lt;/a&gt; es otro curso con aplicaciones prácticas que puedes ver para aprender más sobre estos principios que ayudan a crear código y sistemas más mantenibles.&lt;/p&gt;

&lt;p&gt;En Educative.io tiene un curso llamado &lt;a href=&quot;https://www.educative.io/courses/grokking-the-system-design-interview&quot; target=&quot;_blank&quot;&gt;Grokking the System Design Interview&lt;/a&gt; que tiene ejemplos de diseño explicados como blogposts, abarcando varias etapas del diseño, desde el primer borrador (back of the envelop) hasta análisis de cuellos de botella junto con diseño detallado.&lt;/p&gt;

&lt;p&gt;Y finalmente, tenemos una recomendación Open Source y gratuita: &lt;a href=&quot;https://github.com/donnemartin/system-design-primer&quot; target=&quot;_blank&quot;&gt;System Design Primer&lt;/a&gt; que contiene incluso tarjetas de &lt;a href=&quot;https://apps.ankiweb.net/&quot; target=&quot;_blank&quot;&gt;Anki&lt;/a&gt; un software para estudio mediante repetición espaciada.&lt;/p&gt;

&lt;h3 id=&quot;extras&quot;&gt;Extras&lt;/h3&gt;

&lt;p&gt;Un sitio en el que puedes aprender a diseñar sistemas que requieran mucho cuidado por la afluencia de usuarios que tendrán es &lt;a href=&quot;http://highscalability.com/&quot; target=&quot;_blank&quot;&gt;High Scalability&lt;/a&gt;. Ahí podrás ver algunos ejemplos reales sobre como crear sistemas web más grandes en contenido, más rápidos y más confiables.&lt;/p&gt;

&lt;p&gt;Si quieres una ruta de aprendizaje completa, Educative.io tiene además la ruta de cursos que te pueden ayudar aprender aspectos teóricos y prácticos: &lt;a href=&quot;https://www.educative.io/path/scalability-system-design&quot; target=&quot;_blank&quot;&gt;Scalability and System Design for developers&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cómo-representar-el-diseño&quot;&gt;Cómo representar el diseño&lt;/h3&gt;

&lt;p&gt;Después de tener clara la idea de cómo resolver los problemas es buena idea tener un lenguaje visual y una guía par representar y comunicar todas las partes del sistema. Aquí te podemos recomendar el paper &lt;a href=&quot;https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf&quot; target=&quot;_blank&quot;&gt;Architectural Blueprints–The “4+1” View Model of Software Architecture&lt;/a&gt; y el estilo creado por Simon Brown: &lt;a href=&quot;https://c4model.com/&quot; target=&quot;_blank&quot;&gt;El modelo C4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cualquiera de estos dos modelos tienen las herramientas suficientes para poder visualizar y comunicar tu arquitectura desde diferentes perspectivas y a diferentes niveles.&lt;/p&gt;
&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Aprender diseño de sistemas tiene que ver con estudiar mucho, pero sobre todo con aplicar lo aprendido. En el canal de YouTube tuvimos una plática sobre este tema, tomando de nuestras experiencias, lo puedes ver aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hWVNLloajqg&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;En el futuro tendremos más pláticas sobre estos temas, con algunos ejercicios para ver la teoría en acción.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="system-design" /><category term="book" /><category term="courses" /><category term="cursos" /><category term="libros" /><category term="learning" /><summary type="html">¿Quieres aprender los principios de diseño de sistemas para mejorar como desarrollador o para una entrevista? En este post te pasamos algunos recursos.</summary></entry><entry><title type="html">Intro a Machine Learning: Entendiendo el perceptrón</title><link href="https://blog.thedojo.mx/2021/03/25/intro-a-machine-learning-entendiendo-perceptron.html" rel="alternate" type="text/html" title="Intro a Machine Learning: Entendiendo el perceptrón" /><published>2021-03-25T00:00:00-06:00</published><updated>2021-03-25T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/03/25/intro-a-machine-learning-entendiendo-perceptron</id><content type="html" xml:base="https://blog.thedojo.mx/2021/03/25/intro-a-machine-learning-entendiendo-perceptron.html">&lt;p&gt;Hablar de aprendizaje automático y los términos que lo rodean, muchas veces intimida a los desarrolladores. En esta serie de posts vamos a intentar explicar los conceptos detrás del aprendizaje automático y llevarlos a la práctica.&lt;/p&gt;

&lt;h2 id=&quot;acerca-de-los-nombres-de-las-cosas&quot;&gt;Acerca de los nombres de las cosas&lt;/h2&gt;

&lt;p&gt;Antes de empezar a hablar de inteligencia artificial, aprendizaje automático, aprendizaje profundo y todas esas cosas, queremos hacer una nota sobre el nombrado en las asuntos de tecnología.&lt;/p&gt;

&lt;p&gt;Primero, debemos recordar que la tecnología no existe en un entorno aislado, y generalmente no tiene uso por sí misma, sino que la usamos para servir a otras áreas. Es por eso que lo que conoceríamos por un nombre completamente acertado y descriptivo de acuerdo a sus características técnicas se tiene que renombrar para que otras personas no pertenecientes al área de desarrollo de software.&lt;/p&gt;

&lt;p&gt;Así ha pasado vez tras vez con diferentes tecnologías:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El objeto &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XMLHttpRequest&lt;/code&gt; de los navegadores y su uso se nombró como &lt;strong&gt;AJAX&lt;/strong&gt; para que fuera más vendible&lt;/li&gt;
  &lt;li&gt;Una página web avanzada y con más funcionalidades se empezó a llamar &lt;strong&gt;Web App&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Las técnicas relacionadas con aprovechar las nuevas características de los navegadores como el Service Worker, el archivo manifest se juntaron bajo un solo nombre más “vendible”: &lt;strong&gt;Progressive Web Apps&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los ejemplos siguen y estoy seguro que en cada área del conocimiento suceden. Este “renombramiento” permite que la tecnología en cuestión sea más aceptada y difundida, aunque a veces puede llevar a un malentendido por parte del público en general que puede permear a los practicantes.&lt;/p&gt;

&lt;p&gt;Esto es lo que ha pasado con los nombres que nos conciernen en este artículo, le llamamos &lt;em&gt;“Inteligencia Artificial”&lt;/em&gt; a toda una rama de las ciencias de la computación relacionada con imitar lo que entendemos como “inteligencia humana”, pero las bases formales de esto podrían describirse con otros nombres más familiares para nosotros.&lt;/p&gt;

&lt;p&gt;Este nombre permite que los avances sean aceptados y por lo menos el área de negocio entienda las capacidades de la tecnología, &lt;strong&gt;no su funcionamiento&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cuando comprendas cómo funciona, tal vez veas que las redes neuronales no tienen nada que ver con las redes neuronales, o que en realidad el &lt;em&gt;aprendizaje automático&lt;/em&gt; es la aplicación de técnicas matemáticas y de ingeniería para aproximación de funciones, a veces muy complejas.&lt;/p&gt;

&lt;p&gt;Ahora bien, eso no tiene nada de malo, sólo debemos aprender a no confundirnos con esos términos. Después de esta pequeña digresión, ahora si vayamos a lo que venimos: aprendamos aplicar estas técnicas.&lt;/p&gt;

&lt;h2 id=&quot;perceptrones&quot;&gt;Perceptrones&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;perceptrón&lt;/strong&gt; es un algoritmo que aproxima una función matemática sirve para &lt;strong&gt;clasificar&lt;/strong&gt; su entrada entre &lt;strong&gt;dos clases&lt;/strong&gt;. Un perceptrón puede tomar N entradas y devuelve un “Sí” o un “No”.&lt;/p&gt;

&lt;p&gt;Si eres un programador sin experiencia en ML, te puedes imaginar la función del perceptrón básicamente como un “IF”. Es un clasificador binario que devuelve &lt;strong&gt;Verdadero&lt;/strong&gt; si el objeto en cuestión pertenece al grupo seleccionado, &lt;strong&gt;falso&lt;/strong&gt; en el caso contrario.&lt;/p&gt;

&lt;p&gt;La diferencia está &lt;strong&gt;en cómo se construye esta función&lt;/strong&gt;, nosotros no le damos reglas programadas al perceptrón para clasificar los objetos de cierta forma, sino que le damos ejemplos &lt;strong&gt;etiquetados&lt;/strong&gt; y el perceptrón &lt;strong&gt;aprende&lt;/strong&gt;: ajusta los parámetros de su función interna para dividir las dos clases lo mejor posible.&lt;/p&gt;

&lt;p&gt;La fórmula básica para un perceptrón es una sumatoria de todos sus parámetros de entrada multiplicados por un factor llamado &lt;em&gt;peso&lt;/em&gt; para cada uno, más una constante llamada &lt;em&gt;sesgo&lt;/em&gt; o &lt;em&gt;bias&lt;/em&gt;. Al resultado de esta suma se le aplica la &lt;strong&gt;función de activación&lt;/strong&gt;, normalmente la función &lt;strong&gt;step&lt;/strong&gt; que devuelve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; (equivalente a falso) si la entrada es menor o igual que cero y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; en cualquier otro caso.&lt;/p&gt;

&lt;p&gt;Si llamamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; a los parámetros de entrada, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;W&lt;/code&gt; a los pesos aquí puedes ver la representación gráfica de un perceptrón:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1616653024/Untitled_Artwork_2_fsqfcr.png&quot; alt=&quot;Representación gráfica de un perceptrón&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y aquí la ecuación matemática que lo representa:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1616653048/Untitled_Artwork_3_fjoaaa.png&quot; alt=&quot;Ecuación de un perceptrón&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;entrenamiento&quot;&gt;Entrenamiento&lt;/h3&gt;

&lt;p&gt;Como te podrás dar cuenta, el funcionamiento de un perceptrón es muy sencillo. Pero lo importante no es su funcionamiento cuando clasifica, &lt;em&gt;sino como aprende a clasificar&lt;/em&gt;. Esta fase se llama &lt;strong&gt;entrenamiento&lt;/strong&gt; o &lt;strong&gt;training&lt;/strong&gt; y consiste en encontrar los pesos correctos para cada parámetro de entrada y el sesgo correcto.&lt;/p&gt;

&lt;p&gt;El entrenamiento de un perceptrón toma un conjunto de ejemplos &lt;strong&gt;clasificados&lt;/strong&gt; o &lt;strong&gt;etiquetados&lt;/strong&gt; y encuentra los peso que pueden clasificar el mayor número de ejemplos correctamente. Este entrenamiento puede ser muy pesado dependiendo del número de entradas y ejemplos.&lt;/p&gt;

&lt;p&gt;Es justo esto lo que hace que diferencia al machine learning de la programación tradicional. Tú programaste el algoritmo para encontrar los parámetros correctos, pero nunca las reglas específicas de clasificación.&lt;/p&gt;

&lt;h2 id=&quot;redes-neuronales&quot;&gt;Redes Neuronales&lt;/h2&gt;

&lt;p&gt;Una red neuronal es un conjunto de perceptrones combinados para poder clasificar en más de dos clases, y para crear funciones de clasificación que van mucho más allá de nuestro nivel de comprensión.&lt;/p&gt;

&lt;p&gt;Las redes neuronales generalmente usan perceptrones con una función de activación diferente, la función sigmoide que transforma cualquier entrada en un valor entre 0 y 1 (como una probabilidad).&lt;/p&gt;

&lt;p&gt;En el siguiente artículo hablaremos más a detalle sobre eso.&lt;/p&gt;

&lt;h2 id=&quot;las-matemáticas-necesarias&quot;&gt;Las matemáticas necesarias&lt;/h2&gt;

&lt;p&gt;Para poder entender las &lt;strong&gt;bases de funcionamiento&lt;/strong&gt; de todo lo que acabamos de mencionar, hay que saber trabajar con matemáticas de nivel universitario:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Álgebra líneal&lt;/li&gt;
  &lt;li&gt;Análisis o Cálculo Vectorial&lt;/li&gt;
  &lt;li&gt;Ecuaciones diferenciales&lt;/li&gt;
  &lt;li&gt;Probabilidad&lt;/li&gt;
  &lt;li&gt;Estadística&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y, claro, todas las matemáticas que soportan estas: álgebra, trigonometría, geometría analítica, etc.&lt;/p&gt;

&lt;p&gt;Si quieres aprender &lt;em&gt;profundamente&lt;/em&gt; esta área de la computación y estas técnicas y sientes que no tienes las bases matemáticas necesarias puedes estudiarlas aquí: &lt;a href=&quot;https://es.khanacademy.org/&quot;&gt;Khan Academy en Español&lt;/a&gt; (gratuito) o &lt;a href=&quot;https://brilliant.org/&quot;&gt;Brilliant&lt;/a&gt; (de pago).&lt;/p&gt;

&lt;p&gt;Sin embargo, y espero no ser linchado por esto, para empezar a aplicar las técnicas de manera práctica &lt;strong&gt;no las necesitas&lt;/strong&gt;. Puedes abrazar la parte pragmática y algorítmica y empezar a usar los paquetes y herramientas de ML.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="machine-learning" /><category term="ml" /><category term="aprendizaje-automático" /><summary type="html">En este artículo entenderemos las bases matemáticas y de programación de la unidad de construcción básica de lo que comercialmente se conoce como redes neuronales</summary></entry><entry><title type="html">Las bases matemáticas de la programación funcional</title><link href="https://blog.thedojo.mx/2021/03/18/las-bases-matematicas-de-la-programacion-funcional.html" rel="alternate" type="text/html" title="Las bases matemáticas de la programación funcional" /><published>2021-03-18T00:00:00-06:00</published><updated>2021-03-18T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/03/18/las-bases-matematicas-de-la-programacion-funcional</id><content type="html" xml:base="https://blog.thedojo.mx/2021/03/18/las-bases-matematicas-de-la-programacion-funcional.html">&lt;p&gt;La programación funcional tiene conceptos muy relacionados con las matemáticas. Aquí te vamos a platicar de sus orígenes y de algunos conceptos matemáticos directamente embebidos en la programación funcional.&lt;/p&gt;

&lt;p&gt;Lo primero que tienes que recordar es que las matemáticas no tienen que ver  &lt;em&gt;necesariamente&lt;/em&gt; con números, sino con el razonamiento y la &lt;em&gt;formalización&lt;/em&gt; de este. En este artículo hablamos más de ello: &lt;a href=&quot;/2019/12/25/las-matematicas-que-debes-saber-para-programar.html&quot;&gt;Las matemáticas que necesitas para programar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ahora sí, empecemos con lo más fundamental de las matemáticas que soportan la programación funcional, no sin mencionar que podemos afirmar que la programación funcional &lt;em&gt;es una forma de matemáticas&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cálculo-lambda&quot;&gt;Cálculo Lambda&lt;/h2&gt;

&lt;p&gt;El cálculo lambda es una forma de definir todo lo que entendemos como matemáticas y de describir &lt;em&gt;cálculos&lt;/em&gt; o &lt;em&gt;cómputo&lt;/em&gt;. Es una notación que permite definir todos los elementos necesarios para crear razonamientos formales abstractos.&lt;/p&gt;

&lt;p&gt;El cálculo lambda fue diseñado por &lt;strong&gt;Alonzo Church&lt;/strong&gt; como una forma de responder a un problema muy profundo de las matemáticas: &lt;strong&gt;“¿Es posible encontrar una forma de computación universal que, mediante la representación de problemas y una serie de pasos definido y finitos permita resolverlos?”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esta pregunta fue planteada por David Hilbert y se conoce como el &lt;em&gt;Entscheidungsproblem&lt;/em&gt;, o &lt;em&gt;“El problema de la decisión”&lt;/em&gt;. De esta pregunta se deriva toda la computación moderna, ya que para responder estas preguntas &lt;strong&gt;Alan Turing&lt;/strong&gt; diseñó las &lt;em&gt;Máquinas de Turing&lt;/em&gt;. Si quieres saber más de esto, el libro &lt;a href=&quot;https://www.cs.buap.mx/~jitalo/libros/lanueva.pdf&quot;&gt;La Mente Nueva del Emperador de Roger Penrose&lt;/a&gt; lo explica muy bien, junto con muchas otras cosas.&lt;/p&gt;

&lt;h3 id=&quot;funciones&quot;&gt;Funciones&lt;/h3&gt;

&lt;p&gt;Las funciones o abstracciones son la base del cómputo en el Cálculo Lambda y lo son también en la programación funcional. Puedes pensar en las funciones como en la parte central del cómputo, la que representa las acciones a realizar con la información introducida, que en el Cálculo lambda, &lt;strong&gt;siempre será otra función&lt;/strong&gt;. Así es, no existen los número naturales, y todo se puede representar con funciones. Si quieres un idea más clara de cómo se puede lograr esto la plática de John Huges, &lt;a href=&quot;https://www.youtube.com/watch?v=XrNdvWqxBvA&quot;&gt;Why Functional Programming Matters&lt;/a&gt; da algunos ejemplos con Lisp.&lt;/p&gt;

&lt;p&gt;Además esta plática en español explica más del Cálculo Lambda: &lt;a href=&quot;https://www.youtube.com/watch?v=i1zYBLdlxfc&quot;&gt;Cálculo Lambda por Jaime Pavlich-Mariscal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Y aquí hay un libro gratuito que puedes estudiar si quieres adentrarte más en esto: &lt;a href=&quot;http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf&quot;&gt;Introduction to Lambda Calculus&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;combinadores&quot;&gt;Combinadores&lt;/h2&gt;

&lt;p&gt;Un combinador es una abstracción o función en el cálculo lambda, que no tiene variables libres o, en su defecto, sólo usa otros combinadores en su definición. Son funciones que sirven para crear cálculos más complejos mediante la mezcla de ellas.&lt;/p&gt;

&lt;p&gt;Las variables libres son las que &lt;strong&gt;no se reciben como parámetros&lt;/strong&gt;. Los combinadores sirven para crear un lenguaje sobre el cálculo lambda y crear abstracciones más fácilmente y han sido el objeto de estudio de varios matemáticos.&lt;/p&gt;

&lt;p&gt;Uno de ellos Raymond Smullyan, los enumeró poniéndoles nombres de aves, basados en las letras con las que se les identificaba y en su libro &lt;a href=&quot;http://douxnet.weebly.com/uploads/2/0/4/1/20418601/raymond_m._smullyan-to_mock_a_mockingbird_and_other_logic_puzzles__including__an_amazing_adventure_in_combinatory_logic-knopf_1985.pdf&quot;&gt;To Mock a Mockingbird&lt;/a&gt; los usa para crear algunos acertijos.&lt;/p&gt;

&lt;p&gt;Puedes aprender más de los combinadores con ejemplos en JavaScript en esta plática: &lt;a href=&quot;https://www.youtube.com/watch?v=3VQ382QG-y4&quot;&gt;Lambda Calculus - Fundamentals of Lambda Calculus &amp;amp; Functional Programming in JavaScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aquí hay algunos ejemplos de combinadores en JavaSCript&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Combinador I, Idiot o función identidad&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Combinador K, Kestrel o función constante&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Combinador S, Starling o función de substitución&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Justo de esta rama de la lógica viene el famoso &lt;a href=&quot;https://medium.com/@ayanonagon/the-y-combinator-no-not-that-one-7268d8d9c46&quot;&gt;Y combinator&lt;/a&gt;, el combinador que permite la recursión. Aquí hay artículo que explica cómo se llega a él, si te quieres ir por el hoyo del conejo: &lt;a href=&quot;https://homes.cs.washington.edu/~sorawee/en/blog/2017/10-05-deriving-Y.html&quot;&gt;Deriving Y Combinator&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cálculo-ski&quot;&gt;Cálculo SKI&lt;/h3&gt;

&lt;p&gt;Debido a que todas las matemáticas y cosas computables se pueden expresar con los combinadores S, K e I, existe toda una rama llamada &lt;strong&gt;Cálculo SKI&lt;/strong&gt;, en el que estos tres combinadores son los únicos elementos necesarios para expresar todo lo demás.&lt;/p&gt;

&lt;h2 id=&quot;teoría-de-categorías&quot;&gt;Teoría de categorías&lt;/h2&gt;

&lt;p&gt;La teoría de categorías explora la composición de elementos y la creación de grupos con “objetos” relacionados entre ellos. &lt;a href=&quot;https://bartoszmilewski.com/&quot;&gt;Bartosz Mileswsky&lt;/a&gt; afirma que la teoría de categorías es muy importante para los programadores porque nos permite entender la composición y esta es la base para construir programas complejos.&lt;/p&gt;

&lt;p&gt;La teoría de categorías se extiende más allá de la programación funcional, de hecho todos los sistemas de tipos de los lenguajes se comportan como una categoría. Puedes entender más de qué se trata en el libro de Bartosz Mileswsky &lt;a href=&quot;https://github.com/hmemcpy/milewski-ctfp-pdf&quot;&gt;“Category Theory for Programmers”&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;y-todo-esto-a-mi-qué&quot;&gt;¿Y todo esto, a mi qué?&lt;/h2&gt;

&lt;p&gt;Conocer las bases de la programación funcional te puede dar un índice muy valioso como referencia a temas en los que tienes que profundizar si quieres ser un mejor programador@ funcional y tú lógica en general.&lt;/p&gt;

&lt;p&gt;La programación funcional y las ideas provenientes de ella están mejorando la forma en que hacemos software, ya que dan permiten un mejor tratamiento de la información que en muchos casos es más fácil de entender que su contraparte imperativa.&lt;/p&gt;

&lt;p&gt;Puedes ver algunas de las características y ventajas de la programación funcional en &lt;a href=&quot;/2019/03/30/que-es-la-programacion-funcional.html&quot;&gt;este artículo&lt;/a&gt; y si quiere aprender, compilamos algunos recursos aquí: &lt;a href=&quot;/educación/2019/04/06/los-mejores-recursos-para-aprender-programacion-funcional.html&quot;&gt;Los mejores recursos para aprender programación funcional.&lt;/a&gt;&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="matemáticas" /><category term="math" /><category term="fp" /><category term="programación-funcional" /><summary type="html">La programación funcional tiene bases matemáticas muy interesantes, hablemos un poco de ellas y cómo te pueden ayudar a entenderla mejor.</summary></entry><entry><title type="html">Ruta de aprendizaje: Deep Learning</title><link href="https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning.html" rel="alternate" type="text/html" title="Ruta de aprendizaje: Deep Learning" /><published>2021-03-06T00:00:00-06:00</published><updated>2021-03-06T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning</id><content type="html" xml:base="https://blog.thedojo.mx/2021/03/06/ruta-de-aprendizaje-deep-learning.html">&lt;p&gt;Inspirado en el libro “Ultralearning” de Scott Young, voy hacer un proyecto de aprendizaje de algo que llama mi atención desde hace mucho: Deep Learning y Machine Learning en general. Si no conces el concepto, te invito leer el post aquí: &lt;a href=&quot;/2019/08/13/lecciones-sobre-el-aprendizaje-de-manos-de-un-experto.html&quot;&gt;Ultralearning: el arte del aprendizaje profundo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En esta serie documentaremos las diferentes fases. Este primer post trata sobre los recursos que usaré para aprender. Si tienes alguna sugerencia, ¡todas son bienvenidas!&lt;/p&gt;

&lt;h2 id=&quot;fase-1-investigación&quot;&gt;Fase 1: Investigación&lt;/h2&gt;

&lt;p&gt;La primera fase de un proyecto de Ultra-aprendizaje consiste en hacer una investigación sobre las posibles opciones, recursos, metas y caminos que otros han seguido para aprender lo que quieres, así como definir claramente los límites del proyecto.&lt;/p&gt;

&lt;p&gt;En este proyecto el objetivo será:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Entender y aplicar las técnicas básicas  Machine Learning, en específico Deep Learning, para poder resolver problemas y aplicarlos en proyectos que lo requieran.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Algunos de los programas que podemos usar para aprenderlo son los siguientes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nanodegree de Deep Learning en &lt;a href=&quot;https://www.udacity.com/course/deep-learning-nanodegree--nd101&quot;&gt;Udacity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Especialización en Deep Learning de &lt;a href=&quot;https://www.coursera.org/specializations/deep-learning&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Redes neuronales y Deep Learning de &lt;a href=&quot;https://www.coursera.org/learn/neural-networks-deep-learning&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Programming Machine Learning de &lt;a href=&quot;https://pragprog.com/titles/pplearn/programming-machine-learning/&quot;&gt;Pragmatic Programmers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Machine Learning with Python: from Linear Models to Deep Learning de &lt;a href=&quot;https://www.edx.org/course/machine-learning-with-python-from-linear-models-to?index=product&amp;amp;queryID=66ef0e341d390841649ca12aaef6fd6b&amp;amp;position=1&quot;&gt;EDX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;CS230 de &lt;a href=&quot;https://cs230.stanford.edu/syllabus/&quot;&gt;Stanford&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;STAT 212B de &lt;a href=&quot;https://bcourses.berkeley.edu/courses/1413088/assignments/syllabus&quot;&gt;Berkeley&lt;/a&gt; (Lecciones: &lt;a href=&quot;https://github.com/joanbruna/stat212b&quot;&gt;Github&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Deep Learning Crash Course en &lt;a href=&quot;https://youtu.be/VyWAvY2CF9c&quot;&gt;Free Code Camp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;decisión&quot;&gt;Decisión&lt;/h2&gt;

&lt;p&gt;Uno de los consjos de Ultralearning es no gastar mucho tiempo investigando. No sabemos lo que no sabemos y esta incetidumbre nos puede dar parálisis por análisis y no dejar que pasemos a la siguiente etapa.&lt;/p&gt;

&lt;p&gt;Este proyecto estará basado en el &lt;a href=&quot;https://www.udacity.com/course/deep-learning-nanodegree--nd101&quot;&gt;Nanodegree de Deep Learning de Udacity&lt;/a&gt; por dos razones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Probé algunos de sus cursos y la calidad se me hace muy buena y el contenido muy bien desarrollado&lt;/li&gt;
  &lt;li&gt;Puedes allí mismo optar por un certificado, lo que incluye acompañamiento de un mentor y resolución de dudas con la comunidad. esto puede servir muy bien para desatorarme si encuentro algo muy difícil.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Paralelamente leeré el libro &lt;a href=&quot;https://pragprog.com/titles/pplearn/programming-machine-learning/&quot;&gt;Programming Machine Learning de Pragmatic Programmers&lt;/a&gt;, ya que parece tener justamente el enfoque que necesito: Machine Learning para programadores.&lt;/p&gt;

&lt;h2 id=&quot;objetivo-final&quot;&gt;Objetivo final&lt;/h2&gt;

&lt;p&gt;Es hora de ponerle un tiempo y un obejetivo más concreto al proyecto: &lt;em&gt;durante los próximos 10 meses (lo que resta de 2021) aprenderé las bases teóricas y prácitcas de machine learning, con el obejetivo de aplicarlo mejor en los proyectos de trabajo y combinarlo con mis habilidades de ingeniería del software y progeamación.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sobra decir que este plan no está escrito en piedra y se irá modifcando conforme vaya experimentando y aprendiendo más del campo. Por lo mientras, espero que el proyecto y lo que vaya aprendiendo y meta-aprendiendo te sirva, como la compilación de recursos para empezar que pusimos en este post.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="aprendizaje" /><category term="ml" /><category term="machine-learning" /><summary type="html">En este artículo te proponemos una forma de aprender machine learning y deep learning y te presentamos algunos recursos que te pueden servir</summary></entry><entry><title type="html">Resumen: Qué hacer para conseguir un buen trabajo como programador</title><link href="https://blog.thedojo.mx/2021/02/10/resumen-que-hacer-para-conseguir-un-buen-trabajo-como-programador.html" rel="alternate" type="text/html" title="Resumen: Qué hacer para conseguir un buen trabajo como programador" /><published>2021-02-10T00:00:00-06:00</published><updated>2021-02-10T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/02/10/resumen-que-hacer-para-conseguir-un-buen-trabajo-como-programador</id><content type="html" xml:base="https://blog.thedojo.mx/2021/02/10/resumen-que-hacer-para-conseguir-un-buen-trabajo-como-programador.html">&lt;p&gt;Aquí te damos un resumen de la plática que tuvimos con Diego De Granda y Pablo Trinidad sobre algunas cosas que hicieron para conseguir buenos trabajos. Esbozaremos algunos de los consejos independientes sin una secuencia definida.&lt;/p&gt;

&lt;h2 id=&quot;aprende-inglés&quot;&gt;Aprende Inglés&lt;/h2&gt;

&lt;p&gt;Aunque la razón de existencia de este blog y de The Dojo MX en general es generar contenido en español para ayudar a los hispanohablantes, nunca nos cansaremos (y tampoco nuestros invitados) de darte el mismo consejo: &lt;strong&gt;APRENDE INGLÉS&lt;/strong&gt;. Creemos sinceramente que el idioma no debería ser una limitante para que &lt;em&gt;empieces&lt;/em&gt; a aprender lo que sea que te guste, pero especialmente en el área de tecnología, la mayor parte de las personas, trabaja y habla en inglés, por lo que es importantísimo aprenderlo lo mejor que puedas.&lt;/p&gt;

&lt;h2 id=&quot;aprende-a-dar-y-recibir-retroalimentación&quot;&gt;Aprende a dar y recibir retroalimentación&lt;/h2&gt;

&lt;p&gt;En este apartado hablaron de cuatro cosas que la retroalimentación debe tener para poder ser útil:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Directa, sin darle tantas vueltas al asunto&lt;/li&gt;
  &lt;li&gt;Accionable, debes dejar a la persona con algo sobre lo que pueda actuar&lt;/li&gt;
  &lt;li&gt;Oportuno, mientras más cercano estés al momento en cuestión, mejor&lt;/li&gt;
  &lt;li&gt;Transparente, tus intenciones son claras&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y si eres la persona que toma la retroalimentación, no te ofendas y toma lo bueno.&lt;/p&gt;

&lt;h2 id=&quot;the-pragmatic-programmer&quot;&gt;The Pragmatic Programmer&lt;/h2&gt;

&lt;p&gt;No pudimos platicar tanto de libros, pero uno que no puede faltar casi en ninguna recomendación de libros para programadores es &lt;a href=&quot;https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/&quot;&gt;The Pragmatic Programmer&lt;/a&gt; un libro sobre las bases que necesitas para ser un programador productivo.&lt;/p&gt;

&lt;h2 id=&quot;aprende-los-fundamentos&quot;&gt;Aprende los fundamentos&lt;/h2&gt;

&lt;p&gt;Es muy importante que aprendas los fundamentos de lo que haces si quieres atacar problemas difíciles. Para esto, tienes que aplicar consejos de otras partes de este mismo artículo.&lt;/p&gt;
&lt;h2 id=&quot;consejos-de-pablo-trinidad-para-mantenerte-empleable&quot;&gt;Consejos de Pablo Trinidad para mantenerte empleable&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Permanecer presente en el aprendizaje y ser crítico&lt;/em&gt;: Tienes que estarte preguntando constantemente: ¿Por qué funciona lo que estoy haciendo? Y puedes aplicar la técnica de preguntar continuamente “¿Por qué?” hasta llegar al fondo de las cosas.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Leer&lt;/em&gt;. Estudiar y aprender lo más que puedas, incluso sobre cosas que no sean ténicas.
    &lt;h2 id=&quot;consejos-de-diego-de-granda&quot;&gt;Consejos de Diego de Granda&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Resiliencia&lt;/em&gt;: Los problemas nunca van a parar, así que tienes que aprender a solucionar problemas sin frustrarte y persistir hasta que llegues a la solución&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Resolver problemas&lt;/em&gt;: mejorar tus capacidades de resolver problemas te ayudará a ser alguien más útil para tu equipo y tu empresa&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ser agnóstico&lt;/em&gt;: No te cases con una tecnología, diversifica y usa la correcta para el problema en cuestión.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;características-que-necesitarás-para-trabajar-en-google&quot;&gt;Características que necesitarás para trabajar en Google&lt;/h2&gt;

&lt;p&gt;¿Qué se necesita para trabajar en Google? Aquí algunas de las ideas que Pablo nos compartió:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Capacidad&lt;/strong&gt; de tomar problemas difíciles&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Liderazgo&lt;/strong&gt; para ayudar a tu equipo&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Impacto&lt;/strong&gt; extendido en diferentes personas y equipos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Independencia&lt;/strong&gt;, no necesitas de un manager que te esté cuidando los pasos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ownership&lt;/strong&gt;, te adueñas de los problemas y pones todo tu empeño en resolverlos&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Estar presente&lt;/strong&gt;, es decir, no pasar por las experiencias sin aprender de ellas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sigue-alimentando-tu-curiosidad&quot;&gt;Sigue alimentando tu curiosidad&lt;/h2&gt;

&lt;p&gt;Pablo nos recomendó algunos canales de YouTube para seguir alimentando la curiosidad y aprender cosas de diferentes campos, como matemáticas, ciencia, computación y electrónica.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/TheChernoProject&quot;&gt;The Cherno&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/Computerphile&quot;&gt;Computerphile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/Numberphile&quot;&gt;Numberphile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/1Veritasium&quot;&gt;Veritasium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/destinws2&quot;&gt;Smarter Everyday&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/nobani88&quot;&gt;Eric Weinstein&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/PowerfulJRE&quot;&gt;Joe rogan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/eaterbc&quot;&gt;Ben Eater&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw&quot;&gt;3Blue1Brown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esto no te hará un mejor programador directamente pero te ayudará a crecer como persona y te ayudará a conseguir mejores oportunidades. Y sí, necesitas inglés para entenderlos.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Hablamos de muchas cosas más, productividad, Google, cómo avanzar en tu carrera, etc. No te pierdas la plática entera aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/mUfmVBaOmxM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="lives" /><category term="recomendaciones" /><category term="video" /><category term="libros" /><category term="consejos" /><summary type="html">Hablamos con Diego De Granda y Pablo Trinidad sobre qué tienes que hacer para conseguir un buen trabajo en tecnología. Aquí tienes un resumen.</summary></entry><entry><title type="html">Libros que te ayudarán a aprender Data Science</title><link href="https://blog.thedojo.mx/2021/02/01/libros-que-te-ayurdaran-a-aprender-data-science.html" rel="alternate" type="text/html" title="Libros que te ayudarán a aprender Data Science" /><published>2021-02-01T00:00:00-06:00</published><updated>2021-02-01T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2021/02/01/libros-que-te-ayurdaran-a-aprender-data-science</id><content type="html" xml:base="https://blog.thedojo.mx/2021/02/01/libros-que-te-ayurdaran-a-aprender-data-science.html">&lt;p&gt;Creemos firmemente que una de las mejores maneras de educarte como desarrollador es conseguir guía clara.&lt;/p&gt;

&lt;p&gt;Una de las mejores fuentes de conocimiento son los libros escritos por personas expertas en el tema del que quieres aprender, es por eso siempre buscamos personas que nos den consejos sobre los mejores recursos que encuentren.&lt;/p&gt;

&lt;p&gt;En esta ocasión invitamos a &lt;a href=&quot;https://twitter.com/silvercorp&quot;&gt;Yesi Days&lt;/a&gt; a platicar sobre qué libros nos recomendaría para desarrollarte en &lt;strong&gt;data science&lt;/strong&gt;. Nos recomendó los siguientes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/3q5lDj0&quot;&gt;Hands-on Machine Learning with Scikit-Learn and Tensorflow&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://themlbook.com/&quot;&gt;The Hundred Page Machine Learning&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/35qysMQ&quot;&gt;Introduction to Machine Learning with Python: A Guide for Data Scientists&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/2L8AiuZ&quot;&gt;Data Science from Scratch: First Principles with Python&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://amzn.to/2MGG6Mq&quot;&gt;Cracking the PM Interview: How to Land a Product Manager Job in Technology (Cracking the Interview &amp;amp; Career)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/27783740-building-real-time-data-pipelines&quot;&gt;Building Real-time data pipelines&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;data-science-path&quot;&gt;Data science Path&lt;/h2&gt;

&lt;p&gt;Yesi también nos contó sobre un guía que creó para ayuddarte a empezar en el camino, la puedes encontrar en:&lt;a href=&quot;https://ds-path.netlify.app/&quot;&gt;Data Science Path&lt;/a&gt; y próximamente estará en español.&lt;/p&gt;

&lt;p&gt;La charla que tuvimos con ella se extendió sobre muchos temas más, si no te la quieres perder la puedes ver aquí:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vCzMLeq_eBk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="video" /><category term="data-science" /><category term="books" /><category term="libros" /><summary type="html">En este post te contamos sobre algunos libros que te pueden servir para avanzar en tu carrera.</summary></entry><entry><title type="html">¿Deberías comentar tu código?</title><link href="https://blog.thedojo.mx/2020/12/30/deberias-comentar-tu-codigo.html" rel="alternate" type="text/html" title="¿Deberías comentar tu código?" /><published>2020-12-30T00:00:00-06:00</published><updated>2020-12-30T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/12/30/deberias-comentar-tu-codigo</id><content type="html" xml:base="https://blog.thedojo.mx/2020/12/30/deberias-comentar-tu-codigo.html">&lt;p&gt;Cuando hablamos de los comentarios en el código, hay dos escuelas. La primera dice que debes usar los comentarios para &lt;strong&gt;clarificar lo que quisiste expresar con tu código&lt;/strong&gt;, mientras que la segunda dice que deberías &lt;strong&gt;evitarlos al máximo&lt;/strong&gt; y que comentar tu código es un mal necesario que sólo denota tu falta de habilidad para no hacer código lo suficientemente claro.&lt;/p&gt;

&lt;p&gt;¿A cuál de los dos consejos deberías hacerle caso? En este artículo explicaremos por qué creemos que deberías ver los comentarios como una &lt;strong&gt;herramienta necesaria&lt;/strong&gt;, valiosa y muy útil, y cómo usarlos para no caer en el extremo que ha llevado a algunas personas a tener una mala actitud hacia ellos.&lt;/p&gt;

&lt;h2 id=&quot;un-sistema-sin-documentación-esta-incompleto&quot;&gt;Un sistema sin documentación esta incompleto&lt;/h2&gt;

&lt;p&gt;Como desarrollador estarás de acuerdo en que un sistema &lt;strong&gt;no&lt;/strong&gt; tiene la &lt;em&gt;calidad suficiente&lt;/em&gt; si no cuenta con documentación, es decir, información acerca del sistema que comunique cosas como la razón de existir de ciertos módulos, valores y funciones y cómo usarlos.&lt;/p&gt;

&lt;p&gt;Si, además, tienes que modificar este sistema, será una pesadilla entender todo lo que los programadores anteriores hicieron o &lt;em&gt;intentaron&lt;/em&gt; hacer. Si tienes que &lt;em&gt;usar&lt;/em&gt; algo sin documentación, es el mismo caso: &lt;strong&gt;tienes estudiar el código para saber como funciona.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Así que hemos establecido que la documentación es completamente necesaria para crear programas útiles. Ahora bien, ¿dónde ponemos esa documentación? Muchos desarrolladores y equipos no tienen idea de dónde ponerla y crean documentos que dejan después olvidados en una carpeta en la nube y que nadie encuentra después. Pero, ¿no sería más lógico mantener la documentación lo &lt;strong&gt;más cerca posible del código&lt;/strong&gt;? Eso es precisamente lo que los comentarios te permiten hacer.&lt;/p&gt;

&lt;p&gt;Puedes usar los comentarios documentar:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Decisiones de diseño&lt;/li&gt;
  &lt;li&gt;Explicaciones sobre la existencia, funcionamiento o razón de ser de cierta parte del código&lt;/li&gt;
  &lt;li&gt;Las interfaces y su ejemplo de uso&lt;/li&gt;
  &lt;li&gt;Efectos de usar cierto código&lt;/li&gt;
  &lt;li&gt;Partes inconclusas o que se pueden mejorar (TODO’s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tener esta información muy cerca del código sobre el que está proporcionando información ayudará a que sea fácil de encontrar y además, si se establecen reglas como tratar los comentarios como ciudadanos de primer rango, se mantendrá actualizado y útil.&lt;/p&gt;

&lt;p&gt;También es buena idea tener un documento o sitio web especializado en documentación que te ayude a encontrar rápido lo que buscas como Docusaurus o un sitio generado por Sophinx. Puedes utilizar esta misma documentación que escribiste junto al código si usaste el estilo definido por el lenguaje de programación o por las herramientas de generación de documentos.&lt;/p&gt;

&lt;h3 id=&quot;los-comentarios-te-pueden-ayudar-en-el-futuro&quot;&gt;Los comentarios te pueden ayudar en el futuro&lt;/h3&gt;

&lt;p&gt;Incluso aunque no los uses formalmente como documentación, los comentarios estarán ahí para darte información y recordarte lo que hiciste, pero sobre todo &lt;strong&gt;por qué&lt;/strong&gt; lo hiciste.&lt;/p&gt;

&lt;p&gt;Recuerda que la mente humana busca la eficiencia máxima de recursos, por lo que es probable que elimine información que no ocupe inmediatamente y que no recuerdas a menudo, como por qué esa variable tenía el valor 730 y no otro.&lt;/p&gt;

&lt;p&gt;Tu yo futuro y tu equipo te agradecerán haber escrito esos comentarios que te informan sobre lo que estabas pensando en el momento que escribiste ese código.&lt;/p&gt;

&lt;h3 id=&quot;los-comentarios-son-una-buena-herramienta-de-diseño&quot;&gt;Los comentarios son una buena herramienta de diseño&lt;/h3&gt;

&lt;p&gt;John Ousterhout, en “A Philosophy of Software Design” recomienda &lt;strong&gt;empezar&lt;/strong&gt; con los comentarios antes de programar (de esto hablaremos más adelante). Pero, ¿por qué lo recomienda?&lt;/p&gt;

&lt;p&gt;Escribir en un lenguaje humano cómo funciona algo antes de implementarlo realmente, te da la capacidad de ver si es lógico y suficiente, además te permite ponerte en los zapatos del usuario para notar deficiencias sobre todo en &lt;strong&gt;la interfaz&lt;/strong&gt;. Los comentarios de interfaz es lo primero que deberías crear porque te servirán de guía para avanzar con tu diseño y, sobre todo, que sea lógico y fácil de usar.&lt;/p&gt;

&lt;p&gt;Una buena guía: si no eres capaz de crear un comentario concreto y corto sobre cómo funciona o por qué existe algo, &lt;strong&gt;lo más probable es que tengas que re-pensar tu diseño&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;el-lenguaje-de-programación-no-es-suficiente-para-expresar-todo-lo-necesario&quot;&gt;El lenguaje de programación no es suficiente para expresar todo lo necesario&lt;/h3&gt;

&lt;p&gt;Todos los lenguajes de programación están pensados para ser un &lt;strong&gt;subconjunto del lenguaje humano&lt;/strong&gt; que elimine las ambigüedades, manteniendo el mayor poder expresivo posible. Esto nos lleva a sus limitantes: es imposible, o por lo menos impráctico, intentar expresar todas las ideas con el código.&lt;/p&gt;

&lt;p&gt;En la práctica, el tiempo y los recursos para lograr algo son limitados, por lo que a veces es más conveniente y fácil para todos explicar lenguaje humano algo que intentar expresarlo con código, como los puristas afirman.&lt;/p&gt;

&lt;p&gt;No te sientas mal si tienes que recurrir de vez en cuando a explicar la forma en que funciona algo, siempre y cuando no sea la práctica común.&lt;/p&gt;

&lt;h2 id=&quot;cómo-usar-los-comentarios-para-que-sean-valiosos&quot;&gt;¿Cómo usar los comentarios para que sean valiosos?&lt;/h2&gt;

&lt;p&gt;No todos los comentarios son valiosos, hay algunos que pueden estorbar más de lo que ayudan, por ejemplo, los que no aportan información a lo que es obvio en el código.&lt;/p&gt;

&lt;p&gt;Hablemos de algunas formas de aprovecharlos lo mejor posible para que contribuyan positivamente a aumentar la calidad del proyecto.&lt;/p&gt;

&lt;h3 id=&quot;escribe-los-comentarios-primero&quot;&gt;Escribe los comentarios primero&lt;/h3&gt;

&lt;p&gt;Una de las partes más importantes de los comentarios como documentación es que deben ser concretos, cercanos a la realidad y que proporcionen la mayor cantidad de información útil posible.&lt;/p&gt;

&lt;p&gt;Para lograr esto, se tienen que crear lo más cerca que puedas a la &lt;em&gt;creación del código&lt;/em&gt;. Pero como todos sabemos que después de escribir y probar (básicamente) el código vamos a sentir que ya está terminado, es buena práctica obligarte a escribirlos antes, justo como propone TDD con las pruebas.&lt;/p&gt;

&lt;p&gt;De esta manera te asegurarás que tu código esté documentado incluso antes de escribirlo y te servirán como una &lt;strong&gt;herramienta de diseño&lt;/strong&gt; que te ayudará a pensar mejor en la usabilidad de tus módulos y piezas de software.&lt;/p&gt;

&lt;h3 id=&quot;crea-comentarios-acerca-de-la-interfaz&quot;&gt;Crea comentarios acerca de la interfaz&lt;/h3&gt;

&lt;p&gt;La interfaz es el &lt;strong&gt;medio de uso&lt;/strong&gt; que tus módulos o funciones presentan para que las demás partes de tu sistema lo usen. Lo primero que deberías documentar y explicar es &lt;strong&gt;esta interfaz&lt;/strong&gt;, para que más personas a parte de ti puedan usar este pedazo de código.&lt;/p&gt;

&lt;p&gt;Debes escribir comentarios claros sobre:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cómo usar esa pieza de código&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Por qué existe esa parte del sistema&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Qué efectos tiene usarla&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este tipo de comentarios son los que aportan mayor valor al sistema y si están lo suficientemente completos, con ejemplos y explicaciones claras, son una documentación válida que está en un muy buen lugar: es fácil de encontrar y no se va a perder enterrada entre otros documentes que después nadie va a consultar.&lt;/p&gt;

&lt;h3 id=&quot;evita-los-comentarios-sobre-la-implementación&quot;&gt;Evita los comentarios sobre la implementación&lt;/h3&gt;

&lt;p&gt;Los comentarios sobre la implementación son aquello que describen &lt;em&gt;qué&lt;/em&gt; estas haciendo, como por ejemplo, sumar número, abrir un archivo, etc. Estos comentarios normalmente son innecesarios, ya que lo que se está haciendo es obvio si el código es lo suficientemente expresivo y &lt;em&gt;siempre deberíamos buscar que sea así&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;De hecho, estos son los comentarios que hacen que la gente odie a los comentarios en general, pues en vez de proporcionar información extra son una carga que hay que mantener y pueden confundir si no son actualizados.&lt;/p&gt;

&lt;p&gt;Si realmente sientes que tienes que explicar &lt;em&gt;qué&lt;/em&gt; estás haciendo con cierta pieza de código, primero pregúntate si no hay una manera de reescribirlo para que &lt;strong&gt;sea obvio&lt;/strong&gt;. Si no existe o no es práctica esta solución, entonces escribe el comentario de la manera más concisa posible, incluyendo la razón de la existencia de ese código.&lt;/p&gt;

&lt;p&gt;Para hacer esto debes tomar muy en cuenta los recursos del proyecto: no te puedes tardar el triple del tiempo implementando la pieza de código perfecta porque no quieres escribir un comentario que explique cómo funciona.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Escribir comentarios es una de las grandes tareas que los programadores debemos dominar. Los lenguajes de programación y los entornos de programación cada vez le dan más poder a esta parte de los programas y permiten incluso escribir pruebas en ellos, generar documentación automática y listar tareas a partir de ellos.&lt;/p&gt;

&lt;p&gt;Si pones el suficiente esmero en aprender a escribir buenos comentarios y mantenerlos, serán una gran herramienta de diseño y documentación de tu software.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Este artículo está basado en las ideas del “A Philosophy of Software Design de John Ousterhout”, en el que se le dedican &lt;strong&gt;4 capítulos&lt;/strong&gt; al buen uso de los comentarios&lt;/em&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="comments" /><category term="comentarios" /><category term="mantenibilidad" /><category term="código-mantenible" /><category term="ousterhout" /><category term="aposd" /><summary type="html">Hay programadores que dice que los comentarios son un mal que se debería evitar al máximo. Aquí proponemos lo contrario: usa los comentarios correctamente para crear código mantenible, basados en las ideas de 'A Philosophy of Software Design'</summary></entry></feed>