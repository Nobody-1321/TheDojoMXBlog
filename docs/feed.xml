<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://blog.thedojo.mx/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.thedojo.mx/" rel="alternate" type="text/html" /><updated>2023-06-28T10:23:43-06:00</updated><id>https://blog.thedojo.mx/feed.xml</id><title type="html">The Dojo MX Blog</title><author><name>Héctor Patricio</name><uri>https://github.com/hectorip</uri></author><entry><title type="html">Sigue el ciclo de la creatividad</title><link href="https://blog.thedojo.mx/2023/06/27/sigue-el-ciclo-de-la-creatividad.html" rel="alternate" type="text/html" title="Sigue el ciclo de la creatividad" /><published>2023-06-27T00:00:00-06:00</published><updated>2023-06-27T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/06/27/sigue-el-ciclo-de-la-creatividad</id><content type="html" xml:base="https://blog.thedojo.mx/2023/06/27/sigue-el-ciclo-de-la-creatividad.html"><![CDATA[<p>Hay algunas personas que creen que el desarrollo de software sólo trata de resolver problemas analíticamente, pero lo cierto es que para encontrar soluciones siempre se requiere de creatividad.</p>

<p>Sin embargo, muchas veces pensamos que la creatividad como desarrolladores de software no es nuestro fuerte, pero no hay nada más lejos de la realidad. Si te has dedicado exitosamente a esto por un tiempo, has demostrado que eres creativo o creativa, sólo que no de la manera que se considera tradicionalmente, eso que tiene que ver con el arte, la belleza y otras cosas.</p>

<p>Tu creatividad generalmente se demuestra en la aplicación y mezcla de ideas para resolver problemas en nuevas situaciones.</p>

<p>En el libro <a href="https://kadavy.medium.com/mind-management-not-time-management-25ebd3a58dc6"><strong>“Mind Management, Not Time Management”</strong> de David Kadavy</a>, se habla de un ciclo de creatividad y en este artículo lo quiero aplicar a nuestro trabajo de desarrollo de software.</p>

<h2 id="el-ciclo-de-la-creatividad">El ciclo de la creatividad</h2>

<p>Creo que esto no te va enseñar nada nuevo, porque probablemente lo <em>has vivido</em> muchas veces. Pero vamos a ponerle estructura y nombres a los diferentes pasos para que podamos replicarlo de manera más consciente.</p>

<p>El ciclo de la creatividad está compuesto por cuatro fases:</p>

<ul>
  <li><strong>Preparación</strong>: Tienes que obtener la mayor cantidad información, estudiar el problema y se <strong>analizar</strong> las posibles soluciones. En nuestro caso incluso puede que tengamos que hacer algunas pruebas de concepto. Es muy importante entender que en esta etapa <strong>no vas resolver el problema</strong>, si encuentras algún tipo de bloqueo debes dejarlo pasar y seguir explorando.</li>
  <li><strong>Incubación</strong>: En esta fase tienes que de pensar en el problema, se hace otra cosa, se descansa, se duerme, se hace ejercicio. Tu mente procesará lo que acabas de leer, de manera inconsciente.</li>
  <li><strong>Iluminación</strong>: Esta parte no la puedes forzar, a veces incluso tienes que repetir las dos fases de manera cíclica hasta que llega la respuesta. Aquí es donde todo parece que hace click y la solución aparece “de la nada” (ya sabes que no es así porque has hecho mucho trabajo previo.)</li>
  <li><strong>Verificación</strong>: Ahora que tienes una idea, falta comprobarla y más importante aún: llevarla a cabo. En esta tienes que asegurarte que la solución que encontraste es correcta, <em>o tienes que hacer lo suficiente para empezar a probarla</em>. Puede que te equivoques y tengas que volver a empezar el ciclo, pero con nuevos conocimientos.</li>
</ul>

<p>Este ciclo me pareció muy interesante porque se me hace equivalente en pasos a los pasos que <strong>George Polya</strong> propone. En su libro <strong>“How to Solve It”</strong> habla de cuatro pasos para resolver problemas:</p>

<ol>
  <li>Entender el problema == Preparación e Incubación</li>
  <li>Idear un plan == Incubación e Iluminación (La parte <strong><em>más difícil</em></strong>, Polya dice que si tienes un plan, ya casi resolviste el problema)</li>
  <li>Llevar a cabo el plan == Verificación</li>
  <li>Revisar el plan == Verificación</li>
</ol>

<h2 id="ejemplo">Ejemplo</h2>

<p>El ejemplo más clásico en el que usamos el ciclo de la creatividad naturalmente es cuando estamos resolviendo un bug difícil. Veamos los pasos:</p>

<ol>
  <li>
    <p>Preparación: Intentamos entender el bug, y el comportamiento esperado, consultamos la documentación o el código que lo está produciendo. Si es lo suficientemente difícil, este bug se va con nosotros a dormir.</p>
  </li>
  <li>
    <p>Incubación: Después de sentirte derrotado por el bug, te alejas, ya sea porque terminó el día de trabajo, porque te vas a hacer otras cosas o porque simplemente te quieres despejar.</p>
  </li>
  <li>
    <p><strong>Iluminación</strong>: Durante alguna otra actividad, como bañándote, caminando, haciendo ejercicio o también cuando regreses al código, ves la solución, como si siempre hubiera estado ahí, de manera obvia.</p>
  </li>
  <li>
    <p>Verificación: Implementas la solución y pruebas que todo esté funcionando como debería.</p>
  </li>
</ol>

<p><strong>¿Ves cómo sí te ha pasado?</strong> Ese es el ciclo de la creatividad, que nosotros usamos resolviendo problemas. Veamos algunas formas de extenderlo y aprovecharlo mejor.</p>

<h2 id="aplicación-el-poder-de-la-preparación">Aplicación: el poder de la preparación</h2>

<p>Ahora que ya tienes un nombre para esto que te pasa muy constantemente, puedes aprovecharlo para desencadenarlo intencionalmente.</p>

<p>Antes, pensemos un poco. ¿Cuál es la parte del ciclo que nos interesa aprovechar? Para mi es el poder de <strong>incubación</strong>, que es lo que produce la iluminación, o sea, lo que hace que te lleguen las ideas para resolver tu problema de manera creativa.</p>

<p>Pero, ¿cómo vas a incubar si no tienes nada que hacer crecer? Es aquí donde entra el valor de la preparación. Si quieres resolver un problema difícil, inclusive uno que sientes que ahora mismo está un poco por encima de tus capacidades, la mejor manera de hacerlo es aprovechando este ciclo. Primero te preparas lo mejo que puedas, estudiando el problema, analizando los posibles caminos que puedes seguir e incluso haciendo algunas pruebas de concepto. Seguro que esto ya lo haces.</p>

<p>Después y esto es la parte más importante de este artículo (y la que te puede estar fallando), tienes que <strong>alejarte del problema</strong>. Así es, olvídate de él, cambia de problema, ve a dormir, sal a pasear, date un baño. Tienes que hacer algo que ocupe tu mente.</p>

<p>David Kadavy dice en su libro que esto te permite olvidarte de las ideas que no funcionan y fortalecer las que sí, y me parece una buena propuesta. Si lo comparas con un algoritmo, buscar una solución a un problema es como hacer una búsqueda en un árbol, sólo que este árbol tiene más ramas de las que puedes seguir, así que tienes que podarlas. La incubación es la poda, que además fortalece las ramas que es más probable que te lleven a la solución.</p>

<p>Esto también se puede aplicar de manera más sencilla.Por ejemplo, ¿tienes que diseñar una pieza de software y sientes que no tienes ni idea de por dónde empezar? Combinando las enseñanzas de Polya con el ciclo de la creatividad, lo primero es definir completamente el problema. Una vez que sientas que lo has entendido (muchas veces ayuda ponerlo por escrito e incluso pedir que alguien más lo revise).</p>

<p>Después de esto, <em>sobre todo si no tienes una solución clara</em>, o propuestas que hacer, <strong>busca alejarte lo más posible</strong>. Es por eso que muchos profesionales veteranos y exitosos tienen actividades alternas, alejadas de la programación e incluso de la computadora. Cuando regreses a trabajar sobre el problema, es mucho más probable que tengas una solución.</p>

<p>Se que esto suena mágico, pero nada te puede convencer más que la propia que ya tienes resolviendo problemas de otro estilo. Si esto no funciona, recuerda que puedes repetir el ciclo tantas veces como sea necesario.</p>

<p>Claro, esto no asegura que la solución te llegará mágicamente siempre, pero con esto aumentamos las probabilidades de que tu naturaleza creativa trabaje por ti.</p>

<h2 id="conclusión">Conclusión</h2>

<p>Siempre que puedas, frente a problemas difíciles, aplica este ciclo: prepárate lo mejor que puedas, explorando soluciones, asegurándote de entender todas la variables del problema, escribiendo la definición del problema. Después <strong>aléjate de problema</strong>, así permitirás que se <strong>incube</strong>.</p>

<p>Finalmente, regresa y trata de resolverlo de nuevo. Claro que después de esto tienes que ejecutar y verificar tu solución.</p>

<p>Espero que esta información te sea útil y que la puedas aplicar en tu día a día.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="creatividad" /><category term="resolución-de-problemas" /><summary type="html"><![CDATA[La programación es una profesión muy creativa y por eso es importante que aprendamos a manejarla, hablemos de las etapas para resolver un problema de forma creativa y cómo puedes aprovecharlas.]]></summary></entry><entry><title type="html">Modelos mentales para desarrolladores: modelos elementales</title><link href="https://blog.thedojo.mx/2023/06/22/modelos-mentales-para-desarrolladores-elementales.html" rel="alternate" type="text/html" title="Modelos mentales para desarrolladores: modelos elementales" /><published>2023-06-22T00:00:00-06:00</published><updated>2023-06-22T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/06/22/modelos-mentales-para-desarrolladores-elementales</id><content type="html" xml:base="https://blog.thedojo.mx/2023/06/22/modelos-mentales-para-desarrolladores-elementales.html"><![CDATA[<p>La <strong>mente</strong> es la principal herramienta del desarrollador de software. Puedes ayudar a que se desempeñe mejor si le das, a su vez, herramientas que te permitan <em>organizar, comprender, combinar y analizar más rápido la información</em>. Estas herramientas además te pueden ayudar a ver cosas claramente que antes eran imposibles de ver, o a llegar más profundo en los análisis.</p>

<p>Estas herramientas son los <strong>modelos mentales</strong>, que en este artículo explicaremos, pero además daremos algunos ejemplos que te servirán directamente como desarrollador. Estos ejemplos son, a nuestro modo de ver, los modelos esenciales que debes conocer. Empecemos dando una definición clara.</p>

<h2 id="qué-son-los-modelos-mentales">¿Qué son los modelos mentales?</h2>

<p>Un modelo mental es una estructura que te permite organizar la información que recibes o que observas, para que puedas ver aspectos particulares de esta, aplicarle proyecciones o simplemente para que puedas entenderla mejor. También se puede pensar en ellos como en <em>lentes</em> que te permiten ver el mundo de una forma particular.</p>

<p>Los desarrolladores de software estamos acostumbrados a usar modelos para representar la realidad. Recuerda que un modelo es una abstracción, <strong>una representación simplificada</strong> de la realidad que se enfoca en ciertos elementos y deja fuera otros.</p>

<p>Los modelos mentales son esto mismo, pero la diferencia es que tienen aplicación a través de muchas situaciones. Estos modelos mentales te permiten usar la información de manera más eficiente y, a veces, ver la realidad más claramente. <strong>Charlie Munger</strong>, uno de los principales proponentes de los modelos mentales, dice que para pensar efectivamente, debes tener una <strong>malla o red de modelos mentales</strong> que puedas usar para pensar mejor. Algo a lo que se pueden parece un poco es a los patrones de diseño, pero aplicados a la vida real.</p>

<p>Nuestro objetivo es ayudarte a construir esta malla de modelos mentales que te permitan ser más efectivo en el desarrollo de software. Empecemos con los más básicos.</p>

<h3 id="la-navaja-de-ockham">La navaja de Ockham</h3>

<p>Este es uno de los modelos mentales que más personas conocen. En líneas generales establece que cuando estés buscando explicaciones a algo que hayas observado y estés decidiendo entre varios posibles caminos, <strong>el más sencillo es el que tiene la mayor probabilidad de ser la explicación correcta</strong>.</p>

<p>¿Cómo se puede aplicar a los problemas que nos enfrentamos <em>comúnmente</em> como desarrolladores? Siempre que estés decidiendo entre diferentes diseños que cumplen con los requerimientos <strong>actuales</strong>, escoge el más sencillo de los diseños, sin dejarte influir demasiado <em>por que podrías necesitar en el futuro</em>. Esto se conecta con el principio de <a href="https://martinfowler.com/bliki/Yagni.html">YAGNI</a> (You aren’t gonna need it), que dice que no debes implementar cosas que no necesitas ahora, porque podrías necesitarlas en el futuro. También se conecta con el principio de buscar la simplicidad al máximo en el desarrollo de software.</p>

<p>También lo puedes aplicar a los procesos que modelas en el software: cuando estés descubriendo el por qué de algo,</p>

<h3 id="el-mapa-no-es-el-territorio">El mapa no es el territorio</h3>

<p>Los desarrolladores de software trabajamos creando <strong>modelos</strong> de la realidad que pueden ser representados dentro de una computadora, muchas veces para simular procesos o simplemente capturamos ideas que ya son abstractas para que corran dentro de la computadora.</p>

<p>Un <strong>mapa</strong> es un <strong>modelo</strong> de un territorio físico. Pero podemos cometer el error de pensar que el mapa y el territorio son equivalentes, cuando lo cierto es que, al ser un modelo, el mapa es una representación imperfecta y simplificada del territorio real.</p>

<p>Así son todos los modelos y debemos recordarlo, para muchos casos, la mayoría yo diría, <strong>no existe un modelo absolutamente</strong> correcto y todos dejan algo fuera. Todos son arbitrarios y si alguien de nuestro equipo tiene una visión diferente, deberíamos escucharla, tratar de entenderla y ver cómo podemos integrar ambas visiones en un solo modelo.</p>

<p>Tus representaciones, tus modelos, <strong>no son la realidad</strong>, por lo que siempre pueden mejorarse. Además de que confiar en un modelo como en una guía perfecta te puede llevar a cometer errores graves. Es por eso que es bueno recordar siempre, que los modelos (los mapas) son representaciones imperfectas de la realidad (el territorio), y que algunos son más <em>convenientes</em> que otros para diferentes acciones o situaciones, además de que no <strong>existe EL MODELO correcto</strong> para cierta situación.</p>

<p>Si aplicas este modelo mental a los mismos modelos mentales, verás por qué necesitas una variedad de ellos para poder pensar mejor.</p>

<h2 id="el-ganador-se-lo-lleva-todo">El ganador se lo lleva todo</h2>

<p>Hay procesos en el mundo, de hecho, muchos, en los que los “premios” (puedes pensar en ellos como las recompensas o beneficios de una actividad) no se distribuyen uniformemente, sino que las ganancias se acumulan en un sólo lugar, para que unos pocos se lleven la mayoría de los beneficios.</p>

<p>En la actualidad, muchos procesos se comportan así, pero además se exacerba con la tecnología digital, en la que los ganadores de procesos como por la creación de contenido. Para aplicar este modelo, debes aprender a ver quién se lleva la mayoría de los beneficios.</p>

<p>Este modelo aplicado al software se puede ver en la puesta en marcha de las aplicaciones, pero de forma inversa. A diferencia de lo que puede pasar en otras industrias, un proyecto a medio terminar provee un valor casi nulo. Yo me atrevería a decir que un proyecto de software que no esté en producción, vale cero. Así que, siempre esfuérzate por entregar el software o ponerlo en manos de tus usuarios lo más pronto posible.</p>

<h2 id="la-falacia-del-costo-hundido">La falacia del costo hundido</h2>

<p>Todos hemos enfrentado esta pregunta: ¿sigo invirtiendo tiempo y esfuerzo en este proyecto que no está dando resultados? <strong>¿Hasta cuando debo seguir invirtiendo en este proyecto?</strong></p>

<p>A veces llegamos a la conclusión de que lo mejor sería dejar de invertir en ese proyecto <strong>YA MISMO</strong>, pero algo nos detiene: <strong>el tiempo y esfuerzo que ya hemos invertido</strong>. Esto es el <strong>costo hundido</strong>. Los seres humanos tenemos naturalmente más aversión por <em>perder</em> algo, que deseos de <em>ganar</em> más cosas.</p>

<p>Pensar que lo que ya invertimos lo vamos a perder si dejamos algo que no nos ha dado resultados (y no tiene pinta de que los vaya a dar) nos detiene de tomar decisiones que son muy claras: si no <em>hubiéramos</em> invertido ese tiempo y esfuerzo, no tendríamos razones para seguir invirtiendo en este proyecto o aunque sea para mantenerlo. O sea que una inversión pasada, en vez de producirnos beneficios, nos está produciendo pérdidas, por el puro temor a perderla.</p>

<p>Este modelo mental se puede aplicar a los proyectos de desarrollo de software que después de cambiar de estrategia muchas veces no han dado rendimientos. Además como desarrolladores a veces estamos orgullosos de la arquitectura o los logros técnicos de cierto sistema o cierta parte del código, pero ha llegado el momento de reemplazarla por algo que se adecúe mejor a las necesidades actuales.</p>

<p>Recuerda que el esfuerzo o tiempo que ya invertiste <strong>nunca es una razón suficiente</strong> para mantener algo, sobre todo si hay razones para tomar otro camino.</p>

<h3 id="rendimientos-decrecientes">Rendimientos decrecientes</h3>

<p>Hay muchos procesos en la vida cotidiana en los que observamos que “mientras más, mejor”. Como máquinas de generalización que somos, tendemos a extender este pensamiento a todas las cosas en la vida, pero muchas cosas, no se comportan así.</p>

<p>De eso trata la ley de rendimientos decrecientes, te hace entender que <strong>no siempre más es mejor</strong>. De hecho, en la mayoría de los procesos naturales se cumple una ley:</p>

<blockquote>
  <p>Por cada unidad añadida, <strong>el rendimiento de la siguiente unidad va a disminuir</strong>.</p>
</blockquote>

<p>Así es: hay muchas cosas en la naturaleza que mientras más tienes de ellas, cada cosa que añades te va a dar menos beneficios que la cosa anterior que añadiste. Algunos ejemplos empíricos:</p>

<ul>
  <li>
    <p>Hacer ejercicio es muy bueno, si haces por lo menos 1 hora 4 veces a la semana ejercicio de cierto tipo te vas a sentir muy bien (claro combinado con otros factores como la buena alimentación). Pero si haces el doble de ejercicio, no te vas a sentir el doble de bien, de hecho si llegas a cierto punto, como hacer 3 horas diarias te vas a sentir excesivamente cansado y puede que con el tiempo tu cuerpo muestre señales de fatiga.</p>
  </li>
  <li>
    <p>Si estás en un restaurante y pides un postre, el primero te va a saber muy bien, pero si pides otro, el segundo no te va a saber tan bien como el primero, y si pides otro, puede que te enfermes y termines odiando ese postre específico.</p>
  </li>
  <li>
    <p>Cuando riegas una planta, echarle agua es bueno hasta cierto punto, si le echas demasiada, la planta se va a ahogar y se va a morir.</p>
  </li>
  <li>
    <p>Salir al sol está bien, es bueno para nuestra salud si lo haces a la hora correcta y cuidas la cantidad de sol a la que te expones. Pero si te expones demasiado, te vas a quemar y vas a tener problemas de salud.</p>
  </li>
  <li>
    <p>Finalmente, el dinero: tener dinero es bueno hasta cierto punto, pero hay una cantidad que a mi parecer depende de el lugar en el que vivas, que tener dinero extra 1) no te va a hacer más feliz, 2) incrementar más tu riqueza te meterá en problemas que no tendrías antes. La siguiente gráfica muestra la relación entre el dinero y la felicidad:</p>
  </li>
</ul>

<p><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_500/v1687450180/Ilustracio%CC%81n_sin_ti%CC%81tulo_4_qhinhf.png" alt="Gráfica de rendimientos decrecientes" class="align-center" /></p>

<p>En estos ejemplos hablamos de cosas buenas que primero te van dando cada vez menos beneficios, y luego se pueden volver perjudiciales. Para aplicarlo al desarrollo de software piensa en los siguientes ejemplos:</p>

<ul>
  <li>
    <p><strong>Equipos</strong>: Un equipo bien balanceado es <em>necesario</em> para hacer proyectos serios, pero eso no significa que mientras más grande el equipo, mejor. Cada persona agregada al proyecto va agregando menos valor que la anterior y muy rápido se llega al punto en el que una persona más añadida daña la productividad del equipo.</p>
  </li>
  <li>
    <p><strong>Horas de trabajo</strong>: A (casi) todos nos gusta nuestro trabajo y para lograr nuestros objetivos, en general, debemos de ponerle bastantes horas. Sin embargo, si trabajamos demasiado en un corto espacio de tiempo van a pasar dos cosas progresivamente: 1) Cada hora de trabajo sin que te distraigas va a rendir menos y 2) si sigues trabajando a pesar de esto, vas a cometer errores que después te puede costar mucho tiempo arreglar, o incluso cometer errores que no puedas arreglar, catastróficos (por ejemplo: un DELETE sin WHERE).</p>
  </li>
  <li>
    <p><strong>Abstracción</strong>: En el desarrollo de software, la abstracción es una herramienta esencial y siempre se necesita de ella para crear buen software. Pero si abstraes demasiado, tu código se vuelve inmantenible y muy difícil de entender. Igual que con otras cosas, el punto de retornos negativos de la abstracción es muy fácil de alcanzar.</p>
  </li>
  <li>
    <p><strong>Pruebas unitarias</strong>: Las pruebas unitarias son una gran herramienta tanto para asegurar la calidad del software como para ayudar en su diseño. Sin embargo, hay una tendencia a querer buscar que todo tu código esté cubierto por pruebas unitarias: <strong>tener 100% de cobertura</strong>. Este es un caso muy característico de rendimientos decrecientes: mientras más pruebas unitarias tengas, cada prueba unitaria que agregues va a darte menos beneficios que la anterior, pero se pone peor. Intentar tener 100% de pruebas te lleva a hacer código que mucho más complejo y difícil de mantener.</p>
  </li>
</ul>

<p>Para mi, este es uno de los modelos mentales más útiles, debido a que estamos en un mundo en el que ser eficiente en recursos te puede dar una gran ventaja competitiva.</p>

<h2 id="conclusión">Conclusión</h2>

<p>Los modelos mentales son herramientas para organizar la información que son muy útiles para personas que trabajan principalmente pensando y analizando el mundo real. Los desarrolladores de software pertenecemos a ese grupo, así que aprender a modelar la realidad de forma más efectiva puede darnos una gran ventaja para resolver problemas y así avanzar más rápido en nuestra carrera.</p>

<p>Seguiremos creando más artículos hablando de esto, para  darte herramientas que te permitan ser un mejor desarrollador de software y mejor profesional.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="modelos-mentales" /><category term="desarrollo-de-software" /><summary type="html"><![CDATA[Los modelos mentales te permitirán resolver problems más rápido y con mejores resultados, hablemos de algunos de ellos que nos aplican directamente como desarrolladores.]]></summary></entry><entry><title type="html">¿Son aplicables y prácticos los principios SOLID?</title><link href="https://blog.thedojo.mx/2023/06/17/son-aplicables-y-practicos-los-principios-solid.html" rel="alternate" type="text/html" title="¿Son aplicables y prácticos los principios SOLID?" /><published>2023-06-17T00:00:00-06:00</published><updated>2023-06-17T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/06/17/son-aplicables-y-practicos-los-principios-solid</id><content type="html" xml:base="https://blog.thedojo.mx/2023/06/17/son-aplicables-y-practicos-los-principios-solid.html"><![CDATA[<p>Los <strong>principios SOLID</strong>, se enseñan como verdades incuestionables sobre el buen desarrollo de software. Aunque, justo por la educación, antes era completamente partidario de estos, con el tiempo me fui dando cuenta de varias de las fallas que presentan.</p>

<p>En este artículo te voy a hablar de las fallas generales como conjunto, pero también es un índice para una serie de artículos que escribí sobre cada uno de ellos, analizándolo a profundidad.</p>

<h2 id="ambigüedad">Ambigüedad</h2>

<p>Cuando buscas la explicación sobre cómo aplicar alguno de estos principios, normalmente encuentras muchas explicaciones diferentes. Algunas de estas explicaciones se contraponen, siguen siendo ambiguas, o de plano no se entienden.</p>

<p>Con el principio que más pasa es con el “Single Responsibility” (SRP), en el cuál diferentes personas no nos ponemos de acuerdo respecto a lo que una “Responsabilidad” significa. Pero también pasa con la aplicación de los demás principios a diferentes entornos de programación.</p>

<h2 id="complican-exageradamente-el-código">Complican exageradamente el código</h2>

<p>La aplicación sin razonamiento profundo de estos principios puede complicar el código de manera exagerada, sobre todo en lenguajes inflexibles o con sistemas de tipos complicados (sí, te estoy viendo a ti, <strong>Java</strong>), que justo es donde más se aplica.</p>

<p>El ejemplo más claro de esto es el “Dependency Inversion Principle”, que te lleva a hacer cosas bastante raras en el código para lograrlo, como ya dije, sobre todo cuando el sistema de tipos te lo complica.</p>

<p>Y aunque es cierto que a veces es necesario y bastante útil hacer lo que este principio propone, para mi el 80% del software no lo necesita y sólo estás haciendo una sobre-ingeniería que no se justifica.</p>

<h2 id="se-usan-como-un-código-moral">Se usan como un código moral</h2>

<p>Los principios SOLID, entre otras cosas, normalmente se usan para avergonzar a las personas que no los conocen o no los aplican. Normalmente hablan de tu valía como desarrollador@ de software basado en el supuesto conocimiento de cosas como estas, y otros principio o reglas (completamente) arbitrarias, sobre todo basadas en el libro Clean Code.</p>

<p>Esta revoltura de principios morales y conveniencia técnica es un <strong>gran error para la comunidad de software</strong>, ya que lleva a la sobre-ingeniería, a la aplicación ciega de principios y técnicas que no tienen sentido en tu caso particular e incluso al desprecio del trabajo de otros programadores.</p>

<p>Para mi, este es el punto más grave, tal vez no directamente de los principios SOLID, sino de la forma en la que se enseñan.</p>

<h2 id="análisis-más-profundo">Análisis más profundo</h2>

<p>En este blog hemos escrito 5 artículos analizando cada uno de los principios que lo componen, viendo si conviene aplicarlos y describiendo alternativas. En la mayoría de los casos incluso hablamos de principios más profundos (lo que nos hace ver que los “principios SOLID” debería ser algo como “reglas SOLID”).</p>

<p>Aquí los puedes ver:</p>

<ul>
  <li>SRP: <a href="/2022/12/01/analisis-de-los-principios-solid-principio-de-responsabilidad-unica.html">Análisis de los Principios SOLID: Principio de Responsabilidad Única</a></li>
  <li>OCP: <a href="/2022/12/03/el-principio-abierto-cerrado-open-closed.html">El Principio Abierto/Cerrado</a></li>
  <li>LSP: <a href="/2023/03/06/el-principio-de-substitucion-de-liskov.html">El Principio de Sustitución de Liskov</a></li>
  <li>ISP: <a href="/2023/04/01/el-principio-de-segregacion-de-interfaces.html">El Principio de Segregación de Interfaces</a></li>
  <li>DIP: <a href="/2023/04/22/el-principio-de-inversion-de-dependencias.html">El Principio de Inversión de Dependencias</a></li>
</ul>

<p>Espero que estos artículos te sirvan para analizar más profundamente lo que todos enseñan como dogmas que se deben de seguir al pie de la letra, bajo la amenaza de no ser un buen programador o programadora que se irá al infierno de los desarrolladores si no lo sigue.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="solid" /><category term="principios" /><summary type="html"><![CDATA[Los principios SOLID son algo que se considera como 'axiomas' de las buenas prácticas del software. Pero, ¿son realmente útiles?]]></summary></entry><entry><title type="html">Libros que todo desarrollador de software debería leer: desarrollo de carrera</title><link href="https://blog.thedojo.mx/2023/06/15/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo-de-carrera.html" rel="alternate" type="text/html" title="Libros que todo desarrollador de software debería leer: desarrollo de carrera" /><published>2023-06-15T00:00:00-06:00</published><updated>2023-06-15T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/06/15/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo-de-carrera</id><content type="html" xml:base="https://blog.thedojo.mx/2023/06/15/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo-de-carrera.html"><![CDATA[<p>En este artículo vamos a hablar de los libros que te pueden ayudar a avanzar en tu carrera como desarrollador de software, que desde mi punto de vista, son esenciales.</p>

<p>Algunos desarrolladores piensan que basta simplemente con aprender a programar o diseñar software bien, pero lo cierto es que también hay que tener otras habilidades y conocimientos para que tu carrera avance a buen ritmo, y llegues a puestos de liderazgo si así lo deseas.</p>

<p>En este post hablaremos de tres tipos de libros:</p>

<ul>
  <li>Consejos de carrera para desarrolladores y habilidades blandas</li>
  <li>Libros de historia de la computación</li>
  <li>Temas que te pueden ayudar a desarrollar habilidades de soporte</li>
</ul>

<p>Como siempre, si tienes alguna recomendación, puedes dejarla en los comentarios. Empecemos.</p>

<h2 id="desarrollo-de-carrera">Desarrollo de carrera</h2>

<p>En estos libros verás consejos específicos de desarrolladores experimentados sobre la carrera de programador, qué habilidades y actitudes te conviene desarrollar.</p>

<h3 id="the-pragmatic-programmer--david-thomas--andrew-hunt">The Pragmatic Programmer | David Thomas &amp; Andrew Hunt</h3>

<p><a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686286553/71f743sOPoL._AC_UF1000_1000_QL80__vibioc.jpg" alt="Portada de The Pragmatic Programmer" class="align-center" /></a></p>

<p>Este es uno de los mejores libros sobre la carrera como programador, que te da consejos de dos programadores <strong>muy muy experimentados</strong>. Su tema principal es el <strong>pragmatismo</strong>, que es una filosofía que te dice que no hay una sola forma de hacer las cosas, sino que debes adaptarte a las circunstancias y hacer lo que sea necesario para lograr tus objetivos. Otra forma de ver el pragmatismo es que hay que ser práctico, y no darle tantas vueltas a las cosas.</p>

<p>A grandes rasgos trata estos temas:</p>

<ol>
  <li>Introducción a la filosofía pragmática</li>
  <li>Cómo ser pragmático al desarrollar software (nota que no es al <em>programar</em>, sino al crear programas)</li>
  <li>Herramientas que te pueden servir para desarrollar buen software</li>
  <li>Cómo llevar un proyecto pragmáticamente</li>
</ol>

<p>Estaba en la duda de clasificarlo entre los libros de desarrollo de software o desarrollo de carrera, porque aunque habla sobre técnicas específicas y temas técnicos, su espíritu es una meta-habilidad o una actitud hacia el desarrollo y hacia la vida: el pragmatismo.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3oXvmNk" target="_blank" rel="noopener">The Pragmatic Programmer</a>.</p>

<h3 id="the-practice-of-programming--brian-w-kernighan--rob-pike">The Practice of Programming | Brian W. Kernighan &amp; Rob Pike</h3>

<p><a href="https://www.goodreads.com/book/show/1032758.The_Practice_of_Programming" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686488400/71a9H3K9cgL._AC_UF1000_1000_QL80__af2e79.jpg" alt="Portada de The Practice of Programming" class="align-center" /></a></p>

<p>Brian W. Kernighan es un desarrollador de software, programador y científico de la computación de las grandes ligas. ¿Has escuchado sobre <code class="language-plaintext highlighter-rouge">AWK</code>? Es un programa y lenguaje programación legendario, y se llama así por sus creadores: Alfred Aho, Peter Weinberger y <strong>Brian Kernighan</strong>.</p>

<p><strong>Rob Pike</strong> es uno de los co-creadores del lenguaje de programación Go, y también es un desarrollador de software con mucha experiencia. Ha co-creado otros lenguajes de programación, como Oberon.</p>

<p>En <strong>“The Practice of Programming”</strong> explican todas las prácticas que un desarrollador de software debe tener o aprender para desarrollar software exitosamente. Este libro se guía por los siguientes principios:</p>

<ol>
  <li>Simplicidad</li>
  <li>Claridad</li>
  <li>Generalidad</li>
  <li>Automatización</li>
</ol>

<p>Estos principios son aplicados a cosas como el estilo, la documentación, las pruebas, etc. Al igual que el libro anterior, estaba dudando en clasificarlo como libro de desarrollo de software, pero creo que el enfoque general, aunque muy técnico, va más enfocado en el desarrollo de una mentalidad conveniente.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/42zssMz" target="_blank" rel="noopener">The Practice of Programming</a>.</p>

<h3 id="code-ahead--yegor-bugayenko">Code Ahead | Yegor Bugayenko</h3>

<p><a href="https://www.yegor256.com/code-ahead.html" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686348326/yegor_code_kislix.png" alt="Portada de Code Ahead" class="align-center" /></a></p>

<p><strong>Yegor Bugayenko</strong> es un autor poco conocido de este lado del mundo, pero en Rusia es más famoso. Ha escrito varios libros sobre programación como <strong>“Elegant Objects”</strong> (1 y 2). Pero también escribió este libro sobre la carrera de programador, que es muy bueno.</p>

<p>Yo lo describiría como una <em>visión cínica de la carrera de programación</em>, con algunas recomendaciones sobre actitudes, formas de trabajo y <strong>tácticas para progresar en tu carrera</strong>. No creo que se deba tomar como una guía, sino más bien como un contrapeso a las opiniones de carrera más tradicionales, para ampliar tu visión. Además sí creo que dice algunas verdades incómodas que no a todos les gustará escuchar.</p>

<p>El punto débil de libro es su formato (que para mi falló completamente), en el que trató de hacer un historia de ficción (supongo que al estilo de The Phoenix Project), pero que en realidad sólo consiste en una serie de explicaciones del protagonista.</p>

<p>A pesar de lo mencionado anteriormente, creo que es un libro que vale mucho la pena leer y que te puede ayudar a ver las cosas desde otra perspectiva.</p>

<p>Puedes comprarlo en Amazon: <a href="https://amzn.to/43Dm0FK" target="_blank" rel="noopener">Code Ahead</a></p>

<h3 id="the-phoenix-project--gene-kim-kevin-behr--george-spafford">The Phoenix Project | Gene Kim, Kevin Behr &amp; George Spafford</h3>

<p><a href="https://itrevolution.com/product/the-phoenix-project/" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686458596/TPP_3rd_cover_border-664x998.jpg_ohgr0o.webp" alt="Portada de The Phoenix Project" class="align-center" /></a></p>

<p>Este libro, a diferencia del anterior es una novela que sí salió bien, en la que describe la progresión de alguien del área de IT que obligadamente se convierte en líder del área. Describe como es que las áreas de IT se convierten de cuellos de botella en partes que agregan valor a la empresa.</p>

<p>El libro da los fundamentos de DevOps, y cuáles son los principios que todos los equipos de desarrollo de software deberían seguir para producir software más efectivamente.</p>

<p>Aunque está enfocado en la operación y la entrega del software, a final de cuentas, es donde todos queremos que nuestro software llegue, así que todos los desarrolladores de software se pueden beneficiar de los principios que presenta.</p>

<p>Se ha convertido en un clásico, y con justa razón. Lo puedes comprar aquí: <a href="https://amzn.to/3WWWMQ1" target="_blank" rel="noopener">The Phoenix Project</a>.</p>

<h2 id="libros-de-historia-de-la-informática">Libros de historia de la informática</h2>

<p>En esta sección recomendaremos algunos libros que creemos que te pueden ayudar a conocer más la historia de tu campo y que por lo tanto te ayudarán a <em>aprender de lo que ya se ha hecho</em>. Esto te ayudará a no cometer los mismos errores y más mejor, <strong>“pararte en hombros de gigantes”</strong> para poder ver más lejos.</p>

<p>Afortunadamente, de estos tenemos tanto libros en inglés como en español.</p>

<h3 id="historia-de-los-lenguajes-de-programación-años-1940-1959--manuel-rubio">Historia de los lenguajes de programación: Años 1940-1959 | Manuel Rubio</h3>

<p><a href="https://altenwald.com/book/histlangprog" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686489306/Screen_Shot_2023-06-11_at_7.14.50_g1d4lh.png" alt="Portada de Historia de los lenguajes de programación" class="align-center" /></a></p>

<p>Aquí, <a href="https://altenwald.com/">Manuel Rubio</a> explica el nacimiento de las lenguajes de programación y cómo esto va de la mano con la historia de la computación. Me gusta mucho de este libro que te da una visión más amplia que la centra en US que normalmente nos dan en la escuela y en la mayoría de los libros de computación.</p>

<p>Manuel hizo una investigación muy amplia, cuestiona algunas cosas implícitamente (<em>¿de verdad fue Ada Lovelace la primera programadora?</em>) y te da una visión más amplia de lo que significa la computación.</p>

<p>Me gusta mucho que resalta algunas cosas que nos siguen sucediendo hoy:</p>

<ul>
  <li>Nos cuesta naturalmente despegarnos del trabajo</li>
  <li>El campo siempre se ha resistido a las innovaciones</li>
  <li>Siempre creemos que lo que viene después de lo que ya sabemos tiene menos valor</li>
</ul>

<p>En el blog hicimos ya un <a href="/2022/06/11/resumen-historia-de-los-lenguajes-de-programacion.html" target="_blank" rel="noopener">resumen de este libro</a> y también hicimos un <a href="https://youtu.be/JDDEOi1jwDA">resumen en video</a> pero sinceramente te recomiendo leerlo completo.</p>

<p>Lo puedes comprar aquí: <a href="https://altenwald.com/book/histlangprog" target="_blank" rel="noopener">Historia de los lenguajes de programación</a>. Si <em>necesitas</em> un descuento para comprarlo, no dudes en contactarme o contactar a Manuel, que es muy accesible y una gran persona.</p>

<h3 id="mentes-geniales--camilo-chacón-sartori">Mentes Geniales | Camilo Chacón Sartori</h3>

<p><a href="https://www.amazon.com.mx/Mentes-geniales-ingenier%C3%ADa-software-ingenieros/dp/6077074797" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686488396/978607538877_xfcfmk.jpg" alt="Portada de Mentes Geniales" class="align-center" /></a></p>

<p><a href="https://camilochs.github.io/web/">Camilo Chacón Sartori</a> es un gran desarrollador de software, pronto Doctor en Ciencias de la computación y escritor. Ha escrito varios libros de programación o temas relacionados y en realidad es un escritor (y lector, ¿se puede ser buen escritor sin leer mucho?) muy prolífico.</p>

<p>En este libro, habla de 12 personas que han contribuido de diferentes formas al desarrollo de la computación y se les ha reconocido con el <strong>Premio Turing</strong>. Aunque no es un libro histórico en todo el sentido de la palabra, además de que no sigue una cronología, sí habla de importantes eventos históricos de la computación y desarrollo.</p>

<p>Lo recomiendo porque no sólamente te habla de los logros de las personas que menciona, analiza su entorno, te cuenta sobre su personalidad y extrae lecciones. Además, te deja las fuentes y referencias por si quieres leer más de ellos.</p>

<p>Algunos de los personajes que a mi me impactaron:</p>

<ul>
  <li><strong>Manuel Blum</strong> - El creador de CAPTCHA</li>
  <li><strong>Michael Stonebraker</strong> - El creador de PostgreSQL</li>
  <li><strong>Barbara Liskov</strong> - Una gran proponente de los tipos abstractos de datos</li>
  <li><strong>Leslie Lamport</strong> - Un gran matemático que ha contribuido a la computación con cosas como el algoritmo de Paxos y TLA+</li>
  <li><strong>Richard Manning Karp</strong> - Un matemático que ha contribuido a la computación con cosas como el algoritmo de Karp-Rabin y el análisis de complejidad de algoritmos</li>
</ul>

<p>Sin duda te llevarás muchas buenas lecciones y aprendizajes sobre el desarrollo de la computación de este libro. Lo puedes comprar aquí: <a href="https://amzn.to/43J2jfG" target="_blank" rel="noopener">Mentes Geniales</a>.</p>

<h3 id="dealers-of-lightning-xerox-parc-and-the-dawn-of-the-computer-ag--michael-a-hiltzik">Dealers of Lightning: Xerox PARC and the Dawn of the Computer Ag | Michael A. Hiltzik</h3>

<p><a href="https://www.goodreads.com/book/show/1101290.Dealers_of_Lightning" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686549204/61pJVqUUoJL._AC_UF1000_1000_QL80__gevadr.jpg" alt="Portada de Dealers of Lightning" class="align-center" /></a></p>

<p>En los años 70 y 80’s, la compañía <strong>Xerox</strong> (sí, la de las impresoras), consiguió un equipo de personas muy hábiles con la tecnología. Eran conocidos como el <strong>PARC</strong> (Palo Alto Research Center) y fueron los creadores de muchas de las tecnologías que hoy usamos, como:</p>

<ul>
  <li>La primera computadora personal</li>
  <li>La interfaz gráfica</li>
  <li>La impresora láser</li>
</ul>

<p>Todas estas tecnologías cambiaron el mundo, ayudando a crear la tecnología que hoy en día nos da trabajo y ha moldeado todas las industrias y la vida en general.</p>

<p>Este libro está basado en entrevistas con las personas que vieron de cerca estas creaciones y que muestran cómo es que Xerox nunca vio el potencial de las creaciones de este equipo de ingenieros. Si quieres aprender sobre la historia de la tecnología que tenemos hoy, ver cómo se forman equipos de altísimo rendimiento y aumentar tus posibilidades de crear algo que sea digno de mención, este libro es un gran recurso.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3Cs5QTm" target="_blank" rel="noopener">Dealers of Lightning</a>.</p>

<h3 id="la-catedral-de-turing--george-dyson">La Catedral de Turing | George Dyson</h3>

<p><a href="https://books.google.com.mx/books/about/La_catedral_de_Turing.html?id=QvjeBQAAQBAJ&amp;redir_esc=y" target="_blank" rel="noopener"><img src="" alt="Portada de La Catedral de Turing" class="align-center" /></a></p>

<p>En este libro se narra el comienzo de la computación después de la segunda guerra mundial y de todos los actores que tuvieron un impacto en el desarrollo de la computación moderna.</p>

<p>Es una crónica muy completa, junto con la explicación de muchos conceptos de la computación. El autor, hijo del físico <a href="https://www.profisica.cl/index.php/component/content/article/115-biografias/216-freeman-dyson?Itemid=542">Freeman Dyson</a>, tuvo acceso a muchos de los actores de la historia y a sus documentos, lo que le permitió hacer una libro que revela muchos detalles.</p>

<p>Sin duda es algo que muchos dedicados a esta área del conocimiento queremos leer. Lo puedes comprar aquí: <a href="https://amzn.to/3NoQKV6" target="_blank" rel="noopener">La Catedral de Turing</a>.</p>

<h2 id="otros-temas-relacionados">Otros temas relacionados</h2>

<p>Finalmente, como última parte de este artículo y de la serie de libros recomendados. Quiero poner algunas recomendaciones sobre temas y habilidades alternas a la programación que te ayudarán tanto como programador como a desarrollar tu carrera.</p>

<p>Algunos de estos temas o libros pensarás que no tienen nada que ver, pero te puedo asegurar que son habilidades y temas de soporte necesarios que te van a ayudar a resaltar.</p>

<h3 id="how-to-solve-it--george-polya">How to solve it | George Polya</h3>

<p><a href="https://math.hawaii.edu/home/pdf/putnam/PolyaHowToSolveIt.pdf" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686666135/71GFUNCh7hL._AC_UF1000_1000_QL80__q5xtrk.jpg" alt="Portada de How to solve it" class="align-center" /></a></p>

<p>George Polya fue un matemático del Siglo XX que contribuyó en el área de heurística y resolución de problemas. Fue un gran profesor al mismo tiempo que un gran investigador. Este libro es una combinación de ambas facetas de él: le preocupaba que las matemáticas se enseñaran bien al mismo tiempo que él era muy bueno haciendo matemáticas.</p>

<p>En este escrito, Polya establece los pasos a seguir para resolver problemas matemáticos, pero que por extensión también nos sirve a los desarrolladores para aprender a establecer un método para resolver los problemas que encontramos día a día en nuestro trabajo.</p>

<p>Los cuatro pasos que propone son:</p>

<ul>
  <li>Plantear y entender correctamente el problema</li>
  <li>Idear un plan para resolverlo (aquí da algunas técnicas comunes)</li>
  <li>Ejecutar el plan</li>
  <li>Revisar el resultado, el proceso y los aprendizajes</li>
</ul>

<p>Cuando lo leí, noté inmediatamente que era un libro que se debería dar en todas las escuelas relacionadas con la ingeniería o la computación, ya que nos da claridad, o por lo menos una idea de cómo empezar a resolver algo.</p>

<p>Lo puedes comprar aquí: <a href="https://amzn.to/43YlSQC" target="_blank" rel="noopener">How to solve it</a>, pero también lo puedes leer gratis: <a href="https://cienciaymatematicas.files.wordpress.com/2012/09/como-resolver.pdf">Cómo plantear y resolver problemas</a>.</p>

<h3 id="enfócate--cal-newport">Enfócate | Cal Newport</h3>

<p><a href="https://www.amazon.com.mx/Enf%C3%B3cate-estrategias-eficacia-trabajo-creativo/dp/607527998X" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686669189/71p-QmjVoWL._AC_UF1000_1000_QL80__ymtjyl.jpg" alt="Portada de Enfócate" class="align-center" /></a></p>

<p>La atención es uno de los bienes más preciados que tenemos los seres humanos, ya que a nuestra mente consciente sólo entra aquello a lo que la dirigimos o <em>enfocamos</em>. Pero cuando más beneficios da es cuando la enfocamos en una sola cosa por un periodo prolongado. Es como si nuestra mente fuera acelerando y tomando impulso para resolver un problema.</p>

<p>Esa es la tesis principal de “Enfócate”, un profesor de ciencias de la computación, muy interesado en temas como el logro académico, la productividad intelectual y el rendimiento a pesar de los obstáculos modernos.</p>

<p>En este libro, presenta un caso muy sólido para convencerte de apartar tiempo ininterrumpido para lograr tus tareas más difíciles. Además, relata cómo él lo logra y te da algunos consejos para que tú lo puedas hacer.</p>

<p>Creo que este libro es especialmente relevante para los desarrolladores de software por el entorno en el que trabajamos y porque muchos de los problemas que enfrentamos rebasan nuestra capacidad o conocimiento actual, por lo que necesitamos toda la ayuda posible para poder resolverlos.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/45YWNqJ" target="_blank" rel="noopener">Enfócate</a>.</p>

<h3 id="accelerate--nicole-forsgren">Accelerate | Nicole Forsgren</h3>

<p><a href="https://www.oreilly.com/library/view/accelerate/9781457191435/9" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686808509/41OoXs3W3nL._AC_UF1000_1000_QL80__knm3bn.jpg" alt="Portada de Accelerate" class="align-center" /></a></p>

<p><strong>¿Qué es lo que distingue a un equipo de alto rendimiento en la entrega de software de uno de bajo rendimiento?</strong> La medida más básica es el tiempo que toma un cambio en ser liberado o en llegar a producción. En este libro se habla de 1) cómo medir esto y 2) los factores que llevan a un equipo a mejorar esas métricas.</p>

<p>En realidad el libro es el resultado de un estudio de muchos equipos de desarrollo de software, en el que descubrieron varias cosas acerca de los equipos de alto rendimiento, entre ellas:</p>

<ul>
  <li>Las prácticas técnicas que tienen</li>
  <li>El tipo de liderazgo que los guía</li>
  <li>Qué tipo de arquitecturas siguen</li>
  <li>Qué prácticas de administración de recursos humanos siguen</li>
  <li>Cómo hacen todo el trabajo sostenible</li>
</ul>

<p>Además el libro habla de la forma en la que se realizó el estudio. Sin duda, es un libro muy valioso para los desarrolladores de software que quieren mejorar su rendimiento y el de sus equipos. Puedes comprarlo aquí: <a href="https://amzn.to/3JaPTEP" target="_blank" rel="noopener">Accelerate</a>.</p>

<h3 id="data-and-reality--william-kent">Data and Reality | William Kent</h3>

<p><a href="https://www.bkent.net/Doc/darxrp.htm" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686837219/41351CTT93L._AC_UF1000_1000_QL80__qgzcwb.jpg" alt="Portada de Data and Reality" class="align-center" /></a></p>

<p>Creo que como programadores, gran cantidad del tiempo lo dedicamos a procesar datos, o a crear representaciones datos de procesos externos a la computación. Esto es el <strong>modelado de datos</strong>, y es de lo que este libro habla, pero de manera bastante especial.</p>

<p><strong>William Kent</strong> hace un análisis profundo de las cosas a las que estamos acostumbrados: modelos, datos, registros, relaciones, atributos, entidades. Primero, <em>intenta</em> definirlas y después aplicarlas al modelado de datos, explorando las implicaciones de definición. Es un libro que te va a hacer pensar bastante, relacionado con la epistemología, la ontología y en nuestra percepción de la realidad.</p>

<p>Aunque el libro te deja con más dudas que respuestas, deja algo totalmente claro: no existe una forma <em>correcta</em> de modelar el mundo, sólo <strong>representaciones más convenientes</strong> para un caso u otro, ya que todas son arbitrarias.</p>

<p>Yo leí la <a href="https://amzn.to/42FOOMs">tercera edición</a>, que es la que única que está en producción actualmente. Esta tiene comentarios de otro modelador de datos muy experimentado, pero que según <a href="https://buttondown.email/hillelwayne/archive/data-and-reality-2nd-edition/">Hillel Wayne</a> cambió completamente el libro.Hillel recomienda leer la segunda edición, que aunque ya no está en impresión, lo puedes encontrar en <a href="https://buttondown.email/hillelwayne/archive/data-and-reality-2nd-edition/" target="_blank" rel="noopener">PDF</a>. Yo tengo pendiente leer la segunda edición, pero tengo altas expectativas ya que incluso la tercera me dejó grandes enseñanzas.</p>

<h2 id="conclusión">Conclusión</h2>

<p>Para avanzar en tu carrera no basta con aprender sólo habilidades técnicas, también hacen falta algunas meta-habilidades, habilidades paralelas y conocimiento de la historia de tu profesión.</p>

<p>Tener estos conocimientos te puede hacer destacar de los demás profesionales, y son especialmente útiles si quieres lograr un puesto de liderazgo. Así que sigue preparándote, recuerda que un libro bien editado es de las mejores inversiones que puedes hacer.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="libros" /><category term="desarrollo-de-carrera" /><category term="career" /><category term="historia" /><summary type="html"><![CDATA[Hablemos de los libros que te pueden ayudar a desarrollar tu carrera como desarrollador de software, escritos por personas con experiencia en el tema.]]></summary></entry><entry><title type="html">Libros que todo desarrollador de software debería leer: arquitectura</title><link href="https://blog.thedojo.mx/2023/06/08/libros-que-todo-desarrollador-de-software-deberia-leer-arquitectura.html" rel="alternate" type="text/html" title="Libros que todo desarrollador de software debería leer: arquitectura" /><published>2023-06-08T00:00:00-06:00</published><updated>2023-06-08T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/06/08/libros-que-todo-desarrollador-de-software-deberia-leer-arquitectura</id><content type="html" xml:base="https://blog.thedojo.mx/2023/06/08/libros-que-todo-desarrollador-de-software-deberia-leer-arquitectura.html"><![CDATA[<p>Hablemos sobre los libros de arquitectura de software que te enseñarán a tomar en cuenta los aspectos importantes de este campo y te pueden hacer mejor desarrollador. Como muchos desarrolladores con experiencia mencionan, la arquitectura es un rol, no un puesto de trabajo. Como rol, lo puedes ejercer parcialmente, y todos los desarrolladores deberíamos hacer arquitectura de software a diferentes escalas. El arquitecto que sólo hace diseños no debería existir.</p>

<p>En ninguno de estos libros vas a encontrar la sugerencia de que el arquitecto es un puesto de trabajo que sólo se dedica a hacer “planos”, sino que lo verás como una habilidad más que los desarrolladores de software debemos de tener. Empecemos con las recomendaciones, y como siempre, si quieres contribuir con alguna recomendación, puedes hacerlo en los comentarios.</p>

<h3 id="designing-data-intensive-applications--martin-kleppmann">Designing Data-Intensive Applications | Martin Kleppmann</h3>

<p><a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1685729621/Screen_Shot_2023-06-02_at_12.13.03_ws9bgp.png" alt="Portada de Designing Data Intensive Applications" class="align-center" /></a></p>

<p>Aceptémoslo: 90% de las aplicaciones útiles necesitan procesar grandes cantidades de datos para funcionar. A veces sólo a eso se dedican.</p>

<p>Es por eso que un libro como este, que habla del funcionamiento interno de diferentes sistemas que procesan grandes cantidades de datos, su arquitectura y las técnicas que los hacen funcionar, es un libro esencial para los desarrolladores de software modernos.</p>

<p>Algunos temas que vas a poder aprender son:</p>

<ul>
  <li>Las características de un buen sistema que procesa información</li>
  <li>Las estructuras de datos que le dan el poder sistemas como las bases de datos</li>
  <li>Modelos de datos y lenguajes de consulta</li>
  <li>Replicación</li>
</ul>

<p>Todos estos temas son esenciales para ser un buen desarrollador de software.</p>

<p>Puedes comprarlo aquí: <a href="https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/" target="_blank">Designing Data-Intensive Applications</a> o en <a href="https://www.amazon.com.mx/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321" target="_blank">Amazon</a></p>

<h3 id="sofware-architecture-for-developers-y-the-c4-model--simon-brown">Sofware Architecture for Developers y The C4 Model | Simon Brown</h3>

<p><a href="https://softwarearchitecturefordevelopers.com/" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1685744265/s_hero2x_h5emvj.png" alt="Portada de Software Architecture for Developers" class="align-center" /></a></p>

<p><a href="https://simonbrown.je/">Simon Brown</a> es un desarrollador y arquitecto que enseña a otros desarrolladores a practicar lo mejor posible la arquitectura de software.</p>

<p>Simon explica en <strong>Software Architecture for Developers</strong> lo que es la arquitectura de software, desde su comparación con la arquitectura de edificios, las cosas en las que se parece y diferencia, junto las responsabilidades y el conocimiento que es necesario para esta actividad.</p>

<p>En el <strong>“The C4 Model”</strong> explica una forma específica de comunicar la información que el diseño de un sistema contiene, incluyendo cuatro diagramas a diferentes niveles de abstracción, con el objetivo de que quienes lo analicen se lleven una buena idea de cómo funciona el sistema.</p>

<p>Puedes comprarlos aquí: <a href="https://leanpub.com/b/software-architecture" target="_blank">Software Architecture for Developers</a>, también puedes comprarlos por separado, pero te llevas un mejor valor si los compras juntos.</p>

<h3 id="fundamentals-of-software-architecture--mark-richards--neal-ford">Fundamentals of Software Architecture | Mark Richards &amp; Neal Ford</h3>

<p><a href="https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686180937/91HMsnYFsKL._AC_UF1000_1000_QL80__pyue4w.jpg" alt="Portada de Fundamentals of Software Architecture" class="align-center" /></a></p>

<p>¿Quieres obtener el conocimiento más básico de arquitectura de software? En este libro, los autores te lo enseñarán.</p>

<p>Empieza desde lo esencial y avanza hasta las mejores prácticas para analizar las características que necesitas implementar. El libro pasa (a grandes rasgos) por los siguientes temas:</p>

<ol>
  <li>¿Qué es la arquitectura de software?</li>
  <li>Cómo adquirir la forma de pensar de un arquitecto</li>
  <li>Estilos arquitectónicos</li>
  <li><strong>Softskills</strong> para arquitectos</li>
</ol>

<p>Es un gran libro con muy buenas temas para empezar a practicar directamente, además escrito por expertos en el tema.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3MZqT4L" target="_blank">Fundamentals of Software Architecture</a></p>
<h3 id="software-architecture-the-hard-parts--neal-ford-mark-richards-pramod-sadalage--zhamak-dehghani">Software Architecture the Hard Parts | Neal Ford, Mark Richards, Pramod Sadalage &amp; Zhamak Dehghani</h3>

<p><a href="https://www.oreilly.com/library/view/software-architecture-the/9781492086888/" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686178147/811EFOBsU7L._AC_UF1000_1000_QL80__prpedd.jpg" alt="Portada de Software Architecture the Hard Parts" class="align-center" /></a></p>

<p>Los sistemas distribuidos son lo que más se desarrolla hoy en día, debido a las necesidades de la industria. Saber crear arquitecturas distribuidas es algo que un desarrollador avanzado debe dominar.</p>

<p>En este libro se habla de tres cosas principales:</p>

<ol>
  <li>Buenas ideas para empezar a hacer y documentar arquitecturas</li>
  <li>Separación: diseñar los componentes, los módulos, separación de datos, etc.</li>
  <li>Juntar todo de nuevo: contratos, service meshes, transacciones distribuidas, flujos de trabajo, etc.</li>
</ol>

<p>Es un libro que maneja temas avanzados y temas sobre los que tienes que saber bastante antes de empezar a leer el libro, así que te recomiendo empezar con los libros anteriores, además de obtener nociones de sistemas distribuidos.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3MWLtTe" target="_blank">Software Architecture the Hard Parts</a></p>

<h3 id="domain-driven-design--eric-evans">Domain Driven Design | Eric Evans</h3>

<p><a href="https://www.amazon.com.mx/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686285460/61aFldsgAmL._AC_UF1000_1000_QL80__telho9.jpg" alt="Portada de Domain Driven Design" class="align-center" /></a></p>

<p>Este libro es la Biblia del diseño dirigido por el dominio, un estilo que se enfoca en crear un modelo de software que refleje el negocio (o el <em>dominio</em>) de la mejor manera posible.</p>

<p>La principal idea de esta técnica es que los desarrolladores de software se entiendan y puedan hablar como un experto más en el dominio. Esto se logra creando un lenguaje común entre los desarrolladores y los expertos en el dominio, soportado por el modelo de software que se crea.</p>

<p>Creo que aunque no siempre es aplicable, es bueno conocerlo y tener listas las técnicas para la aplicación completa o parcial de este estilo de diseño.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3CgwaQx" target="_blank">Domain Driven Design</a>.</p>

<p>Un libro alternativo a este, más moderno y ligero es: <a href="https://www.oreilly.com/library/view/learning-domain-driven-design/9781098100124/" target="_blank">Learnig Domain Driven Design</a>.</p>

<h3 id="system-design-interview-1-y-2--alex-xu">System Design Interview 1 y 2 | Alex Xu</h3>

<p><a href="https://www.youtube.com/channel/UCZgt6AzoyjslHTC9dz0UoTw" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1686286291/51xUZItrHJL._AC_UF1000_1000_QL80__kzvtkb.jpg" alt="Portada de System Design Interview 1" class="align-center" /></a></p>

<p>Estos libros te enseña de manera concisa las bases del diseño de sistemas de software, desde los principios de diseño, hasta las diferentes partes que componen un sistema complejo que necesita soportar muchos usuarios.</p>

<p><strong>Alex Xu</strong> es un buen creador de contenido de muy buena calidad y en estos libros explica lo necesario de forma lo suficientemente sencilla. Te lo recomiendo si quieres aprender sobre una gran cantidad de temas relacionados con el diseño de sistemas y la arquitectura de software.</p>

<p>Puedes ver la página en la que publica más información acerca de lo que hace en: <a href="https://bytebytego.com">ByteByteGo</a> {:target=”_blank”}, además de que puedes suscribirte para aprender más sobre el diseño de sistemas y prepararte para entrevistas de trabajo.</p>

<p>Lo puedes comprar aquí: <a href="https://amzn.to/3qARtK1" target="_blank">System Design Interview 1</a> y <a href="https://amzn.to/3J43CgP" target="_blank">System Design Interview 2</a></p>

<h2 id="conclusión">Conclusión</h2>

<p>Hay una buena colección de libros que te pueden ayudar a ser un <strong>mejor desarrollador</strong> de software mejor preparado, fortaleciendo una parte que todos los desarrolladores tenemos que ejercer: la arquitectura de software.</p>

<p>Empieza con estos libros uno a uno, o <strong>úsalos como referencia</strong> para cuando tengas que resolver un problema específico.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="arquitectura" /><category term="libros" /><summary type="html"><![CDATA[Hablemos ahora de los libros de arquitectura de software que te pueden ayudar a destacar en tu carrera como desarrollador de software.]]></summary></entry><entry><title type="html">Pilares fundamentales de las ciencias de la computación</title><link href="https://blog.thedojo.mx/2023/05/30/pilares-fundamentales-de-las-ciencias-de-la-computacion.html" rel="alternate" type="text/html" title="Pilares fundamentales de las ciencias de la computación" /><published>2023-05-30T00:00:00-06:00</published><updated>2023-05-30T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/05/30/pilares-fundamentales-de-las-ciencias-de-la-computacion</id><content type="html" xml:base="https://blog.thedojo.mx/2023/05/30/pilares-fundamentales-de-las-ciencias-de-la-computacion.html"><![CDATA[<blockquote>
  <p>The computer is the tool but not the object of study. - <strong>Peter Denning</strong></p>
</blockquote>

<p>Entender la computación <strong>profundamente</strong> es importante para cualquier desarrollador de software, porque al avanzar en su carrera se encontrará con problemas relacionados con las principios más fundamentales de la computación. Piensa en los siguientes casos:</p>

<ul>
  <li>¿Es mejor mantener este sistema como un monolito o dividirlo en <em>microservicios</em>?</li>
  <li>¿Cómo puedo hacer que este sistema sea más <strong>rápido</strong>?</li>
  <li>¿Cómo puedo hacer mi base de código más <strong>mantenible</strong>?</li>
  <li>¿Cómo puedo <strong>representar mejor</strong> este problema en código?</li>
  <li>¿Cómo puedo <strong>asegurar el mayor tiempo de actividad</strong> posible en el sistema?</li>
  <li>¿Puedo <strong>garantizar</strong> que los mensajes que envío lleguen a su destino?</li>
  <li>¿Cómo evito que la <strong>complejidad</strong> de esta base de código crezca más de lo que la voy a poder controlar?</li>
</ul>

<p>Tener herramientas para entender estos problemas evitará que te estanques o frustres, y te habilitará para crear sistemas que cumplan con lo se necesita de ellos. Además, te hará un miembro más valioso de cualquier organización.</p>

<p>Un conocimiento sólido de cómo funciona la computación te ayudará por lo menos en los siguientes puntos:</p>

<p>. Entender los entender los <strong>límites</strong> de lo que se puede hacer
 . Diseñar mejor software (y hardware si se necesita)
 . Trasladar mejor los problemas del mundo real a algo que la computadora pueda entender
 . Explicar en palabras comunes tus ideas
 . Descomponer los problemas computacionales en sus componentes básicos
 . Disfrutar más de tu trabajo</p>

<p>Entender la computación profundamente incluye “<em>mejorar tu lógica de programación</em>”, un objetivo que muchos quieren lograr para obtener un nuevo puesto o trabajar en la empresa de sus sueños.</p>

<p>En este artículo vamos a hablar de los seis aspectos que tienes que entender acerca de la computación, digamos que son sus <strong>principios fundamentales</strong>. Además veremos cómo se relaciona esto con las cosas comunes que oímos acerca de las ciencias de la computación: complejidad, algoritmos, estructuras de datos, etc.</p>

<p>Aunque nos hemos dividido en áreas de dominios como:</p>

<p>. Inteligencia artificial
. Sistemas distribuidos
. Computación en la nube
. Tratamiento y análisis de datos
. Seguridad informática
. Muchas más y siguen apareciendo</p>

<p>Todas estas áreas que tienen que ver con la computación <strong>obedecen a los mismos principios de los que hablaremos</strong> en este artículo.</p>

<p>Pero antes definamos qué es la <strong>computación</strong>.</p>

<h2 id="qué-es-la-computación">¿Qué es la Computación?</h2>

<p>Aquí vamos a hablar de la computación como la <strong>disciplina de usar las computadoras y el software</strong> para lograr nuestros objetivos, sean estos científicos, de negocios, de entretenimiento, etc.</p>

<p>Estos objetivos pueden ser tan arbitrarios y diversos como lo es la cantidad de personas que actualmente usan las computadoras para sus propios objetivos.</p>

<p>La computación se puede ver desde tres perspectivas diferentes:</p>

<blockquote>
  <p>It has been argued that there are three particularly lucid traditions in computer science: the theoretical tradition, the empirical tradition, and the engineering tradition. - <strong>Peter Denning</strong></p>
</blockquote>

<p>Según esto podemos ver la computación desde tres perspectivas:</p>

<ul>
  <li>La tradición teórica: ver la computación como una ciencia</li>
  <li>La tradición empírica: ver la computación en la práctica</li>
  <li>La tradición de la ingeniería: ver la computación como una herramienta</li>
</ul>

<p>Con tradición, el Denning se refiere a la forma en la que se ha desarrollado históricamente el área. Cada una de estas tradiciones ha desarrollado el área de una forma diferente, pero todas son importantes para entender la computación. Para que seamos profesionales completos, debemos entender lo suficiente de cada una de las áreas.</p>

<h2 id="los-límites-de-la-computación">Los límites de la computación</h2>

<p>Algunas personas piensan que todo es posible dentro de una computadora. Sin embargo, “The Great Principles of Computing” nos dice que:</p>

<blockquote>
  <p>Computing is governed by scientific principles and laws that tell us what computers can and cannot do. - <strong>Peter Denning</strong></p>
</blockquote>

<p>Que podemos traducir como:</p>

<blockquote>
  <p>La computación <strong>está gobernada por principios</strong> y leyes científicas que nos dicen qué pueden y qué no pueden hacer las computadoras. - Peter Denning</p>
</blockquote>

<p>Así que las computación tiene límites y estos están dictados por los principios científicos que conocemos de otras áreas como la física y las matemáticas.</p>

<h2 id="historia-y-nacimiento-de-la-computación-moderna">Historia y nacimiento de la computación moderna</h2>

<p>Aunque la computación en sí misma es mucho más que las computadoras que usamos, es importante entender cómo llegamos a este punto y junto con eso, las limitaciones que esto nos ha creado, así como las oportunidades que tenemos.</p>

<p>Entender esta historia no te dará súper poderes de programación, pero te ayudará a saber donde estás parado en el flujo del tiempo.</p>

<p>Este contexto te dará más bases para buscar por diferentes lados.</p>

<h2 id="modelos-de-computación">Modelos de computación</h2>

<p>Un modelo de computación es una forma de representar una  mediante un sistema matemático. Esto nos permite analizar el problema y encontrar soluciones.</p>

<h2 id="comunicación">Comunicación</h2>

<p>Gran parte de la computación tiene que ver con transmitir datos entre diferentes partes que ejecutan los cálculos, pueden ser diferentes computadoras o diferentes ejecutores de una misma computadora. También puede incluir mover información entre diferentes lugares de almacenamiento.</p>

<p>Asegurarnos de que la información llegue a su destino consistentemente y sin errores (o poder detectarlos y corregirlos) es uno de los problemas que la computación tiene que resolver. Esto es especialmente importante en los sistemas distribuidos.</p>

<h2 id="cálculos-o-computación">Cálculos o Computación</h2>

<p>En este “cristal” queremos entender que es lo que puede ser calculado o resuelto usando una computadora. Esto incluye conocer la complejidad de las soluciones y en general, si es posible resolver el problema, en qué tiempo y en <strong>qué medios de cómputo</strong>.</p>

<p>Para esto se necesita un poco de matemáticas, pero además creatividad e inventiva, ya que hay que pensar en las diferentes formas en las que un algoritmo se puede comportar. Además, hay que saber notar y demostrar cuando un problema no tiene solución, o las soluciones que existen no son factibles.</p>

<h2 id="coordinación">Coordinación</h2>

<p>No es siempre cierto que <em>“el orden de los factores no altera el producto”</em>. Además, para aprovechar el poder completo de un sistema, normalmente se necesita coordinar las diferentes partes que lo componen. Esto es cierto sobre todo con los sistemas de cómputo actuales, pero además con los sistemas de software que ocupan muchas computadoras.</p>

<p>La coordinación tiene que ver con la concurrencia, el paralelismo y la forma de compartir datos y ponerse de acuerdo entre múltiples ejecutores para realizar una tarea de forma correcta.</p>

<h2 id="recolección">Recolección</h2>

<p>¿Cómo conseguimos los datos para procesar? ¿O cómo recogemos los resultados de la computación? ¿Cómo los almacenamos y acomodamos? Esto es la recolección de datos. Además en dónde guardarla, en qué estructura ponerla y cómo recuperarla, es parte importante de este pilar de la computación.</p>

<h2 id="evaluación">Evaluación</h2>

<p>Comprobar que los resultados de la computación son correctos, diseñar sistemas que puedan verificar los resultado y además medir el desempeño de los sistemas es una parte fundamental para hacer sistemas útiles.</p>

<h2 id="diseño">Diseño</h2>

<p>No sólo se trata de echar código, también hay que pensarlo bien antes de ponerlo. El tiempo gastado en el diseño de un sistemas puede pagar dividendos grandes en el futuro. Los sistemas complejos, que son todos los que existen hoy, deben descomponerse en módulos para que sean manejables por los seres humanos.</p>

<p>Cómo descomponerlos, qué interfaces crear y qué tipo módulos tendrá el sistema es dominio del diseño de la computación.</p>

<h2 id="más-recursos">Más recursos</h2>

<p>En  este blog tenemos un post dedicado a los libros que te pueden servir para aprender más acerca de las ciencias de la computación: <a href="https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs.html">Libros para aprender ciencias de la computación</a>.</p>

<p>También puedes visitar la página <a href="https://teachyourselfcs.com/">Teach Yourself Computer Science</a>, que tiene una lista de los temas que debes aprender y los recursos que puedes usar para aprenderlos.</p>

<h2 id="conclusión">Conclusión</h2>

<p>Aprender ciencias de la computación es algo que todo desarrollador debe <strong>aprender en su carrera</strong>. Te puede ayudar a ser más eficiente, a disfrutar mucho más de tu trabajo y resolver problemas que antes no creías posibles. Pero como acabas de ver, es un camino largo, que requiere de bastante esfuerzo sostenido.</p>

<p>Sigue aprendiendo y verás cómo cada cosa nueva que le sumes a tus bases de conocimiento te ayudará a ser un <strong>mejor profesional</strong>.</p>

<h2 id="referencias">Referencias</h2>

<p>A continuación algunas de las fuentes usadas para este artículo:</p>

<ul>
  <li>The Great Principles of Computing, Peter Denning y Craig Martell</li>
  <li>Teach Yourself Computer Science, https://teachyourselfcs.com/</li>
  <li>Concrethe Mathematics, Ronald L. Graham, Donald E. Knuth y Oren Patashnik</li>
  <li>The Art of Computer Programming, Donald E. Knuth</li>
</ul>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="computer-science" /><category term="cs" /><category term="ciencias-de-la-computación" /><summary type="html"><![CDATA[Siempre que se habla de ciencias de la computación se habla de complejidad, algoritmos, etc. Pero hay cosas más importantes que tenemos que comprender.]]></summary></entry><entry><title type="html">Libros que todo desarrollador de software debería leer: desarrollo</title><link href="https://blog.thedojo.mx/2023/05/25/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo.html" rel="alternate" type="text/html" title="Libros que todo desarrollador de software debería leer: desarrollo" /><published>2023-05-25T00:00:00-06:00</published><updated>2023-05-25T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/05/25/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo</id><content type="html" xml:base="https://blog.thedojo.mx/2023/05/25/libros-que-todo-desarrollador-de-software-deberia-leer-desarrollo.html"><![CDATA[<p>Ya hablamos en un <a href="https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs.html">artículo anterior</a> sobre
los libros que te haría bien leer en el tema de ciencias de la computación.
Ahora vamos a hablar sobre el tema de desarrollo de software, cómo crear mejor software y con mejor calidad.
En este artículo también se incluyen libros sobre ingeniería de software por ser la disciplina más
confiable para crear software de calidad.</p>

<p>Empecemos con las recomendaciones, espero que te sirvan.</p>

<h3 id="a-philosophy-of-software-design---john-ousterhout">A Philosophy of Software Design - John Ousterhout</h3>

<p><a href="https://web.stanford.edu/~ouster/cgi-bin/book.php" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1684113024/Screen_Shot_2023-05-14_at_19.10.08_ocrzmo.png" alt="Portada de a Philosophy of Software Design" class="align-center" /></a></p>

<p>Este es un libro que te da muchos consejos sobre cómo crear bases de código que sean más fáciles de evolucionar, mantener y sobre todo, de entender. Está escrito por <a href="https://web.stanford.edu/~ouster/cgi-bin/home.php">John Ousterhout</a>, el creador de RAMCloud, TCL/TK y co-autor del algoritmo de consenso para sistemas distribuidos <a href="https://raft.github.io/">Raft</a>.</p>

<p>Es un libro muy práctico y corto, que da consejos concretos <em>sin grandes ínfulas de superioridad</em> sobre cómo escribir mejor código. El tema principal es la complejidad, cuáles son sus síntomas y cómo puedes evitarla o manejarla. El libro se centra en <em>en la experiencia del autor</em> tanto escribiendo código y haciendo sistemas, como enseñando a otros a hacerlo en su clase <strong>“Software Design Studio”</strong>.</p>

<p>Esto último (lo de dar clases) le da una visión privilegiada: ver los errores comunes que cometen los principiantes le permite atacar directamente los problemas en los que nos metemos por un mal <strong>diseño</strong>.</p>

<p>Ousterhout se centra en los temas que para mi son los fundamentales de desarrollo de software:</p>

<ol>
  <li>La complejidad y sus causas</li>
  <li>La abstracción</li>
  <li>La modularidad y los criterios para dividir un sistema en módulos</li>
  <li>Ocultar información de forma efectiva</li>
  <li>La mejor forma de comunicar información al resto del equipo</li>
</ol>

<p>Si quieres darle una probada antes de comprarlo, puedes leer el <a href="https://web.stanford.edu/~ouster/cgi-bin/book.php" target="_blank" rel="noopener">primer capítulo</a>.</p>

<p>Y en este blog tenemos varios artículos hablando de sus ideas, puedes buscarlos con la etiqueta <a href="https://blog.thedojo.mx/tags/#aposd" target="_blank">APoSD</a>.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3q4NEwd" target="_blank">A Philosophy of Software Design</a></p>

<h3 id="making-software---editado-por-andy-oram--greg-wilson">Making Software - Editado por Andy Oram &amp; Greg Wilson</h3>

<p><a href="https://www.oreilly.com/library/view/making-software/9780596808310/" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1684245311/Screen_Shot_2023-05-16_at_7.54.35_djc8uk.png" alt="Portada de Making Software" class="align-center" /></a></p>

<p>En este libro se habla de las prácticas <em>comunes</em> que <strong>creemos que nos ayudarán</strong> a desarrollar mejor software, pero desde el punto de vista del escepticismo. Se analizan estas prácticas y nos dice si realmente nos ayudan o no, y <strong>por qué</strong>, todo esto con base en estudios realizados a lo largo del tiempo en muchos equipos, junto con las opiniones de expertos en el tema.</p>

<p>Los resultados probablemente te sorprendan, pero hay que recordar que ninguna práctica se comporta de la misma manera universalmente, es decir, lo que te sirva a ti puede no servirle a otro equipo. Así que aunque es una buena guía, nada es una verdad absoluta.</p>

<p>Creo que este libro es <strong>fundamental</strong> para desarrollar una relación sana con las “buenas prácticas” y cuestionarte todas las cosas que te dicen respecto al desarrollo de software.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3oxZHBK" target="_blank">Making Software</a></p>

<h3 id="modern-software-engineering---dave-farley">Modern Software Engineering - Dave Farley</h3>

<p><a href="https://www.davefarley.net/?p=352" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1684993243/61qXAFawZVL._AC_UF1000_1000_QL80__mbrnes.jpg" alt="Portada de Modern Software Engineering" class="align-center" /></a></p>

<p>Escrito por un gran ingeniero de software con mucha experiencia, explica técnicas efectivas para la organización del trabajo y la liberación de software lo más rápido posible. Dave es un proponente muy fuerte de la entrega continua y de la automatización de pruebas, y en este libro explica las técnicas asociadas a estos temas.</p>

<p>Además explica por qué la ingeniería de software no tiene que ser una carga burocrática. La premisa básica es que toda práctica que no nos ayude a hacer mejor software más rápido, es una mala idea y no debería contar como “ingeniería”.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3MzYXnD" target="_blank">Modern Software Engineering</a></p>

<h2 id="the-mythical-man-month---frederick-brooks">The Mythical Man-Month - Frederick Brooks</h2>

<p><a href="https://en.wikipedia.org/wiki/The_Mythical_Man-Month" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1684992740/51Al66uQmcL._SX433_BO1_204_203_200__f2yws3.jpg" alt="Portada de The Mythical Man-Month" class="align-center" /></a></p>

<p>Frederick Brooks era un ingeniero de la computación que trabajó en el IBM System/360 y en el OS/360, sistemas muy grandes y que le dieron para después describir su experiencia en la serie de ensayos que conforman este libro.</p>

<p>Como te lo podrás imaginar, aprendió mucho en los proyectos que realizó, sobre todo de la administración de equipos. En estos ensayos podrás llevarte sus aprendizajes. El además es el autor de otros ensayos como “No Silver Bullet” y de la famosa frase:</p>

<blockquote>
  <p>“Adding manpower to a late software project makes it later.”</p>
</blockquote>

<blockquote>
  <p>“Añadir personal a un proyecto de software atrasado, lo atrasa más.”</p>
</blockquote>

<p>Puedes comprar el libro aquí: <a href="https://amzn.to/3q8IG1D" target="_blank">The Mythical Man-Month</a>, pero también puedes leer la primera edición de forma gratuita aquí: <a href="https://web.eecs.umich.edu/~weimerw/2018-481/readings/mythical-man-month.pdf" target="_blank">The Mythical Man-Month en la universidad de Virginia</a>.</p>

<h3 id="refactoring---martin-fowler">Refactoring - Martin Fowler</h3>

<p><a href="https://martinfowler.com/books/refactoring.html" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/v1684994739/refact2_og8gz8.jpg" alt="Portada de Refactoring" class="align-center" /></a></p>

<p>Uno de los grandes clásicos en el desarrollo de software, establece la importancia y la forma en la que puedes refactorizar tu código. Refactorizar significa cambiar la implementación de tu código, haciéndola mejor, sin cambiar su funcionamiento externo, o la función que provee.</p>

<p>Martin Fowler también es uno de los más grandes nombres en el campo del desarrollo de software por su gran experiencia tanto desarrollando software como escribiendo, por lo que puedes estar seguro de que sus consejos son de gran valor.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3osHZj6" target="_blank">Refactoring</a></p>

<h3 id="software-engineering-at-google--titus-winters-tom-manshreck-hyrum-wright">Software Engineering at Google | Titus Winters, Tom Manshreck, Hyrum Wright</h3>

<p><a href="https://abseil.io/resources/swe-book" target="_blank"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_400/v1685757582/swe_at_google.2.cover_y3khmc.jpg" alt="Portada de Software Engineering at Google" class="align-center" /></a></p>

<p>Este libro explica la forma en la que se practica la ingeniería de software
en Google, uno de los más grandes creadores de software de la historia. El libro abarca tres grandes áreas:</p>

<ul>
  <li>La cultura</li>
  <li>Los procesos</li>
  <li>Las herramientas</li>
</ul>

<p>El libro no habla tanto de código sino que se centra más en el <em>desarrollo de software</em>.</p>

<p>Algo que hay que tener en cuenta es que Google no tiene el monopolio de la verdad sobre el desarrollo de software, así que esta es una perspectiva que te va a dar ideas, y una visión más amplia de cómo desarrollar software.</p>

<p>Puedes comprarlo en <a href="https://amzn.to/43EiOJt" target="_blank">Amazon</a> o leerlo gratis aquí: <a href="https://abseil.io/resources/swe-book/html/toc.html" target="_blank">Software Engineering at Google</a></p>

<h2 id="conclusión">Conclusión</h2>

<p>Estos son los libros que pude pensar como las mejores recomendaciones para aprender desarrollo de software.</p>

<p>No incluyo deliberadamente el más famoso de todos por lo menos entre los desarrolladores latinoamericanos: Clean Code. ¿Por qué? Aunque dice cosas útiles, muchas son obvias, explicadas mejor en otros libros y además el tono de superioridad que tiene el autor es muy molesto. Quienes lo han interiorizado se creen mejores simplemente por conocer esos consejos, que (<em>aquí viene lo peor</em>) a veces son contraproducentes.</p>

<p>Si tienes alguna recomendación extra, puedes dejarla en los comentarios.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="libros" /><category term="desarrollo-de-software" /><summary type="html"><![CDATA[Hablemos ahora de los libros relacionados con desarrollo de software que te ayudarán a mejorar tu carrera y a tener mejores proyectos.]]></summary></entry><entry><title type="html">Libros que todo desarrollador de software debería leer: ciencias de la computación</title><link href="https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs.html" rel="alternate" type="text/html" title="Libros que todo desarrollador de software debería leer: ciencias de la computación" /><published>2023-05-13T00:00:00-06:00</published><updated>2023-05-13T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs</id><content type="html" xml:base="https://blog.thedojo.mx/2023/05/13/libros-que-todo-desarrollador-de-software-deberia-leer-cs.html"><![CDATA[<p>Hablemos de algunos libros que te pueden ayudar a avanzar en tu carrera como desarrollador de software, por diferentes razones, por ejemplo te ayudarán a fortalecer tus bases, o te darán ideas para hacer mejor software, mejores arquitecturas o a mejorar como profesional en general.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<p>Empecemos por los fundamentos mismos de lo que hacemos. Los siguientes libros te ayudarán a entender mejor cómo  funciona la computación desde sus raíces.</p>

<p>Aunque esta sección está en primer lugar, no significa que debas leerlos antes que todo. Por ejemplo, cuando aprendiste español no aprendiste primero teoría de lenguajes, semántica, semiótica y todas las cosas que soportan el lenguaje. Aprendiste a hablar y a escribir, y luego, para profundizar aprendiste los soportes teóricos, por gusto o por necesidad. Lo mismo pasa con la computación.</p>

<p>Lamentablemente, la mayoría de los libros de este artículo están en inglés. Pero aquí viene otro consejo que hemos aprendido con los golpes de los años: <strong>la gran mayoría de la información en ciencias de la computación está en inglés, y es un idioma indispensable para un desarrollador de software.</strong></p>

<p>Empecemos con la lista de libros.</p>

<h2 id="computational-thinking---peter-j-denning-y-matti-tedre">Computational Thinking - Peter J. Denning y Matti Tedre</h2>

<p><a href="https://mitpress.mit.edu/9780262536561/computational-thinking/" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683954800/content_ylyx0g.png" alt="Portada de Computational Thinking" class="align-center" /></a></p>

<p>Este libro me parece una lectura fundamental para todos los estudiantes de ciencias de la computación pero también para desarrolladores de software con más experiencia práctica.</p>

<p>Está escrito por <strong>Matti Tedre</strong> y <strong>Peter J. Denning</strong>, y es una lectura muy amena y fácil de entender. Pero no por eso es superficial, trata profundamente una pregunta: ¿qué es el pensamiento computacional? Explora el tema por varios aspectos:</p>

<ul>
  <li>Las máquinas y el nacimiento de la computación como disciplina</li>
  <li>La ingeniería y el diseño de software</li>
  <li>La educación de las ciencias de la computación</li>
  <li>La relación de la ciencia tradicional con la computación</li>
</ul>

<p>Los dos autores son parte del grupo que se encarga de la recomendación de los temarios de ciencias de la computación de la ACM. Por lo que tienen una visión muy amplia de lo que es la computación y cómo se enseña. Este libro te dejará claro de lo que hablamos con “computación” y el tipo de pensamiento que se requiere para hacerla. También aclarará si todos necesitan estudiarla y algunos mitos alrededor de ella.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/3M3Tg2l" target="_blank" rel="noopener">https://amzn.to/3LJf95S</a></p>

<h2 id="computer-science-distilled---wladston-ferreira-filho">Computer Science Distilled - Wladston Ferreira Filho</h2>

<p><a href="https://code.energy/computer-science-distilled/" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683955925/book_ipakcs.jpg" alt="Portada de Computer Science Distilled" class="align-center" /></a></p>

<p>Para muchos esto parecerá una mala elección, sin embargo, para mi este libro tiene todo lo que se necesita para ser una buena introducción a los temas principales de la ciencias de la computación, de manera práctica y sencilla. Es cierto que por su extensión no puede tratar ninguno a profundidad, pero te da una visión amplia de todos los temas que tienes que conoces.</p>

<p>Explica de manera sencilla los pilares principales de las ciencias de la computación y lo mejor es que te da referencias para que puedas profundizar en cada uno de los temas. Te servirá más si eres un principiante, pero aún si eres un desarrollador experimentado te puede servir para reforzar algunos temas que no tengas claro o para tener una referencia rápida de algunos temas.</p>

<p>Este es un libro que creo que <strong>sí debes leer lo más temprano posible en tu carrera</strong>.</p>

<p>Puedes comprarlo en <a href="https://amzn.to/3nZVHKb" target="_blank" rel="noopener">Amazon</a> o en su <a href="https://code.energy/computer-science-distilled/" target="_blank" rel="noopener">página oficial</a>.</p>

<h3 id="the-elements-of-computing-systems-building-a-modern-computer-from-first-principles---noam-nisan-y-shimon-schocken">The Elements of Computing Systems: building a modern computer from first principles - Noam Nisan y Shimon Schocken</h3>

<p><a href="https://www.nand2tetris.org/book" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683954809/Screen_Shot_2023-05-12_at_8.38.27_nzachg.png" alt="Portada de The Elements of Computing Systems" class="align-center" /></a></p>

<p>En este libro encontrarás un entendimiento básico del funcionamiento de una computadora digital, pero desde el mismísimo fondo. Es un libro MUY profundo, en el que contruirás una computadora digital desde cero, tanto el hardware como el software.</p>

<p>No es un libro que recomiende leer al principio de la carrera ni mucho menos como un prerrequisito para empezar a trabajar, es más bien, algo que ir consumiendo con los años, para entender cada vez mejor cómo funciona fundamentalmente el aparato que usas a diario.</p>

<p>El principio más fundamental de este libro es “aprender haciendo”, por que lo que mejor se aprende es <strong>mediante la práctica</strong>.</p>

<p>Lo puedes comprar aquí: <a href="https://amzn.to/3nXJvJR" target="_blank" rel="noopener">The Elements of Computing Systems</a></p>

<h2 id="the-great-principles-of-computing---peter-j-denning">The Great Principles of Computing - Peter J. Denning</h2>

<p><a href="https://amzn.to/3O8gk1u" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1684031325/great_principles_i5btll.jpg" alt="Portada de The Great Principles of Computing" class="align-center" /></a></p>

<p>En este libro, Peter J. Denning y Craig H. Martell explican los principios que le dan forma e influyen en el campo de la coputación. Estos principios están divididos en 6 categorías:</p>

<ul>
  <li>Cálculos</li>
  <li>Comunicación</li>
  <li>Coordinación</li>
  <li>Recolección</li>
  <li>Diseño</li>
  <li>Evaluación</li>
</ul>

<p>Cada uno de estos principios limitan y le dan formas a las tecnologías que usamos, por lo que entenderlos profundamente sin duda te ayudará a ser mejor usando las computadoras y más específicamente, a ser un mejor desarrollador de software.</p>

<p>No creo que este libro se tenga que leer antes de cualquier otra cosa, pero sí siento que mientras más temprano lo hagas en tu carrera, mejor.</p>

<p>Lo puedes comprar aquí: <a href="https://amzn.to/3O8gk1u" target="_blank" rel="noopener">The Great Principles of Computing</a></p>
<h3 id="the-algorithm-design-manual---steven-s-skiena">The Algorithm Design Manual - Steven S. Skiena</h3>

<p><a href="https://amzn.to/42GGAnv" target="_blank" rel="noopener"><img src="https://res.cloudinary.com/hectorip/image/upload/c_scale,w_350/v1683777664/Screen_Shot_2023-05-10_at_21.48.04_cwmr6v.png" alt="Portada de The Algorithm Design Manual" class="align-center" /></a></p>

<p>Este es uno de los mejores libros para aprender sobre algoritmos y estructuras de datos, es una lectura que te ayudará mucho.</p>

<p>Está escrito por <strong>Steven S. Skiena</strong> y va en su 3ra edición. Y es una lectura que puede ayudarte de manera <em>no tan compleja</em> a aprender sobre algoritmos y estructuras de datos. Es un libro bastante extenso y que va avanzando poco a poco en los temas relacionados con algoritmos y estructuras de datos, bellamente ilustrado, sin demasiada carga matemática.</p>

<p>Tampoco es un libro que te tengas que leer de principio a fin, o muy temprano en la carrera. Puedes empezar con los primeros capítulos lo más pronto posible e irlo estudiando con el tiempo, o dejando los temas más avanzados para cuando los necesites puntualmente.</p>

<p>Puedes comprarlo aquí: <a href="https://amzn.to/42GGAnv" target="_blank" rel="noopener">The Algorithm Design Manual</a></p>

<p>También puedes leer de manera gratuita la segunda edición en <a href="https://mimoza.marmara.edu.tr/~msakalli/cse706_12/SkienaTheAlgorithmDesignManual.pdf">este link</a></p>

<h2 id="conclusión">Conclusión</h2>

<p>Estas son mis recomendaciones en este apartado importante de nuestra área del conocimiento. Si tienes alguna recomendación, no dudes en ponerte en contacto conmigo para que la agregue.</p>

<p>Personalmente, siento que los libros son los mejores maestros que puedes tener. Un libro serio, bien escrito y bien editado es un maestro que acumula la experiencia de muchas personas, principalmente del autor, pero también de los editores, correctores y otras personas que participan en su creación.</p>

<p>Un libro acumula muchos años de experiencia, y es la forma más directa de “parte en hombros de gigantes”. Es cierto, leerlos cuesta trabajo, pero es algo que te va a devolver mucho más de lo que inviertes en ellos.</p>

<p>En los próximos artículos hablaremos de libros de otras áreas relacionadas con el desarrollo de software, como la ingeniería de software, la arquitectura y otros temas variados.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Algunos de los links son links de afiliado de Amazon, por lo que puede que me lleve una pequeña comisión si compras el libro a través de ellos. Esto no afecta el precio que pagas por el libro además de que no afecta para NADA mi recomendación. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="libros" /><category term="desarrollo-de-software" /><category term="cs" /><category term="ciencias-computacion" /><summary type="html"><![CDATA[En este artículo hablaremos de los libros de ciencias de la computación fundamentales avanzar en tu carrera y cada vez hacer mejor tu trabajo.]]></summary></entry><entry><title type="html">¿Por qué deberías leer Data and Reality?</title><link href="https://blog.thedojo.mx/2023/05/06/por-que-deberias-leer-data-and-reality.html" rel="alternate" type="text/html" title="¿Por qué deberías leer Data and Reality?" /><published>2023-05-06T00:00:00-06:00</published><updated>2023-05-06T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/05/06/por-que-deberias-leer-data-and-reality</id><content type="html" xml:base="https://blog.thedojo.mx/2023/05/06/por-que-deberias-leer-data-and-reality.html"><![CDATA[<p>Gran parte de nuestro trabajo como desarrolladores consiste en <strong>modelar entidades</strong> del mundo real en el código, transformarlas, guardarlas y recuperarlas. Estas entidades se pasan entre diferentes procesos para producir un resultado. A veces también nos tenemos que inventar entidades para representar conceptos abstractos que no existen físicamente.</p>

<p><strong>Modelar datos</strong> es una de las habilidades <strong>fundamentales</strong> cuando estamos desarrollando.Cuando estás programando un algoritmo, estás modelando un <em>procedimiento</em> de la vida real en código. Este proceso normalmente incluye <strong>datos</strong>, que son representaciones de <em>entidades</em> del mundo real.</p>

<p>Por lo anterior, cualquier cosa que puedas aprender sobre modelado de datos, te ayudará directamente en tu carrera como desarrollador. En este artículo hablaremos de un libro muy especial que te puede ayudar a ser mejor en esta área, independientemente del nivel en el que te encuentres en tu carrera. Y si después de leerlo lo meditas más profundamente, puede que te ayude a desarrollar una forma de pensar más adecuada a los problemas que queremos resolver en la actualidad.</p>

<p><strong>Data and Reality</strong> trata sobre modelado de datos, escrito po William Kent, alguien con mucha experiencia en el tema. El libro tiene tres ediciones la primera es de 1978, la segunda (una actualización) es de 2000 y la tercera, después que Kent murió, es de 2012.</p>

<p>La mejor de todas es segunda edición, ya que la tercera se podría considerar un libro completamente diferente, recortado y con comentarios de <a href="https://technicspub.com/steve-hoberman/">Steve Hoberman</a>, otro modelador de datos pero siento que con un enfoque bastante diferente al de Kent.</p>

<p>Hablemos de los temas principales del libro y por qué te conviene leerlo. Pero antes, veamos algo de lo que se habla en el prefacio de la edición de 2012 que me parece muy relevante.</p>

<h2 id="buscando-las-respuestas-donde-parece-más-sencillo">Buscando las respuestas donde parece más sencillo</h2>

<p>Hay muchas cosas difíciles de resolver en el desarrollo de software y parece que siempre estamos buscando la respuesta en el lugar que parece más obvio o en el que es más fácil buscar, en lugar de donde es más probable que encontremos las respuestas.</p>

<p>El ejemplo que utilizan en el libro para explicarlo y que me parece acertado es una broma acerca de un borracho que pierde sus llaves y se la pasa toda la noche buscando bajo una farola. Cuando alguien le pregunta por qué no busca en otro lado, <strong>el borracho responde que es porque AHÍ HAY MÁS LUZ.</strong></p>

<p>En el desarrollo de software podría parecer que a veces hacemos exactamente lo mismo. Para buscar la solución a un problema siempre nos vamos a los mismos lados porque es donde nos sentimos cómodos o porque <strong>SIEMPRE SE HA BUSCADO AHÍ</strong>. Por ejemplo, nos centramos en la tecnología, en las plataformas o en los lenguajes. Pero es muy probable que el problema no esté ahí, sino en lugares más profundos.</p>

<p>Es por eso que este libro se enfoca en cuestiones profundas del modelado de datos. No en los lugares comunes, ni siquiera en hablar de cómo hacerlo, sino en preguntas que te llevaran a pensar cosas de las que se habla poco y que probablemente modifiquen tu visión del mundo y tu forma de trabajar <strong>permanentemente</strong>.</p>

<p>La intención de este artículo es dejarte con más dudas, pero llevarte a lugares en los que tal ve no habías estado antes, tal como avanzar a un nuevo lugar en el mapa en un juego de video.</p>

<h2 id="cuestiones-principales">Cuestiones principales</h2>

<p>Hablemos de los conceptos principales de representación de información en los sistemas electrónicos.</p>

<h3 id="entidades">Entidades</h3>

<p>Cuando guardamos cosas en una base de datos o las representamos en código, casi siempre nos referimos a ellas como <strong>entidades</strong>.</p>

<p>Por eso el libro empieza cuestionando, <strong>¿qué es una entidad?</strong></p>

<p>La primera respuesta es que una entidad “es un <strong><em>estado</em></strong> de la mente”. <strong>¿Cómo?</strong> Está bastante rara esa definición. Esta frase significa que una <strong>entidad</strong> más allá de algo que exista en la <strong>realidad</strong> como algo identificable e indivisible, algo que tiene límites fijos, es algo a lo que nosotros le damos significado, y que nosotros delimitamos o entendemos en ciertos contextos. Esta delimitación normalmente no es singular, tiene que ser compartida por un grupo de personas para que tenga sentido.</p>

<p>Pongamos algunos ejemplos para entender eso. La leyenda del barco de <strong>Teseo</strong> relata que cuando él regresó de Creta, donde había matado al Minotauro, el pueblo de Atenas le rindió honores y conservó su barco en lo alto de una colina como un monumento para recordar su hazaña.</p>

<p>Con el tiempo, el barco se fue deteriorando y se le fueron cambiando las partes, hasta que ya no quedó ninguna parte original.</p>

<p>La pregunta es: ¿sigue siendo el <em>“Barco de Teseo”</em>? ¿Es el mismo barco si no tiene ninguna parte original? ¿Es el mismo barco si se le cambia una sola parte, o muy pocas?</p>

<p>Esta historia sirve para ilustrar que las entidades como objetos inmutables y permanentes no existen en la vida real, sino que son cosas que en nuestra mente delimitamos y que, junto con otras personas, les asignamos una identidad y un significado. El <em>“Barco de Teseo”</em> sigue siendo el mismo mientras nosotros lo consideremos así.</p>

<p>Exactamente así se comportan las entidades que como desarrolladores modelamos en nuestros programas. No son cosas permanentes, a veces ni siquiera cosas completamente definidas, sino que nosotros les asignamos límites y <strong>significado</strong>.</p>

<p>Las personas, los objetos e incluso los conceptos están en constante evolución y parte de nuestro trabajo es capturar esa evolución en nuestros sistemas.</p>

<h2 id="identidad-y-cambio">Identidad y cambio</h2>

<p>Cuando queremos registrar algo en una computadora, normalmente necesitamos una forma de referirnos a ese registro para después poder recuperarlo. Esto que usamos para referirnos a las entidades se llama <strong>identificador</strong>.</p>

<p>Un identificador es un elemento inmutable y único entre todas las entidades de nuestro sistemas. Aquí nos podemos encontrar con varios casos:</p>

<ul>
  <li>La entidad no tiene nada único por lo que podamos referirnos a ella (elementos que se repiten, por ejemplo libros producidos en serie)</li>
  <li>El conjunto de todos los <em>atributos</em> de la entidad puede constituir una identidad</li>
  <li>Las entidades tienen varios atributos únicos y hay que escoger uno</li>
</ul>

<p>Pensar en la naturaleza de nuestro problema, en los términos de arriba nos puede llevar a la solución de seleccionar un elemento identificador. Piensa en el primer caso, por ejemplo: cuando algo no tiene identificador natural, tendemos a asignar un identificador único arbitrario a la entidad cuando la metemos en el sistema.</p>

<p>Por ejemplo, es un práctica muy común asignar identificadores numéricos incrementales. La primera entidad registrada del tipo es la 1, la segunda es la 2, etc. También se pueden usar los UUIDs, que son identificadores únicos generados aleatoriamente, y que por lo general evitan problemas como el de permitir que alguien adivine el identificador de otra entidad.</p>

<p>Pero si la entidad tiene un identificador único inmutable, ¿por qué no usarlo? <strong>¿Puede ser una solución más <em>natural</em>?</strong></p>

<p>¿Qué pasa cuando lo que creíamos inmutable cambia? Eso es algo que normalmente rompe lo que hicimos y tenemos que idear formas de componerlo. Todo este tipo de preguntas pensadas por adelantado te pueden llevar a crear sistemas de software que soporten mejor el paso del tiempo y te den menos problemas cuando estén funcionando en producción.</p>

<h2 id="relaciones">Relaciones</h2>

<p>Will Kent afirma que las relaciones son el tejido de la información que representamos en nuestros sistemas. Se puede entender una relación como una asociación o una conexión entre mínimo dos entidades.</p>

<p>Las relaciones tienen varias características que las pueden definir:</p>

<ul>
  <li>Grado: El número de entidades de diferentes tipos que participan en la relación</li>
  <li>Dominios: El conjunto de valores que son válidos en cada lado de la relación</li>
  <li>Rol: El papel que juega cada entidad en la relación</li>
  <li>Complejidad (cardinalidad): el número de entidades de cada tipo que participan en la relación</li>
</ul>

<p>Aquí en las relaciones y su representación empezan a surgir diferentes preguntas y problemas ya de definición, por ejmplo: ¿cómo identificas una relación? Algunas relaciones sólo son significativas con un contexto, ¿cómo lo representas? ¿Deberían ser las relaciones entidades también?</p>

<p>Sin duda, leer este capítulo del libro te ayudará a plantearte todas estas cuestiones y a entender mejor cómo representar la información en tus sistemas.</p>

<h3 id="atributos">Atributos</h3>

<p>Los atributos son los datos que “pertenecen” a una entidad. Forman el conjunto de información que tenemos sobre esta.</p>

<p>Los atributos en el mundo real pueden ser infinitos, pero a nosotros normalmente sólo nos interesa un subconjunto de ellos. Data and Reality propone que los atributos son un conjunto de tres elementos:</p>

<ul>
  <li>El sujeto, la entidad a la que pertenece el atributo</li>
  <li>El objeto, el valor del atributo</li>
  <li>La <em>relación</em>, que es por lo que el sujeto y el objeto están conectados</li>
</ul>

<p>Supongamos por ejemplo el atributo <code class="language-plaintext highlighter-rouge">nombre</code> de una persona. “Él se llama Héctor”: El sujeto es la persona a la que nos estamos refiriendo, el objeto es el nombre “Héctor” y la relación es el hecho de que la persona se llama así.</p>

<p>Si puedes ver, esto nos empieza a meter en problemas de definición. Son realmente los atributos, ¿relaciones?</p>

<h2 id="símbolos-y-valores">Símbolos y valores</h2>

<p>Otra cosa que hay que aprender a distinguir cuando estamos modelando entidades y registrándolas es la diferencia entre el valor y el <strong>símbolo</strong>. Cuando ponemos un valor para representarlo en una computadora usamos una representación, esto es el símbolo. El valor es la entidad que estamos representando.</p>

<p>Por ejemplo, hablando de atributos podemos querer expresar la altura de una persona. Esta altura se puede expresar como “172cm”, “1.72m”, “5’8’’”, <code class="language-plaintext highlighter-rouge">172</code> (como entero) etc. Todos estos son símbolos que representan el valor de la altura de la persona. Lo que en realidad queremos expresar es la distancia que existe entre dos puntos.</p>

<h2 id="categorías">Categorías</h2>

<p>Cuando guardamos información en los sistemas informáticos normalmente queremos organizarla. Las categorías son una forma de hacerlo, y la manera intuitiva de entenderlo parece suficiente.</p>

<p>Sin embargo, la creación de categorías es algo que también se debe pensar muy bien, ya que esto repercutirá en la forma en que guardamos información y en cómo la recuperamos.</p>

<p>Algunos de los problemas en los que tienes que pensar:</p>

<ul>
  <li>¿Qué pasa cuando una entidad puede pertenecer a más de una categoría?</li>
  <li>¿Qué clasificación es más conveniente para el problema que estás resolviendo?</li>
</ul>

<p>Las respuestas a estas preguntas son completamente arbitrarias y finalmente dependen del problema y del campo para el que estés programando.</p>
<h2 id="filosofía-del-conocimiento">Filosofía del conocimiento</h2>

<p>Finalicemos este resumen hablando de la cosa más profunda o analítica que el libro trata: la naturaleza del conocimiento mismo. Hay varias posturas con respecto a “la realidad”. Las dos extremas son:</p>

<ol>
  <li>No existe una realidad objetiva, todo es subjetivo, y los seres humanos construyen esta realidad con su mente.</li>
  <li>Existe una realidad objetiva, y los seres humanos la perciben y la pueden conocer siempre.</li>
</ol>

<p>En el libro se habla sobre una postura intermedia, y que me parece completamente razonable: es que existe una realidad objetiva, pero que los seres humanos <strong>no la pueden conocer completamente</strong>, la accedemos a través de la percepción, pero como en mucha posturas filosóficas, la percepción es imperfecta.</p>

<h3 id="qué-es-un-modelo">¿Qué es un modelo?</h3>

<p>De esto ya hemos hablado repetidas veces en este blog, pero vamos a decirlo una vez más: uno modelo es una abstracción, una representación simplificada de la realidad.</p>

<p>Lo que el análisis de este libro nos hace entender es que esa <strong>representación simplificada</strong> tiene más que ver con NUESTRA VISIÓN y NUESTROS INTERESES que con una visión objetiva de la realidad.</p>

<h2 id="conclusión">Conclusión</h2>

<p>La conclusión más grande que me gustaría sacar de este libro es esta:</p>

<p><strong>La realidad es compleja, confusa y no tiene los límites que nos imaginamos</strong>. Todo el orden que intentamos poner en nuestros sistemas es en realidad <strong>uno de los múltiples</strong> órdenes posibles que podemos ponerle a la realidad, es un punto de vista, y eso no quiere decir que sea el mejor o el más correcto, o que los demás son incorrectos. La representación de la realidad en los sistemas de información dependerá siempre de para quién lo estemos haciendo, y del uso que se le vaya a dar.</p>

<p>Hablando del dominio de modelado de datos, no hay una distinción clara entre lo que es un atributo, una categoría y una relación, nosotros definimos cuándo un aspecto del mundo real se comporta como uno u otro.</p>

<p>Las entidades, su naturaleza y permanencia, están completamente definidos por el uso que les vayamos a dar.</p>

<p>En resumen: <strong>gran parte de lo que creemos que es una representación objetiva, en realidad es una representación subjetiva y arbitraria</strong>. Pero eso no es malo, es como las cosas funcionan y tenerlo en cuenta nos ayudará a tener discusiones más productivas y a entender mejor los sistemas que construimos.</p>

<p>Algunas representaciones son más útiles que otras desde el punto de vista de otras personas, así que esforzarnos por entender lo que otros están viendo es muy buena idea.</p>

<h3 id="qué-sigue">¿Qué sigue?</h3>

<p>Pensar en todas estas cuestiones te ayudará a notar que no todo lo que tiene que ver con la tecnología y más importante aún: <strong>no siempre hay una respuesta correcta</strong>. Sigue flexibilizando tu pensamiento y abriéndolo, sigue pensando más allá de lo establecido y no te centres en la tecnología.</p>

<p>No seas como el borracho que busca las llaves perdidas bajo el poste porque ahí hay más luz, busca las llaves donde sea más probable encontrarlas.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="libros" /><category term="modelado-de-datos" /><category term="filosofía" /><category term="desarrollo-de-software" /><category term="data-and-reality" /><summary type="html"><![CDATA[Hablemos de Data and Reality, un libro que te ayudará a ser mejor desarrollador de software, porque se va a las raíces de los problemas que resolvemos a diario.]]></summary></entry><entry><title type="html">El principio de Inversión de Dependencias</title><link href="https://blog.thedojo.mx/2023/04/22/el-principio-de-inversion-de-dependencias.html" rel="alternate" type="text/html" title="El principio de Inversión de Dependencias" /><published>2023-04-22T00:00:00-06:00</published><updated>2023-04-22T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2023/04/22/el-principio-de-inversion-de-dependencias</id><content type="html" xml:base="https://blog.thedojo.mx/2023/04/22/el-principio-de-inversion-de-dependencias.html"><![CDATA[<p>Este es el artículo final sobre el análisis de los principios SOLID. En este artículo veremos el principio de <strong>Inversión de Dependencias</strong>, el cual nos dice que las clases de alto nivel no deben depender de las clases de bajo nivel, sino que ambas deben <strong>depender de abstracciones</strong>.</p>

<p>Veamos qué tan útil es en la vida real, aplicándolo día a día, cuáles son las formas de implementarlo y algunos ejemplos, asó como <strong>algunas críticas</strong>.</p>

<h2 id="principio-de-inversión-de-dependencias">Principio de Inversión de Dependencias</h2>

<p>El principio se establece en dos partes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A. Los módulos de alto nivel no deberían depender de los módulos de bajo nivel, ambos deben depender de abstracciones.

B. Las abstracciones no deberían depender de los detalles, los detalles deben depender de las abstracciones.
</code></pre></div></div>

<p>Esto es el principio de <strong>Sustitución de Liskov</strong>, pero llevado al extremo. Veamos algunos ejemplos en Python.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">class</span> <span class="nc">Database</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql</span><span class="p">):</span>
        <span class="k">pass</span>

<span class="k">class</span> <span class="nc">MySQLDatabase</span><span class="p">(</span><span class="n">Database</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Connecting to MySQL"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Disconnecting from MySQL"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Querying MySQL"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">PostgreSQLDatabase</span><span class="p">(</span><span class="n">Database</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Connecting to PostgreSQL"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Disconnecting from PostgreSQL"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Querying PostgreSQL"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">DatabaseManager</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">database</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">database</span> <span class="o">=</span> <span class="n">database</span>

    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="n">disconnect</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sql</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">database</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="n">sql</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Model</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">database_manager</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">database_manager</span> <span class="o">=</span> <span class="n">database_manager</span>

    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">database_manager</span><span class="p">.</span><span class="n">query</span><span class="p">(</span><span class="s">"INSERT INTO ..."</span><span class="p">)</span>

<span class="n">my_model</span> <span class="o">=</span> <span class="n">Model</span><span class="p">(</span><span class="n">DatabaseManager</span><span class="p">(</span><span class="n">MySQLDatabase</span><span class="p">()))</span>
</code></pre></div></div>

<p>En este ejemplo vemos claramente como la clase <code class="language-plaintext highlighter-rouge">Model</code> no depende directamente de una clase concreta de base de datos, sino que depende de una abstracción, la clase <code class="language-plaintext highlighter-rouge">DatabaseManager</code>. De esta manera el código de “alto nivel”, es decir, el modelo, no depende de un código de “bajo nivel”, la base de datos.</p>

<p>Aquí <strong>alto nivel</strong>, se refiere a la lógica de negocio, mientras que <strong>bajo nivel</strong> se refiere a la implementaciones de cosas no diferenciadas, como conexiones a base de datos y otras cosas similares.</p>

<p>Esto se ve muy sencillo aquí, justo en un lenguaje de tipado dinámico. Pero en lenguajes de tipado estático, como Java, esto se vuelve un poco más complicado, sobre todo cuando quieres que las clases se puedan cambiar de manera dinámica.</p>

<p>Es por esto que nació la técnica de <strong>Inyección de Dependencias</strong>, la cual consiste en inyectar una dependencia en una clase, en lugar de crearla dentro de la clase (la cuál tiene múltiples formas de aplicación). También se puede usar la <strong>Inversión de Control</strong>, que consiste en que en vez de que sea la clase o el método principal el que instancie alguna dependencia, sea un “contenedor”, que normalmente es un framework, el que se encargue de instanciar las dependencias y pasarlas a la clase o método que las necesita. Puedes leer más sobre <a href="https://medium.com/ssense-tech/dependency-injection-vs-dependency-inversion-vs-inversion-of-control-lets-set-the-record-straight-5dc818dc32d1">DI vs IoC</a>.</p>

<p>Finalmente, existe también el descubrimiento de servicios, en el que se “pide” an <strong>Localizador de Servicios</strong> que nos de lo que necesitamos para trabajar. Puedes leer sobre la aplicación de esto aquí, en un artículo de Martin Fowler: <a href="https://martinfowler.com/articles/injection.html">Inversion of Control Containers and the Dependency Injection pattern</a></p>

<p>A mi gusto, todo esto es muy complicado. Veamos algunas críticas a este principio.</p>

<h2 id="crítica-de-dan-north">Crítica de Dan North</h2>

<p>Analicemos la crítica de <a href="https://dannorth.net/about/">Dan North</a> (un reconocido desarrollador de software, consultor y coach) a este principio, al que no le parecen útiles los principios SOLID, sino que prefiere el código simple:</p>

<blockquote>
  <p>While there is nothing fundamentally wrong with DIP, I don’t think it is an overstatement to say that our obsession with dependency inversion has single-handedly caused billions of dollars in irretrievable sunk cost and waste over the last couple of decades. - <strong>Dan North</strong></p>
</blockquote>

<p>En resumen, <a href="https://dannorth.net/2021/03/16/cupid-the-back-story/">Dan North</a> dice que aunque el principio en sí mismo no tiene nada de malo, el hecho de que nos obsesionemos con la <em>inversión de dependencias</em> ha causado miles de millones de dólares en pérdidas irreversibles.</p>

<p>Veamos otra cita de <strong>Dan North</strong>:</p>

<blockquote>
  <p><strong>Most dependencies don’t need inverting, because most dependencies aren’t options, they are just the way we are going to do it this time.</strong> So my - by now entirely unsurprising - suggestion is to write simple code, by focusing on use rather than reuse.</p>
</blockquote>

<p>Esta cita la podemos traducir como:</p>

<blockquote>
  <p>La mayoría de las dependencias no necesitan invertirse, porque la mayoría de las dependencias no son opciones, son simplemente la forma en que lo haremos esta vez. Así que mi - en este momento, completamente predecible - sugerencia <strong>es escribir código simple, centrándose en el uso en lugar de en la reutilización</strong>.</p>
</blockquote>

<p>Estoy completamente de acuerdo con esta crítica. La mayoría de veces no vas a necesitar reemplazar algo. Es mejor enfocarse en lo que va a suceder 98% de las veces que hacer algo súper complejo o que requiera de una gran cantidad de código en sí mismo como pegamento para que funcione.</p>

<p>Según el que propuso este principio, debería aplicarse siempre. Siempre deberías conectar cosas abstractas con otras cosas abstractas y luego hay algo que “rellena” estas cosas abstractas, o a lo que le puedes pedir que te de una implementación concreta de algo abstracto. <strong>Repito:</strong> a mi gusto es muy complicado y no es necesario en la mayoría de los casos.</p>

<p>Sin embargo, creo que hay casos, sobre todo aquellos en los que tienes concretamente los casos en las que las implementaciones pueden variar, en los que sí es útil. Por ejemplo imagina algo que tenga que conectarse a diferentes API’s para proveer el mismo servicio, como por ejemplo, para enviar mensajes de texto a través de múltiples canales. En este caso, sí es útil, porque puedes tener una interfaz que defina el comportamiento de un servicio de mensajería, y luego múltiples implementaciones de esta interfaz, una para cada canal de mensajería, e inyectar las implementaciones de forma dinámica o mediante configuración.</p>

<h2 id="conclusión">Conclusión</h2>

<p>En este artículo hemos visto el principio de Inversión de Dependencias, el cual nos dice que las clases de alto nivel no deben depender de las clases de bajo nivel, sino que ambas deben depender de abstracciones.</p>

<p>Aunque puede ser útil en ciertos casos, para mi <strong>bastante específicos</strong>, creo que intentar aplicarlo siempre ha creado más problemas que luego hacen código difícil de entender y mantener, agregándole complejidad al código innecesariamente. Es mejor tener interfaces bien diseñadas, que sea fácil entenderlas y mantener en la cabeza.</p>

<p>En general, respecto a los principios <strong>SOLID</strong>, opino algo muy similar a lo que Dan North menciona: es más importante escribir código simple, que se entienda fácilmente.</p>

<p>Todos los principios se pueden resumir en estos que son el fundamento de la buena programación:</p>

<ol>
  <li>Código simple, lo más simple posible (Single Responsiility Principle)</li>
  <li>Ocultar información detrás de interfaces bien diseñadas (Single Responsibility Principle, Open/Closed Principle, Liskov Substitution Principle, Interface Segregation Principle)</li>
  <li>Pensar bien las abstracciones que se usarán y mejorarlas constantemente (Dependency Inversion Principle)</li>
</ol>

<p>Nunca tendrás el diseño perfecto y siempre podrás mejorar tanto la arquitectura como tu código. Mientras más simple sea el código original, más probable es que tu código evolucione en algo que cumpla con lo que se espera de él. Por eso, siempre debes estar mejorando tu diseño en lo que puedas, revisando el diseño y creando mejores abstracciones.</p>

<p>Por último, siempre se habla de los principios SOLID como si fueran los dogmas de una religión y se habla de “violarlos” como si estos fueran obligatorios, o principios morales que siempre se deben seguir. Además, siempre se habla de ellos como si fueran las reglas que definen lo bueno y lo malo.</p>

<p>Para mi, conviene más seguir principios más generales, que un acrónimo creado con nombres de principios rimbombantes, que muchas veces son tan ambiguos que nadie qué significan exactamente, y cuando tienen aplicaciones reales, son tan complicadas que no se conviene aplicar en la mayoría de los casos.</p>]]></content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="solid" /><category term="dependency-inversion" /><category term="inversion-dependencias" /><summary type="html"><![CDATA[Analicemos el principio de Inversión de Dependencias, el último principio de SOLID y veamos si conviene, además cuándo aplicarlo.]]></summary></entry></feed>