<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://blog.thedojo.mx/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.thedojo.mx/" rel="alternate" type="text/html" /><updated>2020-03-16T08:55:38-06:00</updated><id>https://blog.thedojo.mx/feed.xml</id><author><name>Héctor Patricio</name><uri>https://github.com/hectorip</uri></author><entry><title type="html">A Philosophy of Software Design: Descomposición Temporal</title><link href="https://blog.thedojo.mx/2020/03/16/a-philosophy-of-software-design-descomposicion-temporal.html" rel="alternate" type="text/html" title="A Philosophy of Software Design: Descomposición Temporal" /><published>2020-03-16T00:00:00-06:00</published><updated>2020-03-16T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/03/16/a-philosophy-of-software-design-descomposicion-temporal</id><content type="html" xml:base="https://blog.thedojo.mx/2020/03/16/a-philosophy-of-software-design-descomposicion-temporal.html">&lt;p&gt;En el artículo pasado hablamos de una forma de evitar una fuga de información, que consiste en encapsular una decisión de diseño en un módulo.&lt;/p&gt;

&lt;p&gt;Otra forma de dejar escapar información no relevante para los usuarios de una pieza de software es mediante obligarlos a usarla siempre de la misma forma, con el mismo orden de operaciones reglas de operación implícita. Esto se llama descomposición temporal. Hablemos más de ella.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-la-descomposición-temporal&quot;&gt;Qué es la descomposición temporal&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;En descomposición temporal, la estructura de un sistema corresponde &lt;strong&gt;al orden en el tiempo&lt;/strong&gt; en el que las operaciones &lt;strong&gt;ocurrirán&lt;/strong&gt;. - John Ousterhout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La descomposición temporal implica repetir o separar una decisión de diseño por causa del &lt;em&gt;orden en que se usan diferentes partes del sistema&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1584345818/A85931E4-BBF3-4301-98D3-ACE20942AF9E_hugdbz.png&quot; alt=&quot;Descomposición temporal&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ejemplos&quot;&gt;Ejemplos&lt;/h2&gt;

&lt;p&gt;John Ousterhout menciona un ejercicio que puso a sus alumnos en el que tenían que crear un programa implementando el protocolo HTTP.&lt;/p&gt;

&lt;p&gt;Algunos equipos crearon una clase para recibir el mensaje desde la red y &lt;em&gt;otra clase para leerlo&lt;/em&gt;, creando así un caso claro de descomposición temporal: como las operaciones sucedían en diferentes momentos (primero recibes y luego lees y procesas) los separaron lógicamente en dos clases que se usaban siempre una detrás de otra. La fuga de información se dio porque para recibir un de HTTP &lt;em&gt;tienes que leer&lt;/em&gt; parte del mensaje y entonces la lógica de lectura del mensaje está en &lt;em&gt;ambas clases&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Otro ejemplo más o menos obvio es la lectura y escritura de archivos. Si quieres trabajar con archivos, el orden de las operaciones es la siguiente:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Abrir y leer&lt;/li&gt;
  &lt;li&gt;Operar con información del archivo&lt;/li&gt;
  &lt;li&gt;Escribir el archivo&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Un diseño que deja escapar información sería tener dos clases diferentes para la parte de escritura y lectura, cada una con código repetido que sabe leer el formato del archivo.&lt;/p&gt;

&lt;p&gt;Ejemplo 3: imagina las diferentes situaciones en las que un elemento de datos cambia &lt;em&gt;de estado&lt;/em&gt; a través de su ciclo de vida. Puede ser una solicitud de crédito, un reporte, un blogpost, etc.&lt;/p&gt;

&lt;p&gt;Es tentador crear diferentes entidades de datos y clases para representar algún estado en específico, ya que podría hacer que nuestro código fuera un poco más explícito cuando llamamos las clases o métodos.&lt;/p&gt;

&lt;p&gt;Pero si no hay operaciones especiales que correspondan a ese estado, o datos únicos para esta etapa, crear un módulo específico implicaría descomposición temporal: estarías dividiendo o duplicando conocimiento a través de diferentes módulos debido al orden en que suceden los eventos.&lt;/p&gt;

&lt;h2 id=&quot;composición-de-funciones&quot;&gt;Composición de funciones&lt;/h2&gt;

&lt;p&gt;En los lenguajes funcionales es común usar una serie de funciones aplicadas a una entidad de datos. Por ejemplo en Elixir es común hacer lo siguiente.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# El operador |&amp;gt; Toma el resultado de la función o valor de la expresión&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# anterior (o a su izquierda) y lo manda como primer parámetro a la función # a la derecha, parecido a una redirección de salida de Unix&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&quot; the dojo &quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trim&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Limpiar los espacios sobrante a la cadena &quot; the dojo &quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Separar la cadena&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Poner en mayúsculas cada uno de los elementos&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Volver a juntar la cadena&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Resultado: &quot;The Dojo&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Este ejemplo es un poco exagerado para la función que realiza: poner un texto con capitalización estilo título, Todas Las Iniciales En Mayúsculas.&lt;/p&gt;

&lt;p&gt;La idea viene de las matemáticas y se llama “composición funcional” y como se puede ver es excelente para usar funciones &lt;em&gt;existentes&lt;/em&gt; en la creación de procesos más complejos. Una de las virtudes de esta técnica es la &lt;strong&gt;reutilización&lt;/strong&gt; de las funciones.&lt;/p&gt;

&lt;p&gt;Sin embargo, queriendo aplicar esta idea, puedes cometer el error modificar tus módulos (en lenguajes funcionales: funciones), para aplicar esta técnica y &lt;em&gt;terminar con funciones que siempre se usen una tras otra&lt;/em&gt;, esperando la entrada de la misma función y mandando su resultado siempre a la misma función. Algo así:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datos&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiModulo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi_funcion_1&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiModulo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi_funcion_2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MiModulo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi_funcion_3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto es un error que yo he cometido y que ha hecho mi código &lt;em&gt;muy difícil de mantener&lt;/em&gt;, ya que al cambiar una función de esta cadena tengo que cambiar las demás, haciéndolas no reutilizables.&lt;/p&gt;

&lt;h2 id=&quot;solución-a-la-descomposición-temporal&quot;&gt;Solución a la descomposición temporal&lt;/h2&gt;

&lt;p&gt;La solución propuesta por &lt;a href=&quot;https://amzn.to/3ba4MEj&quot;&gt;A Philosophy of Software Design&lt;/a&gt; es muy sencilla: &lt;strong&gt;concentra todas las operaciones relacionadas con una decisión de diseño en un módulo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si nada necesita ser conocido fuera de este módulo (ni detalles de la implementación, ni el orden de operación), has logrado un diseño más limpio. Esto puede implicar que la clase se haga más grande, pero es una mejor solución comparada con tener información repartida por todos lados.&lt;/p&gt;

&lt;p&gt;Así, si la decisión de diseño cambia, &lt;em&gt;sólo tienes que cambiar la implementación&lt;/em&gt; y no la interfaz ni mucho menos su uso.&lt;/p&gt;

&lt;p&gt;En el siguiente artículo veremos finalmente una serie de recomendaciones para evitar las fugas de información y como no llevarlo demasiado lejos.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="PoSD" /><category term="descomposición-temporal" /><category term="software-design" /><category term="complexity" /><category term="interfaces" /><summary type="html">Una forma de dejar escapar información es mediante forzar el orden de las operaciones de un módulo. Veamos cómo evitarlo.</summary></entry><entry><title type="html">Guía para escoger tu stack: por qué deberías escoger tecnología aburrida</title><link href="https://blog.thedojo.mx/2020/03/11/guia-para-escoger-tu-stack-por-que-deberias-escoger-tecnologia-aburrida.html" rel="alternate" type="text/html" title="Guía para escoger tu stack: por qué deberías escoger tecnología aburrida" /><published>2020-03-11T00:00:00-06:00</published><updated>2020-03-11T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/03/11/guia-para-escoger-tu-stack-por-que-deberias-escoger-tecnologia-aburrida</id><content type="html" xml:base="https://blog.thedojo.mx/2020/03/11/guia-para-escoger-tu-stack-por-que-deberias-escoger-tecnologia-aburrida.html">&lt;p&gt;Este artículo está basado en la presentación &lt;a href=&quot;http://boringtechnology.club&quot;&gt;Choose Boring Technology&lt;/a&gt; de &lt;a href=&quot;https://mcfunley.com/&quot;&gt;Dan McKinley&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No hay nada que haga más feliz a un desarrollador que trabajar con el último de los frameworks, lenguaje de programación o herramienta que salió el mes pasado.&lt;/p&gt;

&lt;p&gt;Este problema se incrementa si trabajas en web, específicamente en JavaScript, donde cada semana tenemos un framework nuevo.&lt;/p&gt;

&lt;p&gt;Pero hacer esto puede llevar a tu empresa o producto al desastre, como ha pasado muchas veces. Veamos algunas de las razones.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-la-tecnología-aburrida&quot;&gt;Qué es la tecnología &lt;em&gt;aburrida&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Cuando hablamos de tecnología &lt;em&gt;aburrida&lt;/em&gt; en este artículo nos referimos a aquello que no es nuevo y brillante como el último framework: cosas que se han usado por mucho tiempo y que a nadie le emocionaría usar porque no es novedoso.&lt;/p&gt;

&lt;h3 id=&quot;ejemplos&quot;&gt;Ejemplos&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Tecnología brillante&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El último lenguaje de programación para hacer concurrencia (Crystal, Pony o algo así)&lt;/li&gt;
  &lt;li&gt;Aunque tenga tiempo existiendo, la cosa que casi nadie en el mundo usa (como OCaml o Ío)&lt;/li&gt;
  &lt;li&gt;La base de datos, servidor web, etc. en la que no has trabajado antes pero quieres usar para complementar tu stack (“Vamos a agregarle CouchDB, creo que puede resolver el problema mejor”).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No tiene que ser completamente nuevo, puede ser novedoso sólo &lt;em&gt;para ti y tu equipo&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tecnología aburrida&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Una modesta instalación de Python, Django y PostgreSQL&lt;/li&gt;
  &lt;li&gt;La instalación común de PHP con Laravel y las tecnologías asociadas&lt;/li&gt;
  &lt;li&gt;Java con Spring&lt;/li&gt;
  &lt;li&gt;El framework y lenguaje con el que trabajas normalmente y tienes más experiencia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Con tecnología aburrida &lt;em&gt;no nos referimos a cosas malas&lt;/em&gt;, sino a cosas que no son emocionantes por nuevas.&lt;/p&gt;

&lt;p&gt;Hablemos ahora de por qué es casi siempre más provechoso escoger “tecnología aburrida”.&lt;/p&gt;

&lt;h2 id=&quot;la-capacidad-de-innovar-es-limitada&quot;&gt;La capacidad de innovar es limitada&lt;/h2&gt;

&lt;p&gt;Piensa que tu empresa o producto tiene una capacidad limitada de resolver problemas, generalmente determinada por el tiempo para salir al mercado (o aprovechar una nueva oportunidad de negocio) y por el dinero disponible. El autor de la presentación facilita pensarlo diciendo que tienes unas cuántas “Innovation tokens” o &lt;em&gt;monedas de innovación&lt;/em&gt;. Mientras más limitantes tengas, como el tiempo o el dinero, menos de monedas de innovación tienes.&lt;/p&gt;

&lt;p&gt;Si quieres resolver un problema de manera novedosa, puede que eso requiera todas tus moneditas, o incluso más. Y generalmente es aquí donde &lt;em&gt;cualquier negocio&lt;/em&gt; quiere gastar sus energías. Esto se explica viendo a las empresas como si fueran humanos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Si piensas en la innovación como un recurso escaso, empieza a perder sentido también estar en las líneas frontales de innovación en bases de datos. O de paradigmas de programación. El punto no es que esas cosas no puedan funcionar. Claro que pueden funcionar. &lt;strong&gt;Pero el software que ha existido por más tiempo tiende a necesitar menos cuidado y atención que el software que acaba de salir&lt;/strong&gt;. - Dan McKinley&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;pirámide-de-maslow&quot;&gt;Pirámide de Maslow&lt;/h3&gt;

&lt;p&gt;Abraham Maslow propuso en los 60’s una &lt;a href=&quot;https://es.wikipedia.org/wiki/Pir%C3%A1mide_de_Maslow&quot;&gt;jerarquía de las necesidades humanas&lt;/a&gt;, conocida como la Pirámide de Maslow, en la que se habla de diferentes tipos de necesidades jerarquizadas, desde las fisiológicas hasta las emocionales.&lt;/p&gt;

&lt;p&gt;Su tesis principal es que tienen que cumplirse las de la base de la pirámide (fisiológicas; comer, dormir, respirar) &lt;strong&gt;antes&lt;/strong&gt; de cumplirse las de la punta (moralidad, creatividad, etc).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1584127283/6D71EA5B-8CC6-454B-B342-6287A9845189_edyfje.png&quot; alt=&quot;Pirmámide de Maslow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo que explica Maslow acerca la satisfacción de las necesidades tiene lógica: &lt;em&gt;no puedes&lt;/em&gt; preocuparte por cosas como si la filosofía de los estoicos es correcta si no tienes lo suficiente para comer hoy, o no has dormido en tres días. O peor aún, no puedes pensar en tu movimiento siguiente si te estás quedando sin aire.&lt;/p&gt;

&lt;p&gt;Lo mismo pasa a nivel tecnológico y de supervivencia en las empresas o proyectos: no puedes pensar en formas de beneficiar a tu cliente, de resolver ese problema tan difícil de manera innovadora si te estás pelando con mantener viva en producción una base de datos.&lt;/p&gt;

&lt;p&gt;Así que desde el punto de vista económico tiene completo sentido: escoger tecnología lo más fácil de entender, en la que tengas experiencia o sea fácil encontrar expertos que te guíen, tiene más lógica que escoger lo más nuevo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1584127281/604612EB-0432-4D88-B1B4-CBAAEFF7042D_hyfu6z.png&quot; alt=&quot;Pirámide de necesidades Tenológicas&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;la-tecnología-aburrida-es-más-segura&quot;&gt;La tecnología ‘aburrida’ es más segura&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Existen sólo dos tipos de lenguajes: de los que la gente se queja y los que nadie usa. - Bjarne Stroustrup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La tecnología como los lenguajes, librerías, bases de datos y en general software y hardware que lleva mucho tiempo existiendo es más confiable en el sentido de que conocemos sus fallas, sus limitantes y existen personas que nos pueden contar sus usos y malos usos.&lt;/p&gt;

&lt;p&gt;Todos los proyectos de software respetables tienen una lista de errores conocidos, que puedes consultar en su documentación y el tiempo estimado en que se resolverá, si no se resolverá y las formas de darle la vuelta. En pocas palabras ya sabes que esa tecnología apesta y sabes &lt;em&gt;por qué&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Una tecnología nueva no tiene esto, y las sorpresas que la esperan pueden ser muy grandes y desagradables. Pero aquí entramos en el campo del riesgo y el conocimiento humano.&lt;/p&gt;

&lt;h3 id=&quot;cosas-que-no-sabes-que-no-sabes&quot;&gt;Cosas que no sabes que no sabes&lt;/h3&gt;

&lt;p&gt;Todas las cosas que son capaces de ser aprehendidas por la mente humana caen en una de cuatro categorías:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cosas que no sabes que sabes.&lt;/strong&gt; Son cosas que sabes inconscientemente, como caminar, respirar, mover tus manos, etc. Puede haber otras menos automáticas, que se pueden descubrir con un poco de razonamiento, como la ortografía de una palabra o gramática. Por ejemplo, sabes conjugar en modo subjuntivo la mayoría de los verbos de tu idioma pero si no has estudiado la gramática del lenguaje tal vez ni siquiera sabes que existía el modo subjuntivo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cosas que sabes que sabes.&lt;/strong&gt; Este es lo que entendemos como “conocimiento” cuando hablamos de él. Por ejemplo sabes que escribir está dentro de tus habilidades. O sabes que puedes sumar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cosas que no sabes que no sabes.&lt;/strong&gt; Cosas que estás consciente de no saber, como física cuántica o análisis de variable compleja. Mientras más sepas de algo, más probable es que te des cuenta que no sabes otras muchas cosas de ese mismo tema. De ahí la frase: “Sólo sé que no sé nada”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cosas que no sabes que no sabes.&lt;/strong&gt; Esto es lo que nos pone en riesgo. Aquí caen muchos eventos futuros y la mayor parte del conocimiento disponible está en esta área para cualquier persona. Por ejemplo, no sabemos que no sabemos las causas de un desplome económico. De esto ni siquiera podemos hablar porque &lt;em&gt;no sabemos&lt;/em&gt; que existe. Esto es lo que podemos nombrar como &lt;em&gt;incertidumbre&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La quinta categoría, que &lt;a href=&quot;https://www.fooledbyrandomness.com/&quot;&gt;N. N. Taleb&lt;/a&gt; describe en su libro &lt;a href=&quot;https://amzn.to/2xqIzmH&quot;&gt;Cisne Negro&lt;/a&gt;, son las cosas que no podemos saber, como el futuro o las causas de algo en el pasado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1584164642/CEA9E5D1-1E77-4543-8256-DB6C195CBCFB_dwvf1j.png&quot; alt=&quot;Teoría del conocimiento&quot; /&gt;&lt;/p&gt;

&lt;p&gt;¿Por qué es importante esto? La cantidad de cosas que &lt;em&gt;sabemos&lt;/em&gt; que no sabemos o que fallan de un proyecto “aburrido” o probado pueden ser muchas, pero &lt;em&gt;sabemos&lt;/em&gt; que ahí están y nos podemos proteger contra ellas. Aún hay cosas que no sabemos que no sabemos, la incertidumbre nunca se elimina, pero son menores al tener más experiencia colectiva sobre algo.&lt;/p&gt;

&lt;p&gt;En las tecnologías de reciente creación hay mucha información que &lt;em&gt;no sabemos que no sabemos&lt;/em&gt;. La cantidad de incertidumbre es mucho mayor, incluso con cosas no relacionadas directamente con la tecnología, como el entorno en el que se está creando. ¿Matarán mañana al proyecto?&lt;/p&gt;

&lt;p&gt;Reducir la incertidumbre al máximo posible debe ser uno de los objetivos de cualquier buen arquitecto o diseñador de software.&lt;/p&gt;

&lt;h2 id=&quot;integración&quot;&gt;Integración&lt;/h2&gt;

&lt;p&gt;Cuando hablamos de tecnología probada, no sólo nos referimos a componentes individuales sino a conjuntos de tecnologías usados para resolver un problema comúnmente. Piensa en PHP + MySQL + Memcache, Python (Django) + PostgreSQL + Redis.&lt;/p&gt;

&lt;p&gt;Una dificultad extra de usar la tecnología más nueva es que es probable que la tecnología que ya estamos usando no se lleve bien, pero no lo sabremos hasta que la probemos y encontremos las nuevas dificultades.&lt;/p&gt;

&lt;h3 id=&quot;sistemas-en-producción-y-número-de-piezas&quot;&gt;Sistemas en producción y número de piezas&lt;/h3&gt;

&lt;p&gt;Mantener algo en producción es difícil y requiere trabajo y planeación. No porque puedas empezar a usar Neo4J en cinco minutos significa que debas usarla en tu próximo proyecto, ya que el número de elementos diferentes que uses en tu sistema está &lt;em&gt;directamente relacionado con la dificultad de mantener tu sistema en producción y estable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Deberías buscar &lt;em&gt;resolver el mayor número de problemas con el menor número de tecnologías posible.&lt;/em&gt; Hacerlo te evitará crear una maraña de sistemas imposible de entender y &lt;strong&gt;mantener&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1584168893/71161A7B-26AA-4A71-9318-CC74AD810385_yivlr9.png&quot; alt=&quot;Comparación entre un sistema simple y uno complejo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ecosistema&quot;&gt;Ecosistema&lt;/h2&gt;

&lt;p&gt;Escoger tecnología que ha sido usada por mucho tiempo y que ya no es novedosa, permite que te aproveches de un cuerpo de conocimiento que ya está disponible para que aprendas, un montón de problemas resueltos y compartidos por otros y un ecosistema maduro que te permitirá avanzar en tus problemas específicos más rápido.&lt;/p&gt;

&lt;p&gt;No hay nada peor cuando estás desarrollando que encontrarte con un problema incomprensible (y una pregunta sin respuestas en Stack Overflow) o con un bug que no ha sido resuelto en tu lenguaje o herramienta. No estoy diciendo que es el fin del mundo, pero seguramente algo que te pudo tomar 10 minutos con la ayuda de otros ahora te costará dos días resolviendo ese obscuro problema.&lt;/p&gt;

&lt;h3 id=&quot;dominio-de-la-tecnología&quot;&gt;Dominio de la tecnología&lt;/h3&gt;

&lt;p&gt;Trabajar con la misma tecnología repetidamente hará que tu conocimiento en esa tecnología se vuelva como andar en bicicleta: pasarás al campo de la competencia inconsciente, la usarás casi como si fuera parte de tu cuerpo y podrás enfocarte más rápido en resolver tus problemas específicos.&lt;/p&gt;

&lt;p&gt;Una desventaja que viene con esto es la famosa frase “Aquel con un martillo piensa que todo es un clavo”, pero se puede evitar manteniéndote al pendiente de los avances tecnológicos en proyectos de juguete y empapándote de nuevas cosas mediante el estudio continuo, para que no se pierda la frescura de lo que haces.&lt;/p&gt;

&lt;p&gt;Después de pensar en todo esto, aún hay veces que conviene integrar ya sea una tecnología que no se estaba manteniendo en el proyecto o lo más nuevo.&lt;/p&gt;

&lt;h2 id=&quot;cuando-integrar-nueva-tecnología&quot;&gt;Cuando integrar nueva tecnología&lt;/h2&gt;

&lt;p&gt;El caso principal en el que conviene integrar una nueva tecnología tiene que ver con un equilibrio en los costos. La principal pregunta que debes hacer es: ¿facilita mis tareas TANTO esta tecnología que equilibra el trabajo extra que tendré que hacer?&lt;/p&gt;

&lt;p&gt;Con “trabajo extra” nos referimos a todo lo mencionado en los puntos anteriores, la curva de aprendizaje, la carga añadida de nueva infraestructura, las dificultades no encontradas aún, etc. Puede haber casos en los que una tecnología nueva supere todo esto, dándote una productividad mayor o permitiéndote hacer cosas que son muy muy difíciles de lograr con la tecnología actual.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Es más conveniente tanto para ti como para el negocio que tus golpes de dopamina vengan por el lado de resolver problemas emocionantes &lt;em&gt;útiles para algún cliente y para el negocio&lt;/em&gt;, que por andar resolviendo problemas oscuros que nadie le proveen mucho valor (tal vez aprendizaje, pero se puede obtener de otras formas).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enfoca tus esfuerzos en cosas útiles para el negocio.&lt;/strong&gt;&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="arquitectura" /><category term="infraestructura" /><category term="decisiones-técnicas" /><summary type="html">Si quieres hacer feliz a un desarrollador, dale una tecnología nueva y brillante. En este artículo hablamos de por qué es mejor idea escoger tecnología probada.</summary></entry><entry><title type="html">A Philosophy of Software Design: Ocultar información</title><link href="https://blog.thedojo.mx/2020/03/07/a-philosophy-of-software-design-ocultar-informacion.html" rel="alternate" type="text/html" title="A Philosophy of Software Design: Ocultar información" /><published>2020-03-07T00:00:00-06:00</published><updated>2020-03-07T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/03/07/a-philosophy-of-software-design-ocultar-informacion</id><content type="html" xml:base="https://blog.thedojo.mx/2020/03/07/a-philosophy-of-software-design-ocultar-informacion.html">&lt;blockquote&gt;
  &lt;p&gt;La idea básica es que cada módulo debería encapsular algunas piezas de conocimiento, que representen decisiones de diseño. - &lt;strong&gt;John Ousterhout&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En &lt;a href=&quot;https://blog.thedojo.mx/2020/03/02/a-philosophy-of-software-design-los-modulos-deben-ser-profundos.html&quot;&gt;el artículo anterior&lt;/a&gt; vimos por qué es bueno que los módulos sean profundos, es decir, oculten detalles de implementación y funcionalidades detrás de una interfaz lo más sencilla posible. En este y los siguientes artículos vamos a ver maneras prácticas de lograr esto, basado en ejemplos de &lt;a href=&quot;https://amzn.to/2H92nwA&quot;&gt;“A Philosophy of Software Design”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;En este artículo hablaremos de cómo &lt;strong&gt;ocultar información&lt;/strong&gt; que no es necesaria saber para usar los módulos, ya que complicaría su uso, creando &lt;a href=&quot;https://blog.thedojo.mx/2020/02/26/tres-formas-de-identificar-la-caomplejidad-posd6.html#carga-cognitiva&quot;&gt;carga cognitiva&lt;/a&gt;, uno de los síntomas y consecuencias de la complejidad innecesaria.&lt;/p&gt;

&lt;p&gt;Para saber cómo esconder la información debemos entender por dónde se escapa, prácticas comunes que llevan a un mal diseño y que pueden hacer que nuestro programa sea difícil de entender y mantener.&lt;/p&gt;

&lt;h2 id=&quot;fugas-de-información&quot;&gt;Fugas de información&lt;/h2&gt;

&lt;p&gt;Tener fuga de información es revelar información que no deberíamos, porque se rompe el propósito del encapsulamiento en el módulo.&lt;/p&gt;

&lt;p&gt;Recuerda la cita del principio: un módulo tiene que ocultar y mantener &lt;em&gt;decisiones de diseño&lt;/em&gt;. Si esta decisión cambia y tienes que modificar varios módulos, tienes una fuga de información. En otras palabras, &lt;strong&gt;una fuga de información sucede cuando una decisión de diseño se ve reflejada en varios módulos&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ejemplo. Piensa en una clase se conecte a una API para obtener información relacionada con los códigos postales. Para todos los usuarios de esta clase, debería ser &lt;strong&gt;irrelevante&lt;/strong&gt; qué API se está usando, si es una API HTTP externa, un archivo gigantesco con todos los datos, una base de datos o lo que sea, mientras la clase cumpla con su trabajo.&lt;/p&gt;

&lt;p&gt;Si al hacer cambios en esta decisión de diseño tienes que cambiar otras cosas a parte de esta clase, tienes algún tipo de fuga de información. ¿Ya pensaste en las formas en las que se puede escapar la información?&lt;/p&gt;

&lt;p&gt;John Ousterhout sugiere hacerte la siguiente pregunta:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;¿Cómo puedo reorganizar estas clases para que esta parte del conocimiento general sólo afecte a esta clase?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Veamos un ejemplo de una fuga de información. Piensa en una aplicación en la que la principal tarea sea obtener el estado del clima y mostrarlo al usuario. Para esto usaremos una API que nos dará los datos y nosotros seremos los encargados de mostrarla.&lt;/p&gt;

&lt;p&gt;Una pieza de información importante para obtener el clima es ala ubicación. Considera que la API actual recibe el nombre de la ciudad para devolver las predicciones meteorológicas.&lt;/p&gt;

&lt;p&gt;Veamos dos diseños:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;En este escenario hacemos que la inicialización de la clase o cada una de las llamadas a sus métodos para obtener los diferentes valores manden el nombre de la ciudad de los datos que buscamos. Así, si buscamos los datos acerca de México mandamos “México” como parámetro para obtener la temperatura.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;En otro escenario decidimos que aunque la API reciba el nombre de la ciudad, nuestra clase recibirá las coordenadas e internamente obtendremos el nombre de la ciudad de esas coordenadas y lo mandaremos a la API. Es probable que para esta transformación usemos otra clase u otro paquete.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;¿Qué diseño te parece correcto?&lt;/p&gt;

&lt;p&gt;En el diseño 1 estamos revelando información acerca de  &lt;em&gt;la implementación&lt;/em&gt; de esta API específicamente. ¿Qué pasaría si tenemos que cambiar de API y la próxima necesita las coordenadas en vez de el nombre de la ciudad? Tendríamos que cambiar el diseño en la clase de la API y en los lugares en los que se usa.&lt;/p&gt;

&lt;p&gt;En el segundo diseño estamos ocultando más detalles detalles de implementación, ya que las coordenadas son una forma más natural de comunicar lugares y es probable que se lo que se obtenga del usuario (por ejemplo, desde su geolocalización por dispositivo). La transformación de las coordenadas en un nombre de ciudad quita carga del usuario de nuestra clase.&lt;/p&gt;

&lt;p&gt;¿Puedes pensar en otros ejemplos? En el libro &lt;a href=&quot;https://amzn.to/2H92nwA&quot;&gt;PoSD&lt;/a&gt; vienen algunos.&lt;/p&gt;

&lt;p&gt;En el próximo artículo hablaremos de otra forma de fugas de información: la descomposición temporal.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="PoSD" /><category term="interfaces" /><category term="módulo" /><category term="complejidad" /><category term="diseño-de-software" /><summary type="html">Ocultar información es una de las claves para reducir la complejidad, veamos algunas maneras de lograrlo.</summary></entry><entry><title type="html">A Philosophy of Software Design: Los módulos deben ser profundos</title><link href="https://blog.thedojo.mx/2020/03/02/a-philosophy-of-software-design-los-modulos-deben-ser-profundos.html" rel="alternate" type="text/html" title="A Philosophy of Software Design: Los módulos deben ser profundos" /><published>2020-03-02T00:00:00-06:00</published><updated>2020-03-02T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/03/02/a-philosophy-of-software-design-los-modulos-deben-ser-profundos</id><content type="html" xml:base="https://blog.thedojo.mx/2020/03/02/a-philosophy-of-software-design-los-modulos-deben-ser-profundos.html">&lt;p&gt;Para reducir la complejidad de los programas es importante tener técnicas definidas. La primera que vamos a analizar es la organización y separación de código a alto nivel, es decir separación en módulos.&lt;/p&gt;

&lt;h2 id=&quot;por-qué-es-importante-la-separación&quot;&gt;Por qué es importante la separación&lt;/h2&gt;

&lt;p&gt;Antes de empezar a hablar de cómo deberíamos diseñar nuestros módulos hablemos de por qué es importante la separación.&lt;/p&gt;

&lt;p&gt;La mejor forma de resolver un problema complejo es mediante &lt;em&gt;la descomposición&lt;/em&gt; del problema en problemas más sencillos. Estos problemas se resuelven individualmente, idealmente de de manera independiente en un módulo por separado para cada uno. De esta manera podemos hacer software más mantenible y fácil de entender. Incluso se puede dividir mejor el trabajo.&lt;/p&gt;

&lt;p&gt;La división del problema permite además &lt;strong&gt;ocultar&lt;/strong&gt; información no relevante para el problema en cuestión.&lt;/p&gt;

&lt;p&gt;Esta división del trabajo es diferente dependiendo del paradigma del lenguaje de programación que usemos, así que veamos a qué nos referimos con un &lt;strong&gt;módulo&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;qué-es-un-módulo&quot;&gt;¿Qué es un módulo?&lt;/h2&gt;

&lt;p&gt;Una definición fácil y amplia de “módulo” dada por &lt;a href=&quot;https://amzn.to/2H92nwA&quot;&gt;“A Philosophy of Software Design”&lt;/a&gt; es: &lt;em&gt;todo aquello que agrupe código, proveyendo separación de funcionalidad&lt;/em&gt;, es decir que agrupe comportamiento en detrás de una &lt;em&gt;interfaz&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Un módulo puede ser una función, una clase, un paquete o cosas similares dependiendo del lenguaje de programación. Un módulo incluso puede ser una API HTTP u otro programa.&lt;/p&gt;

&lt;p&gt;Como resumen: &lt;strong&gt;un módulo permite hacer &lt;em&gt;algo&lt;/em&gt; mediante una interfaz.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, ¿qué es la interfaz de un módulo?&lt;/p&gt;

&lt;h2 id=&quot;interfaces&quot;&gt;Interfaces&lt;/h2&gt;

&lt;p&gt;Ya hemos hablado sobre &lt;a href=&quot;https://www.youtube.com/watch?v=n8MxyHG0j3Q&amp;amp;t&quot;&gt;lo que es una interfaz&lt;/a&gt;, pero para resumir: es el punto en donde un sistema, en este caso específico, un módulo, se encuentra con otro (otro módulo o código que lo usa).&lt;/p&gt;

&lt;p&gt;Un módulo tiene una interfaz que permite a otras partes del sistema usarlo. Usaremos el caso más sencillo, una función. La interfaz de una función es su firma: su nombre, los parámetros que recibe y lo que devuelve.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;archivo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my_file.md&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Devuelve un apuntador a un archivo abierto
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La interfaz de la función es su nombre &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; (nos permite identificarla y comunica información sobre lo que hace), el nombre del archivo como primer parámetro y el modo de operación en el segundo.&lt;/p&gt;

&lt;p&gt;Dependiendo de la forma de agrupar la interfaz de los módulos varía, pero recuerda esto: &lt;strong&gt;la interfaz es la parte visible del módulo hacia otros módulos&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;diseño-de-módulos&quot;&gt;Diseño de módulos&lt;/h2&gt;

&lt;p&gt;Aquí entramos en lo importante: los módulos deberían ser lo más profundos posible.&lt;/p&gt;

&lt;p&gt;¿A qué nos referimos con un módulo profundo?&lt;/p&gt;

&lt;p&gt;Observa el siguiente diagrama:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1583213511/IMG_0058_xm2b6w.jpg&quot; alt=&quot;Módulos profundos vs superficiales&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Un módulo profundo tiene una &lt;strong&gt;interfaz sencilla&lt;/strong&gt; o fácil de usar para la mayoría de los casos de uso y provee de mucha funcionalidad, hace mucho por ti.&lt;/p&gt;

&lt;p&gt;Un módulo superficial tiene una interfaz compleja o difícil de usar y provee poca funcionalidad.&lt;/p&gt;

&lt;p&gt;Esto no es absoluto: la relación entre la complejidad de la interfaz es relativa a la funcionalidad que provee, por ejemplo, si un módulo hace muchas cosas por ti, puede que requiera muchos datos. La relación interfaz/funcionalidad debe ser razonable para considerar que el módulo es profundo.&lt;/p&gt;

&lt;p&gt;Abrir archivos en la mayoría de los lenguajes es un ejemplo de una función profunda: con una interfaz muy pequeña (el nombre y el modo), la función se encarga de todos los detalles de implementación de apertura y creación del archivo. No te debes de preocupar por cosas como el sistema de archivos, el guardado físico en el disco, por verificar si hay memoria, etc.&lt;/p&gt;

&lt;p&gt;En el caso contrario, los getters y setters que se acostumbra usar en algunos lenguajes de programación (Java) son ejemplo de funciones poco profundas, generalmente no hacen algo más que devolver el valor de la propiedad.&lt;/p&gt;

&lt;p&gt;Ejemplo: Piensa en un aparato electrónico. En una televisión, sus control remoto te permiten acceder a las funcionalidades de encender el panel de iluminación, captar la señal del canal, decodificarlo y saltar entre diferentes canales, todo sin preocuparte tú por los detalles. Sólo la usas y ya. Mientras más detalles de implementación oculte es más fácil de usar.&lt;/p&gt;

&lt;h2 id=&quot;ventajas-de-los-módulos-profundos&quot;&gt;Ventajas de los módulos profundos&lt;/h2&gt;

&lt;p&gt;Encontrar un equilibrio entre la cantidad de código que metes en un módulo y la interfaz que expone tiene varias ventajas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;El código se puede re-usar en otras partes del sistema&lt;/li&gt;
  &lt;li&gt;Evitas la acumulación de interfaces, es decir, tener demasiadas interfaces (funciones, clases o módulos) que tienes que aprender a usar y que hacen poco por ti&lt;/li&gt;
  &lt;li&gt;La expansión de cambios (tener que tocar muchos lados del sistema para hacer un cambio relativamente pequeño)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalmente, recuerda que una de las funciones que proveen los módulos es &lt;em&gt;ocultar&lt;/em&gt; la complejidad. ¿Cuántas veces has visto lo que hacen las funciones prefabricadas de tu lenguaje de programación? Es probable que ninguna. Los módulos profundos y bien hechos permiten ocultar mayor cantidad de información y hace más fácil trabajar con ellos y simplifica el sistema en general.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="módulo" /><category term="PoSD" /><category term="ousterhout" /><category term="complejidad" /><category term="función" /><summary type="html">Veamos algunos lineamientos para el diseño de funciones/clases/módulos que ayudarán a reducir la complejidad de tus sistemas de software.</summary></entry><entry><title type="html">A Philosophy of Software Design: Tres formas de identificar la complejidad</title><link href="https://blog.thedojo.mx/2020/02/26/tres-formas-de-identificar-la-caomplejidad-posd6.html" rel="alternate" type="text/html" title="A Philosophy of Software Design: Tres formas de identificar la complejidad" /><published>2020-02-26T00:00:00-06:00</published><updated>2020-02-26T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/02/26/tres-formas-de-identificar-la-caomplejidad-posd6</id><content type="html" xml:base="https://blog.thedojo.mx/2020/02/26/tres-formas-de-identificar-la-caomplejidad-posd6.html">&lt;blockquote&gt;
  &lt;p&gt;“Controlar la complejidad es la esencia de la programación” - Brian W. Kernighan&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Muchas mentes brillantes dedicadas al desarrollo de software han estado de acuerdo en que el principal problema al crear y mantener programas es el manejo de la complejidad.&lt;/p&gt;

&lt;p&gt;Podemos decir que algo complejo es aquello que está &lt;strong&gt;compuesto por muchas piezas relacionadas entre ellas&lt;/strong&gt;. &lt;a href=&quot;http://web.stanford.edu/~ouster/cgi-bin/home.php&quot;&gt;Ousterhout&lt;/a&gt; lo define de manera práctica &lt;em&gt;como todo aquello que hace que el software sea difícil de entender, escribir o mantener&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;La complejidad es más visible para los lectores que para los escritores [del código]. Si escribes una pieza de código que parece simple para ti, pero otras personas piensan que es compleja, entonces es &lt;strong&gt;compleja&lt;/strong&gt;. - John Ousterhout&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Philosophy of Software Design habla de tres formas de identificar un programa más complejo de lo que debería ser:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Amplificación de cambios&lt;/li&gt;
  &lt;li&gt;Carga cognitiva&lt;/li&gt;
  &lt;li&gt;Desconocidos desconocidos&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Identificar la complejidad es una &lt;strong&gt;habilidad crítica para el buen diseño de software&lt;/strong&gt;, te permitirá crear sistemas más simples y evitará que gastes recursos en desarrollar soluciones que son demasiado complejas.&lt;/p&gt;

&lt;h2 id=&quot;amplificación-de-cambios&quot;&gt;Amplificación de cambios&lt;/h2&gt;

&lt;p&gt;Este síntoma de la complejidad se hace obvio cuando estás haciendo un cambio que debió haber sido sencillo y tienes que tocar 7 archivos, 3 clases y 4 funciones. Se refiere a que una funcionalidad que parece sencilla del programa está repartida en muchos lados y para lograr hacer un cambio hay que tocar muchas partes del sistema.&lt;/p&gt;

&lt;p&gt;Esto se pude dar cuando parámetros o valores que pueden estar centralizados o referenciados se ponen fijos a través de muchos archivos. También cuando código que se podría reutilizar se copia y pega.&lt;/p&gt;

&lt;h2 id=&quot;carga-cognitiva&quot;&gt;Carga cognitiva&lt;/h2&gt;

&lt;p&gt;Si tienes que mantener muchas cosas en la cabeza para poder entender el sistema, es complejo. Puede que tengas que entender y aprender muchas cosas acerca del funcionamiento del programa para usarlo bien y no causar un desastre. Cuando algo no tiene una interfaz simple, causa carga cognitiva.&lt;/p&gt;

&lt;p&gt;El ejemplo son las funciones de lenguajes de programación que nunca aprendemos a usar porque tienen parámetros que aunque siempre son los mismos son requeridos por no tener un default decente. O por ejemplo, aquellas funciones que no recuerdas si cambian los parámetros o devuelven uno nuevo.&lt;/p&gt;

&lt;p&gt;Aunque programas más cortos están relacionados con baja carga cognitiva, no siempre es el caso debido a que ese poco código que existe sea difícil de entender.&lt;/p&gt;

&lt;h2 id=&quot;desconocidos-desconocidos&quot;&gt;Desconocidos desconocidos&lt;/h2&gt;

&lt;p&gt;¿Tienes miedo de cambiar algo porque no sabes lo que pueda pasar y no hay ni documentación a la que puedas referirte? En este caso el sistema tiene información &lt;strong&gt;que no sabes que no sabes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Un desconocido desconocido es aquella información que ni siquiera sabemos que estaba ahí y que no conocíamos, como algunas características del código, parámetros ocultos y comportamientos que no son fáciles de detectar ni están documentados.&lt;/p&gt;

&lt;p&gt;¿Recuerdas la broma que dice: &lt;em&gt;“Cuando escribí este código sólo Dios y yo sabíamos lo que hacía, ahora sólo Dios sabe”&lt;/em&gt;? Muchas veces nos pasa así con el código y es el ejemplo perfecto de los desconocidos desconocidos, sobre todo para otros programadores.&lt;/p&gt;

&lt;h2 id=&quot;medición-de-la-complejidad&quot;&gt;Medición de la complejidad&lt;/h2&gt;

&lt;p&gt;Un sistema puede ser complejo independientemente de su tamaño, es decir, hay sistemas no tan grandes que son muy complejos.&lt;/p&gt;

&lt;p&gt;Para determinar la complejidad se puede pensar en la siguiente fórmula.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1581460560/Untitled_Artwork_3_oljybd.jpg&quot; alt=&quot;Fórmula para calcular la complejidad&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esto lo podríamos explicar como:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;La complejidad total de un sistema es la sumatoria de la complejidad de cada una de sus partes multiplicada por el tiempo que los desarrolladores pasan en esa parte del código.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta complejidad puede evitar que avances tanto como deberías, pero el primer paso es identificarla como lo viste aquí. En los siguientes artículos hablaremos de técnicas para reducir la complejidad.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="ousterhout" /><category term="complejidad" /><category term="diseño-de-software" /><category term="posd" /><summary type="html">Aprende a descubrir y medir la complejidad en tus proyectos</summary></entry><entry><title type="html">Eloquent JavaScript en Español</title><link href="https://blog.thedojo.mx/2020/02/21/eloquent-javascript-en-espanol.html" rel="alternate" type="text/html" title="Eloquent JavaScript en Español" /><published>2020-02-21T00:00:00-06:00</published><updated>2020-02-21T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/02/21/eloquent-javascript-en-espanol</id><content type="html" xml:base="https://blog.thedojo.mx/2020/02/21/eloquent-javascript-en-espanol.html">&lt;blockquote&gt;
  &lt;p&gt;TL;DR: Estamos trabajando en una nueva traducción de Eloquent JavaScript al español, en su tercera edición. La puedes encontrar aquí: &lt;a href=&quot;https://eloquentjs-es.thedojo.mx/&quot;&gt;Eloquent JavaScript en Español&lt;/a&gt;. Está la versión en &lt;a href=&quot;https://eloquentjs-es.thedojo.mx/Eloquent_JavaScript.pdf&quot;&gt;Eloquent JavaScript en Español en PDF&lt;/a&gt;, que actualizamos cada capítulo. Si quieres contribuir puedes ponerte de acuerdo a través de este foro o en GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Desde el 2015 intentamos empezar a traducir la 2da edición de Eloquent JavaScript. Puedes ver el post en Medium aquí: &lt;a href=&quot;http://bit.ly/39W8qAH&quot;&gt;Traducción de Eloquent JavaScript al Español&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pasó el tiempo y tradujimos &lt;a href=&quot;http://bit.ly/2T3FLCZ&quot;&gt;algunos capítulos&lt;/a&gt;, pero luego salió la tercera edición.&lt;/p&gt;

&lt;p&gt;Decidimos esperar a que se terminara para traducirlo completo, y hemos empezado de nuevo con los esfuerzos de traducción. Esta vez hemos empezados basados en la traducción de &lt;a href=&quot;https://github.com/CodeKommissar&quot;&gt;Luis Rodríguez&lt;/a&gt; quien tradujo los primeros 12 capítulos pero no pudimos contactar para ponernos de acuerdo.&lt;/p&gt;

&lt;p&gt;La primera etapa de la traducción consiste en una revisión rápida de los capítulos ya traducidos, la segunda en completar los capítulos que faltan y la tercera en una revisión profunda de los 12 primeros capítulos.&lt;/p&gt;

&lt;p&gt;Puedes ver la página oficial del libro aquí: &lt;a href=&quot;https://eloquentjs-es.thedojo.mx/&quot;&gt;Eloquent JavaScript ES&lt;/a&gt;.
Puedes leer el libro en línea o descargarlo en PDF, próximamente en EPUB y Mobi. También estamos trabajando en una portada exclusiva para la versión en español.&lt;/p&gt;

&lt;p&gt;¿Por qué lo hacemos?&lt;/p&gt;

&lt;h2 id=&quot;la-importancia-del-contenido-en-tu-idioma-nativo&quot;&gt;La importancia del contenido en tu idioma nativo&lt;/h2&gt;

&lt;p&gt;Es cierto que si quieres ser un buen desarrollador de software &lt;strong&gt;tienes&lt;/strong&gt; que aprender inglés. Si quieres ganar un mejor sueldo por poder trabajar para equipos remotos también es un requisito.&lt;/p&gt;

&lt;p&gt;Pero es aceptado que se aprende mucho mejor en la lengua materna, así que si confías en que lo que tienes que estudiar es una buena traducción, no deberías dudar en estudiar en la lengua con la que creciste y que mejor conoces, el idioma de tus pensamientos.&lt;/p&gt;

&lt;p&gt;Otras veces, hay personas que no tienen otra opción y principalmente por ellas que se está realizando esta traducción. No debería sumarse la barrera del lenguaje a la carga de aprender a programar que ya es fuerte.&lt;/p&gt;

&lt;p&gt;Este es, esperamos, el primero de varios libros que queremos traducir al español.&lt;/p&gt;

&lt;h2 id=&quot;contribuciones&quot;&gt;Contribuciones&lt;/h2&gt;

&lt;p&gt;Si dominas el inglés (sobre todo técnico) y tienes buena ortografía, necesitamos tu ayuda para traducción. También necesitamos revisores, personas que lean el contenido y hagan comentarios (o Pull Requests) sobre frases poco claras, errores de ortografía o gramática. Si tienes habilidades de diseño gráfico necesitamos ayuda para traducir las ilustraciones.&lt;/p&gt;

&lt;p&gt;Finalmente, en el futuro habilitaremos algún medio para contribuciones monetarias, para acelerar la traducción mediante la contratación de traductores y diseñadores profesionales.&lt;/p&gt;

&lt;p&gt;No dudes en ponerte en contacto en &lt;a href=&quot;https://github.com/Eloquent-JavaScript-Espanol/Eloquent-JavaScript-ES&quot;&gt;GitHub&lt;/a&gt; o a través de este artículo, en los comentarios.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="eloquentjs-español" /><category term="eloquent-js" /><category term="eloquent" /><category term="javascript" /><category term="eloquent-javascript-pdf" /><summary type="html">Traudcción del Eloquent JavaScript al español, 3ra edición</summary></entry><entry><title type="html">A Philosophy of Software Design: Desarrollo Táctico vs Estratégico</title><link href="https://blog.thedojo.mx/2020/02/11/a-philosophy-of-software-design-programacion-tactica-vs-estrategica.html" rel="alternate" type="text/html" title="A Philosophy of Software Design: Desarrollo Táctico vs Estratégico" /><published>2020-02-11T00:00:00-06:00</published><updated>2020-02-11T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/02/11/a-philosophy-of-software-design-programacion-tactica-vs-estrategica</id><content type="html" xml:base="https://blog.thedojo.mx/2020/02/11/a-philosophy-of-software-design-programacion-tactica-vs-estrategica.html">&lt;p&gt;Cuando desarrollas software tienes dos actitudes para escoger: desarrollas de forma rápida y sucia (desarrollo táctico) o de forma ordenada, planeada y pensando en el futuro. Cada uno de estos tipos de desarrollo o filosofías de desarrollo tiene ventajas y desventajas. Pero veamos a más detalle de qué trata cada uno.&lt;/p&gt;

&lt;h2 id=&quot;desarrollo-táctico&quot;&gt;Desarrollo táctico&lt;/h2&gt;

&lt;p&gt;Está caracterizado por la alta velocidad inicial con la que empiezas a desarrollar y crear las funciones de tu programa. Con esta actitud, tu principal objetivo es tener &lt;em&gt;código que funcione&lt;/em&gt;. Con esta forma de trabajo no gastas mucho tiempo buscando el mejor diseño para tu programa sino que te enfocas en terminar lo más rápido posible. Tu vista está en el &lt;strong&gt;corto plazo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Con tal de terminar con la tarea lo más pronto posible, no importa si agregas algo de complejidad al sistema.&lt;/p&gt;

&lt;p&gt;Este tipo de desarrollo es alentado por los negocios que quieren que su código o programa esté tan pronto como sea posible sin importar el costo. ¿Tiene uso este código y esta forma de pensar? Por supuesto: cuando se quiere construir un producto muy muy rápido y se tiene conciencia de que &lt;em&gt;será desechable&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pero otra cosa que te puede llevar a desarrollar de esta manera es la falta de planeación: estimar en mucho menos tiempo una tarea o malgastar el tiempo que tenías disponible.&lt;/p&gt;

&lt;p&gt;El desarrollo táctico produce programas que con el tiempo se van haciendo más y más difíciles de mantener, hasta que es tan impráctico que parece más fácil volver a hacerlo. &lt;strong&gt;La velocidad de desarrollo se va reduciendo.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Una vez que empiezas a programar un sistema de esta forma, es muy difícil cambiar. Y lo más triste es que la mayoría de las organizaciones y programadores prefieren este método.&lt;/p&gt;

&lt;p&gt;Algunos ejemplos de desarrollo táctico:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hard-coding de parámetros que deberían ser configurables&lt;/li&gt;
  &lt;li&gt;Duplicación innecesaria&lt;/li&gt;
  &lt;li&gt;Abstracciones deficientes o complicadas en extremo&lt;/li&gt;
  &lt;li&gt;Código difícil de entender&lt;/li&gt;
  &lt;li&gt;Manejo de excepciones deficiente(envolver todo en un try/catch, no manejar excepciones)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;desarrollo-estratégico&quot;&gt;Desarrollo Estratégico&lt;/h2&gt;

&lt;p&gt;Este tipo de desarrollo se caracteriza por poner atención en el diseño y la calidad del código. Lo más importante no es directamente terminar la tarea pendiente, sino también hacerlo de manera que facilite las tareas futuras y mantenga la complejidad bajo control. La tarea principal es &lt;em&gt;crear un muy buen diseño&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para el desarrollo estratégico &lt;strong&gt;código que funciona no es suficiente&lt;/strong&gt;. En vez de introducir partes que hagan más complejo el código, buscas mejorar aunque sea una pequeña parte del código cada que trabajas en él.&lt;/p&gt;

&lt;p&gt;Esto no quiere decir que harás todo el diseño por adelantado, sino que se va a ir creando un buen diseño de las partes que se vayan necesitando.&lt;/p&gt;

&lt;p&gt;Es tener una actitud de inversión en la base de código.&lt;/p&gt;

&lt;p&gt;Esta actitud te hará ir más lento al principio, pero con el tiempo el equipo acelerará y podrá crear nuevas funciones muy rápido.&lt;/p&gt;

&lt;p&gt;Ejemplos de prácticas desarrollo estratégico:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Probar varias implementaciones hasta encontrar la más limpia&lt;/li&gt;
  &lt;li&gt;Documentar y comentar el código&lt;/li&gt;
  &lt;li&gt;Limpiar y mejorar el código cada que sea posible (cada que lo toques)&lt;/li&gt;
  &lt;li&gt;Crear pruebas unitarias&lt;/li&gt;
  &lt;li&gt;Revisión de código&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La siguiente imagen ilustra cómo se comporta el avance total en las dos formas de programar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_1200/v1581404091/Untitled_Artwork_2_op8k0e.jpg&quot; alt=&quot;Comparación desarrollo táctico vs estratégico&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se puede ver, el desarrollo estratégico tarda más en entregar resultados, pero vale la pena si es un proyecto importante con un tiempo de vida esperado largo. Puedes pensarlo como la diferencia entre construir una choza o construcción sin ningún tipo de diseño contra una casa bien diseñada y con buenos materiales, como en la historia de los tres cochinitos. ¿Cuál aguantará más?&lt;/p&gt;

&lt;p&gt;Muchas veces aquí está la diferencia entre si algo “escala” o “no escala”, no en la tecnología elegida. Es obvio que a una choza no le puedes construir un segundo piso.&lt;/p&gt;

&lt;p&gt;Pero no seamos puristas y pensemos que si no es de la forma estratégica no vale la pena, la pregunta es: &lt;em&gt;¿Qué tipo de desarrollo conviene para tu proyecto según su tiempo de vida?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Este y los siguientes artículos están basados en el libro &lt;a href=&quot;https://amzn.to/2H92nwA&quot;&gt;“A Philosophy of Software Design”&lt;/a&gt; de John K. Ousterhout.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="a-philosophy-of-software-design" /><category term="complejidad" /><summary type="html">Dos diferentes formas de desarrollar sistemas de software</summary></entry><entry><title type="html">¿Qué es DevOps?</title><link href="https://blog.thedojo.mx/2020/01/16/que-es-devops.html" rel="alternate" type="text/html" title="¿Qué es DevOps?" /><published>2020-01-16T00:00:00-06:00</published><updated>2020-01-16T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2020/01/16/que-es-devops</id><content type="html" xml:base="https://blog.thedojo.mx/2020/01/16/que-es-devops.html">&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; es un término de recientemente creación (2013) que representa un cultura de trabajo enfocada en resolver los problemas que han sido persistentes en la entrega y servicio en el área de productos tecnológicos.&lt;/p&gt;

&lt;p&gt;En este artículo platicaremos qué significa y sus fundamentos.&lt;/p&gt;

&lt;p&gt;Adelanto: DevOps no es un rol, una palabra mágica y mucho menos automatización de servidores.&lt;/p&gt;

&lt;h2 id=&quot;por-qué-importa&quot;&gt;¿Por qué importa?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;En las eras económicas anteriores, los negocios creaban valor moviendo átomos. Ahora crean valor moviendo bits. - Jeffrey Snover&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ahora todas las empresas son empresas de tecnología. Las que no aprovechan la tecnología ya están siendo superadas por las que sí lo hacen. Y las que lo hacen mal en su momento serán superadas por las que usan mejor la tecnología.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cada industria y compañía que no traiga el software al corazón de su negocio será cambiada radicalmente sin previo aviso. - Jeffrey Immelt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Así que es importante que las empresas aprendan a manejar lo mejor posible la tecnología y a crear valor o aumentar el valor que producen mediante ella.&lt;/p&gt;

&lt;h2 id=&quot;los-problemas&quot;&gt;Los problemas&lt;/h2&gt;

&lt;p&gt;Si has trabajado en desarrollo de software, infraestructura o en el área de IT de alguna empresa tal vez no necesito contarte esto. Todo lo relacionado con productos digitales está plagado de proyectos no cumplidos en tiempo, nunca terminados, pasados de presupuesto, atención a clientes internos extremadamente deficiente, etc.&lt;/p&gt;

&lt;p&gt;No conforme con eso hay millones de historias de terror de cómo los negocios no se interesan en lo mínimo por mejorar estas áreas, sólo exigiendo cada vez más cosas y poniendo fechas irrazonables.&lt;/p&gt;

&lt;p&gt;Otras historias cuentan los actos heróicos que las personas que trabajamos en estas áreas hemos tenido que hacer para cumplir con los compromisos adquiridos: trabajar toda la noche por varios días seguidos, cambios de último momentos, largas horas en despliegues y re-establecimiento de servicios, etc. O se descubre que el sistema no cumple con los requerimientos legales de protección información y ahora hay que trabajar horas extras para cumplirlo.&lt;/p&gt;

&lt;p&gt;Y por último la vista del lado de la operación del negocio: cada que se va a poner en producción un cambio, un nuevo producto o se va a actualizar algo todos temen que algo catastrófico pase con cierta razón. Ha pasado que, por culpa de estos cambios, los sistemas que soportan la operación diaria se caen por horas haciendo perder al negocio clientes, dinero y reputación.&lt;/p&gt;

&lt;p&gt;Todos estos problemas son lo que DevOps ataca con 3 principios o “tres caminos”. Pero para habilitar esto, se necesita algo de la organización.&lt;/p&gt;

&lt;h2 id=&quot;todos-los-involucrados-trabajan-para-lo-mismo&quot;&gt;Todos los involucrados trabajan para lo mismo&lt;/h2&gt;

&lt;p&gt;Sobre todo en empresas grandes, donde es más común dividir en departamentos debido a la gran cantidad de trabajo disponible, es normal que &lt;strong&gt;cada departamento busque sólo sus propios intereses&lt;/strong&gt; y cumplir con sus métricas de desempeño sin poner en primer lugar lo más importante: la producción de valor para el negocio en general.&lt;/p&gt;

&lt;p&gt;Así que la primera precondición para que se pueda alcanzar verdadera productividad es que los involucrados comprendan que todos trabajan con el fin de crear cosas de valor para que el negocio siga funcionando y pueda hacerlo cada vez mejor. Esto implica eliminar la burocracia, las guerras entre departamentos y la reducción de trabajo que sólo se hace por demostrar que se tiene algo que hacer como tristemente ha estado marcado por este estigma el departamento de Seguridad de la Información o su equivalente.&lt;/p&gt;

&lt;p&gt;Si la actividad qu se está haciendo no contribuye de alguna forma a crear valor para el negocio debería ser eliminada.&lt;/p&gt;

&lt;p&gt;Esta condición por sí misma es difícil de cumplir y sin ella no es posible lograr las demás. ¿Quiénes son los encargados poner las condiciones para que se cumpla? La dirección. La dirección de la empresa tiene la responsabilidad de elegir personas razonables, buenas en sus campos y dispuestas a cooperar para que la empresa o el proyecto progresen más allá de su ego. Repito, &lt;strong&gt;sin esto lo demás es imposible o inútil&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Una vez cumplida la precondición de cooperación con personas dispuestas y hábiles, podemos hablar de los tres caminos.&lt;/p&gt;

&lt;h2 id=&quot;el-primer-camino-flujo&quot;&gt;El primer camino: Flujo&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1579042628/4E94ED23-0268-4F59-A101-1CF009540E01_pssljp.jpg&quot; alt=&quot;Primer camino de DevOps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El primer principio de DevOps establece que debe haber un flujo constante de valor en el área de tecnología de información o de sistemas, como lo quieras llamar. Algo de valor es todo aquello que permite al negocio seguir operando o incrementar los beneficios que obtiene de las operaciones.&lt;/p&gt;

&lt;p&gt;El objetivo principal es &lt;strong&gt;minimizar el tiempo&lt;/strong&gt; que tarda una característica/producto/servicio en entregarse desde que solicita hasta que empieza a cumplir con su función.&lt;/p&gt;

&lt;p&gt;Debido a que el desarrollo de software es una actividad poco predecible, DevOps se enfoca en la parte de la cadena de entrega de valor que va desde que el área de desarrollo termina algo hasta que es puesto en manos de los usuarios finales. Pero no le interesa sólo eso, ya que las personas encargadas del desarrollo deben seguir ciertas prácticas para facilitar el resto del camino.&lt;/p&gt;

&lt;p&gt;Acelerar esta entrega beneficia en gran manera a la forma en que se desarrolla software de calidad.&lt;/p&gt;

&lt;p&gt;Si estás en una empresa pequeña o en una &lt;em&gt;startup&lt;/em&gt; puede que seas tú mismo el que desarrolle y tenga que mantener los programas en operación (producción). Así que reducir la fricción entre estas dos actividades te beneficiará aún más.&lt;/p&gt;

&lt;p&gt;¿Qué prácticas permiten lograrlo?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Hacer el trabajo visible.&lt;/strong&gt; La mayoría del trabajo que realizamos al hacer productos digitales es muy difícil de estimar, tanto en dificultad como en cantidad.
Es por eso que debe haber una manera física de ver el trabajo, como lo habría en un fábrica que realiza productos físicos: si una estación de trabajo tiene demasiado material inmediatamente se notará.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reducir y limitar el trabajo en progreso.&lt;/strong&gt; Mientras más actividades sin terminar existan, más difícil es administrarlas y notar todo el trabajo pendiente. Tener pocas actividades en progreso permite &lt;strong&gt;calcular mejor&lt;/strong&gt; cuánto tardará en terminarse un nuevo requerimiento y atender los errores más rápidamente. Siguiendo con el ejemplo de la fábrica física: existe un límite físico para el material que puede esperar en una estación de trabajo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Establecer procesos&lt;/strong&gt;. Cada uno de los cambios o actividades solicitadas debe pasar por un proceso de revisión que determine si provee valor para el negocio en caso de completarse. Esto implica mantener en algún lado el registro de las tareas solicitadas y su estado actual.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reducir el tamaño del lote trabajo&lt;/strong&gt;. Cuando vamos a entregar algo generalmente agrupamos varias piezas de trabajo para “entregarlas más eficientemente”. Pero en realidad mientras más pequeño sea este lote de trabajo (idealmente de una tarea) mejor se hace la entrega.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Identificar y mejorar las limitantes&lt;/strong&gt;. En todo proceso de trabajo hay puntos que hacen que toda la cadena de entrega de valor sea más lenta. Estos puntos son las limitantes. Para mejorar toda la cadena primero hay que identificarlos y después mejorar su eficiencia para mejorar todo el proceso de producción de valor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Eliminar características no necesarias.&lt;/strong&gt; Mientras más grande sea el producto más difícil será de manejar. Por lo tanto, si alguna característica no aporta valor al usuario final, necesariamente está restando valor a la compañía entera.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Algo que notar de las prácticas de DevOps es que muchas están extraídas de los movimientos de &lt;em&gt;Lean Manufacturing&lt;/em&gt;. Existen otra prácticas, pero personalmente considero que estas son las esenciales.&lt;/p&gt;

&lt;h2 id=&quot;el-segundo-camino-retroalimentación-rápida&quot;&gt;El segundo camino: Retroalimentación rápida&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1579042628/F68161CA-BF97-4E71-B78B-9310C00CD254_sjiled.jpg&quot; alt=&quot;Segundo camino de DevOps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;El segundo camino por el que el valor fluye en las organizaciones que implementan DevOps es de regreso: &lt;strong&gt;debe existir un flujo de información desde los sistemas en producción&lt;/strong&gt; hacia los equipos que están desarrollando los productos y los demás equipos relacionados con esta tarea.&lt;/p&gt;

&lt;p&gt;Esto permite que los problemas sean resueltos según se van encontrando, primeramente. En segundo lugar habilita un flujo de retroalimentación rápido que permitirá crear mejores productos más rápido.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lean Manufactruing&lt;/em&gt; recomienda que la línea de producción no debe continuar si hay algún problema con una sola de las estaciones de trabajo. Lo mismo debería pasar en los equipos de desarrollo y operaciones. Si un problema no puede ser resuelto por los encargados de ello, todo el equipo debería juntarse a resolver el problema hasta que terminen. Lo sé, esto suena contra-intuitivo y poco productivo, pero la experiencia de las fábricas japonesas demuestra que es mucho mejor resolver un problema inmediatamente en vez de dejarlo avanzar en la cadena de producción, para evitar retrabajo.&lt;/p&gt;

&lt;h2 id=&quot;el-tercer-camino-cultura-de-aprendizaje-y-experimentación&quot;&gt;El tercer camino: Cultura de aprendizaje y experimentación&lt;/h2&gt;

&lt;p&gt;Después de implementar el camino hacia el cliente y de regreso, DevOps establece que se tiene que crear un cultura de aprendizaje que permita mediante &lt;strong&gt;ciclos de retroalimentación&lt;/strong&gt; mejorar la forma general en la que se trabaja.&lt;/p&gt;

&lt;p&gt;La siguiente imagen completa los tres caminos de DevOps:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://res.cloudinary.com/hectorip/image/upload/c_scale,w_800/v1579042629/0548901A-3BF6-49BF-8556-B0B12D45F0A9_zgljnk.jpg&quot; alt=&quot;Los tres caminos de DevOps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La empresa debe asegurarse de que los equipos de trabajo están mejorando constantemente mediante el aprendizaje continuo.&lt;/p&gt;

&lt;p&gt;Esto puede lograrse mediante varias prácticas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Experimentación, por ejemplo pruebas A/B&lt;/li&gt;
  &lt;li&gt;Introducción de fallas intencionalmente (&lt;em&gt;chaos engineering&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;Mediciones cada vez más precisas mediante software especializado&lt;/li&gt;
  &lt;li&gt;Agendar tiempo para actividades dedicadas a mejorar el equipo como &lt;em&gt;Improvement Katas&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Este paso depende de que los dos anteriores se hayan logrado, ya que requieren de tiempo y energías, que no se tendrán si no se tiene una forma confiable de liberar el producto y de monitorear para saber que no está pasando.&lt;/p&gt;

&lt;h2 id=&quot;conclusión&quot;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;Estos pilares fundamentales de DevOps nos pueden ayudar entender las bases de la cultura, pero ponerlos en práctica no es fácil. El libro &lt;a href=&quot;https://amzn.to/3a91Bgl&quot;&gt;Devops Handbook&lt;/a&gt; explica qué otra prácticas se deben seguir y da consejos prácticos que permiten lograrlo.&lt;/p&gt;

&lt;p&gt;Perfeccionar estas prácticas es algo que nunca se termina y lleva tiempo ver los resultados. Así que ¿qué esperas para empezar?&lt;/p&gt;

&lt;p&gt;Con este pequeño artículo esperamos que quede claro que &lt;a href=&quot;http://bit.ly/36t59HK&quot;&gt;DevOps no es un rol en la empresa&lt;/a&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="devops" /><category term="servers" /><category term="culture" /><summary type="html">Hablemos de qué es de DevOps y como puede beneficiar a tu empresa aplicarlo</summary></entry><entry><title type="html">Recursos gratutitos para aprender a programar desde cero</title><link href="https://blog.thedojo.mx/2019/12/29/recursos-gratutitos-para-aprender-a-programar-desde-cero.html" rel="alternate" type="text/html" title="Recursos gratutitos para aprender a programar desde cero" /><published>2019-12-29T00:00:00-06:00</published><updated>2019-12-29T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2019/12/29/recursos-gratutitos-para-aprender-a-programar-desde-cero</id><content type="html" xml:base="https://blog.thedojo.mx/2019/12/29/recursos-gratutitos-para-aprender-a-programar-desde-cero.html">&lt;p&gt;¿Quieres aprender a programar y no sabes por dónde empezar?&lt;/p&gt;

&lt;p&gt;En este post te daremos algunos recursos que puedes seguir para aprender a programar desde lo más básico hasta tener un conocimiento razonable de programación con el que podrías empezar a trabajar como becario.&lt;/p&gt;

&lt;h2 id=&quot;motívate&quot;&gt;Motívate&lt;/h2&gt;

&lt;p&gt;Para ser un buen programador es importante conocer las bases, pero para eso antes hay que tener motivación y &lt;em&gt;mantenerla&lt;/em&gt;. Así que empecemos por algo que te mostrará el poder de la programación y de lo que puedes hacer con un poco de conocimiento.&lt;/p&gt;

&lt;p&gt;Puedes empezar con la creación de una página de internet. Si buscas “Crear página web desde cero” vas a encontrar un montón de opciones, pero aquí tienes una &lt;a href=&quot;http://bit.ly/2Mq1aE0&quot;&gt;Creando una página&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;También existe el &lt;a href=&quot;http://bit.ly/34VCbyM&quot;&gt;curso para aprender programar de Platzi&lt;/a&gt;, que comienza desde los básico y con algunos ejemplos te enseña lo que se puede lograr con la programación.&lt;/p&gt;

&lt;h2 id=&quot;ahora-sí-las-bases&quot;&gt;Ahora sí, las bases&lt;/h2&gt;

&lt;p&gt;El legendario &lt;a href=&quot;http://bit.ly/39miPqa&quot;&gt;CS50&lt;/a&gt; de Harvard te ayudará a entender las bases de las ciencias de la computación, afortunadamente ya está con subtítulos en español y es completamente gratuito. Si quieres obtener un certificado puedes pagar por él en la plataforma de cursos edX. Este curso te dará bases sólidas para poder más adelante programar lo que quieras. Aprenderás varios lenguajes: Python, C++, HTML y CSS, entre otros.
Es un curso que no puedes perder si quieres ser un autodidacta de la programación.&lt;/p&gt;

&lt;p&gt;Si prefieres contenido con audio en español, este, y los que le siguen te puede ayudar: &lt;a href=&quot;http://bit.ly/2Sqj1OV&quot;&gt;Curso de introducción a Python I&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Con estos es suficiente, aunque si quieres reforzar aún más y aprender otro lenguaje te recomiendo el siguiente curso de de Uniwebsidad: &lt;a href=&quot;http://bit.ly/2PYLwSh&quot;&gt;Introducción a JavaScript&lt;/a&gt;. Este curso es bastante viejo, pero la manera de explicar del autor, la sencillez y la forma en la que avanza te hará comprender muchas cosas que te servirán para el futuro.&lt;/p&gt;

&lt;h2 id=&quot;crea-algo-real&quot;&gt;Crea algo real&lt;/h2&gt;

&lt;p&gt;Es hora de aplicar y extender el conocimiento que has adquirido hasta ahora. La mejor manera es hacer algo que tenga utilidad práctica aplicable a un problema que tú o alguien cercano vea directamente.&lt;/p&gt;

&lt;p&gt;La mejor manera de hacerlo es crear una descripción del problema que tienes, hacer una lista de las cosas que necesitas que haga y empezar a programarlo, investigando en el camino cualquier cosa que no sepas hacer. Para este punto es probable que ya seas hábil con los mejores amigos de aprendizaje del desarrollador: Google, Stack Overflow y YouTube.&lt;/p&gt;

&lt;p&gt;Si siente que aún no tienes lo suficiente aquí te dejo algunos ejemplos de cursos creando aplicaciones aunque sea pequeñas completas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/2Zv5Cqk&quot;&gt;Usando Flask y MySQL para hacer una aplicación&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/356feZM&quot;&gt;Creando aplicaciones Multi-tenant con Django&lt;/a&gt;. Este curso no es gratis pero es bastante accesible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;has-una-especialización&quot;&gt;Has una especialización&lt;/h2&gt;

&lt;p&gt;El desarrollo de sistemas es un campo muy grande. Aunque está muy bien saber las bases y aunque sea un poco de diferentes campos (podríamos decir que es esencial), lograrás lo mejor en tu carrera si te especializas en algo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt; si disfrutas de las cosas visuales y tienes paciencia para luchar contra los distintos navegadores. Trabajarás con HTML, CSS y sobre todo JavaScript y sus millones de librerías.&lt;/li&gt;
  &lt;li&gt;Desarrollador de &lt;strong&gt;aplicaciones móviles&lt;/strong&gt;. Es un caso parecido al de frontend, tienes que crear las interfaces con las que los clientes van a interactuar, pero tu programa será instalado en un celular y tendrás que programarlo en Swift o Kotlin, teniendo consideraciones diferentes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: si prefieres manejar datos, crear los sistemas que mantienen la información y los medios de comunicación (generalmente API’s) con clientes consumidores y productores de información. Elegir el lenguaje es difícil porque hay muchos, pero los más usados son Python, JavaScript, PHP, Java y C#.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Administrador de infraestructura&lt;/strong&gt;. Tendrás que aprender a manejar los servidores y a instalar y configurar las aplicaciones que permiten que los programas corran allí. Harás programas para automatizar varios de los pasos. Podrías programar en Bash, Go, Python, entre otros.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ingeniero de datos&lt;/strong&gt;. Aprenderás a manejar programas relacionados con la captura, tratamiento y almacenamiento de grandes cantidades de datos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sólo mencioné algunas áreas pero hay varias más y combinaciones entre ellas.&lt;/p&gt;

&lt;p&gt;Si quieres empezar a buscar por donde te recomiendo que busques cursos en las siguientes plataformas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/2Q3rl5I&quot;&gt;Udacity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/354mUff&quot;&gt;Coursera&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bit.ly/2Zw09j0&quot;&gt;edX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estas tres plataformas tienen cursos gratuitos en español (por lo menos subtitulados) casi sobre cualquier cosa que quieras aprender, incluído los mencionados. No te olvides de YouTube.&lt;/p&gt;

&lt;h3 id=&quot;aprende-inglés&quot;&gt;Aprende inglés&lt;/h3&gt;

&lt;p&gt;Si tu deseo es poder programar o desarrollar software profesionalmente, una de las cosas que tienes que hacer sí o sí es por lo menos aprender a &lt;strong&gt;leer inglés&lt;/strong&gt;. Esto te ayudará a cubrir el 83.5% (número inventado) de las situaciones para aprender más. Muy probablemente si sabes leer en inglés sabrás escribirlo a un grado razonable para &lt;strong&gt;programar en inglés&lt;/strong&gt;, es decir, crear los comentarios, los nombres y otros textos requeridos en inglés, ya que hará tu código de más fácil acceso a un mayor número de personas.&lt;/p&gt;

&lt;p&gt;Una vez dominado esto se te abre la puerta al 80% de recursos de aprendizaje de internet. Y las posibilidades son ilimitadas.&lt;/p&gt;

&lt;h3 id=&quot;obliga-a-alguien-a-ser-tu-mentor&quot;&gt;Obliga a alguien a ser tu mentor&lt;/h3&gt;

&lt;p&gt;Esto suena un poco raro, pero claro que lo puedes hacer y es de las maneras más eficaces de aprender. Lo mejor de todo es que no necesitas ni siquiera que tue mentor esté vivo. Hacer a alguien tu mentor significa aprender de él y muchas personas nos han preparado el camino para que los tomemos como mentores: mediante sus libros. Busca ejemplos de personas como las que quisieras ser e inspírate en sus escritos, charlas, conferencias, entrevistas, podcasts y todo contenido que produzca para ver como puedes recorrer un camino parecido al de esa persona.&lt;/p&gt;

&lt;h2 id=&quot;notas-finales&quot;&gt;Notas finales&lt;/h2&gt;

&lt;p&gt;Lo que acabas de aprender después de terminar esto son sólo las bases. Igual que muchas otras carreras, en ésta tienes que poder seguir aprendiendo constantemente. El desarrollo de software, sin embargo, se caracteriza por ciclos más cortos aún, en los que las habilidades se quedan obsoletas en mucho menos tiempo así que debes afinar tus habilidades de aprendizaje.&lt;/p&gt;

&lt;p&gt;Una de las mejores maneras de solidificar tu conocimiento después de practicarlo, es enseñándolo a otros. No te quedes con lo aprendiste y devuelve algo a la comunidad: enseña siempre que puedas mediante conferencias, videos o artículos en un blog. De esto es algo de lo que no te arrepentirás.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="aprender" /><category term="programar" /><category term="recursos-aprendizaje" /><summary type="html">Hemos escrito una lista de recursos que te pueden ayudar a aprender a programar en tiempo record.</summary></entry><entry><title type="html">Las matemáticas que debes saber para programar</title><link href="https://blog.thedojo.mx/2019/12/25/las-matematicas-que-debes-saber-para-programar.html" rel="alternate" type="text/html" title="Las matemáticas que debes saber para programar" /><published>2019-12-25T00:00:00-06:00</published><updated>2019-12-25T00:00:00-06:00</updated><id>https://blog.thedojo.mx/2019/12/25/las-matematicas-que-debes-saber-para-programar</id><content type="html" xml:base="https://blog.thedojo.mx/2019/12/25/las-matematicas-que-debes-saber-para-programar.html">&lt;p&gt;Cuando se habla de &lt;strong&gt;matemáticas&lt;/strong&gt; mucha gente empieza a sentirse fastidiada porque creen que son cosas difíciles de entender.&lt;/p&gt;

&lt;p&gt;Sin embargo, las matemáticas son la base de muchas otras ciencias y sobre de todo de la computación. Podríamos considerar las ciencias de la computación como &lt;strong&gt;una rama de las matemáticas&lt;/strong&gt;, pero han divergido tanto que ya no se pueden considerar matemáticas solamente.&lt;/p&gt;

&lt;p&gt;Pero para programar con eficacia no necesitas saber muchas matemáticas, de hecho, con el entendimiento básico es suficiente. En este artículo hablaremos de aquello que debes dominar.&lt;/p&gt;

&lt;p&gt;De hecho, si ya programas &lt;em&gt;usas&lt;/em&gt; matemáticas. Saber más te ayudará a programar mejor, pero del tipo correcto.&lt;/p&gt;

&lt;h2 id=&quot;qué-son-las-matemáticas&quot;&gt;¿Qué son las matemáticas?&lt;/h2&gt;

&lt;p&gt;Definir las matemáticas es difícil. Según lo que (de manera muy irresponsable) nos han enseñado en la escuela, las matemáticas es el tratamiento de los &lt;strong&gt;números&lt;/strong&gt;. Eso está muy lejos de la realidad, y ya te habrás dado cuenta si has avanzado lo suficiente en matemáticas.&lt;/p&gt;

&lt;p&gt;Es cierto, las matemáticas más elementales se pueden reducir a números, pero no es su centro, el espíritu de su estudio.&lt;/p&gt;

&lt;p&gt;Algunas definiciones que encontré útiles:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Las matemáticas son la manera que tenemos de elevar a la categoría de un arte nuestros &lt;strong&gt;esfuerzos cognoscitivos&lt;/strong&gt;. - Fausto Ongay&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ongay también menciona que la etimología de la palabra matemáticas tiene que ver con conocer o saber. Así, en cierta medida las matemáticas se pueden pensar como la ciencia o el arte &lt;strong&gt;de la certidumbre&lt;/strong&gt;. Es decir, de saber algo con certeza y poder verificarlo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;La matemática, como una expresión de la mente humana, refleja la voluntad activa, la razón contemplativa, y el deseo de la perfección. Sus elementos básicos son: lógica e intuición, análisis y construcción, generalidad y particularidad. - Richard Courant&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En esta definición más abstracta se mencionan los elementos usados para lograr su cometido: lógica, intuición, análisis, construcción (o síntesis), generalidad (inducción), particularidad (deducción). Ya hablamos un poco de esto en los artículos acerca de las idea de &lt;a href=&quot;http://bit.ly/39madQm&quot;&gt;George Polya&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si quieres adentrarte en esto el libro &lt;a href=&quot;http://bit.ly/2F4Dn8N&quot;&gt;&lt;strong&gt;¿Qué son las matemáticas?&lt;/strong&gt;&lt;/a&gt; habla de ello a fondo.&lt;/p&gt;

&lt;p&gt;Pero no estamos aquí para filosofar acerca de las matemáticas. Lo único que quiero quede claro con esto es que las matemáticas no tienen que ver con &lt;strong&gt;números&lt;/strong&gt;, sino con el &lt;em&gt;razonamiento&lt;/em&gt;, &lt;em&gt;certidumbre&lt;/em&gt; y resolución de problemas.&lt;/p&gt;

&lt;h2 id=&quot;matemáticas-básicas&quot;&gt;Matemáticas Básicas&lt;/h2&gt;

&lt;p&gt;Empecemos hablando brevemente de las matemáticas que debes conocer como programador y como ser humano.&lt;/p&gt;

&lt;h3 id=&quot;operaciones-básicas&quot;&gt;Operaciones básicas&lt;/h3&gt;

&lt;p&gt;Saber operar con números en la vida cotidiana es una habilidad que todos necesitamos. Pero más importante aún es entender el significado de estas operaciones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;¿Qué significa una multiplicación?&lt;/li&gt;
  &lt;li&gt;¿Qué significa una división?&lt;/li&gt;
  &lt;li&gt;¿Qué significado tiene el elevar un número a una potencia?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Entender esto te ayudará a &lt;strong&gt;resolver problemas&lt;/strong&gt; que es la actividad principal que se realiza cuando programas. Todo lo demás está alrededor de esto.&lt;/p&gt;

&lt;h3 id=&quot;probabilidad-y-estadística&quot;&gt;Probabilidad y estadística&lt;/h3&gt;

&lt;p&gt;Tener las nociones de estas áreas es una de las herramientas más útiles a la hora de resolver problemas y sobre todo atacarlos prácticamente. Varias de las áreas de la ciencia de la computación basan sus resultados y procesos en estas dos áreas.&lt;/p&gt;

&lt;p&gt;Un ejemplo es la &lt;strong&gt;criptografía&lt;/strong&gt;: los algoritmos de cifrado como &lt;strong&gt;AES&lt;/strong&gt; trabajan con una llave que es usada para cifrar y descifrar el mensaje. Asignar el tamaño de la llave depende totalmente de la &lt;em&gt;probabilidad&lt;/em&gt; de que un atacante sea capaz de adivinar la llave en un número de intentos razonable.&lt;/p&gt;

&lt;p&gt;Ahora imagina que la llave tiene 128 bits de longitud. Aquí entra otro par de conceptos importantes para la computación.&lt;/p&gt;

&lt;h3 id=&quot;combinaciones-y-permutaciones&quot;&gt;Combinaciones y permutaciones&lt;/h3&gt;

&lt;p&gt;¿Cuál es el número de llaves diferentes que se pueden generar con 128 bits? La respuesta es: 2^128 (2 elevado a la potencia 128). &lt;em&gt;¿Cómo llegamos a esa respuesta?&lt;/em&gt; Esto se conoce como &lt;strong&gt;conteo&lt;/strong&gt; en matemáticas y las bases son la &lt;strong&gt;permutación&lt;/strong&gt; y la &lt;strong&gt;combinación&lt;/strong&gt; de elementos. En este caso es la permutación de 2 elementos que permiten repetición en 128 lugares.&lt;/p&gt;

&lt;p&gt;¿Qué probabilidad hay de que alguien encuentre esa llave por suerte en el primer intento?&lt;/p&gt;

&lt;p&gt;La respuesta es 1/2^128. Tan cerca de cero para ser considerada prácticamente imposible de adivinar incluso en un número de intentos razonable.&lt;/p&gt;

&lt;p&gt;La criptografía y varias áreas están llenas de probabilidad y estadística (como el aprendizaje automático y el análisis de datos, aunque más avanzadas).&lt;/p&gt;

&lt;p&gt;Si sientes que necesitas un recordatorio aquí hay un curso que enseña desde lo más básico: &lt;a href=&quot;http://bit.ly/2rrL4mb&quot;&gt;Conteo, combinaciones y permutaciones en Khan Academy&lt;/a&gt;. Este también es un curso que enseña probabilidad y estadística desde cero.&lt;/p&gt;

&lt;h2 id=&quot;lógica-matemáticas-discretas&quot;&gt;Lógica (Matemáticas discretas)&lt;/h2&gt;

&lt;p&gt;Las matemáticas discretas son una de las áreas más abstractas de las matemáticas cuando las vemos en papel pero en realidad tratamos con ellas a diario. Podemos definir las matemáticas discretas como &lt;em&gt;el estudio de las cosas que se pueden contar, sean finitas o infinitas&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;lógica&lt;/strong&gt; es uno de los campos de estudio de las matemáticas discretas. Se enfoca en estudiar &lt;strong&gt;el razonamiento&lt;/strong&gt; y sobre todo &lt;em&gt;si el razonamiento es &lt;strong&gt;correcto&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para lograr esto la lógica se vale del estudio de las &lt;strong&gt;proposiciones&lt;/strong&gt; (o afirmaciones) y sus relaciones. Una proposición es un enunciado que dice algo que puede ser &lt;em&gt;verdadero&lt;/em&gt; o &lt;em&gt;falso&lt;/em&gt;. En matemáticas se dice que tiene un &lt;strong&gt;valor de verdad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dos proposiciones se pueden relacionar mediante un &lt;em&gt;conector&lt;/em&gt; (en electrónica: compuertas lógicas, en programación son operadores booleanos). Los conectores más conocidos son el &lt;strong&gt;or&lt;/strong&gt; (o) y el &lt;strong&gt;and&lt;/strong&gt;(y).&lt;/p&gt;

&lt;p&gt;Esto da origen a demostraciones tanto matemáticas como prácticas. En el desarrollo de sistemas se pueden usar para demostrar que tu algoritmo o solución es correcto, es decir, va a funcionar con los datos de entrada propuestos que cumplan con los valores de verdad.&lt;/p&gt;

&lt;p&gt;¿Son absolutamente necesarias para programar? Las demostraciones no, pero serán útiles si quieres crear demostraciones de que un algoritmo funciona sin tener que crear miles de ejemplos que convenzan a alguien. &lt;strong&gt;Lo que sí es necesario entender es el funcionamiento de los conectores lógicos, no hay programa que se escape de ellos.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;conjuntos&quot;&gt;Conjuntos&lt;/h3&gt;

&lt;p&gt;El estudio de los conjuntos es una parte de las matemáticas discretas que se enfoca en estudiar elementos (objetos) que se agrupan por alguna característica en común. Los conjuntos son de gran utilidad para resolver muchos problemas matemáticos y la criptografía actual esta fuertemente basada en algunos problemas que tienen que ver con el cálculo de ciertos conjuntos.&lt;/p&gt;

&lt;p&gt;¿Me sirve para trabajar en el día a día? Para cierto tipo de problemas es más cómodo trabajar con conjuntos que con los tipos de datos comunes de colecciones a los que estamos acostumbrados los programadores. Tratar tu colección (lista, tupla, etc.) como un conjunto matemático te permitirá efectuar operaciones como la &lt;strong&gt;intersección de conjuntos&lt;/strong&gt; (elementos en común), la &lt;strong&gt;unión&lt;/strong&gt; (todos los elementos únicos encontrados en dos o más conjuntos). Si el lenguaje de programación tiene este tipo de dato te va a dar un buen empujón.&lt;/p&gt;

&lt;p&gt;Por cierto, el resultado de las consultas en SQL (lenguaje de manejo de datos para la mayoría de las bases de datos) se comportan como conjuntos matemáticos.&lt;/p&gt;

&lt;p&gt;¿Quieres aprender matemáticas discretas? Aquí tienes un pequeño curso: &lt;a href=&quot;http://bit.ly/2EWToND&quot;&gt;Curso de matemáticas discretas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Eso es todo lo que necesitas para programar básicamente. Mientras mejor seas en estos campos, mejor podrás aprovecharlos para programar mejor o para entender mejor los programas de otros.&lt;/p&gt;

&lt;h3 id=&quot;sistemas-numéricos&quot;&gt;Sistemas numéricos&lt;/h3&gt;

&lt;p&gt;Los sistemas numéricos son un tipo de conjuntos que se conforman de todas las cifras que pueden formarse con una cantidad determinada de símbolos que representan los números. El número de símbolos le da nombre al sistema: si hay dos símbolos (0, 1) es binario, si hay tres (0, 1, 2), ternario, etc.&lt;/p&gt;

&lt;p&gt;Para programar es muy conveniente que entiendas básicamente cómo se define un sistema numérico y que conozcas por lo menos cuatro:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Decimal&lt;/strong&gt;. Incluye los símbolos que conocemos como dígitos (0, 1, 2,.., 9). Su base es el 10.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Binario&lt;/strong&gt;. Es el sistema numérico con el que los microprocesadores pueden trabajar. Por eso es importante conocerlos. Sólo se pueden usar dos valores: 0 y 1.  Su base es el 2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hexadecimal&lt;/strong&gt;. Se usa por conveniencia para representar números binarios de manera abreviada, por su compatibilidad entre bases (16 = 2^4). Su base es el 16 y los símbolos o valores extra que incluye a parte de los dígitos comunes son las letras de la A a la F.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Octal&lt;/strong&gt;. Su base es el 8 y también se usa para abreviar números decimales. Usa los dígitos del 0 al 7.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El sistema decimal lo usamos en la vida diaria. Con entender básicamente el binario y hexadecimal estarás bien.&lt;/p&gt;

&lt;h1 id=&quot;matemáticas-avanzadas-y-especificas&quot;&gt;Matemáticas avanzadas y especificas&lt;/h1&gt;

&lt;p&gt;En muchas áreas de la programación se usan matemáticas más avanzadas, sobre todo en áreas que están sonando mucho recientemente: análisis de datos e inteligencia artificial. Si quieres entender a fondo estas y otras áreas del desarrollo de sistemas, es conveniente tener un conocimiento amplio en algunas de las siguientes áreas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Probabilidad y estadística avanzada&lt;/strong&gt;. Saber acerca de variables aleatorias, distribuciones de probabilidad, análisis Bayesiano, etc. Esto te permitirá analizar datos tanto exploratoria como predictivamente.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Álgebra lineal&lt;/strong&gt;. El álgebra y la resolución de ecuaciones que representan líneas en el plano cartesiano. Esto te ayudará a tratar con conjuntos de datos. Muchas de los resultados de los algoritmos de Machine Learning son ecuaciones lineales.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ecuaciones diferenciales&lt;/strong&gt;. Esto es la resolución de sistemas de ecuaciones y sus derivadas. Esto tiene aplicaciones en todo lo que tenga que ver con cambios respecto a alguna variable, como el tiempo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hablé de los campos finales pero para entender esto debes tener conocimiento previo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Geometría Analítica&lt;/li&gt;
  &lt;li&gt;Álgebra&lt;/li&gt;
  &lt;li&gt;Trigonometría&lt;/li&gt;
  &lt;li&gt;Cálculo Integral y diferencial&lt;/li&gt;
  &lt;li&gt;Cálculo Vectorial&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por suerte, para los campos de los que hablá arriba no tienes que saber todo esto, a menos que quieras ser el desarrollador de los algoritmos originales. Generalmente somos usuarios de bibliotecas creadas por genios que ya hacen lo que necesitamos.&lt;/p&gt;

&lt;h2 id=&quot;no-te-preocupes&quot;&gt;No te preocupes&lt;/h2&gt;

&lt;p&gt;Saber matemáticas avanzadas no es necesario para ser ser un programador exitoso si tu campo de desarrollo no lo necesita dentro de su dominio. Por supuesto que aprender cosas así de difíciles te hará más hábil para resolver problemas, tal como saber física o química avanzada te harían más hábil.&lt;/p&gt;

&lt;p&gt;Fuera de las matemáticas básicas y un control decente e intuitivo de la lógica, no es necesario que seas &lt;a href=&quot;http://bit.ly/2StKLCz&quot;&gt;Terence Tao&lt;/a&gt;, a menos que el campo en el que estés trabajando esté directamente relacionado con eso, tal
como tendrías que saber lo suficiente de finanzas si estuvieras haciendo una app financiera o de administración de empresas si estuvieras haciendo una aplicación o plataforma para este campo.&lt;/p&gt;

&lt;p&gt;Aquí hay un video curso en el que se explican más ampliamente lo que algunos llaman &lt;a href=&quot;http://bit.ly/2rvD6Zi&quot;&gt;“matemáticas para programadores”&lt;/a&gt;.&lt;/p&gt;</content><author><name>Héctor Patricio</name><email>hectorivanpatriciomoreno@gmail.com</email><uri>https://github.com/hectorip</uri></author><category term="math" /><category term="matemáticas" /><category term="aprender" /><summary type="html">¿Qué tantas matemáticas necesitas para programar? En este artículo lo veremos.</summary></entry></feed>